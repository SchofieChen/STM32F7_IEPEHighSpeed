
STM32F7_HighSpeed_IEPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e470  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a18c  08016670  08016670  00016670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080207fc  080207fc  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  080207fc  080207fc  000207fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020804  08020804  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020804  08020804  00020804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020808  08020808  00020808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0802080c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c820  200000a0  08020898  000300a0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2001c8c0  08020898  0003c8c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fc3  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ff4  00000000  00000000  0005507d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  0005a078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00029dad  00000000  00000000  0005b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00017058  00000000  00000000  0008549d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00100060  00000000  00000000  0009c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0019c555  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013d0  00000000  00000000  0019c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005aac  00000000  00000000  0019d9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000a0 	.word	0x200000a0
 800821c:	00000000 	.word	0x00000000
 8008220:	08016658 	.word	0x08016658

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000a4 	.word	0x200000a4
 800823c:	08016658 	.word	0x08016658

08008240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8008240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8008242:	2b01      	cmp	r3, #1
	IT       LS
 8008244:	bf98      	it	ls
	BXLS     lr
 8008246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8008248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800824c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800824e:	089b      	lsrs	r3, r3, #2

08008250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8008250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8008254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8008258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800825a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800825e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8008260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8008262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8008264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8008266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800826a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800826e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8008270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8008274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8008278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800827c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8008280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8008282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8008286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800828a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800828c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8008290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8008294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8008298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800829c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800829e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80082a2:	d1d5      	bne.n	8008250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80082a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082a8:	4770      	bx	lr

080082aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80082aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80082ac:	2b01      	cmp	r3, #1
	IT       LS
 80082ae:	bf98      	it	ls
	BXLS     lr
 80082b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80082b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80082b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80082b8:	089b      	lsrs	r3, r3, #2

080082ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80082ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80082be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80082c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80082c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80082c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80082cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80082d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80082d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80082d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80082dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80082e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80082e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80082e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80082ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80082ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80082f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80082f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80082f8:	d1df      	bne.n	80082ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80082fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082fe:	4770      	bx	lr

08008300 <strlen>:
 8008300:	4603      	mov	r3, r0
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1fb      	bne.n	8008302 <strlen+0x2>
 800830a:	1a18      	subs	r0, r3, r0
 800830c:	3801      	subs	r0, #1
 800830e:	4770      	bx	lr

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295
 8008320:	f04f 30ff 	movne.w	r0, #4294967295
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	ed87 0a01 	vstr	s0, [r7, #4]
 800861a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800861c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008628:	db0a      	blt.n	8008640 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800862a:	ed97 0a01 	vldr	s0, [r7, #4]
 800862e:	f00d ffbb 	bl	80165a8 <sqrtf>
 8008632:	eef0 7a40 	vmov.f32	s15, s0
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800863c:	2300      	movs	r3, #0
 800863e:	e005      	b.n	800864c <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	089b      	lsrs	r3, r3, #2
 8008664:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008666:	e082      	b.n	800876e <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	60fa      	str	r2, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	60fa      	str	r2, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800867c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008680:	edd7 7a06 	vldr	s15, [r7, #24]
 8008684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008688:	edd7 6a05 	vldr	s13, [r7, #20]
 800868c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	1d1a      	adds	r2, r3, #4
 800869c:	60ba      	str	r2, [r7, #8]
 800869e:	4618      	mov	r0, r3
 80086a0:	eeb0 0a67 	vmov.f32	s0, s15
 80086a4:	f7ff ffb4 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	60fa      	str	r2, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1d1a      	adds	r2, r3, #4
 80086b6:	60fa      	str	r2, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80086bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80086c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80086c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80086cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80086d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	60ba      	str	r2, [r7, #8]
 80086de:	4618      	mov	r0, r3
 80086e0:	eeb0 0a67 	vmov.f32	s0, s15
 80086e4:	f7ff ff94 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	1d1a      	adds	r2, r3, #4
 80086ec:	60fa      	str	r2, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1d1a      	adds	r2, r3, #4
 80086f6:	60fa      	str	r2, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80086fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8008700:	edd7 7a06 	vldr	s15, [r7, #24]
 8008704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008708:	edd7 6a05 	vldr	s13, [r7, #20]
 800870c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	60ba      	str	r2, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	eeb0 0a67 	vmov.f32	s0, s15
 8008724:	f7ff ff74 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	1d1a      	adds	r2, r3, #4
 800872c:	60fa      	str	r2, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	60fa      	str	r2, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800873c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008740:	edd7 7a06 	vldr	s15, [r7, #24]
 8008744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008748:	edd7 6a05 	vldr	s13, [r7, #20]
 800874c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	60ba      	str	r2, [r7, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	eeb0 0a67 	vmov.f32	s0, s15
 8008764:	f7ff ff54 	bl	8008610 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	3b01      	subs	r3, #1
 800876c:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f af79 	bne.w	8008668 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 800877e:	e022      	b.n	80087c6 <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	60fa      	str	r2, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1d1a      	adds	r2, r3, #4
 800878e:	60fa      	str	r2, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008794:	ed97 7a06 	vldr	s14, [r7, #24]
 8008798:	edd7 7a06 	vldr	s15, [r7, #24]
 800879c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80087a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80087a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	60ba      	str	r2, [r7, #8]
 80087b6:	4618      	mov	r0, r3
 80087b8:	eeb0 0a67 	vmov.f32	s0, s15
 80087bc:	f7ff ff28 	bl	8008610 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1d9      	bne.n	8008780 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80087cc:	bf00      	nop
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	60fa      	str	r2, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	089b      	lsrs	r3, r3, #2
 80087fa:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80087fc:	e051      	b.n	80088a2 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1d1a      	adds	r2, r3, #4
 8008802:	60fa      	str	r2, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	60fa      	str	r2, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008812:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008816:	edd7 7a05 	vldr	s15, [r7, #20]
 800881a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008822:	d504      	bpl.n	800882e <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	60fa      	str	r2, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8008838:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800883c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	d504      	bpl.n	8008854 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	3302      	adds	r3, #2
 8008852:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	60fa      	str	r2, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800885e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008862:	edd7 7a05 	vldr	s15, [r7, #20]
 8008866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d504      	bpl.n	800887a <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	3303      	adds	r3, #3
 8008878:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800887a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800887e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888a:	d504      	bpl.n	8008896 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	3304      	adds	r3, #4
 8008894:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	3304      	adds	r3, #4
 800889a:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	3b01      	subs	r3, #1
 80088a0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1aa      	bne.n	80087fe <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80088b2:	e016      	b.n	80088e2 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	60fa      	str	r2, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80088be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80088c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80088c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ce:	d505      	bpl.n	80088dc <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	3b01      	subs	r3, #1
 80088e0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ec:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	601a      	str	r2, [r3, #0]
}
 80088f4:	bf00      	nop
 80088f6:	372c      	adds	r7, #44	; 0x2c
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008900:	b480      	push	{r7}
 8008902:	b08b      	sub	sp, #44	; 0x2c
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	089b      	lsrs	r3, r3, #2
 8008916:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008918:	e036      	b.n	8008988 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	60fa      	str	r2, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	60fa      	str	r2, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	60fa      	str	r2, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	60fa      	str	r2, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	613b      	str	r3, [r7, #16]

    sum += in1;
 8008942:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008946:	edd7 7a07 	vldr	s15, [r7, #28]
 800894a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800894e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 8008952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008956:	edd7 7a06 	vldr	s15, [r7, #24]
 800895a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800895e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 8008962:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008966:	edd7 7a05 	vldr	s15, [r7, #20]
 800896a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800896e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 8008972:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008976:	edd7 7a04 	vldr	s15, [r7, #16]
 800897a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800897e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	3b01      	subs	r3, #1
 8008986:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1c5      	bne.n	800891a <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008996:	e00d      	b.n	80089b4 <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	60fa      	str	r2, [r7, #12]
 800899e:	edd3 7a00 	vldr	s15, [r3]
 80089a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80089a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1ee      	bne.n	8008998 <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	ee07 3a90 	vmov	s15, r3
 80089c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80089c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	edc3 7a00 	vstr	s15, [r3]
}
 80089d2:	bf00      	nop
 80089d4:	372c      	adds	r7, #44	; 0x2c
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80089de:	b480      	push	{r7}
 80089e0:	b08b      	sub	sp, #44	; 0x2c
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1d1a      	adds	r2, r3, #4
 80089f8:	60fa      	str	r2, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	089b      	lsrs	r3, r3, #2
 8008a04:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8008a06:	e051      	b.n	8008aac <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	60fa      	str	r2, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	60fa      	str	r2, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008a1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	dd04      	ble.n	8008a38 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	3301      	adds	r3, #1
 8008a36:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	60fa      	str	r2, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 8008a42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a52:	dd04      	ble.n	8008a5e <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	3302      	adds	r3, #2
 8008a5c:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	60fa      	str	r2, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a78:	dd04      	ble.n	8008a84 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3303      	adds	r3, #3
 8008a82:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8008a84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a94:	dd04      	ble.n	8008aa0 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1aa      	bne.n	8008a08 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8008abc:	e016      	b.n	8008aec <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	60fa      	str	r2, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8008ac8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	dd05      	ble.n	8008ae6 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af6:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	372c      	adds	r7, #44	; 0x2c
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <arm_sqrt_f32>:
  {
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	ed87 0a01 	vstr	s0, [r7, #4]
 8008b14:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	db0a      	blt.n	8008b3a <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008b24:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b28:	f00d fd3e 	bl	80165a8 <sqrtf>
 8008b2c:	eef0 7a40 	vmov.f32	s15, s0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008b36:	2300      	movs	r3, #0
 8008b38:	e005      	b.n	8008b46 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008b42:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b088      	sub	sp, #32
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	089b      	lsrs	r3, r3, #2
 8008b64:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008b66:	e046      	b.n	8008bf6 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1d1a      	adds	r2, r3, #4
 8008b6c:	60fa      	str	r2, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008b72:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	60fa      	str	r2, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba8:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	60fa      	str	r2, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be4:	ed97 7a07 	vldr	s14, [r7, #28]
 8008be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bec:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1b5      	bne.n	8008b68 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008c04:	e013      	b.n	8008c2e <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	60fa      	str	r2, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008c10:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c24:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e8      	bne.n	8008c06 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	eeb0 0a66 	vmov.f32	s0, s13
 8008c4c:	f7ff ff5d 	bl	8008b0a <arm_sqrt_f32>
}
 8008c50:	bf00      	nop
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <arm_sqrt_f32>:
  {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008c62:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c70:	db0a      	blt.n	8008c88 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008c72:	ed97 0a01 	vldr	s0, [r7, #4]
 8008c76:	f00d fc97 	bl	80165a8 <sqrtf>
 8008c7a:	eef0 7a40 	vmov.f32	s15, s0
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008c84:	2300      	movs	r3, #0
 8008c86:	e005      	b.n	8008c94 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d104      	bne.n	8008cc4 <arm_std_f32+0x28>
	{
		*pResult = 0;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
		return;
 8008cc2:	e0d0      	b.n	8008e66 <arm_std_f32+0x1ca>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008cca:	e066      	b.n	8008d9a <arm_std_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	60fa      	str	r2, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
    sum += in;
 8008cd6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1d1a      	adds	r2, r3, #4
 8008d02:	60fa      	str	r2, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d08:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d2c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	60fa      	str	r2, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d3a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	60fa      	str	r2, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d6c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	3b01      	subs	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d195      	bne.n	8008ccc <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8008da8:	e01b      	b.n	8008de2 <arm_std_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	60fa      	str	r2, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	617b      	str	r3, [r7, #20]
    sum += in;
 8008db4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008dc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8008dc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	3b01      	subs	r3, #1
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e0      	bne.n	8008daa <arm_std_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008dfa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e02:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e40:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008e44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8008e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8008e50:	ed97 7a08 	vldr	s14, [r7, #32]
 8008e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008e62:	f7ff fef9 	bl	8008c58 <arm_sqrt_f32>
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8008e66:	3730      	adds	r7, #48	; 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <arm_var_f32>:

void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b08d      	sub	sp, #52	; 0x34
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]

  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d104      	bne.n	8008e94 <arm_var_f32+0x28>
	{
		*pResult = 0;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
		return;
 8008e92:	e0ce      	b.n	8009032 <arm_var_f32+0x1c6>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	089b      	lsrs	r3, r3, #2
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008e9a:	e066      	b.n	8008f6a <arm_var_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	617b      	str	r3, [r7, #20]
    sum += in;
 8008ea6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8008eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eb2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008eb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	60fa      	str	r2, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	617b      	str	r3, [r7, #20]
    sum += in;
 8008ed8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008ee8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008eec:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008efc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	60fa      	str	r2, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f0a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f16:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1d1a      	adds	r2, r3, #4
 8008f36:	60fa      	str	r2, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	3b01      	subs	r3, #1
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d195      	bne.n	8008e9c <arm_var_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8008f78:	e01b      	b.n	8008fb2 <arm_var_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	60fa      	str	r2, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fa8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e0      	bne.n	8008f7a <arm_var_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008fca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd2:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fe0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe8:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008fec:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ff0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009010:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009014:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 8009020:	ed97 7a08 	vldr	s14, [r7, #32]
 8009024:	edd7 7a06 	vldr	s15, [r7, #24]
 8009028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	edc3 7a00 	vstr	s15, [r3]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8009032:	3734      	adds	r7, #52	; 0x34
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b0a0      	sub	sp, #128	; 0x80
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800904c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4413      	add	r3, r2
 8009054:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8009060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009062:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8009064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800906a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4413      	add	r3, r2
 8009072:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8009074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800907a:	4413      	add	r3, r2
 800907c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800907e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009080:	089b      	lsrs	r3, r3, #2
 8009082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009084:	e1b6      	b.n	80093f4 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800909e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80090a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80090aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80090b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80090b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80090bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80090c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80090c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80090ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80090d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80090da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80090e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80090e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80090ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	603a      	str	r2, [r7, #0]
 80090f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80090fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009100:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	603a      	str	r2, [r7, #0]
 800910a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800910e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8009112:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009116:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	603a      	str	r2, [r7, #0]
 8009120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009124:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8009128:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800912c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	603a      	str	r2, [r7, #0]
 8009136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913a:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800913e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800914a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800914e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009152:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800915a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800915e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009162:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800916a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800916e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800917a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800917e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009182:	edd7 7a02 	vldr	s15, [r7, #8]
 8009186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800918c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009190:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8009194:	ed97 7a07 	vldr	s14, [r7, #28]
 8009198:	edd7 7a03 	vldr	s15, [r7, #12]
 800919c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a6:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80091aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80091ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80091b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091bc:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80091c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80091c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80091c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d2:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80091d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80091da:	edd7 7a06 	vldr	s15, [r7, #24]
 80091de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091e2:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80091e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80091ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80091ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091f2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80091f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80091fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80091fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009202:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8009206:	ed97 7a05 	vldr	s14, [r7, #20]
 800920a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800920e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009212:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8009216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	673a      	str	r2, [r7, #112]	; 0x70
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8009220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	673a      	str	r2, [r7, #112]	; 0x70
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800922a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800922e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800923a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800923e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800924a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800924e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009256:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800925a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800925e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009266:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800926a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	677a      	str	r2, [r7, #116]	; 0x74
 8009270:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009274:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800927c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8009280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009282:	1d1a      	adds	r2, r3, #4
 8009284:	677a      	str	r2, [r7, #116]	; 0x74
 8009286:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800928a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800928e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009292:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8009296:	edd7 7a02 	vldr	s15, [r7, #8]
 800929a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80092a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80092b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80092be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80092c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80092ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80092d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d8:	1d1a      	adds	r2, r3, #4
 80092da:	67ba      	str	r2, [r7, #120]	; 0x78
 80092dc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80092e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80092ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80092f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80092f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80092fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fe:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8009302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	673a      	str	r2, [r7, #112]	; 0x70
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800930c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	673a      	str	r2, [r7, #112]	; 0x70
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8009316:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800931a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800931e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009322:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8009326:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800932a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800932e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009332:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8009336:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800933a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8009346:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800934a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800934e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009352:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	677a      	str	r2, [r7, #116]	; 0x74
 800935c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009368:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800936c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936e:	1d1a      	adds	r2, r3, #4
 8009370:	677a      	str	r2, [r7, #116]	; 0x74
 8009372:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009376:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800937a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800937e:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8009382:	edd7 7a04 	vldr	s15, [r7, #16]
 8009386:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8009392:	edd7 7a05 	vldr	s15, [r7, #20]
 8009396:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80093a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80093a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80093b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80093b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80093c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80093c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80093cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80093d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d4:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80093d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093da:	1d1a      	adds	r2, r3, #4
 80093dc:	67ba      	str	r2, [r7, #120]	; 0x78
 80093de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80093e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80093e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ea:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	3b01      	subs	r3, #1
 80093f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f47f ae45 	bne.w	8009086 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80093fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093fe:	b299      	uxth	r1, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	2302      	movs	r3, #2
 8009406:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009408:	f000 feda 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800940c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800940e:	b299      	uxth	r1, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	2302      	movs	r3, #2
 8009416:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009418:	f000 fed2 	bl	800a1c0 <arm_radix8_butterfly_f32>
}
 800941c:	bf00      	nop
 800941e:	3780      	adds	r7, #128	; 0x80
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b0ac      	sub	sp, #176	; 0xb0
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	b29b      	uxth	r3, r3
 8009436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800943a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4413      	add	r3, r2
 8009444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8009448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009452:	4413      	add	r3, r2
 8009454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8009458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009462:	4413      	add	r3, r2
 8009464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800946c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009470:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8009472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009476:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8009478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800947c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800947e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009482:	3b04      	subs	r3, #4
 8009484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8009488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800948c:	3b04      	subs	r3, #4
 800948e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8009492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009496:	3b04      	subs	r3, #4
 8009498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800949c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094a6:	4413      	add	r3, r2
 80094a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80094c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80094ce:	2302      	movs	r3, #2
 80094d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80094d2:	2304      	movs	r3, #4
 80094d4:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80094d6:	2306      	movs	r3, #6
 80094d8:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	ed93 7a00 	vldr	s14, [r3]
 80094e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094ec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	ed93 7a00 	vldr	s14, [r3]
 80094f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094fa:	edd3 7a00 	vldr	s15, [r3]
 80094fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009502:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3304      	adds	r3, #4
 800950a:	ed93 7a00 	vldr	s14, [r3]
 800950e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009512:	3304      	adds	r3, #4
 8009514:	edd3 7a00 	vldr	s15, [r3]
 8009518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800951c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	3304      	adds	r3, #4
 8009524:	ed93 7a00 	vldr	s14, [r3]
 8009528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800952c:	3304      	adds	r3, #4
 800952e:	edd3 7a00 	vldr	s15, [r3]
 8009532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800953a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800953e:	3304      	adds	r3, #4
 8009540:	ed93 7a00 	vldr	s14, [r3]
 8009544:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009550:	3304      	adds	r3, #4
 8009552:	edd3 7a00 	vldr	s15, [r3]
 8009556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800955a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800955e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800956a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800956e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009572:	edd3 7a00 	vldr	s15, [r3]
 8009576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800957e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009582:	edd3 7a00 	vldr	s15, [r3]
 8009586:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800958a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800958e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009592:	edd3 7a00 	vldr	s15, [r3]
 8009596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800959a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800959e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095a2:	3304      	adds	r3, #4
 80095a4:	edd3 7a00 	vldr	s15, [r3]
 80095a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80095ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095b4:	3304      	adds	r3, #4
 80095b6:	edd3 7a00 	vldr	s15, [r3]
 80095ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095be:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80095c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095c6:	3304      	adds	r3, #4
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80095d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095d8:	3304      	adds	r3, #4
 80095da:	edd3 7a00 	vldr	s15, [r3]
 80095de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095e2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80095e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095ea:	ed93 7a00 	vldr	s14, [r3]
 80095ee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80095f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095fa:	edd3 7a00 	vldr	s15, [r3]
 80095fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009602:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800960a:	ed93 7a00 	vldr	s14, [r3]
 800960e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800961a:	edd3 7a00 	vldr	s15, [r3]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	603a      	str	r2, [r7, #0]
 8009624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009628:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800962c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009630:	3304      	adds	r3, #4
 8009632:	ed93 7a00 	vldr	s14, [r3]
 8009636:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800963a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800963e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009642:	3304      	adds	r3, #4
 8009644:	edd3 7a00 	vldr	s15, [r3]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	603a      	str	r2, [r7, #0]
 800964e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009652:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8009656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009662:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800966e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009670:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8009680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800968e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800969c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80096aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80096b2:	4413      	add	r3, r2
 80096b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80096b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80096c0:	4413      	add	r3, r2
 80096c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80096c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ce:	4413      	add	r3, r2
 80096d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80096d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096d8:	3b02      	subs	r3, #2
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096e0:	e31a      	b.n	8009d18 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	ed93 7a00 	vldr	s14, [r3]
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ec:	edd3 7a00 	vldr	s15, [r3]
 80096f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	ed93 7a00 	vldr	s14, [r3]
 80096fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009702:	edd3 7a00 	vldr	s15, [r3]
 8009706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800970a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	ed93 7a00 	vldr	s14, [r3]
 8009716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800971a:	3304      	adds	r3, #4
 800971c:	edd3 7a00 	vldr	s15, [r3]
 8009720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009724:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	ed93 7a00 	vldr	s14, [r3]
 8009730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009734:	3304      	adds	r3, #4
 8009736:	edd3 7a00 	vldr	s15, [r3]
 800973a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800973e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009746:	3304      	adds	r3, #4
 8009748:	ed93 7a00 	vldr	s14, [r3]
 800974c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009758:	3304      	adds	r3, #4
 800975a:	edd3 7a00 	vldr	s15, [r3]
 800975e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009762:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800976a:	edd3 7a00 	vldr	s15, [r3]
 800976e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009782:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800978a:	edd3 7a00 	vldr	s15, [r3]
 800978e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800979a:	edd3 7a00 	vldr	s15, [r3]
 800979e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80097a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097aa:	3304      	adds	r3, #4
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80097b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097bc:	3304      	adds	r3, #4
 80097be:	edd3 7a00 	vldr	s15, [r3]
 80097c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097c6:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80097ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ce:	3304      	adds	r3, #4
 80097d0:	edd3 7a00 	vldr	s15, [r3]
 80097d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097e0:	3304      	adds	r3, #4
 80097e2:	edd3 7a00 	vldr	s15, [r3]
 80097e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ea:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80097ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097f2:	ed93 7a00 	vldr	s14, [r3]
 80097f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80097fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009802:	edd3 7a00 	vldr	s15, [r3]
 8009806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800980a:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 800980e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009812:	ed93 7a00 	vldr	s14, [r3]
 8009816:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800981a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800981e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009822:	edd3 7a00 	vldr	s15, [r3]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	603a      	str	r2, [r7, #0]
 800982c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009830:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009838:	3304      	adds	r3, #4
 800983a:	ed93 7a00 	vldr	s14, [r3]
 800983e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800984a:	3304      	adds	r3, #4
 800984c:	edd3 7a00 	vldr	s15, [r3]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	603a      	str	r2, [r7, #0]
 8009856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800985e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009862:	3b04      	subs	r3, #4
 8009864:	ed93 7a00 	vldr	s14, [r3]
 8009868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800986c:	3b04      	subs	r3, #4
 800986e:	edd3 7a00 	vldr	s15, [r3]
 8009872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009876:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800987a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800987e:	3b04      	subs	r3, #4
 8009880:	ed93 7a00 	vldr	s14, [r3]
 8009884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009888:	3b04      	subs	r3, #4
 800988a:	edd3 7a00 	vldr	s15, [r3]
 800988e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009892:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8009896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800989a:	ed93 7a00 	vldr	s14, [r3]
 800989e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098a2:	edd3 7a00 	vldr	s15, [r3]
 80098a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80098ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b2:	ed93 7a00 	vldr	s14, [r3]
 80098b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ba:	edd3 7a00 	vldr	s15, [r3]
 80098be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80098c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098ca:	ed93 7a00 	vldr	s14, [r3]
 80098ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098d2:	edd3 7a00 	vldr	s15, [r3]
 80098d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80098de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80098e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ea:	ed93 7a00 	vldr	s14, [r3]
 80098ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098f2:	edd3 7a00 	vldr	s15, [r3]
 80098f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098fe:	3b04      	subs	r3, #4
 8009900:	edd3 7a00 	vldr	s15, [r3]
 8009904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800990c:	3b04      	subs	r3, #4
 800990e:	edd3 7a00 	vldr	s15, [r3]
 8009912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009916:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800991a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800991e:	3b04      	subs	r3, #4
 8009920:	edd3 7a00 	vldr	s15, [r3]
 8009924:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800992c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009930:	3b04      	subs	r3, #4
 8009932:	edd3 7a00 	vldr	s15, [r3]
 8009936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800993a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800993e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009942:	edd3 7a00 	vldr	s15, [r3]
 8009946:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800994a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800994e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009952:	edd3 7a00 	vldr	s15, [r3]
 8009956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800995e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009962:	ed93 7a00 	vldr	s14, [r3]
 8009966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800996a:	edd3 7a00 	vldr	s15, [r3]
 800996e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009972:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800997a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800997e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009982:	3b04      	subs	r3, #4
 8009984:	ed93 7a00 	vldr	s14, [r3]
 8009988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800998c:	3b04      	subs	r3, #4
 800998e:	edd3 7a00 	vldr	s15, [r3]
 8009992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009996:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800999a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800999e:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80099a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099a6:	ed93 7a00 	vldr	s14, [r3]
 80099aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80099ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099b6:	edd3 7a00 	vldr	s15, [r3]
 80099ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099be:	1f1a      	subs	r2, r3, #4
 80099c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099c8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80099cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099d0:	3b04      	subs	r3, #4
 80099d2:	ed93 7a00 	vldr	s14, [r3]
 80099d6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80099da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099e2:	3b04      	subs	r3, #4
 80099e4:	edd3 7a00 	vldr	s15, [r3]
 80099e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ec:	1f1a      	subs	r2, r3, #4
 80099ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f6:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80099fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099fe:	1d1a      	adds	r2, r3, #4
 8009a00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8009a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a0c:	1d1a      	adds	r2, r3, #4
 8009a0e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8009a16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8009a26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a2a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8009a36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a3a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8009a46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8009a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a5a:	1d1a      	adds	r2, r3, #4
 8009a5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a60:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a6c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8009a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009a7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a86:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8009a8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009a8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a96:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8009a9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009a9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8009aaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009aae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8009aba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009abe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8009aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ace:	1f1a      	subs	r2, r3, #4
 8009ad0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ad4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ae0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8009ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ae8:	1f1a      	subs	r2, r3, #4
 8009aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009aee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009af2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009afa:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8009afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8009b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8009b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009b16:	4413      	add	r3, r2
 8009b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8009b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b28:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8009b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b38:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8009b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b48:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8009b4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8009b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b66:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b72:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8009b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b80:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009b84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b8c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8009b90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b94:	eef1 7a67 	vneg.f32	s15, s15
 8009b98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8009ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8009bb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009bb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8009bc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009bc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8009bd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bd8:	1f1a      	subs	r2, r3, #4
 8009bda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bde:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009be2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bea:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8009bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bf2:	1f1a      	subs	r2, r3, #4
 8009bf4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bf8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009bfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c04:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8009c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8009c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8009c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c20:	4413      	add	r3, r2
 8009c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8009c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8009c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c3a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8009c46:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8009c56:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009c70:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009c74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8009c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009c8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c96:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8009c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8009caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8009cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cbe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8009cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8009cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cde:	1f1a      	subs	r2, r3, #4
 8009ce0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009ce4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ce8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cf0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8009cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf8:	1f1a      	subs	r2, r3, #4
 8009cfa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009cfe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d0a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8009d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d12:	3b01      	subs	r3, #1
 8009d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f47f ace0 	bne.w	80096e2 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	ed93 7a00 	vldr	s14, [r3]
 8009d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d2c:	edd3 7a00 	vldr	s15, [r3]
 8009d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d34:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	ed93 7a00 	vldr	s14, [r3]
 8009d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d42:	edd3 7a00 	vldr	s15, [r3]
 8009d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d4a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	3304      	adds	r3, #4
 8009d52:	ed93 7a00 	vldr	s14, [r3]
 8009d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	edd3 7a00 	vldr	s15, [r3]
 8009d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d64:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	ed93 7a00 	vldr	s14, [r3]
 8009d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d74:	3304      	adds	r3, #4
 8009d76:	edd3 7a00 	vldr	s15, [r3]
 8009d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d86:	3304      	adds	r3, #4
 8009d88:	ed93 7a00 	vldr	s14, [r3]
 8009d8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d98:	3304      	adds	r3, #4
 8009d9a:	edd3 7a00 	vldr	s15, [r3]
 8009d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009daa:	edd3 7a00 	vldr	s15, [r3]
 8009dae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dba:	edd3 7a00 	vldr	s15, [r3]
 8009dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dca:	edd3 7a00 	vldr	s15, [r3]
 8009dce:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dda:	edd3 7a00 	vldr	s15, [r3]
 8009dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dea:	3304      	adds	r3, #4
 8009dec:	edd3 7a00 	vldr	s15, [r3]
 8009df0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	edd3 7a00 	vldr	s15, [r3]
 8009e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e06:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e0e:	3304      	adds	r3, #4
 8009e10:	edd3 7a00 	vldr	s15, [r3]
 8009e14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e20:	3304      	adds	r3, #4
 8009e22:	edd3 7a00 	vldr	s15, [r3]
 8009e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e2a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e32:	ed93 7a00 	vldr	s14, [r3]
 8009e36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e4a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e52:	ed93 7a00 	vldr	s14, [r3]
 8009e56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e62:	edd3 7a00 	vldr	s15, [r3]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	1d1a      	adds	r2, r3, #4
 8009e6a:	603a      	str	r2, [r7, #0]
 8009e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e70:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e78:	3304      	adds	r3, #4
 8009e7a:	ed93 7a00 	vldr	s14, [r3]
 8009e7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	edd3 7a00 	vldr	s15, [r3]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	603a      	str	r2, [r7, #0]
 8009e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9a:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8009e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009eae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009eb2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009ebe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ec2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009ece:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ed2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eda:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009ede:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009ee2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ef2:	1d1a      	adds	r2, r3, #4
 8009ef4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009ef8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009efc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f04:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f0c:	1d1a      	adds	r2, r3, #4
 8009f0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009f12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f1e:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8009f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8009f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8009f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8009f42:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8009f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8009f62:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8009f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f76:	1d1a      	adds	r2, r3, #4
 8009f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f7c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f88:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8009f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f90:	1d1a      	adds	r2, r3, #4
 8009f92:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fa2:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8009fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009fc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fda:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a000:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a004:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a00c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800a010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a01a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a01e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a022:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a026:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800a02a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a02e:	b299      	uxth	r1, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	2304      	movs	r3, #4
 800a036:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a038:	f000 f8c2 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800a03c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a040:	b299      	uxth	r1, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	2304      	movs	r3, #4
 800a048:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a04a:	f000 f8b9 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800a04e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a052:	b299      	uxth	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	2304      	movs	r3, #4
 800a05a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a05c:	f000 f8b0 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800a060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a064:	b299      	uxth	r1, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	2304      	movs	r3, #4
 800a06c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a06e:	f000 f8a7 	bl	800a1c0 <arm_radix8_butterfly_f32>
}
 800a072:	bf00      	nop
 800a074:	37b0      	adds	r7, #176	; 0xb0
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	460b      	mov	r3, r1
 800a08a:	71fb      	strb	r3, [r7, #7]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d117      	bne.n	800a0cc <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	e00d      	b.n	800a0c4 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	edd3 7a00 	vldr	s15, [r3]
 800a0ae:	eef1 7a67 	vneg.f32	s15, s15
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d3ed      	bcc.n	800a0a8 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d2:	d024      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d80b      	bhi.n	800a0f2 <arm_cfft_f32+0x78>
 800a0da:	2b20      	cmp	r3, #32
 800a0dc:	d01f      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d802      	bhi.n	800a0e8 <arm_cfft_f32+0x6e>
 800a0e2:	2b10      	cmp	r3, #16
 800a0e4:	d016      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0e6:	e028      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d01d      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a0ec:	2b80      	cmp	r3, #128	; 0x80
 800a0ee:	d011      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0f0:	e023      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f6:	d00d      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0fc:	d803      	bhi.n	800a106 <arm_cfft_f32+0x8c>
 800a0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a102:	d011      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a104:	e019      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10a:	d008      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a110:	d00a      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a112:	e012      	b.n	800a13a <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7fe ff90 	bl	800903c <arm_cfft_radix8by2_f32>
        break;
 800a11c:	e00d      	b.n	800a13a <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff f97f 	bl	8009424 <arm_cfft_radix8by4_f32>
        break;
 800a126:	e008      	b.n	800a13a <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	b299      	uxth	r1, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	2301      	movs	r3, #1
 800a132:	68b8      	ldr	r0, [r7, #8]
 800a134:	f000 f844 	bl	800a1c0 <arm_radix8_butterfly_f32>
        break;
 800a138:	bf00      	nop
    }  

    if( bitReverseFlag )
 800a13a:	79bb      	ldrb	r3, [r7, #6]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d007      	beq.n	800a150 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8999      	ldrh	r1, [r3, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	461a      	mov	r2, r3
 800a14a:	68b8      	ldr	r0, [r7, #8]
 800a14c:	f7fe f878 	bl	8008240 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d130      	bne.n	800a1b8 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a168:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a170:	2300      	movs	r3, #0
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e01c      	b.n	800a1b0 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	1d1a      	adds	r2, r3, #4
 800a17a:	61ba      	str	r2, [r7, #24]
 800a17c:	ed93 7a00 	vldr	s14, [r3]
 800a180:	edd7 7a04 	vldr	s15, [r7, #16]
 800a184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a188:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	edd3 7a00 	vldr	s15, [r3]
 800a192:	eeb1 7a67 	vneg.f32	s14, s15
 800a196:	edd7 7a04 	vldr	s15, [r7, #16]
 800a19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	61fb      	str	r3, [r7, #28]
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d3de      	bcc.n	800a176 <arm_cfft_f32+0xfc>
        }
    }
}
 800a1b8:	bf00      	nop
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b0bd      	sub	sp, #244	; 0xf4
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	817b      	strh	r3, [r7, #10]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a1d4:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <arm_radix8_butterfly_f32+0x3c>)
 800a1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a1da:	897b      	ldrh	r3, [r7, #10]
 800a1dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800a1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ec:	08db      	lsrs	r3, r3, #3
 800a1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1f8:	e002      	b.n	800a200 <arm_radix8_butterfly_f32+0x40>
 800a1fa:	bf00      	nop
 800a1fc:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800a200:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a208:	4413      	add	r3, r2
 800a20a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a20e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	4413      	add	r3, r2
 800a218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a21c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a224:	4413      	add	r3, r2
 800a226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a22a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a232:	4413      	add	r3, r2
 800a234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a238:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a240:	4413      	add	r3, r2
 800a242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24e:	4413      	add	r3, r2
 800a250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a25c:	4413      	add	r3, r2
 800a25e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	ed93 7a00 	vldr	s14, [r3]
 800a270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4413      	add	r3, r2
 800a27a:	edd3 7a00 	vldr	s15, [r3]
 800a27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a282:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	ed93 7a00 	vldr	s14, [r3]
 800a294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	edd3 7a00 	vldr	s15, [r3]
 800a2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	ed93 7a00 	vldr	s14, [r3]
 800a2b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	edd3 7a00 	vldr	s15, [r3]
 800a2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a2ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	ed93 7a00 	vldr	s14, [r3]
 800a2dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	edd3 7a00 	vldr	s15, [r3]
 800a2ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2ee:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a2f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	ed93 7a00 	vldr	s14, [r3]
 800a300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	edd3 7a00 	vldr	s15, [r3]
 800a30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a312:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	ed93 7a00 	vldr	s14, [r3]
 800a324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	edd3 7a00 	vldr	s15, [r3]
 800a332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a336:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a33a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4413      	add	r3, r2
 800a344:	ed93 7a00 	vldr	s14, [r3]
 800a348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	edd3 7a00 	vldr	s15, [r3]
 800a356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a35a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a35e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	ed93 7a00 	vldr	s14, [r3]
 800a36c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4413      	add	r3, r2
 800a376:	edd3 7a00 	vldr	s15, [r3]
 800a37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a37e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a382:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a386:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a38a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a38e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a392:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a396:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a39e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a3a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a3a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a3b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a3b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800a3c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a3d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a3d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a3dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a3ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3f2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a3f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4413      	add	r3, r2
 800a402:	ed93 7a00 	vldr	s14, [r3]
 800a406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	3304      	adds	r3, #4
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	edd3 7a00 	vldr	s15, [r3]
 800a416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a41a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a41e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	ed93 7a00 	vldr	s14, [r3]
 800a42e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	3304      	adds	r3, #4
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	edd3 7a00 	vldr	s15, [r3]
 800a43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a442:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	ed93 7a00 	vldr	s14, [r3]
 800a456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	3304      	adds	r3, #4
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	4413      	add	r3, r2
 800a462:	edd3 7a00 	vldr	s15, [r3]
 800a466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a46a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	3304      	adds	r3, #4
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	ed93 7a00 	vldr	s14, [r3]
 800a47e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	3304      	adds	r3, #4
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	edd3 7a00 	vldr	s15, [r3]
 800a48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a492:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	3304      	adds	r3, #4
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	ed93 7a00 	vldr	s14, [r3]
 800a4a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	edd3 7a00 	vldr	s15, [r3]
 800a4b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a4be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	ed93 7a00 	vldr	s14, [r3]
 800a4ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	edd3 7a00 	vldr	s15, [r3]
 800a4de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	ed93 7a00 	vldr	s14, [r3]
 800a4f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	edd3 7a00 	vldr	s15, [r3]
 800a506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a50a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a50e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	3304      	adds	r3, #4
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	ed93 7a00 	vldr	s14, [r3]
 800a51e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	3304      	adds	r3, #4
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	edd3 7a00 	vldr	s15, [r3]
 800a52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a532:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a536:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a53a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a542:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a546:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a54a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a54e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a552:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a556:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a55a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a55e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a562:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a566:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a56a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a56e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a572:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a586:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a58e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	3304      	adds	r3, #4
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a5a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a5ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a5bc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5c4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800a5c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a5d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800a5e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a5f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a5f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800a5fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	3304      	adds	r3, #4
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a60e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a612:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a616:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800a61a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a61e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a622:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a626:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800a632:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a636:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a63e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800a64a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a64e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a656:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800a662:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a666:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a66a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a66e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a676:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800a67a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a67e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a682:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a686:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800a68a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a68e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a696:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800a69a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a69e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800a6aa:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a6ae:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800a6ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a6be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800a6ca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a6ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800a6da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a6de:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6e6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800a6ea:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a6ee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6f6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800a6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a708:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a710:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800a714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a722:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a72a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800a72e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a73c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a740:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a744:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800a748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a756:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800a762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	3304      	adds	r3, #4
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a772:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800a77e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3304      	adds	r3, #4
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a78e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a792:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a796:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800a79a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a7aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a7ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800a7b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	3304      	adds	r3, #4
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a7c6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a7ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ce:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800a7d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a7d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7da:	4413      	add	r3, r2
 800a7dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800a7e0:	897b      	ldrh	r3, [r7, #10]
 800a7e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	f4ff ad0a 	bcc.w	800a200 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f0:	2b07      	cmp	r3, #7
 800a7f2:	f240 84e3 	bls.w	800b1bc <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800a802:	893b      	ldrh	r3, [r7, #8]
 800a804:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a808:	4413      	add	r3, r2
 800a80a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800a80c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a80e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800a812:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a818:	4413      	add	r3, r2
 800a81a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800a81c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a81e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a820:	4413      	add	r3, r2
 800a822:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800a824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a828:	4413      	add	r3, r2
 800a82a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800a82c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a82e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a830:	4413      	add	r3, r2
 800a832:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800a834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a838:	4413      	add	r3, r2
 800a83a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800a83c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a83e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a840:	4413      	add	r3, r2
 800a842:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800a844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800a852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800a85e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	4413      	add	r3, r2
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800a86a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800a876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800a882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800a88e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4413      	add	r3, r2
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800a89a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800a8aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800a8b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	3304      	adds	r3, #4
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800a8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	3304      	adds	r3, #4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800a8e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800a8f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800a8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800a906:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90e:	4413      	add	r3, r2
 800a910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800a914:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91c:	4413      	add	r3, r2
 800a91e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800a922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a92a:	4413      	add	r3, r2
 800a92c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800a930:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a938:	4413      	add	r3, r2
 800a93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800a93e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a946:	4413      	add	r3, r2
 800a948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800a94c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a954:	4413      	add	r3, r2
 800a956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800a95a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	4413      	add	r3, r2
 800a964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	ed93 7a00 	vldr	s14, [r3]
 800a976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	edd3 7a00 	vldr	s15, [r3]
 800a984:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a988:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a98c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	ed93 7a00 	vldr	s14, [r3]
 800a99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a99e:	00db      	lsls	r3, r3, #3
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	edd3 7a00 	vldr	s15, [r3]
 800a9a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ac:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a9b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	ed93 7a00 	vldr	s14, [r3]
 800a9be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	edd3 7a00 	vldr	s15, [r3]
 800a9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9d0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a9d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	ed93 7a00 	vldr	s14, [r3]
 800a9e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	edd3 7a00 	vldr	s15, [r3]
 800a9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9f4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a9f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	ed93 7a00 	vldr	s14, [r3]
 800aa06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	edd3 7a00 	vldr	s15, [r3]
 800aa14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa18:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800aa1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	ed93 7a00 	vldr	s14, [r3]
 800aa2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa3c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800aa40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	ed93 7a00 	vldr	s14, [r3]
 800aa4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	edd3 7a00 	vldr	s15, [r3]
 800aa5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa60:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	ed93 7a00 	vldr	s14, [r3]
 800aa72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa84:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800aa88:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa94:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800aa98:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa9c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aaa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaa4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800aaa8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aaac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aab4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800aab8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aabc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800aac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aad6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800aada:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aade:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800aae2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aae6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800aaea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800aaf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	3304      	adds	r3, #4
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	ed93 7a00 	vldr	s14, [r3]
 800ab02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	3304      	adds	r3, #4
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	edd3 7a00 	vldr	s15, [r3]
 800ab12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800ab1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	3304      	adds	r3, #4
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	ed93 7a00 	vldr	s14, [r3]
 800ab2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	3304      	adds	r3, #4
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	edd3 7a00 	vldr	s15, [r3]
 800ab3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800ab42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	3304      	adds	r3, #4
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	ed93 7a00 	vldr	s14, [r3]
 800ab52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	3304      	adds	r3, #4
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	edd3 7a00 	vldr	s15, [r3]
 800ab62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800ab6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	3304      	adds	r3, #4
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	ed93 7a00 	vldr	s14, [r3]
 800ab7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	3304      	adds	r3, #4
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	edd3 7a00 	vldr	s15, [r3]
 800ab8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab8e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ab92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	3304      	adds	r3, #4
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	ed93 7a00 	vldr	s14, [r3]
 800aba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	3304      	adds	r3, #4
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	edd3 7a00 	vldr	s15, [r3]
 800abb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abb6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800abba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	3304      	adds	r3, #4
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	ed93 7a00 	vldr	s14, [r3]
 800abca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	3304      	adds	r3, #4
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	edd3 7a00 	vldr	s15, [r3]
 800abda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abde:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800abe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	3304      	adds	r3, #4
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4413      	add	r3, r2
 800abee:	ed93 7a00 	vldr	s14, [r3]
 800abf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	3304      	adds	r3, #4
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	edd3 7a00 	vldr	s15, [r3]
 800ac02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac06:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ac0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3304      	adds	r3, #4
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	ed93 7a00 	vldr	s14, [r3]
 800ac1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	3304      	adds	r3, #4
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	edd3 7a00 	vldr	s15, [r3]
 800ac2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800ac32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac3e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800ac42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ac52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac56:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800ac62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac66:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800ac72:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ac76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac7e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ac82:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ac86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac8e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ac92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	3304      	adds	r3, #4
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acaa:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800acae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800acbe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800acc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800acc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800acce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800acd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800acd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800acde:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ace2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ace6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acea:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800acee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800acf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800acfe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ad02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800ad0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ad12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ad16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800ad1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad2c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad34:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800ad38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	3304      	adds	r3, #4
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad48:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad50:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800ad54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ad58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ad5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad60:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800ad64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad70:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800ad74:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ad78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad80:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800ad84:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800ad94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ada2:	edd7 7a06 	vldr	s15, [r7, #24]
 800ada6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adaa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800adae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	3304      	adds	r3, #4
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	ed97 7a05 	vldr	s14, [r7, #20]
 800adbe:	edd7 7a04 	vldr	s15, [r7, #16]
 800adc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adc6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800adca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800adce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800add2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800adda:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800adde:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800adea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800adee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800adfa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800adfe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800ae0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae18:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae20:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800ae24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae34:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae3c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800ae40:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ae44:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae4c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae54:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800ae58:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ae5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae64:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800ae70:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ae74:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ae78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae7c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800ae88:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ae8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ae90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae94:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800aea0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aea4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800aeb0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aeb4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aeb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aebc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800aec0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aec4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aecc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800aed0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aed4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aedc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800aee0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aee4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800aef0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aefc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800af00:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af04:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af0c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800af10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af14:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af1c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800af20:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af24:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800af28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af2c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800af30:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af34:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800af38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af3c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800af40:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800af44:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af4c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800af50:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800af54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af5c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800af60:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af64:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800af68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800af70:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800af78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af7c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800af80:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800af84:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af8c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800af90:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800af94:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af9c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800afa0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800afa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800afb0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800afb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800afc0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800afc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afcc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800afd0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800afd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afdc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800afe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4413      	add	r3, r2
 800afea:	ed97 7a07 	vldr	s14, [r7, #28]
 800afee:	edd7 7a06 	vldr	s15, [r7, #24]
 800aff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800affa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	3304      	adds	r3, #4
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4413      	add	r3, r2
 800b006:	ed97 7a05 	vldr	s14, [r7, #20]
 800b00a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b012:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b016:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b01a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b026:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b02a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b032:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b036:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b03a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b046:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b04a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b052:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	ed97 7a07 	vldr	s14, [r7, #28]
 800b064:	edd7 7a06 	vldr	s15, [r7, #24]
 800b068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b06c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	3304      	adds	r3, #4
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4413      	add	r3, r2
 800b07c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b080:	edd7 7a04 	vldr	s15, [r7, #16]
 800b084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b088:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b08c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b090:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b098:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b09c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b0ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b0b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b0bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b0cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b0da:	edd7 7a06 	vldr	s15, [r7, #24]
 800b0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b0e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b0f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fe:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b102:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b106:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b112:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b116:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b122:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b126:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b132:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b136:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	4413      	add	r3, r2
 800b14c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b150:	edd7 7a06 	vldr	s15, [r7, #24]
 800b154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b158:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b15c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	3304      	adds	r3, #4
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	ed97 7a05 	vldr	s14, [r7, #20]
 800b16c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b174:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800b178:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b17c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b180:	4413      	add	r3, r2
 800b182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800b186:	897b      	ldrh	r3, [r7, #10]
 800b188:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b18c:	429a      	cmp	r2, r3
 800b18e:	f4ff abba 	bcc.w	800a906 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800b192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b196:	3301      	adds	r3, #1
 800b198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800b19c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	f4ff ab2c 	bcc.w	800a802 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800b1aa:	893b      	ldrh	r3, [r7, #8]
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800b1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b4:	2b07      	cmp	r3, #7
 800b1b6:	f63f a813 	bhi.w	800a1e0 <arm_radix8_butterfly_f32+0x20>
}
 800b1ba:	e000      	b.n	800b1be <arm_radix8_butterfly_f32+0xffe>
         break;
 800b1bc:	bf00      	nop
}
 800b1be:	bf00      	nop
 800b1c0:	37f4      	adds	r7, #244	; 0xf4
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	460a      	mov	r2, r1
 800b1d6:	71fb      	strb	r3, [r7, #7]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	b25a      	sxtb	r2, r3
 800b1e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	b25b      	sxtb	r3, r3
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	f000 f832 	bl	800b258 <writeByteToReg>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	733b      	strb	r3, [r7, #12]
	CS_0();
 800b20a:	2200      	movs	r2, #0
 800b20c:	2110      	movs	r1, #16
 800b20e:	4809      	ldr	r0, [pc, #36]	; (800b234 <writeCMD+0x38>)
 800b210:	f004 f910 	bl	800f434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800b214:	f107 010c 	add.w	r1, r7, #12
 800b218:	2332      	movs	r3, #50	; 0x32
 800b21a:	2201      	movs	r2, #1
 800b21c:	4806      	ldr	r0, [pc, #24]	; (800b238 <writeCMD+0x3c>)
 800b21e:	f006 fc51 	bl	8011ac4 <HAL_SPI_Transmit>
	CS_1();
 800b222:	2201      	movs	r2, #1
 800b224:	2110      	movs	r1, #16
 800b226:	4803      	ldr	r0, [pc, #12]	; (800b234 <writeCMD+0x38>)
 800b228:	f004 f904 	bl	800f434 <HAL_GPIO_WritePin>
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	40020000 	.word	0x40020000
 800b238:	2001878c 	.word	0x2001878c

0800b23c <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 800b246:	79fb      	ldrb	r3, [r7, #7]
 800b248:	4619      	mov	r1, r3
 800b24a:	2003      	movs	r0, #3
 800b24c:	f000 f804 	bl	800b258 <writeByteToReg>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	460a      	mov	r2, r1
 800b262:	71fb      	strb	r3, [r7, #7]
 800b264:	4613      	mov	r3, r2
 800b266:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800b272:	2300      	movs	r3, #0
 800b274:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800b276:	79bb      	ldrb	r3, [r7, #6]
 800b278:	73bb      	strb	r3, [r7, #14]
	CS_0();
 800b27a:	2200      	movs	r2, #0
 800b27c:	2110      	movs	r1, #16
 800b27e:	4809      	ldr	r0, [pc, #36]	; (800b2a4 <writeByteToReg+0x4c>)
 800b280:	f004 f8d8 	bl	800f434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800b284:	f107 010c 	add.w	r1, r7, #12
 800b288:	2364      	movs	r3, #100	; 0x64
 800b28a:	2203      	movs	r2, #3
 800b28c:	4806      	ldr	r0, [pc, #24]	; (800b2a8 <writeByteToReg+0x50>)
 800b28e:	f006 fc19 	bl	8011ac4 <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800b292:	2201      	movs	r2, #1
 800b294:	2110      	movs	r1, #16
 800b296:	4803      	ldr	r0, [pc, #12]	; (800b2a4 <writeByteToReg+0x4c>)
 800b298:	f004 f8cc 	bl	800f434 <HAL_GPIO_WritePin>

}
 800b29c:	bf00      	nop
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	40020000 	.word	0x40020000
 800b2a8:	2001878c 	.word	0x2001878c

0800b2ac <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2002      	movs	r0, #2
 800b2bc:	f7ff ffcc 	bl	800b258 <writeByteToReg>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	e009      	b.n	800b2e8 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 800b2d4:	2108      	movs	r1, #8
 800b2d6:	4809      	ldr	r0, [pc, #36]	; (800b2fc <waitDRDY+0x34>)
 800b2d8:	f004 f894 	bl	800f404 <HAL_GPIO_ReadPin>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a05      	ldr	r2, [pc, #20]	; (800b300 <waitDRDY+0x38>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d9f1      	bls.n	800b2d4 <waitDRDY+0xc>
				break;
			}
		}
}
 800b2f0:	e000      	b.n	800b2f4 <waitDRDY+0x2c>
				break;
 800b2f2:	bf00      	nop
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	40020000 	.word	0x40020000
 800b300:	026259ff 	.word	0x026259ff

0800b304 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
	waitDRDY();
 800b30a:	f7ff ffdd 	bl	800b2c8 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 800b30e:	2000      	movs	r0, #0
 800b310:	f000 f820 	bl	800b354 <readByteFromReg>
 800b314:	4603      	mov	r3, r0
 800b316:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	b2db      	uxtb	r3, r3
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800b32e:	23ff      	movs	r3, #255	; 0xff
 800b330:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 800b336:	1dba      	adds	r2, r7, #6
 800b338:	1df9      	adds	r1, r7, #7
 800b33a:	2332      	movs	r3, #50	; 0x32
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	2301      	movs	r3, #1
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <receive8bit+0x28>)
 800b342:	f006 fd25 	bl	8011d90 <HAL_SPI_TransmitReceive>
	return read;
 800b346:	79bb      	ldrb	r3, [r7, #6]



}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	2001878c 	.word	0x2001878c

0800b354 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	f043 0310 	orr.w	r3, r3, #16
 800b364:	b2db      	uxtb	r3, r3
 800b366:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 800b368:	2300      	movs	r3, #0
 800b36a:	737b      	strb	r3, [r7, #13]
	CS_0();
 800b36c:	2200      	movs	r2, #0
 800b36e:	2110      	movs	r1, #16
 800b370:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <readByteFromReg+0x54>)
 800b372:	f004 f85f 	bl	800f434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800b376:	f107 010c 	add.w	r1, r7, #12
 800b37a:	2332      	movs	r3, #50	; 0x32
 800b37c:	2202      	movs	r2, #2
 800b37e:	480b      	ldr	r0, [pc, #44]	; (800b3ac <readByteFromReg+0x58>)
 800b380:	f006 fba0 	bl	8011ac4 <HAL_SPI_Transmit>
	delay_us(10);
 800b384:	200a      	movs	r0, #10
 800b386:	f000 faf5 	bl	800b974 <delay_us>
	uint8_t read = receive8bit();
 800b38a:	f7ff ffcd 	bl	800b328 <receive8bit>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800b392:	2201      	movs	r2, #1
 800b394:	2110      	movs	r1, #16
 800b396:	4804      	ldr	r0, [pc, #16]	; (800b3a8 <readByteFromReg+0x54>)
 800b398:	f004 f84c 	bl	800f434 <HAL_GPIO_WritePin>

	return read;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	40020000 	.word	0x40020000
 800b3ac:	2001878c 	.word	0x2001878c

0800b3b0 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800b3ba:	2350      	movs	r3, #80	; 0x50
 800b3bc:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	b25b      	sxtb	r3, r3
 800b3c4:	f043 0304 	orr.w	r3, r3, #4
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	717b      	strb	r3, [r7, #5]

	CS_0();
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2110      	movs	r1, #16
 800b3d2:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <setBuffer+0x48>)
 800b3d4:	f004 f82e 	bl	800f434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800b3d8:	1d39      	adds	r1, r7, #4
 800b3da:	2332      	movs	r3, #50	; 0x32
 800b3dc:	2202      	movs	r2, #2
 800b3de:	4807      	ldr	r0, [pc, #28]	; (800b3fc <setBuffer+0x4c>)
 800b3e0:	f006 fb70 	bl	8011ac4 <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	2110      	movs	r1, #16
 800b3e8:	4803      	ldr	r0, [pc, #12]	; (800b3f8 <setBuffer+0x48>)
 800b3ea:	f004 f823 	bl	800f434 <HAL_GPIO_WritePin>
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	40020000 	.word	0x40020000
 800b3fc:	2001878c 	.word	0x2001878c

0800b400 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b404:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b408:	4b05      	ldr	r3, [pc, #20]	; (800b420 <__NVIC_SystemReset+0x20>)
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b410:	4903      	ldr	r1, [pc, #12]	; (800b420 <__NVIC_SystemReset+0x20>)
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <__NVIC_SystemReset+0x24>)
 800b414:	4313      	orrs	r3, r2
 800b416:	60cb      	str	r3, [r1, #12]
 800b418:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b41c:	bf00      	nop
 800b41e:	e7fd      	b.n	800b41c <__NVIC_SystemReset+0x1c>
 800b420:	e000ed00 	.word	0xe000ed00
 800b424:	05fa0004 	.word	0x05fa0004

0800b428 <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b090      	sub	sp, #64	; 0x40
 800b42c:	af0e      	add	r7, sp, #56	; 0x38
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]

	if( USARTBLE.IAPflag == 1)
 800b432:	4b41      	ldr	r3, [pc, #260]	; (800b538 <BLE_USART+0x110>)
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d008      	beq.n	800b44c <BLE_USART+0x24>
	{
		USARTBLE.sendflag =0;
 800b43a:	4b3f      	ldr	r3, [pc, #252]	; (800b538 <BLE_USART+0x110>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 800b440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b444:	f000 faee 	bl	800ba24 <TM_DelayMillis>
		NVIC_SystemReset();
 800b448:	f7ff ffda 	bl	800b400 <__NVIC_SystemReset>
		{
			HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 10);
		}
		*/
	}
	if(USARTBLE.sendflag ==1)
 800b44c:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <BLE_USART+0x110>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d06d      	beq.n	800b530 <BLE_USART+0x108>
	{


		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b45a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b53c <BLE_USART+0x114>
 800b45e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b462:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					sendpData->Statistic_max*1000,sendpData->Statistic_var*1000,sendpData->Statistic_crestFactor*1000,
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	edd3 6a00 	vldr	s13, [r3]
 800b46c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800b53c <BLE_USART+0x114>
 800b470:	ee66 6a86 	vmul.f32	s13, s13, s12
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b474:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					sendpData->Statistic_max*1000,sendpData->Statistic_var*1000,sendpData->Statistic_crestFactor*1000,
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	edd3 5a02 	vldr	s11, [r3, #8]
 800b47e:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 800b53c <BLE_USART+0x114>
 800b482:	ee65 5a85 	vmul.f32	s11, s11, s10
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b486:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					sendpData->Statistic_max*1000,sendpData->Statistic_var*1000,sendpData->Statistic_crestFactor*1000,
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	edd3 4a06 	vldr	s9, [r3, #24]
 800b490:	ed9f 4a2a 	vldr	s8, [pc, #168]	; 800b53c <BLE_USART+0x114>
 800b494:	ee64 4a84 	vmul.f32	s9, s9, s8
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b498:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*10000,
 800b49c:	4b28      	ldr	r3, [pc, #160]	; (800b540 <BLE_USART+0x118>)
 800b49e:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
 800b4a2:	ed9f 3a26 	vldr	s6, [pc, #152]	; 800b53c <BLE_USART+0x114>
 800b4a6:	ee63 3a83 	vmul.f32	s7, s7, s6
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b4aa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*10000,
 800b4ae:	4b24      	ldr	r3, [pc, #144]	; (800b540 <BLE_USART+0x118>)
 800b4b0:	edd3 2a0c 	vldr	s5, [r3, #48]	; 0x30
 800b4b4:	ed9f 2a23 	vldr	s4, [pc, #140]	; 800b544 <BLE_USART+0x11c>
 800b4b8:	ee62 2a82 	vmul.f32	s5, s5, s4
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b4bc:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
					statistic_value.Statistic_FreqPeak[2]*10000);
 800b4c0:	4b1f      	ldr	r3, [pc, #124]	; (800b540 <BLE_USART+0x118>)
 800b4c2:	edd3 1a0d 	vldr	s3, [r3, #52]	; 0x34
 800b4c6:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800b544 <BLE_USART+0x11c>
 800b4ca:	ee61 1a81 	vmul.f32	s3, s3, s2
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b4ce:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 800b4d2:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800b4d6:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800b4da:	ed8d 3b08 	vstr	d3, [sp, #32]
 800b4de:	ed8d 4b06 	vstr	d4, [sp, #24]
 800b4e2:	ed8d 5b04 	vstr	d5, [sp, #16]
 800b4e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b4ea:	ed8d 7b00 	vstr	d7, [sp]
 800b4ee:	4a16      	ldr	r2, [pc, #88]	; (800b548 <BLE_USART+0x120>)
 800b4f0:	2180      	movs	r1, #128	; 0x80
 800b4f2:	4816      	ldr	r0, [pc, #88]	; (800b54c <BLE_USART+0x124>)
 800b4f4:	f002 fe02 	bl	800e0fc <snprintf_>

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800b4f8:	4814      	ldr	r0, [pc, #80]	; (800b54c <BLE_USART+0x124>)
 800b4fa:	f7fc ff01 	bl	8008300 <strlen>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b80      	cmp	r3, #128	; 0x80
 800b502:	d804      	bhi.n	800b50e <BLE_USART+0xe6>
 800b504:	4811      	ldr	r0, [pc, #68]	; (800b54c <BLE_USART+0x124>)
 800b506:	f7fc fefb 	bl	8008300 <strlen>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e000      	b.n	800b510 <BLE_USART+0xe8>
 800b50e:	2380      	movs	r3, #128	; 0x80
 800b510:	4a09      	ldr	r2, [pc, #36]	; (800b538 <BLE_USART+0x110>)
 800b512:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		//USARTBLE.sendTimeout = 100 ;
		if(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 800b516:	4b08      	ldr	r3, [pc, #32]	; (800b538 <BLE_USART+0x110>)
 800b518:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	490a      	ldr	r1, [pc, #40]	; (800b54c <BLE_USART+0x124>)
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f007 fb34 	bl	8012b90 <HAL_UART_Transmit_DMA>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d100      	bne.n	800b530 <BLE_USART+0x108>
		{
			__NOP();
 800b52e:	bf00      	nop
		 char C[20];
		 strcpy(C,  USARTBLE.Rbuffer );
		 */
		 //0x1;
	}
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20010540 	.word	0x20010540
 800b53c:	447a0000 	.word	0x447a0000
 800b540:	200080e4 	.word	0x200080e4
 800b544:	461c4000 	.word	0x461c4000
 800b548:	08016670 	.word	0x08016670
 800b54c:	200105e0 	.word	0x200105e0

0800b550 <checkBLECommandFromBLEGateway>:

_Bool checkBLECommandFromBLEGateway(char * BLEcommand)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
	if(strlen(BLEcommand) > 0)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d010      	beq.n	800b582 <checkBLECommandFromBLEGateway+0x32>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,"simple");
 800b560:	490a      	ldr	r1, [pc, #40]	; (800b58c <checkBLECommandFromBLEGateway+0x3c>)
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f00a ffb9 	bl	80164da <strstr>
 800b568:	60f8      	str	r0, [r7, #12]
	   if(strncmp(pch, "simple", 6) == 0) {
 800b56a:	2206      	movs	r2, #6
 800b56c:	4907      	ldr	r1, [pc, #28]	; (800b58c <checkBLECommandFromBLEGateway+0x3c>)
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f00a ffa1 	bl	80164b6 <strncmp>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <checkBLECommandFromBLEGateway+0x2e>
		   return true;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e002      	b.n	800b584 <checkBLECommandFromBLEGateway+0x34>
		   __NOP();
	   }
	   else
	   {
		   return false;
 800b57e:	2300      	movs	r3, #0
 800b580:	e000      	b.n	800b584 <checkBLECommandFromBLEGateway+0x34>

	}
	else
	{

		return false;
 800b582:	2300      	movs	r3, #0
	}

}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	08016694 	.word	0x08016694

0800b590 <Calculate_FreqMax>:


		return max;
}
void Calculate_FreqMax(float *x,  FreqMaxMin * FreqMaxMin , int8_t freq_index)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08c      	sub	sp, #48	; 0x30
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	4613      	mov	r3, r2
 800b59c:	71fb      	strb	r3, [r7, #7]
	if(FreqMaxMin->Max != 0)
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d071      	beq.n	800b68a <Calculate_FreqMax+0xfa>
	{

		int DATARE = 15000;
 800b5a6:	f643 2398 	movw	r3, #15000	; 0x3a98
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
		float frequencyResolution = 15000/(float)fftSize;
 800b5ac:	4b3c      	ldr	r3, [pc, #240]	; (800b6a0 <Calculate_FreqMax+0x110>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5b8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b6a4 <Calculate_FreqMax+0x114>
 800b5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5c0:	edc7 7a08 	vstr	s15, [r7, #32]
		float ans = 0;
 800b5c4:	f04f 0300 	mov.w	r3, #0
 800b5c8:	61fb      	str	r3, [r7, #28]
		//DRATE_15000 = 15000
		float parseRangeMax = FreqMaxMin->Max / frequencyResolution;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b5d6:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5de:	edc7 7a06 	vstr	s15, [r7, #24]
		float parseRangeMin = FreqMaxMin->Min / frequencyResolution;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b5ee:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f6:	edc7 7a05 	vstr	s15, [r7, #20]
		float ParsevalFftPower = 0;
 800b5fa:	f04f 0300 	mov.w	r3, #0
 800b5fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b600:	edd7 7a05 	vldr	s15, [r7, #20]
 800b604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b608:	ee17 3a90 	vmov	r3, s15
 800b60c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b60e:	e016      	b.n	800b63e <Calculate_FreqMax+0xae>
		{
			//FFTRMSArray[i] = (testOutput[i]*2)/4096;
			ParsevalFftPower += x[i] * x[i];
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	4413      	add	r3, r2
 800b618:	ed93 7a00 	vldr	s14, [r3]
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	edd3 7a00 	vldr	s15, [r3]
 800b628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b62c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b630:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b634:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	3301      	adds	r3, #1
 800b63c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b63e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b646:	ee17 2a90 	vmov	r2, s15
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	4293      	cmp	r3, r2
 800b64e:	dbdf      	blt.n	800b610 <Calculate_FreqMax+0x80>
		}

		ans = sqrt(ParsevalFftPower * 2)/4096;
 800b650:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b654:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b65c:	eeb0 0b47 	vmov.f64	d0, d7
 800b660:	f00a ff56 	bl	8016510 <sqrt>
 800b664:	eeb0 5b40 	vmov.f64	d5, d0
 800b668:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 800b698 <Calculate_FreqMax+0x108>
 800b66c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b670:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b674:	edc7 7a07 	vstr	s15, [r7, #28]

		statistic_value.Statistic_FreqPeak[freq_index] = ans;
 800b678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b67c:	4a0a      	ldr	r2, [pc, #40]	; (800b6a8 <Calculate_FreqMax+0x118>)
 800b67e:	330a      	adds	r3, #10
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	3304      	adds	r3, #4
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	601a      	str	r2, [r3, #0]
		}
}
 800b68a:	bf00      	nop
 800b68c:	3730      	adds	r7, #48	; 0x30
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	00000000 	.word	0x00000000
 800b69c:	40b00000 	.word	0x40b00000
 800b6a0:	20000008 	.word	0x20000008
 800b6a4:	466a6000 	.word	0x466a6000
 800b6a8:	200080e4 	.word	0x200080e4
 800b6ac:	00000000 	.word	0x00000000

0800b6b0 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08c      	sub	sp, #48	; 0x30
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 800b6ba:	f04f 0300 	mov.w	r3, #0
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ans = 0;
 800b6c0:	f04f 0300 	mov.w	r3, #0
 800b6c4:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i<n; i++)
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6ca:	e016      	b.n	800b6fa <Calculate_FreqOverAll+0x4a>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	ed93 7a00 	vldr	s14, [r3]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	4413      	add	r3, r2
 800b6e0:	edd3 7a00 	vldr	s15, [r3]
 800b6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b6ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i<n; i++)
 800b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	dbe4      	blt.n	800b6cc <Calculate_FreqOverAll+0x1c>
	}

	int fftSize = 4096;
 800b702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b706:	61bb      	str	r3, [r7, #24]
	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 4096;
 800b708:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800b70c:	617b      	str	r3, [r7, #20]
	float32_t samplingRate = 15000;
 800b70e:	4b68      	ldr	r3, [pc, #416]	; (800b8b0 <Calculate_FreqOverAll+0x200>)
 800b710:	613b      	str	r3, [r7, #16]
	float32_t frequencyScale = samplingRate/sampleCount;
 800b712:	edd7 6a04 	vldr	s13, [r7, #16]
 800b716:	ed97 7a05 	vldr	s14, [r7, #20]
 800b71a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b71e:	edc7 7a03 	vstr	s15, [r7, #12]
	float SpeedparsevalFftPower = 0;
 800b722:	f04f 0300 	mov.w	r3, #0
 800b726:	627b      	str	r3, [r7, #36]	; 0x24

	for(uint16_t i = 1; i < fftSize; i++)
 800b728:	2301      	movs	r3, #1
 800b72a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b72c:	e084      	b.n	800b838 <Calculate_FreqOverAll+0x188>
	{
		if(i < fftSize/2)
 800b72e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	2b00      	cmp	r3, #0
 800b734:	da00      	bge.n	800b738 <Calculate_FreqOverAll+0x88>
 800b736:	3301      	adds	r3, #1
 800b738:	105b      	asrs	r3, r3, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	da33      	bge.n	800b7a6 <Calculate_FreqOverAll+0xf6>
		{
			if(i ==0)
 800b73e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10a      	bne.n	800b75a <Calculate_FreqOverAll+0xaa>
			{
				x[i] = x[i];
 800b744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	441a      	add	r2, r3
 800b74c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	6879      	ldr	r1, [r7, #4]
 800b752:	440b      	add	r3, r1
 800b754:	6812      	ldr	r2, [r2, #0]
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	e057      	b.n	800b80a <Calculate_FreqOverAll+0x15a>
			}
			else
			{
				x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800b75a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	4413      	add	r3, r2
 800b762:	edd3 7a00 	vldr	s15, [r3]
 800b766:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800b8b4 <Calculate_FreqOverAll+0x204>
 800b76a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b76e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b772:	edd7 7a03 	vldr	s15, [r7, #12]
 800b776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b77a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800b8a8 <Calculate_FreqOverAll+0x1f8>
 800b77e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b784:	ee07 3a90 	vmov	s15, r3
 800b788:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b78c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b790:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	4413      	add	r3, r2
 800b79c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b7a0:	edc3 7a00 	vstr	s15, [r3]
 800b7a4:	e031      	b.n	800b80a <Calculate_FreqOverAll+0x15a>
			}

		}
		else if(i > fftSize/2)
 800b7a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	da00      	bge.n	800b7b0 <Calculate_FreqOverAll+0x100>
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	105b      	asrs	r3, r3, #1
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	dd29      	ble.n	800b80a <Calculate_FreqOverAll+0x15a>
		{
			x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * abs(fftSize-i));
 800b7b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	4413      	add	r3, r2
 800b7be:	edd3 7a00 	vldr	s15, [r3]
 800b7c2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800b8b4 <Calculate_FreqOverAll+0x204>
 800b7c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7ca:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b7ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b7d6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800b8a8 <Calculate_FreqOverAll+0x1f8>
 800b7da:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7e0:	69ba      	ldr	r2, [r7, #24]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	bfb8      	it	lt
 800b7e8:	425b      	neglt	r3, r3
 800b7ea:	ee07 3a90 	vmov	s15, r3
 800b7ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b7f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b7f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b7fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b806:	edc3 7a00 	vstr	s15, [r3]
		}
		SpeedparsevalFftPower += x[i] * x[i];
 800b80a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	4413      	add	r3, r2
 800b812:	ed93 7a00 	vldr	s14, [r3]
 800b816:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	4413      	add	r3, r2
 800b81e:	edd3 7a00 	vldr	s15, [r3]
 800b822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b826:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b82a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b82e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint16_t i = 1; i < fftSize; i++)
 800b832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b834:	3301      	adds	r3, #1
 800b836:	847b      	strh	r3, [r7, #34]	; 0x22
 800b838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	f73f af76 	bgt.w	800b72e <Calculate_FreqOverAll+0x7e>
	}



	ans = sqrt(ParsevalFftPower)/n;
 800b842:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b84a:	eeb0 0b47 	vmov.f64	d0, d7
 800b84e:	f00a fe5f 	bl	8016510 <sqrt>
 800b852:	eeb0 5b40 	vmov.f64	d5, d0
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b860:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b864:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b868:	edc7 7a07 	vstr	s15, [r7, #28]
	statistic_value.Statistic_SpeedOvall = sqrt(SpeedparsevalFftPower)/n;
 800b86c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b874:	eeb0 0b47 	vmov.f64	d0, d7
 800b878:	f00a fe4a 	bl	8016510 <sqrt>
 800b87c:	eeb0 5b40 	vmov.f64	d5, d0
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b88a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b88e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b892:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <Calculate_FreqOverAll+0x208>)
 800b894:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	return ans;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	ee07 3a90 	vmov	s15, r3
}
 800b89e:	eeb0 0a67 	vmov.f32	s0, s15
 800b8a2:	3730      	adds	r7, #48	; 0x30
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	4d12d84a 	.word	0x4d12d84a
 800b8ac:	401921fb 	.word	0x401921fb
 800b8b0:	466a6000 	.word	0x466a6000
 800b8b4:	46193c00 	.word	0x46193c00
 800b8b8:	200080e4 	.word	0x200080e4

0800b8bc <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800b8c6:	4b0e      	ldr	r3, [pc, #56]	; (800b900 <delay_init+0x44>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a0d      	ldr	r2, [pc, #52]	; (800b900 <delay_init+0x44>)
 800b8cc:	f023 0304 	bic.w	r3, r3, #4
 800b8d0:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	08db      	lsrs	r3, r3, #3
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <delay_init+0x48>)
 800b8da:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <delay_init+0x48>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	0152      	lsls	r2, r2, #5
 800b8e6:	1ad2      	subs	r2, r2, r3
 800b8e8:	0092      	lsls	r2, r2, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	00db      	lsls	r3, r3, #3
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	4b05      	ldr	r3, [pc, #20]	; (800b908 <delay_init+0x4c>)
 800b8f2:	801a      	strh	r2, [r3, #0]
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	e000e010 	.word	0xe000e010
 800b904:	200000bc 	.word	0x200000bc
 800b908:	200000be 	.word	0x200000be

0800b90c <delay_ms>:

void delay_ms(uint16_t nms)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	4a14      	ldr	r2, [pc, #80]	; (800b96c <delay_ms+0x60>)
 800b91a:	8812      	ldrh	r2, [r2, #0]
 800b91c:	4611      	mov	r1, r2
 800b91e:	4a14      	ldr	r2, [pc, #80]	; (800b970 <delay_ms+0x64>)
 800b920:	fb01 f303 	mul.w	r3, r1, r3
 800b924:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 800b926:	4b12      	ldr	r3, [pc, #72]	; (800b970 <delay_ms+0x64>)
 800b928:	2200      	movs	r2, #0
 800b92a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 800b92c:	4b10      	ldr	r3, [pc, #64]	; (800b970 <delay_ms+0x64>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a0f      	ldr	r2, [pc, #60]	; (800b970 <delay_ms+0x64>)
 800b932:	f043 0301 	orr.w	r3, r3, #1
 800b936:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <delay_ms+0x64>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	d004      	beq.n	800b952 <delay_ms+0x46>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f2      	beq.n	800b938 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <delay_ms+0x64>)
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <delay_ms+0x64>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	609a      	str	r2, [r3, #8]
}
 800b95e:	bf00      	nop
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	200000be 	.word	0x200000be
 800b970:	e000e010 	.word	0xe000e010

0800b974 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800b97c:	4b14      	ldr	r3, [pc, #80]	; (800b9d0 <delay_us+0x5c>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	4a14      	ldr	r2, [pc, #80]	; (800b9d4 <delay_us+0x60>)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	fb03 f301 	mul.w	r3, r3, r1
 800b98a:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800b98c:	4b11      	ldr	r3, [pc, #68]	; (800b9d4 <delay_us+0x60>)
 800b98e:	2200      	movs	r2, #0
 800b990:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 800b992:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <delay_us+0x60>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a0f      	ldr	r2, [pc, #60]	; (800b9d4 <delay_us+0x60>)
 800b998:	f043 0301 	orr.w	r3, r3, #1
 800b99c:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800b99e:	4b0d      	ldr	r3, [pc, #52]	; (800b9d4 <delay_us+0x60>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f003 0301 	and.w	r3, r3, #1
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <delay_us+0x44>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0f2      	beq.n	800b99e <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800b9b8:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <delay_us+0x60>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800b9be:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <delay_us+0x60>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	609a      	str	r2, [r3, #8]
}
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	200000bc 	.word	0x200000bc
 800b9d4:	e000e010 	.word	0xe000e010

0800b9d8 <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 800b9dc:	4b03      	ldr	r3, [pc, #12]	; (800b9ec <TM_Delay_Init+0x14>)
 800b9de:	221e      	movs	r2, #30
 800b9e0:	601a      	str	r2, [r3, #0]
}
 800b9e2:	bf00      	nop
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	2000818c 	.word	0x2000818c

0800b9f0 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 800b9f8:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <TM_DelayMicros+0x30>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ba02:	3b0a      	subs	r3, #10
 800ba04:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 800ba06:	bf00      	nop
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	1e5a      	subs	r2, r3, #1
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1fa      	bne.n	800ba08 <TM_DelayMicros+0x18>
}
 800ba12:	bf00      	nop
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	2000818c 	.word	0x2000818c

0800ba24 <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 800ba2c:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <TM_DelayMillis+0x38>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	fb02 f303 	mul.w	r3, r2, r3
 800ba36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba3a:	fb02 f303 	mul.w	r3, r2, r3
 800ba3e:	3b0a      	subs	r3, #10
 800ba40:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 800ba42:	bf00      	nop
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	1e5a      	subs	r2, r3, #1
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1fa      	bne.n	800ba44 <TM_DelayMillis+0x20>
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	2000818c 	.word	0x2000818c

0800ba60 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4a07      	ldr	r2, [pc, #28]	; (800ba8c <vApplicationGetIdleTaskMemory+0x2c>)
 800ba70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	4a06      	ldr	r2, [pc, #24]	; (800ba90 <vApplicationGetIdleTaskMemory+0x30>)
 800ba76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2280      	movs	r2, #128	; 0x80
 800ba7c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ba7e:	bf00      	nop
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	200000c0 	.word	0x200000c0
 800ba90:	20000114 	.word	0x20000114

0800ba94 <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 800ba9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba9e:	9302      	str	r3, [sp, #8]
 800baa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <readIICEEPROM_2402C+0x28>)
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	2302      	movs	r3, #2
 800baac:	2200      	movs	r2, #0
 800baae:	21a1      	movs	r1, #161	; 0xa1
 800bab0:	4803      	ldr	r0, [pc, #12]	; (800bac0 <readIICEEPROM_2402C+0x2c>)
 800bab2:	f003 fd9b 	bl	800f5ec <HAL_I2C_Mem_Read>
}
 800bab6:	bf00      	nop
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	200083b8 	.word	0x200083b8
 800bac0:	2000836c 	.word	0x2000836c

0800bac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bac4:	b5b0      	push	{r4, r5, r7, lr}
 800bac6:	b0ae      	sub	sp, #184	; 0xb8
 800bac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800baca:	f002 fdea 	bl	800e6a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bace:	f000 f957 	bl	800bd80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bad2:	f000 fb3b 	bl	800c14c <MX_GPIO_Init>
  MX_DMA_Init();
 800bad6:	f000 faf7 	bl	800c0c8 <MX_DMA_Init>
  MX_SPI1_Init();
 800bada:	f000 fa87 	bl	800bfec <MX_SPI1_Init>
  MX_I2C1_Init();
 800bade:	f000 f9e7 	bl	800beb0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800bae2:	f000 fac1 	bl	800c068 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800bae6:	f000 fa23 	bl	800bf30 <MX_I2C2_Init>
  MX_IWDG_Init();
 800baea:	f000 fa61 	bl	800bfb0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 10);
 800baee:	220a      	movs	r2, #10
 800baf0:	4989      	ldr	r1, [pc, #548]	; (800bd18 <main+0x254>)
 800baf2:	488a      	ldr	r0, [pc, #552]	; (800bd1c <main+0x258>)
 800baf4:	f006 ffaa 	bl	8012a4c <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800baf8:	b662      	cpsie	i
  __enable_irq();

  statisticDataSet = rawData;
 800bafa:	4b89      	ldr	r3, [pc, #548]	; (800bd20 <main+0x25c>)
 800bafc:	4a89      	ldr	r2, [pc, #548]	; (800bd24 <main+0x260>)
 800bafe:	601a      	str	r2, [r3, #0]
   dataLength = sizeof(dataRecive)/sizeof(float);
 800bb00:	4b89      	ldr	r3, [pc, #548]	; (800bd28 <main+0x264>)
 800bb02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bb06:	601a      	str	r2, [r3, #0]

   //TODO: Test BLE command
   char str[] ="This is a simple string aaa";
 800bb08:	4b88      	ldr	r3, [pc, #544]	; (800bd2c <main+0x268>)
 800bb0a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800bb0e:	461d      	mov	r5, r3
 800bb10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb18:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   _Bool command = checkBLECommandFromBLEGateway(str);
 800bb1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fd15 	bl	800b550 <checkBLECommandFromBLEGateway>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bf14      	ite	ne
 800bb2c:	2301      	movne	r3, #1
 800bb2e:	2300      	moveq	r3, #0
 800bb30:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

   //TODO: Initialize ADS1256 data buffer size
   ADS1256.data_index = 0;
 800bb34:	4b7e      	ldr	r3, [pc, #504]	; (800bd30 <main+0x26c>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]
   ADS1256.data_length = dataLength;
 800bb3a:	4b7b      	ldr	r3, [pc, #492]	; (800bd28 <main+0x264>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a7c      	ldr	r2, [pc, #496]	; (800bd30 <main+0x26c>)
 800bb40:	6053      	str	r3, [r2, #4]

  //TODO: Set freq band
	freqSettingValueList.range1.Max = 1650;
 800bb42:	4b7c      	ldr	r3, [pc, #496]	; (800bd34 <main+0x270>)
 800bb44:	f240 6272 	movw	r2, #1650	; 0x672
 800bb48:	601a      	str	r2, [r3, #0]
	freqSettingValueList.range1.Min = 20;
 800bb4a:	4b7a      	ldr	r3, [pc, #488]	; (800bd34 <main+0x270>)
 800bb4c:	2214      	movs	r2, #20
 800bb4e:	605a      	str	r2, [r3, #4]
	freqSettingValueList.range2.Max = 2600;
 800bb50:	4b78      	ldr	r3, [pc, #480]	; (800bd34 <main+0x270>)
 800bb52:	f640 2228 	movw	r2, #2600	; 0xa28
 800bb56:	609a      	str	r2, [r3, #8]
	freqSettingValueList.range2.Min = 2300;
 800bb58:	4b76      	ldr	r3, [pc, #472]	; (800bd34 <main+0x270>)
 800bb5a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800bb5e:	60da      	str	r2, [r3, #12]
	freqSettingValueList.range3.Max = 3000;
 800bb60:	4b74      	ldr	r3, [pc, #464]	; (800bd34 <main+0x270>)
 800bb62:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bb66:	611a      	str	r2, [r3, #16]
	freqSettingValueList.range3.Min = 1650;
 800bb68:	4b72      	ldr	r3, [pc, #456]	; (800bd34 <main+0x270>)
 800bb6a:	f240 6272 	movw	r2, #1650	; 0x672
 800bb6e:	615a      	str	r2, [r3, #20]

   //TODO: Initialize Frequency range to collection to feature
   //F2B.f = 1.4567;

   //TODO: Initialize delay systick
   delay_init(216);
 800bb70:	20d8      	movs	r0, #216	; 0xd8
 800bb72:	f7ff fea3 	bl	800b8bc <delay_init>
   TM_Delay_Init();
 800bb76:	f7ff ff2f 	bl	800b9d8 <TM_Delay_Init>

   readIICEEPROM_2402C();
 800bb7a:	f7ff ff8b 	bl	800ba94 <readIICEEPROM_2402C>
   //TODO: Reset ADS1256
   writeCMD(CMD_RESET);
 800bb7e:	20fe      	movs	r0, #254	; 0xfe
 800bb80:	f7ff fb3c 	bl	800b1fc <writeCMD>
   delay_ms(10);
 800bb84:	200a      	movs	r0, #10
 800bb86:	f7ff fec1 	bl	800b90c <delay_ms>
   TM_DelayMicros(1);
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	f7ff ff30 	bl	800b9f0 <TM_DelayMicros>

   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
   setBuffer();
 800bb90:	f7ff fc0e 	bl	800b3b0 <setBuffer>
   setPGA(PGA_GAIN1);
 800bb94:	2000      	movs	r0, #0
 800bb96:	f7ff fb89 	bl	800b2ac <setPGA>
   setDataRate(DRATE_15000);
 800bb9a:	20e0      	movs	r0, #224	; 0xe0
 800bb9c:	f7ff fb4e 	bl	800b23c <setDataRate>

   //TODO: Read chip id
   id = readChipID();
 800bba0:	f7ff fbb0 	bl	800b304 <readChipID>
 800bba4:	4603      	mov	r3, r0
 800bba6:	461a      	mov	r2, r3
 800bba8:	4b63      	ldr	r3, [pc, #396]	; (800bd38 <main+0x274>)
 800bbaa:	701a      	strb	r2, [r3, #0]

   delay_ms(500);// wait for initialization
 800bbac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bbb0:	f7ff feac 	bl	800b90c <delay_ms>

   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 800bbb4:	4b61      	ldr	r3, [pc, #388]	; (800bd3c <main+0x278>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 800bbbc:	4b60      	ldr	r3, [pc, #384]	; (800bd40 <main+0x27c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

   //TODO: Set differential analog input channel.
   setDIFFChannel(posChannels[0], negChannels[0]);
 800bbc4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800bbc8:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7ff fafc 	bl	800b1cc <setDIFFChannel>
   delay_us(15);
 800bbd4:	200f      	movs	r0, #15
 800bbd6:	f7ff fecd 	bl	800b974 <delay_us>
   writeCMD(CMD_SYNC);    // SYNC command
 800bbda:	20fc      	movs	r0, #252	; 0xfc
 800bbdc:	f7ff fb0e 	bl	800b1fc <writeCMD>
   delay_us(10);
 800bbe0:	200a      	movs	r0, #10
 800bbe2:	f7ff fec7 	bl	800b974 <delay_us>
   writeCMD(CMD_WAKEUP);  // WAKEUP command
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	f7ff fb08 	bl	800b1fc <writeCMD>
   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 800bbec:	200f      	movs	r0, #15
 800bbee:	f7ff fec1 	bl	800b974 <delay_us>



   //TODO: Set continuous mode.

	waitDRDY();
 800bbf2:	f7ff fb69 	bl	800b2c8 <waitDRDY>
	CS_0();
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2110      	movs	r1, #16
 800bbfa:	4852      	ldr	r0, [pc, #328]	; (800bd44 <main+0x280>)
 800bbfc:	f003 fc1a 	bl	800f434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 800bc00:	2332      	movs	r3, #50	; 0x32
 800bc02:	2201      	movs	r2, #1
 800bc04:	4950      	ldr	r1, [pc, #320]	; (800bd48 <main+0x284>)
 800bc06:	4851      	ldr	r0, [pc, #324]	; (800bd4c <main+0x288>)
 800bc08:	f005 ff5c 	bl	8011ac4 <HAL_SPI_Transmit>
	delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 800bc0c:	2019      	movs	r0, #25
 800bc0e:	f7ff fe7d 	bl	800b90c <delay_ms>
	ADS1256.data_startFlag = 1;
 800bc12:	4a47      	ldr	r2, [pc, #284]	; (800bd30 <main+0x26c>)
 800bc14:	f244 0308 	movw	r3, #16392	; 0x4008
 800bc18:	4413      	add	r3, r2
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	701a      	strb	r2, [r3, #0]
	delay_us(1);
 800bc1e:	2001      	movs	r0, #1
 800bc20:	f7ff fea8 	bl	800b974 <delay_us>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 800bc30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bc34:	2101      	movs	r1, #1
 800bc36:	4618      	mov	r0, r3
 800bc38:	f007 ff9b 	bl	8013b72 <osSemaphoreCreate>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	4b44      	ldr	r3, [pc, #272]	; (800bd50 <main+0x28c>)
 800bc40:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 800bc42:	2300      	movs	r3, #0
 800bc44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800bc4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bc52:	2101      	movs	r1, #1
 800bc54:	4618      	mov	r0, r3
 800bc56:	f007 ff8c 	bl	8013b72 <osSemaphoreCreate>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	4b3d      	ldr	r3, [pc, #244]	; (800bd54 <main+0x290>)
 800bc5e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 800bc60:	4b3d      	ldr	r3, [pc, #244]	; (800bd58 <main+0x294>)
 800bc62:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800bc66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800bc6c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f007 ffb0 	bl	8013bd8 <osMessageCreate>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	4b38      	ldr	r3, [pc, #224]	; (800bd5c <main+0x298>)
 800bc7c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 800bc7e:	4b38      	ldr	r3, [pc, #224]	; (800bd60 <main+0x29c>)
 800bc80:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800bc84:	461d      	mov	r5, r3
 800bc86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800bc92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bc96:	2100      	movs	r1, #0
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f007 ff0a 	bl	8013ab2 <osThreadCreate>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	4b30      	ldr	r3, [pc, #192]	; (800bd64 <main+0x2a0>)
 800bca2:	601a      	str	r2, [r3, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 400);
 800bca4:	4b30      	ldr	r3, [pc, #192]	; (800bd68 <main+0x2a4>)
 800bca6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800bcaa:	461d      	mov	r5, r3
 800bcac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bcb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 800bcb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f007 fef7 	bl	8013ab2 <osThreadCreate>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	4b29      	ldr	r3, [pc, #164]	; (800bd6c <main+0x2a8>)
 800bcc8:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, LED_Thread, osPriorityAboveNormal, 0, 200);
 800bcca:	4b29      	ldr	r3, [pc, #164]	; (800bd70 <main+0x2ac>)
 800bccc:	f107 041c 	add.w	r4, r7, #28
 800bcd0:	461d      	mov	r5, r3
 800bcd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bcda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 800bcde:	f107 031c 	add.w	r3, r7, #28
 800bce2:	2100      	movs	r1, #0
 800bce4:	4618      	mov	r0, r3
 800bce6:	f007 fee4 	bl	8013ab2 <osThreadCreate>
 800bcea:	4602      	mov	r2, r0
 800bcec:	4b21      	ldr	r3, [pc, #132]	; (800bd74 <main+0x2b0>)
 800bcee:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, I2C_Thread, osPriorityRealtime, 0, 200);
 800bcf0:	4b21      	ldr	r3, [pc, #132]	; (800bd78 <main+0x2b4>)
 800bcf2:	463c      	mov	r4, r7
 800bcf4:	461d      	mov	r5, r3
 800bcf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bcfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 800bd02:	463b      	mov	r3, r7
 800bd04:	2100      	movs	r1, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f007 fed3 	bl	8013ab2 <osThreadCreate>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	4b1b      	ldr	r3, [pc, #108]	; (800bd7c <main+0x2b8>)
 800bd10:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800bd12:	f007 fec7 	bl	8013aa4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800bd16:	e7fe      	b.n	800bd16 <main+0x252>
 800bd18:	20018780 	.word	0x20018780
 800bd1c:	20018700 	.word	0x20018700
 800bd20:	200081a0 	.word	0x200081a0
 800bd24:	2000c538 	.word	0x2000c538
 800bd28:	20000334 	.word	0x20000334
 800bd2c:	0801669c 	.word	0x0801669c
 800bd30:	20004088 	.word	0x20004088
 800bd34:	200080cc 	.word	0x200080cc
 800bd38:	20000314 	.word	0x20000314
 800bd3c:	080166b8 	.word	0x080166b8
 800bd40:	080166bc 	.word	0x080166bc
 800bd44:	40020000 	.word	0x40020000
 800bd48:	20000004 	.word	0x20000004
 800bd4c:	2001878c 	.word	0x2001878c
 800bd50:	200084bc 	.word	0x200084bc
 800bd54:	2001c8b8 	.word	0x2001c8b8
 800bd58:	080166c0 	.word	0x080166c0
 800bd5c:	2000c530 	.word	0x2000c530
 800bd60:	080166dc 	.word	0x080166dc
 800bd64:	200084c8 	.word	0x200084c8
 800bd68:	08016704 	.word	0x08016704
 800bd6c:	200084b8 	.word	0x200084b8
 800bd70:	0801672c 	.word	0x0801672c
 800bd74:	200084c4 	.word	0x200084c4
 800bd78:	08016754 	.word	0x08016754
 800bd7c:	2000c52c 	.word	0x2000c52c

0800bd80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b0b8      	sub	sp, #224	; 0xe0
 800bd84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bd86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800bd8a:	2234      	movs	r2, #52	; 0x34
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f00a fb89 	bl	80164a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bd94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	605a      	str	r2, [r3, #4]
 800bd9e:	609a      	str	r2, [r3, #8]
 800bda0:	60da      	str	r2, [r3, #12]
 800bda2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bda4:	f107 0308 	add.w	r3, r7, #8
 800bda8:	2290      	movs	r2, #144	; 0x90
 800bdaa:	2100      	movs	r1, #0
 800bdac:	4618      	mov	r0, r3
 800bdae:	f00a fb7a 	bl	80164a6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bdb2:	4b3d      	ldr	r3, [pc, #244]	; (800bea8 <SystemClock_Config+0x128>)
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	4a3c      	ldr	r2, [pc, #240]	; (800bea8 <SystemClock_Config+0x128>)
 800bdb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdbc:	6413      	str	r3, [r2, #64]	; 0x40
 800bdbe:	4b3a      	ldr	r3, [pc, #232]	; (800bea8 <SystemClock_Config+0x128>)
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc6:	607b      	str	r3, [r7, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bdca:	4b38      	ldr	r3, [pc, #224]	; (800beac <SystemClock_Config+0x12c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a37      	ldr	r2, [pc, #220]	; (800beac <SystemClock_Config+0x12c>)
 800bdd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	4b35      	ldr	r3, [pc, #212]	; (800beac <SystemClock_Config+0x12c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bdde:	603b      	str	r3, [r7, #0]
 800bde0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800bde2:	230a      	movs	r3, #10
 800bde4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bde8:	2301      	movs	r3, #1
 800bdea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bdee:	2310      	movs	r3, #16
 800bdf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800be00:	2300      	movs	r3, #0
 800be02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800be06:	2308      	movs	r3, #8
 800be08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800be0c:	23d8      	movs	r3, #216	; 0xd8
 800be0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800be12:	2302      	movs	r3, #2
 800be14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800be18:	2302      	movs	r3, #2
 800be1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800be1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800be22:	4618      	mov	r0, r3
 800be24:	f004 fcf2 	bl	801080c <HAL_RCC_OscConfig>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800be2e:	f000 fdd3 	bl	800c9d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800be32:	f004 fc9b 	bl	801076c <HAL_PWREx_EnableOverDrive>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800be3c:	f000 fdcc 	bl	800c9d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800be40:	230f      	movs	r3, #15
 800be42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800be46:	2302      	movs	r3, #2
 800be48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800be4c:	2300      	movs	r3, #0
 800be4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800be52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800be56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800be5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800be62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800be66:	2107      	movs	r1, #7
 800be68:	4618      	mov	r0, r3
 800be6a:	f004 ff7d 	bl	8010d68 <HAL_RCC_ClockConfig>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800be74:	f000 fdb0 	bl	800c9d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C1
 800be78:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800be7c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800be7e:	2300      	movs	r3, #0
 800be80:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800be82:	2300      	movs	r3, #0
 800be84:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800be86:	2300      	movs	r3, #0
 800be88:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800be8a:	f107 0308 	add.w	r3, r7, #8
 800be8e:	4618      	mov	r0, r3
 800be90:	f005 f960 	bl	8011154 <HAL_RCCEx_PeriphCLKConfig>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800be9a:	f000 fd9d 	bl	800c9d8 <Error_Handler>
  }
}
 800be9e:	bf00      	nop
 800bea0:	37e0      	adds	r7, #224	; 0xe0
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	40023800 	.word	0x40023800
 800beac:	40007000 	.word	0x40007000

0800beb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800beb4:	4b1b      	ldr	r3, [pc, #108]	; (800bf24 <MX_I2C1_Init+0x74>)
 800beb6:	4a1c      	ldr	r2, [pc, #112]	; (800bf28 <MX_I2C1_Init+0x78>)
 800beb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800beba:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bebc:	4a1b      	ldr	r2, [pc, #108]	; (800bf2c <MX_I2C1_Init+0x7c>)
 800bebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 800bec0:	4b18      	ldr	r3, [pc, #96]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bec2:	2204      	movs	r2, #4
 800bec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bec6:	4b17      	ldr	r3, [pc, #92]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bec8:	2201      	movs	r2, #1
 800beca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800becc:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bece:	2200      	movs	r2, #0
 800bed0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bed2:	4b14      	ldr	r3, [pc, #80]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bed8:	4b12      	ldr	r3, [pc, #72]	; (800bf24 <MX_I2C1_Init+0x74>)
 800beda:	2200      	movs	r2, #0
 800bedc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800bede:	4b11      	ldr	r3, [pc, #68]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bee0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bee6:	4b0f      	ldr	r3, [pc, #60]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bee8:	2200      	movs	r2, #0
 800beea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800beec:	480d      	ldr	r0, [pc, #52]	; (800bf24 <MX_I2C1_Init+0x74>)
 800beee:	f003 faed 	bl	800f4cc <HAL_I2C_Init>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800bef8:	f000 fd6e 	bl	800c9d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800befc:	2100      	movs	r1, #0
 800befe:	4809      	ldr	r0, [pc, #36]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bf00:	f004 fb47 	bl	8010592 <HAL_I2CEx_ConfigAnalogFilter>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800bf0a:	f000 fd65 	bl	800c9d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4804      	ldr	r0, [pc, #16]	; (800bf24 <MX_I2C1_Init+0x74>)
 800bf12:	f004 fb89 	bl	8010628 <HAL_I2CEx_ConfigDigitalFilter>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800bf1c:	f000 fd5c 	bl	800c9d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20008310 	.word	0x20008310
 800bf28:	40005400 	.word	0x40005400
 800bf2c:	20404768 	.word	0x20404768

0800bf30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bf34:	4b1b      	ldr	r3, [pc, #108]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf36:	4a1c      	ldr	r2, [pc, #112]	; (800bfa8 <MX_I2C2_Init+0x78>)
 800bf38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800bf3a:	4b1a      	ldr	r3, [pc, #104]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf3c:	4a1b      	ldr	r2, [pc, #108]	; (800bfac <MX_I2C2_Init+0x7c>)
 800bf3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 800bf40:	4b18      	ldr	r3, [pc, #96]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf42:	2208      	movs	r2, #8
 800bf44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bf46:	4b17      	ldr	r3, [pc, #92]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf48:	2201      	movs	r2, #1
 800bf4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bf4c:	4b15      	ldr	r3, [pc, #84]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bf52:	4b14      	ldr	r3, [pc, #80]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bf58:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800bf5e:	4b11      	ldr	r3, [pc, #68]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bf64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bf66:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bf6c:	480d      	ldr	r0, [pc, #52]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf6e:	f003 faad 	bl	800f4cc <HAL_I2C_Init>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800bf78:	f000 fd2e 	bl	800c9d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	4809      	ldr	r0, [pc, #36]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf80:	f004 fb07 	bl	8010592 <HAL_I2CEx_ConfigAnalogFilter>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800bf8a:	f000 fd25 	bl	800c9d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bf8e:	2100      	movs	r1, #0
 800bf90:	4804      	ldr	r0, [pc, #16]	; (800bfa4 <MX_I2C2_Init+0x74>)
 800bf92:	f004 fb49 	bl	8010628 <HAL_I2CEx_ConfigDigitalFilter>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800bf9c:	f000 fd1c 	bl	800c9d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bfa0:	bf00      	nop
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	2000836c 	.word	0x2000836c
 800bfa8:	40005800 	.word	0x40005800
 800bfac:	20404768 	.word	0x20404768

0800bfb0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <MX_IWDG_Init+0x34>)
 800bfb6:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <MX_IWDG_Init+0x38>)
 800bfb8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800bfba:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <MX_IWDG_Init+0x34>)
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800bfc0:	4b08      	ldr	r3, [pc, #32]	; (800bfe4 <MX_IWDG_Init+0x34>)
 800bfc2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800bfc6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3096;
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <MX_IWDG_Init+0x34>)
 800bfca:	f640 4218 	movw	r2, #3096	; 0xc18
 800bfce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800bfd0:	4804      	ldr	r0, [pc, #16]	; (800bfe4 <MX_IWDG_Init+0x34>)
 800bfd2:	f004 fb75 	bl	80106c0 <HAL_IWDG_Init>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800bfdc:	f000 fcfc 	bl	800c9d8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800bfe0:	bf00      	nop
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	2000835c 	.word	0x2000835c
 800bfe8:	40003000 	.word	0x40003000

0800bfec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800bff0:	4b1b      	ldr	r3, [pc, #108]	; (800c060 <MX_SPI1_Init+0x74>)
 800bff2:	4a1c      	ldr	r2, [pc, #112]	; (800c064 <MX_SPI1_Init+0x78>)
 800bff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bff6:	4b1a      	ldr	r3, [pc, #104]	; (800c060 <MX_SPI1_Init+0x74>)
 800bff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800bffe:	4b18      	ldr	r3, [pc, #96]	; (800c060 <MX_SPI1_Init+0x74>)
 800c000:	2200      	movs	r2, #0
 800c002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c004:	4b16      	ldr	r3, [pc, #88]	; (800c060 <MX_SPI1_Init+0x74>)
 800c006:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c00a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c00c:	4b14      	ldr	r3, [pc, #80]	; (800c060 <MX_SPI1_Init+0x74>)
 800c00e:	2200      	movs	r2, #0
 800c010:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <MX_SPI1_Init+0x74>)
 800c014:	2201      	movs	r2, #1
 800c016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c018:	4b11      	ldr	r3, [pc, #68]	; (800c060 <MX_SPI1_Init+0x74>)
 800c01a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c01e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c020:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <MX_SPI1_Init+0x74>)
 800c022:	2228      	movs	r2, #40	; 0x28
 800c024:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c026:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <MX_SPI1_Init+0x74>)
 800c028:	2200      	movs	r2, #0
 800c02a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c02c:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <MX_SPI1_Init+0x74>)
 800c02e:	2200      	movs	r2, #0
 800c030:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c032:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <MX_SPI1_Init+0x74>)
 800c034:	2200      	movs	r2, #0
 800c036:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c038:	4b09      	ldr	r3, [pc, #36]	; (800c060 <MX_SPI1_Init+0x74>)
 800c03a:	2207      	movs	r2, #7
 800c03c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c03e:	4b08      	ldr	r3, [pc, #32]	; (800c060 <MX_SPI1_Init+0x74>)
 800c040:	2200      	movs	r2, #0
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <MX_SPI1_Init+0x74>)
 800c046:	2200      	movs	r2, #0
 800c048:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c04a:	4805      	ldr	r0, [pc, #20]	; (800c060 <MX_SPI1_Init+0x74>)
 800c04c:	f005 fca8 	bl	80119a0 <HAL_SPI_Init>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800c056:	f000 fcbf 	bl	800c9d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c05a:	bf00      	nop
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	2001878c 	.word	0x2001878c
 800c064:	40013000 	.word	0x40013000

0800c068 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800c06c:	4b14      	ldr	r3, [pc, #80]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c06e:	4a15      	ldr	r2, [pc, #84]	; (800c0c4 <MX_USART6_UART_Init+0x5c>)
 800c070:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800c072:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c078:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c080:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c082:	2200      	movs	r2, #0
 800c084:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c086:	4b0e      	ldr	r3, [pc, #56]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c088:	2200      	movs	r2, #0
 800c08a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c08c:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c08e:	220c      	movs	r2, #12
 800c090:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c094:	2200      	movs	r2, #0
 800c096:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c098:	4b09      	ldr	r3, [pc, #36]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c09e:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c0a4:	4b06      	ldr	r3, [pc, #24]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c0aa:	4805      	ldr	r0, [pc, #20]	; (800c0c0 <MX_USART6_UART_Init+0x58>)
 800c0ac:	f006 fc7f 	bl	80129ae <HAL_UART_Init>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800c0b6:	f000 fc8f 	bl	800c9d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c0ba:	bf00      	nop
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20018700 	.word	0x20018700
 800c0c4:	40011400 	.word	0x40011400

0800c0c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c0ce:	4b1e      	ldr	r3, [pc, #120]	; (800c148 <MX_DMA_Init+0x80>)
 800c0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d2:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <MX_DMA_Init+0x80>)
 800c0d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c0da:	4b1b      	ldr	r3, [pc, #108]	; (800c148 <MX_DMA_Init+0x80>)
 800c0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0e2:	607b      	str	r3, [r7, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c0e6:	4b18      	ldr	r3, [pc, #96]	; (800c148 <MX_DMA_Init+0x80>)
 800c0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ea:	4a17      	ldr	r2, [pc, #92]	; (800c148 <MX_DMA_Init+0x80>)
 800c0ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c0f2:	4b15      	ldr	r3, [pc, #84]	; (800c148 <MX_DMA_Init+0x80>)
 800c0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0fa:	603b      	str	r3, [r7, #0]
 800c0fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800c0fe:	2200      	movs	r2, #0
 800c100:	2105      	movs	r1, #5
 800c102:	2011      	movs	r0, #17
 800c104:	f002 fc05 	bl	800e912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800c108:	2011      	movs	r0, #17
 800c10a:	f002 fc1e 	bl	800e94a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800c10e:	2200      	movs	r2, #0
 800c110:	2105      	movs	r1, #5
 800c112:	2038      	movs	r0, #56	; 0x38
 800c114:	f002 fbfd 	bl	800e912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c118:	2038      	movs	r0, #56	; 0x38
 800c11a:	f002 fc16 	bl	800e94a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800c11e:	2200      	movs	r2, #0
 800c120:	2105      	movs	r1, #5
 800c122:	203b      	movs	r0, #59	; 0x3b
 800c124:	f002 fbf5 	bl	800e912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c128:	203b      	movs	r0, #59	; 0x3b
 800c12a:	f002 fc0e 	bl	800e94a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800c12e:	2200      	movs	r2, #0
 800c130:	2105      	movs	r1, #5
 800c132:	2045      	movs	r0, #69	; 0x45
 800c134:	f002 fbed 	bl	800e912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800c138:	2045      	movs	r0, #69	; 0x45
 800c13a:	f002 fc06 	bl	800e94a <HAL_NVIC_EnableIRQ>

}
 800c13e:	bf00      	nop
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	40023800 	.word	0x40023800

0800c14c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08a      	sub	sp, #40	; 0x28
 800c150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c152:	f107 0314 	add.w	r3, r7, #20
 800c156:	2200      	movs	r2, #0
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	605a      	str	r2, [r3, #4]
 800c15c:	609a      	str	r2, [r3, #8]
 800c15e:	60da      	str	r2, [r3, #12]
 800c160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c162:	4b38      	ldr	r3, [pc, #224]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c166:	4a37      	ldr	r2, [pc, #220]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c168:	f043 0301 	orr.w	r3, r3, #1
 800c16c:	6313      	str	r3, [r2, #48]	; 0x30
 800c16e:	4b35      	ldr	r3, [pc, #212]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	613b      	str	r3, [r7, #16]
 800c178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c17a:	4b32      	ldr	r3, [pc, #200]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	4a31      	ldr	r2, [pc, #196]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	6313      	str	r3, [r2, #48]	; 0x30
 800c186:	4b2f      	ldr	r3, [pc, #188]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18a:	f003 0302 	and.w	r3, r3, #2
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c192:	4b2c      	ldr	r3, [pc, #176]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c196:	4a2b      	ldr	r2, [pc, #172]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c198:	f043 0308 	orr.w	r3, r3, #8
 800c19c:	6313      	str	r3, [r2, #48]	; 0x30
 800c19e:	4b29      	ldr	r3, [pc, #164]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a2:	f003 0308 	and.w	r3, r3, #8
 800c1a6:	60bb      	str	r3, [r7, #8]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1aa:	4b26      	ldr	r3, [pc, #152]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ae:	4a25      	ldr	r2, [pc, #148]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c1b0:	f043 0304 	orr.w	r3, r3, #4
 800c1b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c1b6:	4b23      	ldr	r3, [pc, #140]	; (800c244 <MX_GPIO_Init+0xf8>)
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	f003 0304 	and.w	r3, r3, #4
 800c1be:	607b      	str	r3, [r7, #4]
 800c1c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2110      	movs	r1, #16
 800c1c6:	4820      	ldr	r0, [pc, #128]	; (800c248 <MX_GPIO_Init+0xfc>)
 800c1c8:	f003 f934 	bl	800f434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800c1d2:	481e      	ldr	r0, [pc, #120]	; (800c24c <MX_GPIO_Init+0x100>)
 800c1d4:	f003 f92e 	bl	800f434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c1d8:	2308      	movs	r3, #8
 800c1da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c1dc:	4b1c      	ldr	r3, [pc, #112]	; (800c250 <MX_GPIO_Init+0x104>)
 800c1de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1e4:	f107 0314 	add.w	r3, r7, #20
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4817      	ldr	r0, [pc, #92]	; (800c248 <MX_GPIO_Init+0xfc>)
 800c1ec:	f002 ff60 	bl	800f0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c1f0:	2310      	movs	r3, #16
 800c1f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c200:	f107 0314 	add.w	r3, r7, #20
 800c204:	4619      	mov	r1, r3
 800c206:	4810      	ldr	r0, [pc, #64]	; (800c248 <MX_GPIO_Init+0xfc>)
 800c208:	f002 ff52 	bl	800f0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800c20c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c212:	2301      	movs	r3, #1
 800c214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c216:	2300      	movs	r3, #0
 800c218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c21a:	2300      	movs	r3, #0
 800c21c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c21e:	f107 0314 	add.w	r3, r7, #20
 800c222:	4619      	mov	r1, r3
 800c224:	4809      	ldr	r0, [pc, #36]	; (800c24c <MX_GPIO_Init+0x100>)
 800c226:	f002 ff43 	bl	800f0b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800c22a:	2200      	movs	r2, #0
 800c22c:	2105      	movs	r1, #5
 800c22e:	2009      	movs	r0, #9
 800c230:	f002 fb6f 	bl	800e912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c234:	2009      	movs	r0, #9
 800c236:	f002 fb88 	bl	800e94a <HAL_NVIC_EnableIRQ>

}
 800c23a:	bf00      	nop
 800c23c:	3728      	adds	r7, #40	; 0x28
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	40023800 	.word	0x40023800
 800c248:	40020000 	.word	0x40020000
 800c24c:	40020c00 	.word	0x40020c00
 800c250:	10210000 	.word	0x10210000

0800c254 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	4603      	mov	r3, r0
 800c25c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0)
 800c25e:	88fb      	ldrh	r3, [r7, #6]
 800c260:	2b08      	cmp	r3, #8
 800c262:	d126      	bne.n	800c2b2 <HAL_GPIO_EXTI_Callback+0x5e>
 800c264:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <HAL_GPIO_EXTI_Callback+0x68>)
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b03      	cmp	r3, #3
 800c26a:	d122      	bne.n	800c2b2 <HAL_GPIO_EXTI_Callback+0x5e>
 800c26c:	4a14      	ldr	r2, [pc, #80]	; (800c2c0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800c26e:	f244 0308 	movw	r3, #16392	; 0x4008
 800c272:	4413      	add	r3, r2
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d11b      	bne.n	800c2b2 <HAL_GPIO_EXTI_Callback+0x5e>
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <HAL_GPIO_EXTI_Callback+0x70>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d117      	bne.n	800c2b2 <HAL_GPIO_EXTI_Callback+0x5e>


		    /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 800c282:	2300      	movs	r3, #0
 800c284:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken);
 800c286:	4b10      	ldr	r3, [pc, #64]	; (800c2c8 <HAL_GPIO_EXTI_Callback+0x74>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f107 020c 	add.w	r2, r7, #12
 800c28e:	4611      	mov	r1, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f007 ffc9 	bl	8014228 <xQueueGiveFromISR>

		if(xHigherPriorityTaskWoken == pdTRUE)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d10a      	bne.n	800c2b2 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d007      	beq.n	800c2b2 <HAL_GPIO_EXTI_Callback+0x5e>
 800c2a2:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <HAL_GPIO_EXTI_Callback+0x78>)
 800c2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	f3bf 8f6f 	isb	sy
		}

	}
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20000314 	.word	0x20000314
 800c2c0:	20004088 	.word	0x20004088
 800c2c4:	200187f0 	.word	0x200187f0
 800c2c8:	200084bc 	.word	0x200084bc
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]

	//TODO: check data is

  //if(aRxBuffer[5] == '2' & aRxBuffer[6]=='4' & aRxBuffer[7]=='4')
  //{
  USARTBLE.IAPflag =1;
 800c2d8:	4b09      	ldr	r3, [pc, #36]	; (800c300 <HAL_UART_RxCpltCallback+0x30>)
 800c2da:	2201      	movs	r2, #1
 800c2dc:	705a      	strb	r2, [r3, #1]
  USARTBLE.sendflag = 0;
 800c2de:	4b08      	ldr	r3, [pc, #32]	; (800c300 <HAL_UART_RxCpltCallback+0x30>)
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
  BLE_USART(huart, &statistic_value);
 800c2e4:	4907      	ldr	r1, [pc, #28]	; (800c304 <HAL_UART_RxCpltCallback+0x34>)
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff f89e 	bl	800b428 <BLE_USART>
  HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 10);
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	4906      	ldr	r1, [pc, #24]	; (800c308 <HAL_UART_RxCpltCallback+0x38>)
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f006 fbab 	bl	8012a4c <HAL_UART_Receive_IT>
}
 800c2f6:	bf00      	nop
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20010540 	.word	0x20010540
 800c304:	200080e4 	.word	0x200080e4
 800c308:	20018780 	.word	0x20018780

0800c30c <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 800c314:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c318:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c31a:	4b41      	ldr	r3, [pc, #260]	; (800c420 <ADC_Thread+0x114>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68f9      	ldr	r1, [r7, #12]
 800c320:	4618      	mov	r0, r3
 800c322:	f008 f8f5 	bl	8014510 <xQueueSemaphoreTake>
 800c326:	4603      	mov	r3, r0
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d1f6      	bne.n	800c31a <ADC_Thread+0xe>
 800c32c:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <ADC_Thread+0x118>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1f2      	bne.n	800c31a <ADC_Thread+0xe>
				HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800c334:	2303      	movs	r3, #3
 800c336:	4a3c      	ldr	r2, [pc, #240]	; (800c428 <ADC_Thread+0x11c>)
 800c338:	493c      	ldr	r1, [pc, #240]	; (800c42c <ADC_Thread+0x120>)
 800c33a:	483d      	ldr	r0, [pc, #244]	; (800c430 <ADC_Thread+0x124>)
 800c33c:	f005 ff3c 	bl	80121b8 <HAL_SPI_TransmitReceive_DMA>

						// construct 24 bit value
				read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 800c340:	4b39      	ldr	r3, [pc, #228]	; (800c428 <ADC_Thread+0x11c>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	041b      	lsls	r3, r3, #16
 800c346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c34a:	4a3a      	ldr	r2, [pc, #232]	; (800c434 <ADC_Thread+0x128>)
 800c34c:	6013      	str	r3, [r2, #0]
				read |= ((int32_t)Databuffer[1] << 8);
 800c34e:	4b36      	ldr	r3, [pc, #216]	; (800c428 <ADC_Thread+0x11c>)
 800c350:	785b      	ldrb	r3, [r3, #1]
 800c352:	021a      	lsls	r2, r3, #8
 800c354:	4b37      	ldr	r3, [pc, #220]	; (800c434 <ADC_Thread+0x128>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4313      	orrs	r3, r2
 800c35a:	4a36      	ldr	r2, [pc, #216]	; (800c434 <ADC_Thread+0x128>)
 800c35c:	6013      	str	r3, [r2, #0]
				read |= Databuffer[2];
 800c35e:	4b32      	ldr	r3, [pc, #200]	; (800c428 <ADC_Thread+0x11c>)
 800c360:	789b      	ldrb	r3, [r3, #2]
 800c362:	461a      	mov	r2, r3
 800c364:	4b33      	ldr	r3, [pc, #204]	; (800c434 <ADC_Thread+0x128>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4313      	orrs	r3, r2
 800c36a:	4a32      	ldr	r2, [pc, #200]	; (800c434 <ADC_Thread+0x128>)
 800c36c:	6013      	str	r3, [r2, #0]
				if (read & 0x800000){
 800c36e:	4b31      	ldr	r3, [pc, #196]	; (800c434 <ADC_Thread+0x128>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d006      	beq.n	800c388 <ADC_Thread+0x7c>
					read |= 0xFF000000;
 800c37a:	4b2e      	ldr	r3, [pc, #184]	; (800c434 <ADC_Thread+0x128>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c382:	461a      	mov	r2, r3
 800c384:	4b2b      	ldr	r3, [pc, #172]	; (800c434 <ADC_Thread+0x128>)
 800c386:	601a      	str	r2, [r3, #0]

				}

				data = read;
 800c388:	4b2a      	ldr	r3, [pc, #168]	; (800c434 <ADC_Thread+0x128>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	ee07 3a90 	vmov	s15, r3
 800c390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c394:	4b28      	ldr	r3, [pc, #160]	; (800c438 <ADC_Thread+0x12c>)
 800c396:	edc3 7a00 	vstr	s15, [r3]
				data = data / 1670000;
 800c39a:	4b27      	ldr	r3, [pc, #156]	; (800c438 <ADC_Thread+0x12c>)
 800c39c:	ed93 7a00 	vldr	s14, [r3]
 800c3a0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c43c <ADC_Thread+0x130>
 800c3a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3a8:	4b23      	ldr	r3, [pc, #140]	; (800c438 <ADC_Thread+0x12c>)
 800c3aa:	edc3 7a00 	vstr	s15, [r3]
				ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 800c3ae:	4b24      	ldr	r3, [pc, #144]	; (800c440 <ADC_Thread+0x134>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a21      	ldr	r2, [pc, #132]	; (800c438 <ADC_Thread+0x12c>)
 800c3b4:	6812      	ldr	r2, [r2, #0]
 800c3b6:	4922      	ldr	r1, [pc, #136]	; (800c440 <ADC_Thread+0x134>)
 800c3b8:	3302      	adds	r3, #2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	601a      	str	r2, [r3, #0]
				ADS1256.data_index++;
 800c3c0:	4b1f      	ldr	r3, [pc, #124]	; (800c440 <ADC_Thread+0x134>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	4a1e      	ldr	r2, [pc, #120]	; (800c440 <ADC_Thread+0x134>)
 800c3c8:	6013      	str	r3, [r2, #0]
				if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 800c3ca:	4b1d      	ldr	r3, [pc, #116]	; (800c440 <ADC_Thread+0x134>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b1c      	ldr	r3, [pc, #112]	; (800c440 <ADC_Thread+0x134>)
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d11f      	bne.n	800c416 <ADC_Thread+0x10a>
				{

					/*TODO: send data to buffer*/
					BaseType_t xStatus;
					xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 800c3d6:	4b1b      	ldr	r3, [pc, #108]	; (800c444 <ADC_Thread+0x138>)
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2200      	movs	r2, #0
 800c3de:	491a      	ldr	r1, [pc, #104]	; (800c448 <ADC_Thread+0x13c>)
 800c3e0:	f007 fe20 	bl	8014024 <xQueueGenericSend>
 800c3e4:	60b8      	str	r0, [r7, #8]
					queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c3e6:	4b17      	ldr	r3, [pc, #92]	; (800c444 <ADC_Thread+0x138>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f008 f9a0 	bl	8014730 <uxQueueMessagesWaiting>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	4b16      	ldr	r3, [pc, #88]	; (800c44c <ADC_Thread+0x140>)
 800c3f4:	601a      	str	r2, [r3, #0]

					if(xStatus == pdPASS)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d104      	bne.n	800c406 <ADC_Thread+0xfa>
					{
						vTaskResume(FFT_TaskHandle);
 800c3fc:	4b14      	ldr	r3, [pc, #80]	; (800c450 <ADC_Thread+0x144>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f008 fd6f 	bl	8014ee4 <vTaskResume>
					};


				  	ADS1256.data_index = 0;
 800c406:	4b0e      	ldr	r3, [pc, #56]	; (800c440 <ADC_Thread+0x134>)
 800c408:	2200      	movs	r2, #0
 800c40a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800c40c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c410:	4810      	ldr	r0, [pc, #64]	; (800c454 <ADC_Thread+0x148>)
 800c412:	f003 f828 	bl	800f466 <HAL_GPIO_TogglePin>
				}

				TM_DelayMicros(8);
 800c416:	2008      	movs	r0, #8
 800c418:	f7ff faea 	bl	800b9f0 <TM_DelayMicros>
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c41c:	e77d      	b.n	800c31a <ADC_Thread+0xe>
 800c41e:	bf00      	nop
 800c420:	200084bc 	.word	0x200084bc
 800c424:	200187f0 	.word	0x200187f0
 800c428:	20000320 	.word	0x20000320
 800c42c:	20000000 	.word	0x20000000
 800c430:	2001878c 	.word	0x2001878c
 800c434:	20000318 	.word	0x20000318
 800c438:	2000c534 	.word	0x2000c534
 800c43c:	49cbdb80 	.word	0x49cbdb80
 800c440:	20004088 	.word	0x20004088
 800c444:	2000c530 	.word	0x2000c530
 800c448:	20000010 	.word	0x20000010
 800c44c:	200082ac 	.word	0x200082ac
 800c450:	200084b8 	.word	0x200084b8
 800c454:	40020c00 	.word	0x40020c00

0800c458 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT_Thread */
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	 	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c460:	4b68      	ldr	r3, [pc, #416]	; (800c604 <FFT_Thread+0x1ac>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4618      	mov	r0, r3
 800c466:	f008 f963 	bl	8014730 <uxQueueMessagesWaiting>
 800c46a:	4602      	mov	r2, r0
 800c46c:	4b66      	ldr	r3, [pc, #408]	; (800c608 <FFT_Thread+0x1b0>)
 800c46e:	601a      	str	r2, [r3, #0]
	 	  if(queueCount!=0){
 800c470:	4b65      	ldr	r3, [pc, #404]	; (800c608 <FFT_Thread+0x1b0>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 8291 	beq.w	800c99c <FFT_Thread+0x544>
	 			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 800c47a:	4b62      	ldr	r3, [pc, #392]	; (800c604 <FFT_Thread+0x1ac>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2264      	movs	r2, #100	; 0x64
 800c480:	4962      	ldr	r1, [pc, #392]	; (800c60c <FFT_Thread+0x1b4>)
 800c482:	4618      	mov	r0, r3
 800c484:	f007 ff62 	bl	801434c <xQueueReceive>
 800c488:	60f8      	str	r0, [r7, #12]
	 			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c48a:	4b5e      	ldr	r3, [pc, #376]	; (800c604 <FFT_Thread+0x1ac>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4618      	mov	r0, r3
 800c490:	f008 f94e 	bl	8014730 <uxQueueMessagesWaiting>
 800c494:	4602      	mov	r2, r0
 800c496:	4b5c      	ldr	r3, [pc, #368]	; (800c608 <FFT_Thread+0x1b0>)
 800c498:	601a      	str	r2, [r3, #0]

	 			HAL_IWDG_Refresh(&hiwdg);
 800c49a:	485d      	ldr	r0, [pc, #372]	; (800c610 <FFT_Thread+0x1b8>)
 800c49c:	f004 f956 	bl	801074c <HAL_IWDG_Refresh>
	 			for(uint32_t i = 0; i<dataLength; i++)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	617b      	str	r3, [r7, #20]
 800c4a4:	e022      	b.n	800c4ec <FFT_Thread+0x94>
	 			{
	 				//recivedata5 = *(dataRecive[0]+i);
	 				rawData[i]=*(dataRecive[0]+i);
 800c4a6:	4b59      	ldr	r3, [pc, #356]	; (800c60c <FFT_Thread+0x1b4>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4958      	ldr	r1, [pc, #352]	; (800c614 <FFT_Thread+0x1bc>)
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	440b      	add	r3, r1
 800c4ba:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2] = *(dataRecive[0]+i);
 800c4bc:	4b53      	ldr	r3, [pc, #332]	; (800c60c <FFT_Thread+0x1b4>)
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	441a      	add	r2, r3
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	6812      	ldr	r2, [r2, #0]
 800c4cc:	4952      	ldr	r1, [pc, #328]	; (800c618 <FFT_Thread+0x1c0>)
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	440b      	add	r3, r1
 800c4d2:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2+1] = 0;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	3301      	adds	r3, #1
 800c4da:	4a4f      	ldr	r2, [pc, #316]	; (800c618 <FFT_Thread+0x1c0>)
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	f04f 0200 	mov.w	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
	 			for(uint32_t i = 0; i<dataLength; i++)
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	4b4b      	ldr	r3, [pc, #300]	; (800c61c <FFT_Thread+0x1c4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d3d7      	bcc.n	800c4a6 <FFT_Thread+0x4e>
	 			}

	 			if(xStatus == pdPASS)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d1b1      	bne.n	800c460 <FFT_Thread+0x8>
	 			{

	 				/*TODO: Process the data through the CFFT/CIFFT module */
	 				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 800c4fc:	4b48      	ldr	r3, [pc, #288]	; (800c620 <FFT_Thread+0x1c8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	4b48      	ldr	r3, [pc, #288]	; (800c624 <FFT_Thread+0x1cc>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	b2db      	uxtb	r3, r3
 800c508:	4943      	ldr	r1, [pc, #268]	; (800c618 <FFT_Thread+0x1c0>)
 800c50a:	4847      	ldr	r0, [pc, #284]	; (800c628 <FFT_Thread+0x1d0>)
 800c50c:	f7fd fdb5 	bl	800a07a <arm_cfft_f32>

	 				/*TODO: Process the data through the Complex Magnitude Module for
	 				calculating the magnitude at each bin */
	 				arm_cmplx_mag_f32(FFTdata, testOutput, fftSize);
 800c510:	4b46      	ldr	r3, [pc, #280]	; (800c62c <FFT_Thread+0x1d4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	4946      	ldr	r1, [pc, #280]	; (800c630 <FFT_Thread+0x1d8>)
 800c518:	483f      	ldr	r0, [pc, #252]	; (800c618 <FFT_Thread+0x1c0>)
 800c51a:	f7fc f89b 	bl	8008654 <arm_cmplx_mag_f32>

	 				/*TODO: Calculates maxValue and returns corresponding BIN value */
	 				arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 800c51e:	4b43      	ldr	r3, [pc, #268]	; (800c62c <FFT_Thread+0x1d4>)
 800c520:	6819      	ldr	r1, [r3, #0]
 800c522:	4b44      	ldr	r3, [pc, #272]	; (800c634 <FFT_Thread+0x1dc>)
 800c524:	4a44      	ldr	r2, [pc, #272]	; (800c638 <FFT_Thread+0x1e0>)
 800c526:	4842      	ldr	r0, [pc, #264]	; (800c630 <FFT_Thread+0x1d8>)
 800c528:	f7fc f954 	bl	80087d4 <arm_max_f32>
	 				 * It kindly would be
	 				 *  testOutput[] = 2/N * testOutput[0:N/2]
	 				 *
	 				 * */

	 				maxValue = maxValue*2 / dataLength;
 800c52c:	4b42      	ldr	r3, [pc, #264]	; (800c638 <FFT_Thread+0x1e0>)
 800c52e:	edd3 7a00 	vldr	s15, [r3]
 800c532:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c536:	4b39      	ldr	r3, [pc, #228]	; (800c61c <FFT_Thread+0x1c4>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c546:	4b3c      	ldr	r3, [pc, #240]	; (800c638 <FFT_Thread+0x1e0>)
 800c548:	edc3 7a00 	vstr	s15, [r3]

	 				/*TODO: Remove DC component*/
	 				testOutput[1] = 0;
 800c54c:	4b38      	ldr	r3, [pc, #224]	; (800c630 <FFT_Thread+0x1d8>)
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	605a      	str	r2, [r3, #4]
	 				testOutput[2] = 0;
 800c554:	4b36      	ldr	r3, [pc, #216]	; (800c630 <FFT_Thread+0x1d8>)
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	609a      	str	r2, [r3, #8]
	 				testOutput[3] = 0;
 800c55c:	4b34      	ldr	r3, [pc, #208]	; (800c630 <FFT_Thread+0x1d8>)
 800c55e:	f04f 0200 	mov.w	r2, #0
 800c562:	60da      	str	r2, [r3, #12]
	 				testOutput[4] = 0;
 800c564:	4b32      	ldr	r3, [pc, #200]	; (800c630 <FFT_Thread+0x1d8>)
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	611a      	str	r2, [r3, #16]
	 				testOutput[5] = 0;
 800c56c:	4b30      	ldr	r3, [pc, #192]	; (800c630 <FFT_Thread+0x1d8>)
 800c56e:	f04f 0200 	mov.w	r2, #0
 800c572:	615a      	str	r2, [r3, #20]
	 				testOutput[6] = 0;
 800c574:	4b2e      	ldr	r3, [pc, #184]	; (800c630 <FFT_Thread+0x1d8>)
 800c576:	f04f 0200 	mov.w	r2, #0
 800c57a:	619a      	str	r2, [r3, #24]
	 				testOutput[7] = 0;
 800c57c:	4b2c      	ldr	r3, [pc, #176]	; (800c630 <FFT_Thread+0x1d8>)
 800c57e:	f04f 0200 	mov.w	r2, #0
 800c582:	61da      	str	r2, [r3, #28]
	 				testOutput[8] = 0;
 800c584:	4b2a      	ldr	r3, [pc, #168]	; (800c630 <FFT_Thread+0x1d8>)
 800c586:	f04f 0200 	mov.w	r2, #0
 800c58a:	621a      	str	r2, [r3, #32]
	 				testOutput[4088] = 0;
 800c58c:	4a28      	ldr	r2, [pc, #160]	; (800c630 <FFT_Thread+0x1d8>)
 800c58e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c592:	4413      	add	r3, r2
 800c594:	f04f 0200 	mov.w	r2, #0
 800c598:	601a      	str	r2, [r3, #0]
	 				testOutput[4089] = 0;
 800c59a:	4a25      	ldr	r2, [pc, #148]	; (800c630 <FFT_Thread+0x1d8>)
 800c59c:	f643 73e4 	movw	r3, #16356	; 0x3fe4
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f04f 0200 	mov.w	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]
	 				testOutput[4090] = 0;
 800c5a8:	4a21      	ldr	r2, [pc, #132]	; (800c630 <FFT_Thread+0x1d8>)
 800c5aa:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f04f 0200 	mov.w	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
	 				testOutput[4091] = 0;
 800c5b6:	4a1e      	ldr	r2, [pc, #120]	; (800c630 <FFT_Thread+0x1d8>)
 800c5b8:	f643 73ec 	movw	r3, #16364	; 0x3fec
 800c5bc:	4413      	add	r3, r2
 800c5be:	f04f 0200 	mov.w	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]
	 				testOutput[4092] = 0;
 800c5c4:	4a1a      	ldr	r2, [pc, #104]	; (800c630 <FFT_Thread+0x1d8>)
 800c5c6:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	601a      	str	r2, [r3, #0]
	 				testOutput[4093] = 0;
 800c5d2:	4a17      	ldr	r2, [pc, #92]	; (800c630 <FFT_Thread+0x1d8>)
 800c5d4:	f643 73f4 	movw	r3, #16372	; 0x3ff4
 800c5d8:	4413      	add	r3, r2
 800c5da:	f04f 0200 	mov.w	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]
	 				testOutput[4094] = 0;
 800c5e0:	4a13      	ldr	r2, [pc, #76]	; (800c630 <FFT_Thread+0x1d8>)
 800c5e2:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f04f 0200 	mov.w	r2, #0
 800c5ec:	601a      	str	r2, [r3, #0]
	 				testOutput[4095] = 0;
 800c5ee:	4a10      	ldr	r2, [pc, #64]	; (800c630 <FFT_Thread+0x1d8>)
 800c5f0:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f04f 0200 	mov.w	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]
	 					Calculate_FreqMax(testOutput,*((&freq_settingValue.freq1)+i), i);
	 				}
	 				 */

					/* focus broad band functionality */
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	613b      	str	r3, [r7, #16]
 800c600:	e02d      	b.n	800c65e <FFT_Thread+0x206>
 800c602:	bf00      	nop
 800c604:	2000c530 	.word	0x2000c530
 800c608:	200082ac 	.word	0x200082ac
 800c60c:	20018854 	.word	0x20018854
 800c610:	2000835c 	.word	0x2000835c
 800c614:	2000c538 	.word	0x2000c538
 800c618:	20010700 	.word	0x20010700
 800c61c:	20000334 	.word	0x20000334
 800c620:	20000324 	.word	0x20000324
 800c624:	2000000c 	.word	0x2000000c
 800c628:	08020710 	.word	0x08020710
 800c62c:	20000008 	.word	0x20000008
 800c630:	2000852c 	.word	0x2000852c
 800c634:	20000328 	.word	0x20000328
 800c638:	200084c0 	.word	0x200084c0
					{
						settingValue = (&freqSettingValueList.range1+i);
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	00db      	lsls	r3, r3, #3
 800c640:	4ab7      	ldr	r2, [pc, #732]	; (800c920 <FFT_Thread+0x4c8>)
 800c642:	4413      	add	r3, r2
 800c644:	4ab7      	ldr	r2, [pc, #732]	; (800c924 <FFT_Thread+0x4cc>)
 800c646:	6013      	str	r3, [r2, #0]
						Calculate_FreqMax(testOutput, settingValue, i);
 800c648:	4bb6      	ldr	r3, [pc, #728]	; (800c924 <FFT_Thread+0x4cc>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	b252      	sxtb	r2, r2
 800c650:	4619      	mov	r1, r3
 800c652:	48b5      	ldr	r0, [pc, #724]	; (800c928 <FFT_Thread+0x4d0>)
 800c654:	f7fe ff9c 	bl	800b590 <Calculate_FreqMax>
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	3301      	adds	r3, #1
 800c65c:	613b      	str	r3, [r7, #16]
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d9eb      	bls.n	800c63c <FFT_Thread+0x1e4>
					}
	 				/*TODO: Calculate math function*/
	 				statistic_value.Statistic_FreqOvall = Calculate_FreqOverAll(testOutput, dataLength);
 800c664:	4bb1      	ldr	r3, [pc, #708]	; (800c92c <FFT_Thread+0x4d4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4619      	mov	r1, r3
 800c66a:	48af      	ldr	r0, [pc, #700]	; (800c928 <FFT_Thread+0x4d0>)
 800c66c:	f7ff f820 	bl	800b6b0 <Calculate_FreqOverAll>
 800c670:	eef0 7a40 	vmov.f32	s15, s0
 800c674:	4bae      	ldr	r3, [pc, #696]	; (800c930 <FFT_Thread+0x4d8>)
 800c676:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	 				arm_max_f32(statisticDataSet, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 800c67a:	4bae      	ldr	r3, [pc, #696]	; (800c934 <FFT_Thread+0x4dc>)
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	4bab      	ldr	r3, [pc, #684]	; (800c92c <FFT_Thread+0x4d4>)
 800c680:	6819      	ldr	r1, [r3, #0]
 800c682:	4bad      	ldr	r3, [pc, #692]	; (800c938 <FFT_Thread+0x4e0>)
 800c684:	4aaa      	ldr	r2, [pc, #680]	; (800c930 <FFT_Thread+0x4d8>)
 800c686:	f7fc f8a5 	bl	80087d4 <arm_max_f32>
	 				arm_min_f32(statisticDataSet, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 800c68a:	4baa      	ldr	r3, [pc, #680]	; (800c934 <FFT_Thread+0x4dc>)
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	4ba7      	ldr	r3, [pc, #668]	; (800c92c <FFT_Thread+0x4d4>)
 800c690:	6819      	ldr	r1, [r3, #0]
 800c692:	4baa      	ldr	r3, [pc, #680]	; (800c93c <FFT_Thread+0x4e4>)
 800c694:	4aaa      	ldr	r2, [pc, #680]	; (800c940 <FFT_Thread+0x4e8>)
 800c696:	f7fc f9a2 	bl	80089de <arm_min_f32>
	 				arm_var_f32(statisticDataSet, dataLength, &statistic_value.Statistic_var);
 800c69a:	4ba6      	ldr	r3, [pc, #664]	; (800c934 <FFT_Thread+0x4dc>)
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	4ba3      	ldr	r3, [pc, #652]	; (800c92c <FFT_Thread+0x4d4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4aa8      	ldr	r2, [pc, #672]	; (800c944 <FFT_Thread+0x4ec>)
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	f7fc fbe1 	bl	8008e6c <arm_var_f32>
	 				arm_rms_f32(statisticDataSet, dataLength, &statistic_value.Statistic_rms);
 800c6aa:	4ba2      	ldr	r3, [pc, #648]	; (800c934 <FFT_Thread+0x4dc>)
 800c6ac:	6818      	ldr	r0, [r3, #0]
 800c6ae:	4b9f      	ldr	r3, [pc, #636]	; (800c92c <FFT_Thread+0x4d4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4aa5      	ldr	r2, [pc, #660]	; (800c948 <FFT_Thread+0x4f0>)
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f7fc fa4a 	bl	8008b4e <arm_rms_f32>
	 				arm_mean_f32(statisticDataSet, dataLength, &statistic_value.Statistic_mean);
 800c6ba:	4b9e      	ldr	r3, [pc, #632]	; (800c934 <FFT_Thread+0x4dc>)
 800c6bc:	6818      	ldr	r0, [r3, #0]
 800c6be:	4b9b      	ldr	r3, [pc, #620]	; (800c92c <FFT_Thread+0x4d4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4aa2      	ldr	r2, [pc, #648]	; (800c94c <FFT_Thread+0x4f4>)
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	f7fc f91b 	bl	8008900 <arm_mean_f32>
	 				arm_std_f32(statisticDataSet, dataLength, &statistic_value.Statistic_std);
 800c6ca:	4b9a      	ldr	r3, [pc, #616]	; (800c934 <FFT_Thread+0x4dc>)
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	4b97      	ldr	r3, [pc, #604]	; (800c92c <FFT_Thread+0x4d4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a9f      	ldr	r2, [pc, #636]	; (800c950 <FFT_Thread+0x4f8>)
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	f7fc fae1 	bl	8008c9c <arm_std_f32>
	 				statistic_value.Statistic_crestFactor = statistic_value.Statistic_max/statistic_value.Statistic_rms;
 800c6da:	4b95      	ldr	r3, [pc, #596]	; (800c930 <FFT_Thread+0x4d8>)
 800c6dc:	edd3 6a00 	vldr	s13, [r3]
 800c6e0:	4b93      	ldr	r3, [pc, #588]	; (800c930 <FFT_Thread+0x4d8>)
 800c6e2:	ed93 7a03 	vldr	s14, [r3, #12]
 800c6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ea:	4b91      	ldr	r3, [pc, #580]	; (800c930 <FFT_Thread+0x4d8>)
 800c6ec:	edc3 7a06 	vstr	s15, [r3, #24]
	 				/*TODO: Calculate skewness and kurtosis will cause delay*/
	 				//statistic_value.Statistic_kurtosis = Calculate_kurtosis(statisticDataSet, dataLength);
	 				//statistic_value.Statistic_skewness = Calculate_skewness(statisticDataSet, dataLength);

	 				/*TODO: to calculate 3 times moving average*/
	 				averageTimes++;
 800c6f0:	4b98      	ldr	r3, [pc, #608]	; (800c954 <FFT_Thread+0x4fc>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	4b96      	ldr	r3, [pc, #600]	; (800c954 <FFT_Thread+0x4fc>)
 800c6fa:	701a      	strb	r2, [r3, #0]
	 				if(averageTimes == 1)
 800c6fc:	4b95      	ldr	r3, [pc, #596]	; (800c954 <FFT_Thread+0x4fc>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d12b      	bne.n	800c75c <FFT_Thread+0x304>
	 				{
	 					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 800c704:	4b8a      	ldr	r3, [pc, #552]	; (800c930 <FFT_Thread+0x4d8>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a89      	ldr	r2, [pc, #548]	; (800c930 <FFT_Thread+0x4d8>)
 800c70a:	67d3      	str	r3, [r2, #124]	; 0x7c
	 					statistic_value.Statistic_min_Temp = statistic_value.Statistic_min;
 800c70c:	4b88      	ldr	r3, [pc, #544]	; (800c930 <FFT_Thread+0x4d8>)
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	4a87      	ldr	r2, [pc, #540]	; (800c930 <FFT_Thread+0x4d8>)
 800c712:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	 					statistic_value.Statistic_var_Temp = statistic_value.Statistic_var;
 800c716:	4b86      	ldr	r3, [pc, #536]	; (800c930 <FFT_Thread+0x4d8>)
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	4a85      	ldr	r2, [pc, #532]	; (800c930 <FFT_Thread+0x4d8>)
 800c71c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	 					statistic_value.Statistic_rms_Temp = statistic_value.Statistic_rms;
 800c720:	4b83      	ldr	r3, [pc, #524]	; (800c930 <FFT_Thread+0x4d8>)
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	4a82      	ldr	r2, [pc, #520]	; (800c930 <FFT_Thread+0x4d8>)
 800c726:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 					statistic_value.Statistic_mean_Temp = statistic_value.Statistic_mean;
 800c72a:	4b81      	ldr	r3, [pc, #516]	; (800c930 <FFT_Thread+0x4d8>)
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	4a80      	ldr	r2, [pc, #512]	; (800c930 <FFT_Thread+0x4d8>)
 800c730:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	 					statistic_value.Statistic_std_Temp = statistic_value.Statistic_std;
 800c734:	4b7e      	ldr	r3, [pc, #504]	; (800c930 <FFT_Thread+0x4d8>)
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	4a7d      	ldr	r2, [pc, #500]	; (800c930 <FFT_Thread+0x4d8>)
 800c73a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	 					statistic_value.Statistic_FreqOvall_Temp = statistic_value.Statistic_FreqOvall;
 800c73e:	4b7c      	ldr	r3, [pc, #496]	; (800c930 <FFT_Thread+0x4d8>)
 800c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c742:	4a7b      	ldr	r2, [pc, #492]	; (800c930 <FFT_Thread+0x4d8>)
 800c744:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	 					statistic_value.Statistic_crestFactor_Temp = statistic_value.Statistic_crestFactor;
 800c748:	4b79      	ldr	r3, [pc, #484]	; (800c930 <FFT_Thread+0x4d8>)
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	4a78      	ldr	r2, [pc, #480]	; (800c930 <FFT_Thread+0x4d8>)
 800c74e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	 					statistic_value.Statistic_SpeedOvall_Temp = statistic_value.Statistic_SpeedOvall;
 800c752:	4b77      	ldr	r3, [pc, #476]	; (800c930 <FFT_Thread+0x4d8>)
 800c754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c756:	4a76      	ldr	r2, [pc, #472]	; (800c930 <FFT_Thread+0x4d8>)
 800c758:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	 				}
	 				if(averageTimes == 2)
 800c75c:	4b7d      	ldr	r3, [pc, #500]	; (800c954 <FFT_Thread+0x4fc>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d162      	bne.n	800c82a <FFT_Thread+0x3d2>
	 				{
	 					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 800c764:	4b72      	ldr	r3, [pc, #456]	; (800c930 <FFT_Thread+0x4d8>)
 800c766:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800c76a:	4b71      	ldr	r3, [pc, #452]	; (800c930 <FFT_Thread+0x4d8>)
 800c76c:	edd3 7a00 	vldr	s15, [r3]
 800c770:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c774:	4b6e      	ldr	r3, [pc, #440]	; (800c930 <FFT_Thread+0x4d8>)
 800c776:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	 					statistic_value.Statistic_min_Temp += statistic_value.Statistic_min;
 800c77a:	4b6d      	ldr	r3, [pc, #436]	; (800c930 <FFT_Thread+0x4d8>)
 800c77c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800c780:	4b6b      	ldr	r3, [pc, #428]	; (800c930 <FFT_Thread+0x4d8>)
 800c782:	edd3 7a01 	vldr	s15, [r3, #4]
 800c786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c78a:	4b69      	ldr	r3, [pc, #420]	; (800c930 <FFT_Thread+0x4d8>)
 800c78c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	 					statistic_value.Statistic_var_Temp += statistic_value.Statistic_var;
 800c790:	4b67      	ldr	r3, [pc, #412]	; (800c930 <FFT_Thread+0x4d8>)
 800c792:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800c796:	4b66      	ldr	r3, [pc, #408]	; (800c930 <FFT_Thread+0x4d8>)
 800c798:	edd3 7a02 	vldr	s15, [r3, #8]
 800c79c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7a0:	4b63      	ldr	r3, [pc, #396]	; (800c930 <FFT_Thread+0x4d8>)
 800c7a2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	 					statistic_value.Statistic_rms_Temp += statistic_value.Statistic_rms;
 800c7a6:	4b62      	ldr	r3, [pc, #392]	; (800c930 <FFT_Thread+0x4d8>)
 800c7a8:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800c7ac:	4b60      	ldr	r3, [pc, #384]	; (800c930 <FFT_Thread+0x4d8>)
 800c7ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7b6:	4b5e      	ldr	r3, [pc, #376]	; (800c930 <FFT_Thread+0x4d8>)
 800c7b8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	 					statistic_value.Statistic_mean_Temp += statistic_value.Statistic_mean;
 800c7bc:	4b5c      	ldr	r3, [pc, #368]	; (800c930 <FFT_Thread+0x4d8>)
 800c7be:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800c7c2:	4b5b      	ldr	r3, [pc, #364]	; (800c930 <FFT_Thread+0x4d8>)
 800c7c4:	edd3 7a04 	vldr	s15, [r3, #16]
 800c7c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7cc:	4b58      	ldr	r3, [pc, #352]	; (800c930 <FFT_Thread+0x4d8>)
 800c7ce:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	 					statistic_value.Statistic_std_Temp += statistic_value.Statistic_std;
 800c7d2:	4b57      	ldr	r3, [pc, #348]	; (800c930 <FFT_Thread+0x4d8>)
 800c7d4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c7d8:	4b55      	ldr	r3, [pc, #340]	; (800c930 <FFT_Thread+0x4d8>)
 800c7da:	edd3 7a05 	vldr	s15, [r3, #20]
 800c7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7e2:	4b53      	ldr	r3, [pc, #332]	; (800c930 <FFT_Thread+0x4d8>)
 800c7e4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	 					statistic_value.Statistic_FreqOvall_Temp += statistic_value.Statistic_FreqOvall;
 800c7e8:	4b51      	ldr	r3, [pc, #324]	; (800c930 <FFT_Thread+0x4d8>)
 800c7ea:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c7ee:	4b50      	ldr	r3, [pc, #320]	; (800c930 <FFT_Thread+0x4d8>)
 800c7f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7f8:	4b4d      	ldr	r3, [pc, #308]	; (800c930 <FFT_Thread+0x4d8>)
 800c7fa:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	 					statistic_value.Statistic_crestFactor_Temp += statistic_value.Statistic_crestFactor;
 800c7fe:	4b4c      	ldr	r3, [pc, #304]	; (800c930 <FFT_Thread+0x4d8>)
 800c800:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c804:	4b4a      	ldr	r3, [pc, #296]	; (800c930 <FFT_Thread+0x4d8>)
 800c806:	edd3 7a06 	vldr	s15, [r3, #24]
 800c80a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c80e:	4b48      	ldr	r3, [pc, #288]	; (800c930 <FFT_Thread+0x4d8>)
 800c810:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	 					statistic_value.Statistic_SpeedOvall_Temp += statistic_value.Statistic_SpeedOvall;
 800c814:	4b46      	ldr	r3, [pc, #280]	; (800c930 <FFT_Thread+0x4d8>)
 800c816:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800c81a:	4b45      	ldr	r3, [pc, #276]	; (800c930 <FFT_Thread+0x4d8>)
 800c81c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c824:	4b42      	ldr	r3, [pc, #264]	; (800c930 <FFT_Thread+0x4d8>)
 800c826:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	 				}
	 				if(averageTimes == 3)
 800c82a:	4b4a      	ldr	r3, [pc, #296]	; (800c954 <FFT_Thread+0x4fc>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b03      	cmp	r3, #3
 800c830:	f040 80ae 	bne.w	800c990 <FFT_Thread+0x538>
	 				{
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c834:	4b3e      	ldr	r3, [pc, #248]	; (800c930 <FFT_Thread+0x4d8>)
 800c836:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
	 							statistic_value.Statistic_max) / 3;
 800c83a:	4b3d      	ldr	r3, [pc, #244]	; (800c930 <FFT_Thread+0x4d8>)
 800c83c:	edd3 7a00 	vldr	s15, [r3]
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c840:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_max) / 3;
 800c844:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c848:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c84c:	4b38      	ldr	r3, [pc, #224]	; (800c930 <FFT_Thread+0x4d8>)
 800c84e:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c852:	4b37      	ldr	r3, [pc, #220]	; (800c930 <FFT_Thread+0x4d8>)
 800c854:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
	 							statistic_value.Statistic_min) / 3;
 800c858:	4b35      	ldr	r3, [pc, #212]	; (800c930 <FFT_Thread+0x4d8>)
 800c85a:	edd3 7a01 	vldr	s15, [r3, #4]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c85e:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_min) / 3;
 800c862:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c866:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c86a:	4b31      	ldr	r3, [pc, #196]	; (800c930 <FFT_Thread+0x4d8>)
 800c86c:	edc3 7a01 	vstr	s15, [r3, #4]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c870:	4b2f      	ldr	r3, [pc, #188]	; (800c930 <FFT_Thread+0x4d8>)
 800c872:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
	 							statistic_value.Statistic_var) / 3;
 800c876:	4b2e      	ldr	r3, [pc, #184]	; (800c930 <FFT_Thread+0x4d8>)
 800c878:	edd3 7a02 	vldr	s15, [r3, #8]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c87c:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_var) / 3;
 800c880:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c884:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c888:	4b29      	ldr	r3, [pc, #164]	; (800c930 <FFT_Thread+0x4d8>)
 800c88a:	edc3 7a02 	vstr	s15, [r3, #8]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c88e:	4b28      	ldr	r3, [pc, #160]	; (800c930 <FFT_Thread+0x4d8>)
 800c890:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
	 							statistic_value.Statistic_rms) / 3;
 800c894:	4b26      	ldr	r3, [pc, #152]	; (800c930 <FFT_Thread+0x4d8>)
 800c896:	edd3 7a03 	vldr	s15, [r3, #12]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c89a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_rms) / 3;
 800c89e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c8a6:	4b22      	ldr	r3, [pc, #136]	; (800c930 <FFT_Thread+0x4d8>)
 800c8a8:	edc3 7a03 	vstr	s15, [r3, #12]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c8ac:	4b20      	ldr	r3, [pc, #128]	; (800c930 <FFT_Thread+0x4d8>)
 800c8ae:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
	 							statistic_value.Statistic_mean) / 3;
 800c8b2:	4b1f      	ldr	r3, [pc, #124]	; (800c930 <FFT_Thread+0x4d8>)
 800c8b4:	edd3 7a04 	vldr	s15, [r3, #16]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c8b8:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_mean) / 3;
 800c8bc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c8c4:	4b1a      	ldr	r3, [pc, #104]	; (800c930 <FFT_Thread+0x4d8>)
 800c8c6:	edc3 7a04 	vstr	s15, [r3, #16]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c8ca:	4b19      	ldr	r3, [pc, #100]	; (800c930 <FFT_Thread+0x4d8>)
 800c8cc:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
	 							statistic_value.Statistic_std) / 3;
 800c8d0:	4b17      	ldr	r3, [pc, #92]	; (800c930 <FFT_Thread+0x4d8>)
 800c8d2:	edd3 7a05 	vldr	s15, [r3, #20]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c8d6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_std) / 3;
 800c8da:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8de:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c8e2:	4b13      	ldr	r3, [pc, #76]	; (800c930 <FFT_Thread+0x4d8>)
 800c8e4:	edc3 7a05 	vstr	s15, [r3, #20]
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c8e8:	4b11      	ldr	r3, [pc, #68]	; (800c930 <FFT_Thread+0x4d8>)
 800c8ea:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
	 							statistic_value.Statistic_FreqOvall) / 3;
 800c8ee:	4b10      	ldr	r3, [pc, #64]	; (800c930 <FFT_Thread+0x4d8>)
 800c8f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c8f4:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_FreqOvall) / 3;
 800c8f8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c900:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <FFT_Thread+0x4d8>)
 800c902:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c906:	4b0a      	ldr	r3, [pc, #40]	; (800c930 <FFT_Thread+0x4d8>)
 800c908:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
	 							statistic_value.Statistic_crestFactor) / 3;
 800c90c:	4b08      	ldr	r3, [pc, #32]	; (800c930 <FFT_Thread+0x4d8>)
 800c90e:	edd3 7a06 	vldr	s15, [r3, #24]
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c912:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_crestFactor) / 3;
 800c916:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c91a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c91e:	e01b      	b.n	800c958 <FFT_Thread+0x500>
 800c920:	200080cc 	.word	0x200080cc
 800c924:	20000338 	.word	0x20000338
 800c928:	2000852c 	.word	0x2000852c
 800c92c:	20000334 	.word	0x20000334
 800c930:	200080e4 	.word	0x200080e4
 800c934:	200081a0 	.word	0x200081a0
 800c938:	2000032c 	.word	0x2000032c
 800c93c:	20000330 	.word	0x20000330
 800c940:	200080e8 	.word	0x200080e8
 800c944:	200080ec 	.word	0x200080ec
 800c948:	200080f0 	.word	0x200080f0
 800c94c:	200080f4 	.word	0x200080f4
 800c950:	200080f8 	.word	0x200080f8
 800c954:	2000031c 	.word	0x2000031c
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c958:	4b12      	ldr	r3, [pc, #72]	; (800c9a4 <FFT_Thread+0x54c>)
 800c95a:	edc3 7a06 	vstr	s15, [r3, #24]
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800c95e:	4b11      	ldr	r3, [pc, #68]	; (800c9a4 <FFT_Thread+0x54c>)
 800c960:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800c964:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <FFT_Thread+0x54c>)
 800c966:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800c96a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800c96e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c972:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800c976:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <FFT_Thread+0x54c>)
 800c978:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28



	 					USARTBLE.sendflag = 1;
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <FFT_Thread+0x550>)
 800c97e:	2201      	movs	r2, #1
 800c980:	701a      	strb	r2, [r3, #0]
	 					averageTimes = 0;
 800c982:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <FFT_Thread+0x554>)
 800c984:	2200      	movs	r2, #0
 800c986:	701a      	strb	r2, [r3, #0]

	 					/*TODO: BLE send data*/
	 					BLE_USART(&huart6, &statistic_value);
 800c988:	4906      	ldr	r1, [pc, #24]	; (800c9a4 <FFT_Thread+0x54c>)
 800c98a:	4809      	ldr	r0, [pc, #36]	; (800c9b0 <FFT_Thread+0x558>)
 800c98c:	f7fe fd4c 	bl	800b428 <BLE_USART>

	 				//snprintf_(bb,20, "%.3f Pa", statistic_value.Statistic_max);



	 				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800c990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c994:	4807      	ldr	r0, [pc, #28]	; (800c9b4 <FFT_Thread+0x55c>)
 800c996:	f002 fd66 	bl	800f466 <HAL_GPIO_TogglePin>
 800c99a:	e561      	b.n	800c460 <FFT_Thread+0x8>
	 			}
	 */
	 	  }

	 	  else{
	 		 vTaskSuspend(NULL);
 800c99c:	2000      	movs	r0, #0
 800c99e:	f008 f9db 	bl	8014d58 <vTaskSuspend>
  {
 800c9a2:	e55d      	b.n	800c460 <FFT_Thread+0x8>
 800c9a4:	200080e4 	.word	0x200080e4
 800c9a8:	20010540 	.word	0x20010540
 800c9ac:	2000031c 	.word	0x2000031c
 800c9b0:	20018700 	.word	0x20018700
 800c9b4:	40020c00 	.word	0x40020c00

0800c9b8 <LED_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread */
void LED_Thread(void const * argument)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Thread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	f007 f8c2 	bl	8013b4a <osDelay>
 800c9c6:	e7fb      	b.n	800c9c0 <LED_Thread+0x8>

0800c9c8 <I2C_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_I2C_Thread */
void I2C_Thread(void const * argument)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C_Thread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f007 f8ba 	bl	8013b4a <osDelay>
 800c9d6:	e7fb      	b.n	800c9d0 <I2C_Thread+0x8>

0800c9d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c9dc:	bf00      	nop
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b085      	sub	sp, #20
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
 800c9f0:	603b      	str	r3, [r7, #0]
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d204      	bcs.n	800ca08 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4413      	add	r3, r2
 800ca04:	7bfa      	ldrb	r2, [r7, #15]
 800ca06:	701a      	strb	r2, [r3, #0]
  }
}
 800ca08:	bf00      	nop
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60b9      	str	r1, [r7, #8]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800ca24:	bf00      	nop
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e002      	b.n	800ca46 <_strnlen_s+0x16>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <_strnlen_s+0x28>
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	1e5a      	subs	r2, r3, #1
 800ca52:	603a      	str	r2, [r7, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1f3      	bne.n	800ca40 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	1ad3      	subs	r3, r2, r3
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3714      	adds	r7, #20
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	4603      	mov	r3, r0
 800ca72:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	2b2f      	cmp	r3, #47	; 0x2f
 800ca78:	d904      	bls.n	800ca84 <_is_digit+0x1a>
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	2b39      	cmp	r3, #57	; 0x39
 800ca7e:	d801      	bhi.n	800ca84 <_is_digit+0x1a>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e000      	b.n	800ca86 <_is_digit+0x1c>
 800ca84:	2300      	movs	r3, #0
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	b2db      	uxtb	r3, r3
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800caa0:	2300      	movs	r3, #0
 800caa2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800caa4:	e00e      	b.n	800cac4 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	4613      	mov	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	4618      	mov	r0, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	1c59      	adds	r1, r3, #1
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	6011      	str	r1, [r2, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	4403      	add	r3, r0
 800cac0:	3b30      	subs	r3, #48	; 0x30
 800cac2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7ff ffcd 	bl	800ca6a <_is_digit>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1e7      	bne.n	800caa6 <_atoi+0xe>
  }
  return i;
 800cad6:	68fb      	ldr	r3, [r7, #12]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800cae0:	b590      	push	{r4, r7, lr}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800caf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf4:	f003 0302 	and.w	r3, r3, #2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d125      	bne.n	800cb48 <_out_rev+0x68>
 800cafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d120      	bne.n	800cb48 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e00a      	b.n	800cb22 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	1c53      	adds	r3, r2, #1
 800cb10:	607b      	str	r3, [r7, #4]
 800cb12:	68fc      	ldr	r4, [r7, #12]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	2020      	movs	r0, #32
 800cb1a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	617b      	str	r3, [r7, #20]
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d3f0      	bcc.n	800cb0c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800cb2a:	e00d      	b.n	800cb48 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	4413      	add	r3, r2
 800cb38:	7818      	ldrb	r0, [r3, #0]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	1c53      	adds	r3, r2, #1
 800cb3e:	607b      	str	r3, [r7, #4]
 800cb40:	68fc      	ldr	r4, [r7, #12]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	68b9      	ldr	r1, [r7, #8]
 800cb46:	47a0      	blx	r4
  while (len) {
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1ee      	bne.n	800cb2c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800cb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb50:	f003 0302 	and.w	r3, r3, #2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00e      	beq.n	800cb76 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800cb58:	e007      	b.n	800cb6a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	1c53      	adds	r3, r2, #1
 800cb5e:	607b      	str	r3, [r7, #4]
 800cb60:	68fc      	ldr	r4, [r7, #12]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	2020      	movs	r0, #32
 800cb68:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8f1      	bhi.n	800cb5a <_out_rev+0x7a>
    }
  }

  return idx;
 800cb76:	687b      	ldr	r3, [r7, #4]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	371c      	adds	r7, #28
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd90      	pop	{r4, r7, pc}

0800cb80 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af04      	add	r7, sp, #16
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	f003 0302 	and.w	r3, r3, #2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d136      	bne.n	800cc06 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d018      	beq.n	800cbd0 <_ntoa_format+0x50>
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d013      	beq.n	800cbd0 <_ntoa_format+0x50>
 800cba8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <_ntoa_format+0x3a>
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	f003 030c 	and.w	r3, r3, #12
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00a      	beq.n	800cbd0 <_ntoa_format+0x50>
      width--;
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cbc0:	e006      	b.n	800cbd0 <_ntoa_format+0x50>
      buf[len++] = '0';
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	1c5a      	adds	r2, r3, #1
 800cbc6:	61fa      	str	r2, [r7, #28]
 800cbc8:	69ba      	ldr	r2, [r7, #24]
 800cbca:	4413      	add	r3, r2
 800cbcc:	2230      	movs	r2, #48	; 0x30
 800cbce:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cbd0:	69fa      	ldr	r2, [r7, #28]
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d20a      	bcs.n	800cbee <_ntoa_format+0x6e>
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	2b1f      	cmp	r3, #31
 800cbdc:	d9f1      	bls.n	800cbc2 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cbde:	e006      	b.n	800cbee <_ntoa_format+0x6e>
      buf[len++] = '0';
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	61fa      	str	r2, [r7, #28]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	4413      	add	r3, r2
 800cbea:	2230      	movs	r2, #48	; 0x30
 800cbec:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d006      	beq.n	800cc06 <_ntoa_format+0x86>
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d202      	bcs.n	800cc06 <_ntoa_format+0x86>
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	2b1f      	cmp	r3, #31
 800cc04:	d9ec      	bls.n	800cbe0 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	f003 0310 	and.w	r3, r3, #16
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d058      	beq.n	800ccc2 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d116      	bne.n	800cc48 <_ntoa_format+0xc8>
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <_ntoa_format+0xc8>
 800cc20:	69fa      	ldr	r2, [r7, #28]
 800cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d003      	beq.n	800cc30 <_ntoa_format+0xb0>
 800cc28:	69fa      	ldr	r2, [r7, #28]
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d10b      	bne.n	800cc48 <_ntoa_format+0xc8>
      len--;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <_ntoa_format+0xc8>
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	2b10      	cmp	r3, #16
 800cc40:	d102      	bne.n	800cc48 <_ntoa_format+0xc8>
        len--;
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	2b10      	cmp	r3, #16
 800cc4c:	d10f      	bne.n	800cc6e <_ntoa_format+0xee>
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	f003 0320 	and.w	r3, r3, #32
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <_ntoa_format+0xee>
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	2b1f      	cmp	r3, #31
 800cc5c:	d807      	bhi.n	800cc6e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	61fa      	str	r2, [r7, #28]
 800cc64:	69ba      	ldr	r2, [r7, #24]
 800cc66:	4413      	add	r3, r2
 800cc68:	2278      	movs	r2, #120	; 0x78
 800cc6a:	701a      	strb	r2, [r3, #0]
 800cc6c:	e01f      	b.n	800ccae <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	2b10      	cmp	r3, #16
 800cc72:	d10f      	bne.n	800cc94 <_ntoa_format+0x114>
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	f003 0320 	and.w	r3, r3, #32
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00a      	beq.n	800cc94 <_ntoa_format+0x114>
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	2b1f      	cmp	r3, #31
 800cc82:	d807      	bhi.n	800cc94 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	61fa      	str	r2, [r7, #28]
 800cc8a:	69ba      	ldr	r2, [r7, #24]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	2258      	movs	r2, #88	; 0x58
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	e00c      	b.n	800ccae <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d109      	bne.n	800ccae <_ntoa_format+0x12e>
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2b1f      	cmp	r3, #31
 800cc9e:	d806      	bhi.n	800ccae <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	61fa      	str	r2, [r7, #28]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	4413      	add	r3, r2
 800ccaa:	2262      	movs	r2, #98	; 0x62
 800ccac:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	2b1f      	cmp	r3, #31
 800ccb2:	d806      	bhi.n	800ccc2 <_ntoa_format+0x142>
      buf[len++] = '0';
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	1c5a      	adds	r2, r3, #1
 800ccb8:	61fa      	str	r2, [r7, #28]
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	2230      	movs	r2, #48	; 0x30
 800ccc0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	2b1f      	cmp	r3, #31
 800ccc6:	d824      	bhi.n	800cd12 <_ntoa_format+0x192>
    if (negative) {
 800ccc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d007      	beq.n	800cce0 <_ntoa_format+0x160>
      buf[len++] = '-';
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	61fa      	str	r2, [r7, #28]
 800ccd6:	69ba      	ldr	r2, [r7, #24]
 800ccd8:	4413      	add	r3, r2
 800ccda:	222d      	movs	r2, #45	; 0x2d
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	e018      	b.n	800cd12 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	f003 0304 	and.w	r3, r3, #4
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d007      	beq.n	800ccfa <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	61fa      	str	r2, [r7, #28]
 800ccf0:	69ba      	ldr	r2, [r7, #24]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	222b      	movs	r2, #43	; 0x2b
 800ccf6:	701a      	strb	r2, [r3, #0]
 800ccf8:	e00b      	b.n	800cd12 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	f003 0308 	and.w	r3, r3, #8
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d006      	beq.n	800cd12 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	61fa      	str	r2, [r7, #28]
 800cd0a:	69ba      	ldr	r2, [r7, #24]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	2220      	movs	r2, #32
 800cd10:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	9303      	str	r3, [sp, #12]
 800cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd18:	9302      	str	r3, [sp, #8]
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	68b9      	ldr	r1, [r7, #8]
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f7ff fed9 	bl	800cae0 <_out_rev>
 800cd2e:	4603      	mov	r3, r0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b096      	sub	sp, #88	; 0x58
 800cd3c:	af08      	add	r7, sp, #32
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
 800cd44:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800cd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d103      	bne.n	800cd58 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800cd50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd52:	f023 0310 	bic.w	r3, r3, #16
 800cd56:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800cd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <_ntoa_long+0x30>
 800cd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d033      	beq.n	800cdd0 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800cd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd6c:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd72:	fb01 f202 	mul.w	r2, r1, r2
 800cd76:	1a9b      	subs	r3, r3, r2
 800cd78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800cd7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd80:	2b09      	cmp	r3, #9
 800cd82:	d804      	bhi.n	800cd8e <_ntoa_long+0x56>
 800cd84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd88:	3330      	adds	r3, #48	; 0x30
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	e00d      	b.n	800cdaa <_ntoa_long+0x72>
 800cd8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd90:	f003 0320 	and.w	r3, r3, #32
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <_ntoa_long+0x64>
 800cd98:	2241      	movs	r2, #65	; 0x41
 800cd9a:	e000      	b.n	800cd9e <_ntoa_long+0x66>
 800cd9c:	2261      	movs	r2, #97	; 0x61
 800cd9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cda2:	4413      	add	r3, r2
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	3b0a      	subs	r3, #10
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdac:	1c59      	adds	r1, r3, #1
 800cdae:	6379      	str	r1, [r7, #52]	; 0x34
 800cdb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800cdb4:	440b      	add	r3, r1
 800cdb6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800cdba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800cdc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <_ntoa_long+0x98>
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	2b1f      	cmp	r3, #31
 800cdce:	d9cb      	bls.n	800cd68 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800cdd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdd2:	9306      	str	r3, [sp, #24]
 800cdd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd6:	9305      	str	r3, [sp, #20]
 800cdd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdda:	9304      	str	r3, [sp, #16]
 800cddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cde4:	9302      	str	r3, [sp, #8]
 800cde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde8:	9301      	str	r3, [sp, #4]
 800cdea:	f107 0310 	add.w	r3, r7, #16
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	68b9      	ldr	r1, [r7, #8]
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff fec2 	bl	800cb80 <_ntoa_format>
 800cdfc:	4603      	mov	r3, r0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3738      	adds	r7, #56	; 0x38
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ce06:	b590      	push	{r4, r7, lr}
 800ce08:	b097      	sub	sp, #92	; 0x5c
 800ce0a:	af08      	add	r7, sp, #32
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	607a      	str	r2, [r7, #4]
 800ce12:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ce14:	2300      	movs	r3, #0
 800ce16:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ce18:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ce1c:	4323      	orrs	r3, r4
 800ce1e:	d103      	bne.n	800ce28 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800ce20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce22:	f023 0310 	bic.w	r3, r3, #16
 800ce26:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ce28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <_ntoa_long_long+0x34>
 800ce32:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ce36:	4323      	orrs	r3, r4
 800ce38:	d039      	beq.n	800ceae <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800ce3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ce3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce42:	f7fb fa65 	bl	8008310 <__aeabi_uldivmod>
 800ce46:	461c      	mov	r4, r3
 800ce48:	4613      	mov	r3, r2
 800ce4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ce4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce52:	2b09      	cmp	r3, #9
 800ce54:	d804      	bhi.n	800ce60 <_ntoa_long_long+0x5a>
 800ce56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce5a:	3330      	adds	r3, #48	; 0x30
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	e00d      	b.n	800ce7c <_ntoa_long_long+0x76>
 800ce60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <_ntoa_long_long+0x68>
 800ce6a:	2241      	movs	r2, #65	; 0x41
 800ce6c:	e000      	b.n	800ce70 <_ntoa_long_long+0x6a>
 800ce6e:	2261      	movs	r2, #97	; 0x61
 800ce70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce74:	4413      	add	r3, r2
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	3b0a      	subs	r3, #10
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	1c59      	adds	r1, r3, #1
 800ce80:	6379      	str	r1, [r7, #52]	; 0x34
 800ce82:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ce86:	440b      	add	r3, r1
 800ce88:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ce8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce90:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ce94:	f7fb fa3c 	bl	8008310 <__aeabi_uldivmod>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800cea0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800cea4:	4323      	orrs	r3, r4
 800cea6:	d002      	beq.n	800ceae <_ntoa_long_long+0xa8>
 800cea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceaa:	2b1f      	cmp	r3, #31
 800ceac:	d9c5      	bls.n	800ce3a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ceae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ceb2:	9206      	str	r2, [sp, #24]
 800ceb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ceb6:	9205      	str	r2, [sp, #20]
 800ceb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceba:	9204      	str	r2, [sp, #16]
 800cebc:	9303      	str	r3, [sp, #12]
 800cebe:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800cec2:	9302      	str	r3, [sp, #8]
 800cec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	f107 0310 	add.w	r3, r7, #16
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7ff fe53 	bl	800cb80 <_ntoa_format>
 800ceda:	4603      	mov	r3, r0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	373c      	adds	r7, #60	; 0x3c
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd90      	pop	{r4, r7, pc}
 800cee4:	0000      	movs	r0, r0
	...

0800cee8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cee8:	b590      	push	{r4, r7, lr}
 800ceea:	b09d      	sub	sp, #116	; 0x74
 800ceec:	af04      	add	r7, sp, #16
 800ceee:	6178      	str	r0, [r7, #20]
 800cef0:	6139      	str	r1, [r7, #16]
 800cef2:	60fa      	str	r2, [r7, #12]
 800cef4:	60bb      	str	r3, [r7, #8]
 800cef6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800cefa:	2300      	movs	r3, #0
 800cefc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	f04f 0400 	mov.w	r4, #0
 800cf06:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800cf0a:	ed97 6b00 	vldr	d6, [r7]
 800cf0e:	ed97 7b00 	vldr	d7, [r7]
 800cf12:	eeb4 6b47 	vcmp.f64	d6, d7
 800cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1a:	d00f      	beq.n	800cf3c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800cf1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf1e:	9303      	str	r3, [sp, #12]
 800cf20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf22:	9302      	str	r3, [sp, #8]
 800cf24:	2303      	movs	r3, #3
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	4bb7      	ldr	r3, [pc, #732]	; (800d208 <_ftoa+0x320>)
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	6939      	ldr	r1, [r7, #16]
 800cf32:	6978      	ldr	r0, [r7, #20]
 800cf34:	f7ff fdd4 	bl	800cae0 <_out_rev>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	e21e      	b.n	800d37a <_ftoa+0x492>
  if (value < -DBL_MAX)
 800cf3c:	ed97 7b00 	vldr	d7, [r7]
 800cf40:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800d1e0 <_ftoa+0x2f8>
 800cf44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4c:	d50f      	bpl.n	800cf6e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800cf4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf50:	9303      	str	r3, [sp, #12]
 800cf52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf54:	9302      	str	r3, [sp, #8]
 800cf56:	2304      	movs	r3, #4
 800cf58:	9301      	str	r3, [sp, #4]
 800cf5a:	4bac      	ldr	r3, [pc, #688]	; (800d20c <_ftoa+0x324>)
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	6939      	ldr	r1, [r7, #16]
 800cf64:	6978      	ldr	r0, [r7, #20]
 800cf66:	f7ff fdbb 	bl	800cae0 <_out_rev>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	e205      	b.n	800d37a <_ftoa+0x492>
  if (value > DBL_MAX)
 800cf6e:	ed97 7b00 	vldr	d7, [r7]
 800cf72:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800d1e8 <_ftoa+0x300>
 800cf76:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	dd1d      	ble.n	800cfbc <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800cf80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf82:	f003 0304 	and.w	r3, r3, #4
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <_ftoa+0xa6>
 800cf8a:	4ba1      	ldr	r3, [pc, #644]	; (800d210 <_ftoa+0x328>)
 800cf8c:	e000      	b.n	800cf90 <_ftoa+0xa8>
 800cf8e:	4ba1      	ldr	r3, [pc, #644]	; (800d214 <_ftoa+0x32c>)
 800cf90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf92:	f002 0204 	and.w	r2, r2, #4
 800cf96:	2a00      	cmp	r2, #0
 800cf98:	d001      	beq.n	800cf9e <_ftoa+0xb6>
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	e000      	b.n	800cfa0 <_ftoa+0xb8>
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cfa2:	9103      	str	r1, [sp, #12]
 800cfa4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cfa6:	9102      	str	r1, [sp, #8]
 800cfa8:	9201      	str	r2, [sp, #4]
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	6939      	ldr	r1, [r7, #16]
 800cfb2:	6978      	ldr	r0, [r7, #20]
 800cfb4:	f7ff fd94 	bl	800cae0 <_out_rev>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	e1de      	b.n	800d37a <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800cfbc:	ed97 7b00 	vldr	d7, [r7]
 800cfc0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800d1f0 <_ftoa+0x308>
 800cfc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	dc08      	bgt.n	800cfe0 <_ftoa+0xf8>
 800cfce:	ed97 7b00 	vldr	d7, [r7]
 800cfd2:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800d1f8 <_ftoa+0x310>
 800cfd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfde:	d50f      	bpl.n	800d000 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800cfe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfe2:	9302      	str	r3, [sp, #8]
 800cfe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	ed97 0b00 	vldr	d0, [r7]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	6939      	ldr	r1, [r7, #16]
 800cff6:	6978      	ldr	r0, [r7, #20]
 800cff8:	f000 f9c6 	bl	800d388 <_etoa>
 800cffc:	4603      	mov	r3, r0
 800cffe:	e1bc      	b.n	800d37a <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800d000:	2300      	movs	r3, #0
 800d002:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800d006:	ed97 7b00 	vldr	d7, [r7]
 800d00a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d012:	d50a      	bpl.n	800d02a <_ftoa+0x142>
    negative = true;
 800d014:	2301      	movs	r3, #1
 800d016:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800d01a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d200 <_ftoa+0x318>
 800d01e:	ed97 7b00 	vldr	d7, [r7]
 800d022:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d026:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800d02a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d02c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10e      	bne.n	800d052 <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d034:	2306      	movs	r3, #6
 800d036:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d038:	e00b      	b.n	800d052 <_ftoa+0x16a>
    buf[len++] = '0';
 800d03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d040:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d044:	4413      	add	r3, r2
 800d046:	2230      	movs	r2, #48	; 0x30
 800d048:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800d04c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d04e:	3b01      	subs	r3, #1
 800d050:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d054:	2b1f      	cmp	r3, #31
 800d056:	d802      	bhi.n	800d05e <_ftoa+0x176>
 800d058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d05a:	2b09      	cmp	r3, #9
 800d05c:	d8ed      	bhi.n	800d03a <_ftoa+0x152>
  }

  int whole = (int)value;
 800d05e:	ed97 7b00 	vldr	d7, [r7]
 800d062:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d066:	ee17 3a90 	vmov	r3, s15
 800d06a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800d06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d076:	ed97 6b00 	vldr	d6, [r7]
 800d07a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d07e:	4a66      	ldr	r2, [pc, #408]	; (800d218 <_ftoa+0x330>)
 800d080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d082:	00db      	lsls	r3, r3, #3
 800d084:	4413      	add	r3, r2
 800d086:	ed93 7b00 	vldr	d7, [r3]
 800d08a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d08e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800d092:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800d096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d09a:	ee17 3a90 	vmov	r3, s15
 800d09e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800d0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d0aa:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800d0ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d0b2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800d0b6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d0ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d0be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	dd18      	ble.n	800d0fa <_ftoa+0x212>
    ++frac;
 800d0c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800d0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d0:	ee07 3a90 	vmov	s15, r3
 800d0d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800d0d8:	4a4f      	ldr	r2, [pc, #316]	; (800d218 <_ftoa+0x330>)
 800d0da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0dc:	00db      	lsls	r3, r3, #3
 800d0de:	4413      	add	r3, r2
 800d0e0:	ed93 7b00 	vldr	d7, [r3]
 800d0e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ec:	db19      	blt.n	800d122 <_ftoa+0x23a>
      frac = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800d0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	657b      	str	r3, [r7, #84]	; 0x54
 800d0f8:	e013      	b.n	800d122 <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 800d0fa:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d0fe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d102:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10a:	d40a      	bmi.n	800d122 <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800d10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d004      	beq.n	800d11c <_ftoa+0x234>
 800d112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800d11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11e:	3301      	adds	r3, #1
 800d120:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800d122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d124:	2b00      	cmp	r3, #0
 800d126:	d12e      	bne.n	800d186 <_ftoa+0x29e>
    diff = value - (double)whole;
 800d128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d12a:	ee07 3a90 	vmov	s15, r3
 800d12e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d132:	ed97 6b00 	vldr	d6, [r7]
 800d136:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d13a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800d13e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d142:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d146:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d14e:	bf4c      	ite	mi
 800d150:	2301      	movmi	r3, #1
 800d152:	2300      	movpl	r3, #0
 800d154:	b2db      	uxtb	r3, r3
 800d156:	f083 0301 	eor.w	r3, r3, #1
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d108      	bne.n	800d172 <_ftoa+0x28a>
 800d160:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d164:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d168:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d170:	dd73      	ble.n	800d25a <_ftoa+0x372>
 800d172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d174:	f003 0301 	and.w	r3, r3, #1
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f000 8091 	beq.w	800d2a0 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800d17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d180:	3301      	adds	r3, #1
 800d182:	657b      	str	r3, [r7, #84]	; 0x54
 800d184:	e08c      	b.n	800d2a0 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 800d186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d188:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d18a:	e020      	b.n	800d1ce <_ftoa+0x2e6>
      --count;
 800d18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d18e:	3b01      	subs	r3, #1
 800d190:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800d192:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d194:	4b21      	ldr	r3, [pc, #132]	; (800d21c <_ftoa+0x334>)
 800d196:	fba3 2301 	umull	r2, r3, r3, r1
 800d19a:	08da      	lsrs	r2, r3, #3
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	1aca      	subs	r2, r1, r3
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1aa:	1c59      	adds	r1, r3, #1
 800d1ac:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d1ae:	3230      	adds	r2, #48	; 0x30
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d1b6:	440b      	add	r3, r1
 800d1b8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800d1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1be:	4a17      	ldr	r2, [pc, #92]	; (800d21c <_ftoa+0x334>)
 800d1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c4:	08db      	lsrs	r3, r3, #3
 800d1c6:	653b      	str	r3, [r7, #80]	; 0x50
 800d1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d1ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1d0:	2b1f      	cmp	r3, #31
 800d1d2:	d9db      	bls.n	800d18c <_ftoa+0x2a4>
 800d1d4:	e02d      	b.n	800d232 <_ftoa+0x34a>
        break;
 800d1d6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d1d8:	e02b      	b.n	800d232 <_ftoa+0x34a>
 800d1da:	bf00      	nop
 800d1dc:	f3af 8000 	nop.w
 800d1e0:	ffffffff 	.word	0xffffffff
 800d1e4:	ffefffff 	.word	0xffefffff
 800d1e8:	ffffffff 	.word	0xffffffff
 800d1ec:	7fefffff 	.word	0x7fefffff
 800d1f0:	00000000 	.word	0x00000000
 800d1f4:	41cdcd65 	.word	0x41cdcd65
 800d1f8:	00000000 	.word	0x00000000
 800d1fc:	c1cdcd65 	.word	0xc1cdcd65
	...
 800d208:	08016770 	.word	0x08016770
 800d20c:	08016774 	.word	0x08016774
 800d210:	0801677c 	.word	0x0801677c
 800d214:	08016784 	.word	0x08016784
 800d218:	08020720 	.word	0x08020720
 800d21c:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 800d220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d226:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d22a:	4413      	add	r3, r2
 800d22c:	2230      	movs	r2, #48	; 0x30
 800d22e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d234:	2b1f      	cmp	r3, #31
 800d236:	d804      	bhi.n	800d242 <_ftoa+0x35a>
 800d238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d23a:	1e5a      	subs	r2, r3, #1
 800d23c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1ee      	bne.n	800d220 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d244:	2b1f      	cmp	r3, #31
 800d246:	d82b      	bhi.n	800d2a0 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 800d248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d24a:	1c5a      	adds	r2, r3, #1
 800d24c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d24e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d252:	4413      	add	r3, r2
 800d254:	222e      	movs	r2, #46	; 0x2e
 800d256:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d25a:	e021      	b.n	800d2a0 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 800d25c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d25e:	4b49      	ldr	r3, [pc, #292]	; (800d384 <_ftoa+0x49c>)
 800d260:	fb83 1302 	smull	r1, r3, r3, r2
 800d264:	1099      	asrs	r1, r3, #2
 800d266:	17d3      	asrs	r3, r2, #31
 800d268:	1ac9      	subs	r1, r1, r3
 800d26a:	460b      	mov	r3, r1
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	440b      	add	r3, r1
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	1ad1      	subs	r1, r2, r3
 800d274:	b2ca      	uxtb	r2, r1
 800d276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d278:	1c59      	adds	r1, r3, #1
 800d27a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d27c:	3230      	adds	r2, #48	; 0x30
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d284:	440b      	add	r3, r1
 800d286:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800d28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d28c:	4a3d      	ldr	r2, [pc, #244]	; (800d384 <_ftoa+0x49c>)
 800d28e:	fb82 1203 	smull	r1, r2, r2, r3
 800d292:	1092      	asrs	r2, r2, #2
 800d294:	17db      	asrs	r3, r3, #31
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	657b      	str	r3, [r7, #84]	; 0x54
 800d29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d003      	beq.n	800d2a8 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2a2:	2b1f      	cmp	r3, #31
 800d2a4:	d9da      	bls.n	800d25c <_ftoa+0x374>
 800d2a6:	e000      	b.n	800d2aa <_ftoa+0x3c2>
      break;
 800d2a8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800d2aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2ac:	f003 0302 	and.w	r3, r3, #2
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d124      	bne.n	800d2fe <_ftoa+0x416>
 800d2b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2b6:	f003 0301 	and.w	r3, r3, #1
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d01f      	beq.n	800d2fe <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d2be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d015      	beq.n	800d2f0 <_ftoa+0x408>
 800d2c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d104      	bne.n	800d2d6 <_ftoa+0x3ee>
 800d2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2ce:	f003 030c 	and.w	r3, r3, #12
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00c      	beq.n	800d2f0 <_ftoa+0x408>
      width--;
 800d2d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d2dc:	e008      	b.n	800d2f0 <_ftoa+0x408>
      buf[len++] = '0';
 800d2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d2e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d2e8:	4413      	add	r3, r2
 800d2ea:	2230      	movs	r2, #48	; 0x30
 800d2ec:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d2f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d202      	bcs.n	800d2fe <_ftoa+0x416>
 800d2f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2fa:	2b1f      	cmp	r3, #31
 800d2fc:	d9ef      	bls.n	800d2de <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d2fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d300:	2b1f      	cmp	r3, #31
 800d302:	d82a      	bhi.n	800d35a <_ftoa+0x472>
    if (negative) {
 800d304:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d009      	beq.n	800d320 <_ftoa+0x438>
      buf[len++] = '-';
 800d30c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d312:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d316:	4413      	add	r3, r2
 800d318:	222d      	movs	r2, #45	; 0x2d
 800d31a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d31e:	e01c      	b.n	800d35a <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 800d320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d322:	f003 0304 	and.w	r3, r3, #4
 800d326:	2b00      	cmp	r3, #0
 800d328:	d009      	beq.n	800d33e <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d330:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d334:	4413      	add	r3, r2
 800d336:	222b      	movs	r2, #43	; 0x2b
 800d338:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d33c:	e00d      	b.n	800d35a <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 800d33e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d340:	f003 0308 	and.w	r3, r3, #8
 800d344:	2b00      	cmp	r3, #0
 800d346:	d008      	beq.n	800d35a <_ftoa+0x472>
      buf[len++] = ' ';
 800d348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d34a:	1c5a      	adds	r2, r3, #1
 800d34c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d34e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d352:	4413      	add	r3, r2
 800d354:	2220      	movs	r2, #32
 800d356:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d35a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d35c:	9303      	str	r3, [sp, #12]
 800d35e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d360:	9302      	str	r3, [sp, #8]
 800d362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	f107 0318 	add.w	r3, r7, #24
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	6939      	ldr	r1, [r7, #16]
 800d372:	6978      	ldr	r0, [r7, #20]
 800d374:	f7ff fbb4 	bl	800cae0 <_out_rev>
 800d378:	4603      	mov	r3, r0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3764      	adds	r7, #100	; 0x64
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd90      	pop	{r4, r7, pc}
 800d382:	bf00      	nop
 800d384:	66666667 	.word	0x66666667

0800d388 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d388:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d38c:	b09a      	sub	sp, #104	; 0x68
 800d38e:	af06      	add	r7, sp, #24
 800d390:	6178      	str	r0, [r7, #20]
 800d392:	6139      	str	r1, [r7, #16]
 800d394:	60fa      	str	r2, [r7, #12]
 800d396:	60bb      	str	r3, [r7, #8]
 800d398:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800d39c:	ed97 6b00 	vldr	d6, [r7]
 800d3a0:	ed97 7b00 	vldr	d7, [r7]
 800d3a4:	eeb4 6b47 	vcmp.f64	d6, d7
 800d3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ac:	d111      	bne.n	800d3d2 <_etoa+0x4a>
 800d3ae:	ed97 7b00 	vldr	d7, [r7]
 800d3b2:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800d6c8 <_etoa+0x340>
 800d3b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	dc08      	bgt.n	800d3d2 <_etoa+0x4a>
 800d3c0:	ed97 7b00 	vldr	d7, [r7]
 800d3c4:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800d6d0 <_etoa+0x348>
 800d3c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d0:	d50f      	bpl.n	800d3f2 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d3d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3d4:	9302      	str	r3, [sp, #8]
 800d3d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	ed97 0b00 	vldr	d0, [r7]
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	6939      	ldr	r1, [r7, #16]
 800d3e8:	6978      	ldr	r0, [r7, #20]
 800d3ea:	f7ff fd7d 	bl	800cee8 <_ftoa>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	e1cd      	b.n	800d78e <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 800d3f2:	ed97 7b00 	vldr	d7, [r7]
 800d3f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fe:	bf4c      	ite	mi
 800d400:	2301      	movmi	r3, #1
 800d402:	2300      	movpl	r3, #0
 800d404:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800d408:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d005      	beq.n	800d41c <_etoa+0x94>
    value = -value;
 800d410:	ed97 7b00 	vldr	d7, [r7]
 800d414:	eeb1 7b47 	vneg.f64	d7, d7
 800d418:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800d41c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d41e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d426:	2306      	movs	r3, #6
 800d428:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800d42a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d42e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800d432:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d436:	f04f 0300 	mov.w	r3, #0
 800d43a:	f04f 0400 	mov.w	r4, #0
 800d43e:	0d13      	lsrs	r3, r2, #20
 800d440:	2400      	movs	r4, #0
 800d442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d446:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d44a:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800d44c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d450:	f04f 31ff 	mov.w	r1, #4294967295
 800d454:	4ab0      	ldr	r2, [pc, #704]	; (800d718 <_etoa+0x390>)
 800d456:	ea03 0b01 	and.w	fp, r3, r1
 800d45a:	ea04 0c02 	and.w	ip, r4, r2
 800d45e:	f04f 0100 	mov.w	r1, #0
 800d462:	4aae      	ldr	r2, [pc, #696]	; (800d71c <_etoa+0x394>)
 800d464:	ea4b 0301 	orr.w	r3, fp, r1
 800d468:	ea4c 0402 	orr.w	r4, ip, r2
 800d46c:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800d470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d47a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d6d8 <_etoa+0x350>
 800d47e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d482:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d6e0 <_etoa+0x358>
 800d486:	ee37 6b06 	vadd.f64	d6, d7, d6
 800d48a:	ed97 7b06 	vldr	d7, [r7, #24]
 800d48e:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800d492:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d496:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800d6e8 <_etoa+0x360>
 800d49a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d49e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d4a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d4a6:	ee17 3a90 	vmov	r3, s15
 800d4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800d4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d4b6:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800d6f0 <_etoa+0x368>
 800d4ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4be:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d4c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d4ca:	ee17 3a90 	vmov	r3, s15
 800d4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800d4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d2:	ee07 3a90 	vmov	s15, r3
 800d4d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d4da:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800d6f8 <_etoa+0x370>
 800d4de:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e4:	ee07 3a90 	vmov	s15, r3
 800d4e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d4ec:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800d700 <_etoa+0x378>
 800d4f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d4f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d4f8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800d4fc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800d500:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800d504:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d508:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d512:	4619      	mov	r1, r3
 800d514:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800d518:	f04f 0300 	mov.w	r3, #0
 800d51c:	f04f 0400 	mov.w	r4, #0
 800d520:	050c      	lsls	r4, r1, #20
 800d522:	2300      	movs	r3, #0
 800d524:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800d528:	ed97 6b06 	vldr	d6, [r7, #24]
 800d52c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800d530:	ee37 4b07 	vadd.f64	d4, d7, d7
 800d534:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d538:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800d53c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d540:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800d544:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800d548:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800d54c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d550:	ee37 3b03 	vadd.f64	d3, d7, d3
 800d554:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800d558:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800d55c:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800d560:	ee37 3b03 	vadd.f64	d3, d7, d3
 800d564:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800d568:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800d56c:	ee35 5b07 	vadd.f64	d5, d5, d7
 800d570:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800d574:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800d578:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d57c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d580:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800d584:	ed97 7b06 	vldr	d7, [r7, #24]
 800d588:	ed97 6b00 	vldr	d6, [r7]
 800d58c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d594:	d50a      	bpl.n	800d5ac <_etoa+0x224>
    expval--;
 800d596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d598:	3b01      	subs	r3, #1
 800d59a:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800d59c:	ed97 6b06 	vldr	d6, [r7, #24]
 800d5a0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800d5a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d5a8:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800d5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ae:	2b63      	cmp	r3, #99	; 0x63
 800d5b0:	dc05      	bgt.n	800d5be <_etoa+0x236>
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d5b8:	db01      	blt.n	800d5be <_etoa+0x236>
 800d5ba:	2304      	movs	r3, #4
 800d5bc:	e000      	b.n	800d5c0 <_etoa+0x238>
 800d5be:	2305      	movs	r3, #5
 800d5c0:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800d5c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d031      	beq.n	800d630 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800d5cc:	ed97 7b00 	vldr	d7, [r7]
 800d5d0:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800d708 <_etoa+0x380>
 800d5d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5dc:	db1d      	blt.n	800d61a <_etoa+0x292>
 800d5de:	ed97 7b00 	vldr	d7, [r7]
 800d5e2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800d710 <_etoa+0x388>
 800d5e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ee:	d514      	bpl.n	800d61a <_etoa+0x292>
      if ((int)prec > expval) {
 800d5f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	da05      	bge.n	800d604 <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 800d5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	3b01      	subs	r3, #1
 800d600:	663b      	str	r3, [r7, #96]	; 0x60
 800d602:	e001      	b.n	800d608 <_etoa+0x280>
      }
      else {
        prec = 0;
 800d604:	2300      	movs	r3, #0
 800d606:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800d608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d60a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d60e:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 800d610:	2300      	movs	r3, #0
 800d612:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800d614:	2300      	movs	r3, #0
 800d616:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d618:	e00a      	b.n	800d630 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800d61a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <_etoa+0x2a8>
 800d620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <_etoa+0x2a8>
        --prec;
 800d62a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d62c:	3b01      	subs	r3, #1
 800d62e:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800d630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d632:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800d634:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d638:	429a      	cmp	r2, r3
 800d63a:	d904      	bls.n	800d646 <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800d63c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	647b      	str	r3, [r7, #68]	; 0x44
 800d644:	e001      	b.n	800d64a <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800d646:	2300      	movs	r3, #0
 800d648:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800d64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d64c:	f003 0302 	and.w	r3, r3, #2
 800d650:	2b00      	cmp	r3, #0
 800d652:	d004      	beq.n	800d65e <_etoa+0x2d6>
 800d654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800d65a:	2300      	movs	r3, #0
 800d65c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800d65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d660:	2b00      	cmp	r3, #0
 800d662:	d007      	beq.n	800d674 <_etoa+0x2ec>
    value /= conv.F;
 800d664:	ed97 6b06 	vldr	d6, [r7, #24]
 800d668:	ed97 5b00 	vldr	d5, [r7]
 800d66c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d670:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800d678:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d004      	beq.n	800d68a <_etoa+0x302>
 800d680:	ed97 7b00 	vldr	d7, [r7]
 800d684:	eeb1 7b47 	vneg.f64	d7, d7
 800d688:	e001      	b.n	800d68e <_etoa+0x306>
 800d68a:	ed97 7b00 	vldr	d7, [r7]
 800d68e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d698:	9301      	str	r3, [sp, #4]
 800d69a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	eeb0 0b47 	vmov.f64	d0, d7
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	6939      	ldr	r1, [r7, #16]
 800d6a8:	6978      	ldr	r0, [r7, #20]
 800d6aa:	f7ff fc1d 	bl	800cee8 <_ftoa>
 800d6ae:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800d6b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d06a      	beq.n	800d78c <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800d6b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6b8:	f003 0320 	and.w	r3, r3, #32
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d02f      	beq.n	800d720 <_etoa+0x398>
 800d6c0:	2045      	movs	r0, #69	; 0x45
 800d6c2:	e02e      	b.n	800d722 <_etoa+0x39a>
 800d6c4:	f3af 8000 	nop.w
 800d6c8:	ffffffff 	.word	0xffffffff
 800d6cc:	7fefffff 	.word	0x7fefffff
 800d6d0:	ffffffff 	.word	0xffffffff
 800d6d4:	ffefffff 	.word	0xffefffff
 800d6d8:	509f79fb 	.word	0x509f79fb
 800d6dc:	3fd34413 	.word	0x3fd34413
 800d6e0:	8b60c8b3 	.word	0x8b60c8b3
 800d6e4:	3fc68a28 	.word	0x3fc68a28
 800d6e8:	636f4361 	.word	0x636f4361
 800d6ec:	3fd287a7 	.word	0x3fd287a7
 800d6f0:	0979a371 	.word	0x0979a371
 800d6f4:	400a934f 	.word	0x400a934f
 800d6f8:	bbb55516 	.word	0xbbb55516
 800d6fc:	40026bb1 	.word	0x40026bb1
 800d700:	fefa39ef 	.word	0xfefa39ef
 800d704:	3fe62e42 	.word	0x3fe62e42
 800d708:	eb1c432d 	.word	0xeb1c432d
 800d70c:	3f1a36e2 	.word	0x3f1a36e2
 800d710:	00000000 	.word	0x00000000
 800d714:	412e8480 	.word	0x412e8480
 800d718:	000fffff 	.word	0x000fffff
 800d71c:	3ff00000 	.word	0x3ff00000
 800d720:	2065      	movs	r0, #101	; 0x65
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	1c53      	adds	r3, r2, #1
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	697c      	ldr	r4, [r7, #20]
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	6939      	ldr	r1, [r7, #16]
 800d72e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800d730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d732:	2b00      	cmp	r3, #0
 800d734:	bfb8      	it	lt
 800d736:	425b      	neglt	r3, r3
 800d738:	4618      	mov	r0, r3
 800d73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d73c:	0fdb      	lsrs	r3, r3, #31
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d742:	3a01      	subs	r2, #1
 800d744:	2105      	movs	r1, #5
 800d746:	9105      	str	r1, [sp, #20]
 800d748:	9204      	str	r2, [sp, #16]
 800d74a:	2200      	movs	r2, #0
 800d74c:	9203      	str	r2, [sp, #12]
 800d74e:	220a      	movs	r2, #10
 800d750:	9202      	str	r2, [sp, #8]
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	9000      	str	r0, [sp, #0]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	6939      	ldr	r1, [r7, #16]
 800d75c:	6978      	ldr	r0, [r7, #20]
 800d75e:	f7ff faeb 	bl	800cd38 <_ntoa_long>
 800d762:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800d764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d766:	f003 0302 	and.w	r3, r3, #2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00e      	beq.n	800d78c <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800d76e:	e007      	b.n	800d780 <_etoa+0x3f8>
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	1c53      	adds	r3, r2, #1
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	697c      	ldr	r4, [r7, #20]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	6939      	ldr	r1, [r7, #16]
 800d77c:	2020      	movs	r0, #32
 800d77e:	47a0      	blx	r4
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d788:	429a      	cmp	r2, r3
 800d78a:	d8f1      	bhi.n	800d770 <_etoa+0x3e8>
    }
  }
  return idx;
 800d78c:	68fb      	ldr	r3, [r7, #12]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3750      	adds	r7, #80	; 0x50
 800d792:	46bd      	mov	sp, r7
 800d794:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800d798 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800d798:	b5b0      	push	{r4, r5, r7, lr}
 800d79a:	b0a0      	sub	sp, #128	; 0x80
 800d79c:	af0a      	add	r7, sp, #40	; 0x28
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
 800d7a4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f040 848e 	bne.w	800e0ce <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 800d7b2:	4ba0      	ldr	r3, [pc, #640]	; (800da34 <_vsnprintf+0x29c>)
 800d7b4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800d7b6:	f000 bc8a 	b.w	800e0ce <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2b25      	cmp	r3, #37	; 0x25
 800d7c0:	d00d      	beq.n	800d7de <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	7818      	ldrb	r0, [r3, #0]
 800d7c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7c8:	1c53      	adds	r3, r2, #1
 800d7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d7cc:	68fc      	ldr	r4, [r7, #12]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68b9      	ldr	r1, [r7, #8]
 800d7d2:	47a0      	blx	r4
      format++;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	603b      	str	r3, [r7, #0]
      continue;
 800d7da:	f000 bc78 	b.w	800e0ce <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	3b20      	subs	r3, #32
 800d7ee:	2b10      	cmp	r3, #16
 800d7f0:	d856      	bhi.n	800d8a0 <_vsnprintf+0x108>
 800d7f2:	a201      	add	r2, pc, #4	; (adr r2, 800d7f8 <_vsnprintf+0x60>)
 800d7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f8:	0800d879 	.word	0x0800d879
 800d7fc:	0800d8a1 	.word	0x0800d8a1
 800d800:	0800d8a1 	.word	0x0800d8a1
 800d804:	0800d88d 	.word	0x0800d88d
 800d808:	0800d8a1 	.word	0x0800d8a1
 800d80c:	0800d8a1 	.word	0x0800d8a1
 800d810:	0800d8a1 	.word	0x0800d8a1
 800d814:	0800d8a1 	.word	0x0800d8a1
 800d818:	0800d8a1 	.word	0x0800d8a1
 800d81c:	0800d8a1 	.word	0x0800d8a1
 800d820:	0800d8a1 	.word	0x0800d8a1
 800d824:	0800d865 	.word	0x0800d865
 800d828:	0800d8a1 	.word	0x0800d8a1
 800d82c:	0800d851 	.word	0x0800d851
 800d830:	0800d8a1 	.word	0x0800d8a1
 800d834:	0800d8a1 	.word	0x0800d8a1
 800d838:	0800d83d 	.word	0x0800d83d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800d83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d83e:	f043 0301 	orr.w	r3, r3, #1
 800d842:	657b      	str	r3, [r7, #84]	; 0x54
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	3301      	adds	r3, #1
 800d848:	603b      	str	r3, [r7, #0]
 800d84a:	2301      	movs	r3, #1
 800d84c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d84e:	e02a      	b.n	800d8a6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800d850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d852:	f043 0302 	orr.w	r3, r3, #2
 800d856:	657b      	str	r3, [r7, #84]	; 0x54
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	3301      	adds	r3, #1
 800d85c:	603b      	str	r3, [r7, #0]
 800d85e:	2301      	movs	r3, #1
 800d860:	64bb      	str	r3, [r7, #72]	; 0x48
 800d862:	e020      	b.n	800d8a6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800d864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d866:	f043 0304 	orr.w	r3, r3, #4
 800d86a:	657b      	str	r3, [r7, #84]	; 0x54
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	3301      	adds	r3, #1
 800d870:	603b      	str	r3, [r7, #0]
 800d872:	2301      	movs	r3, #1
 800d874:	64bb      	str	r3, [r7, #72]	; 0x48
 800d876:	e016      	b.n	800d8a6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800d878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d87a:	f043 0308 	orr.w	r3, r3, #8
 800d87e:	657b      	str	r3, [r7, #84]	; 0x54
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	3301      	adds	r3, #1
 800d884:	603b      	str	r3, [r7, #0]
 800d886:	2301      	movs	r3, #1
 800d888:	64bb      	str	r3, [r7, #72]	; 0x48
 800d88a:	e00c      	b.n	800d8a6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800d88c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d88e:	f043 0310 	orr.w	r3, r3, #16
 800d892:	657b      	str	r3, [r7, #84]	; 0x54
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	3301      	adds	r3, #1
 800d898:	603b      	str	r3, [r7, #0]
 800d89a:	2301      	movs	r3, #1
 800d89c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d89e:	e002      	b.n	800d8a6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8a4:	bf00      	nop
      }
    } while (n);
 800d8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d19d      	bne.n	800d7e8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff f8d8 	bl	800ca6a <_is_digit>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d005      	beq.n	800d8cc <_vsnprintf+0x134>
      width = _atoi(&format);
 800d8c0:	463b      	mov	r3, r7
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff f8e8 	bl	800ca98 <_atoi>
 800d8c8:	6538      	str	r0, [r7, #80]	; 0x50
 800d8ca:	e018      	b.n	800d8fe <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d2:	d114      	bne.n	800d8fe <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800d8d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	66ba      	str	r2, [r7, #104]	; 0x68
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	da07      	bge.n	800d8f4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800d8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8e6:	f043 0302 	orr.w	r3, r3, #2
 800d8ea:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	425b      	negs	r3, r3
 800d8f0:	653b      	str	r3, [r7, #80]	; 0x50
 800d8f2:	e001      	b.n	800d8f8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800d8fe:	2300      	movs	r3, #0
 800d900:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b2e      	cmp	r3, #46	; 0x2e
 800d908:	d124      	bne.n	800d954 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800d90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d90c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d910:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	3301      	adds	r3, #1
 800d916:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7ff f8a4 	bl	800ca6a <_is_digit>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d005      	beq.n	800d934 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800d928:	463b      	mov	r3, r7
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7ff f8b4 	bl	800ca98 <_atoi>
 800d930:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d932:	e00f      	b.n	800d954 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b2a      	cmp	r3, #42	; 0x2a
 800d93a:	d10b      	bne.n	800d954 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800d93c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	66ba      	str	r2, [r7, #104]	; 0x68
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800d946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d94c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	3301      	adds	r3, #1
 800d952:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	3b68      	subs	r3, #104	; 0x68
 800d95a:	2b12      	cmp	r3, #18
 800d95c:	d866      	bhi.n	800da2c <_vsnprintf+0x294>
 800d95e:	a201      	add	r2, pc, #4	; (adr r2, 800d964 <_vsnprintf+0x1cc>)
 800d960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d964:	0800d9d7 	.word	0x0800d9d7
 800d968:	0800da2d 	.word	0x0800da2d
 800d96c:	0800da0d 	.word	0x0800da0d
 800d970:	0800da2d 	.word	0x0800da2d
 800d974:	0800d9b1 	.word	0x0800d9b1
 800d978:	0800da2d 	.word	0x0800da2d
 800d97c:	0800da2d 	.word	0x0800da2d
 800d980:	0800da2d 	.word	0x0800da2d
 800d984:	0800da2d 	.word	0x0800da2d
 800d988:	0800da2d 	.word	0x0800da2d
 800d98c:	0800da2d 	.word	0x0800da2d
 800d990:	0800da2d 	.word	0x0800da2d
 800d994:	0800d9fd 	.word	0x0800d9fd
 800d998:	0800da2d 	.word	0x0800da2d
 800d99c:	0800da2d 	.word	0x0800da2d
 800d9a0:	0800da2d 	.word	0x0800da2d
 800d9a4:	0800da2d 	.word	0x0800da2d
 800d9a8:	0800da2d 	.word	0x0800da2d
 800d9ac:	0800da1d 	.word	0x0800da1d
      case 'l' :
        flags |= FLAGS_LONG;
 800d9b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9b6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b6c      	cmp	r3, #108	; 0x6c
 800d9c4:	d134      	bne.n	800da30 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800d9c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d9cc:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	603b      	str	r3, [r7, #0]
        }
        break;
 800d9d4:	e02c      	b.n	800da30 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800d9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9dc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	2b68      	cmp	r3, #104	; 0x68
 800d9ea:	d125      	bne.n	800da38 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800d9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	603b      	str	r3, [r7, #0]
        }
        break;
 800d9fa:	e01d      	b.n	800da38 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da02:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	3301      	adds	r3, #1
 800da08:	603b      	str	r3, [r7, #0]
        break;
 800da0a:	e016      	b.n	800da3a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800da0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da12:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	3301      	adds	r3, #1
 800da18:	603b      	str	r3, [r7, #0]
        break;
 800da1a:	e00e      	b.n	800da3a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800da1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da22:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	603b      	str	r3, [r7, #0]
        break;
 800da2a:	e006      	b.n	800da3a <_vsnprintf+0x2a2>
      default :
        break;
 800da2c:	bf00      	nop
 800da2e:	e004      	b.n	800da3a <_vsnprintf+0x2a2>
        break;
 800da30:	bf00      	nop
 800da32:	e002      	b.n	800da3a <_vsnprintf+0x2a2>
 800da34:	0800ca15 	.word	0x0800ca15
        break;
 800da38:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	3b25      	subs	r3, #37	; 0x25
 800da40:	2b53      	cmp	r3, #83	; 0x53
 800da42:	f200 8337 	bhi.w	800e0b4 <_vsnprintf+0x91c>
 800da46:	a201      	add	r2, pc, #4	; (adr r2, 800da4c <_vsnprintf+0x2b4>)
 800da48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4c:	0800e09d 	.word	0x0800e09d
 800da50:	0800e0b5 	.word	0x0800e0b5
 800da54:	0800e0b5 	.word	0x0800e0b5
 800da58:	0800e0b5 	.word	0x0800e0b5
 800da5c:	0800e0b5 	.word	0x0800e0b5
 800da60:	0800e0b5 	.word	0x0800e0b5
 800da64:	0800e0b5 	.word	0x0800e0b5
 800da68:	0800e0b5 	.word	0x0800e0b5
 800da6c:	0800e0b5 	.word	0x0800e0b5
 800da70:	0800e0b5 	.word	0x0800e0b5
 800da74:	0800e0b5 	.word	0x0800e0b5
 800da78:	0800e0b5 	.word	0x0800e0b5
 800da7c:	0800e0b5 	.word	0x0800e0b5
 800da80:	0800e0b5 	.word	0x0800e0b5
 800da84:	0800e0b5 	.word	0x0800e0b5
 800da88:	0800e0b5 	.word	0x0800e0b5
 800da8c:	0800e0b5 	.word	0x0800e0b5
 800da90:	0800e0b5 	.word	0x0800e0b5
 800da94:	0800e0b5 	.word	0x0800e0b5
 800da98:	0800e0b5 	.word	0x0800e0b5
 800da9c:	0800e0b5 	.word	0x0800e0b5
 800daa0:	0800e0b5 	.word	0x0800e0b5
 800daa4:	0800e0b5 	.word	0x0800e0b5
 800daa8:	0800e0b5 	.word	0x0800e0b5
 800daac:	0800e0b5 	.word	0x0800e0b5
 800dab0:	0800e0b5 	.word	0x0800e0b5
 800dab4:	0800e0b5 	.word	0x0800e0b5
 800dab8:	0800e0b5 	.word	0x0800e0b5
 800dabc:	0800e0b5 	.word	0x0800e0b5
 800dac0:	0800e0b5 	.word	0x0800e0b5
 800dac4:	0800e0b5 	.word	0x0800e0b5
 800dac8:	0800e0b5 	.word	0x0800e0b5
 800dacc:	0800de71 	.word	0x0800de71
 800dad0:	0800de29 	.word	0x0800de29
 800dad4:	0800de71 	.word	0x0800de71
 800dad8:	0800e0b5 	.word	0x0800e0b5
 800dadc:	0800e0b5 	.word	0x0800e0b5
 800dae0:	0800e0b5 	.word	0x0800e0b5
 800dae4:	0800e0b5 	.word	0x0800e0b5
 800dae8:	0800e0b5 	.word	0x0800e0b5
 800daec:	0800e0b5 	.word	0x0800e0b5
 800daf0:	0800e0b5 	.word	0x0800e0b5
 800daf4:	0800e0b5 	.word	0x0800e0b5
 800daf8:	0800e0b5 	.word	0x0800e0b5
 800dafc:	0800e0b5 	.word	0x0800e0b5
 800db00:	0800e0b5 	.word	0x0800e0b5
 800db04:	0800e0b5 	.word	0x0800e0b5
 800db08:	0800e0b5 	.word	0x0800e0b5
 800db0c:	0800e0b5 	.word	0x0800e0b5
 800db10:	0800e0b5 	.word	0x0800e0b5
 800db14:	0800e0b5 	.word	0x0800e0b5
 800db18:	0800db9d 	.word	0x0800db9d
 800db1c:	0800e0b5 	.word	0x0800e0b5
 800db20:	0800e0b5 	.word	0x0800e0b5
 800db24:	0800e0b5 	.word	0x0800e0b5
 800db28:	0800e0b5 	.word	0x0800e0b5
 800db2c:	0800e0b5 	.word	0x0800e0b5
 800db30:	0800e0b5 	.word	0x0800e0b5
 800db34:	0800e0b5 	.word	0x0800e0b5
 800db38:	0800e0b5 	.word	0x0800e0b5
 800db3c:	0800e0b5 	.word	0x0800e0b5
 800db40:	0800db9d 	.word	0x0800db9d
 800db44:	0800ded9 	.word	0x0800ded9
 800db48:	0800db9d 	.word	0x0800db9d
 800db4c:	0800de71 	.word	0x0800de71
 800db50:	0800de29 	.word	0x0800de29
 800db54:	0800de71 	.word	0x0800de71
 800db58:	0800e0b5 	.word	0x0800e0b5
 800db5c:	0800db9d 	.word	0x0800db9d
 800db60:	0800e0b5 	.word	0x0800e0b5
 800db64:	0800e0b5 	.word	0x0800e0b5
 800db68:	0800e0b5 	.word	0x0800e0b5
 800db6c:	0800e0b5 	.word	0x0800e0b5
 800db70:	0800e0b5 	.word	0x0800e0b5
 800db74:	0800db9d 	.word	0x0800db9d
 800db78:	0800e011 	.word	0x0800e011
 800db7c:	0800e0b5 	.word	0x0800e0b5
 800db80:	0800e0b5 	.word	0x0800e0b5
 800db84:	0800df4d 	.word	0x0800df4d
 800db88:	0800e0b5 	.word	0x0800e0b5
 800db8c:	0800db9d 	.word	0x0800db9d
 800db90:	0800e0b5 	.word	0x0800e0b5
 800db94:	0800e0b5 	.word	0x0800e0b5
 800db98:	0800db9d 	.word	0x0800db9d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b78      	cmp	r3, #120	; 0x78
 800dba2:	d003      	beq.n	800dbac <_vsnprintf+0x414>
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	2b58      	cmp	r3, #88	; 0x58
 800dbaa:	d102      	bne.n	800dbb2 <_vsnprintf+0x41a>
          base = 16U;
 800dbac:	2310      	movs	r3, #16
 800dbae:	643b      	str	r3, [r7, #64]	; 0x40
 800dbb0:	e013      	b.n	800dbda <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	2b6f      	cmp	r3, #111	; 0x6f
 800dbb8:	d102      	bne.n	800dbc0 <_vsnprintf+0x428>
          base =  8U;
 800dbba:	2308      	movs	r3, #8
 800dbbc:	643b      	str	r3, [r7, #64]	; 0x40
 800dbbe:	e00c      	b.n	800dbda <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b62      	cmp	r3, #98	; 0x62
 800dbc6:	d102      	bne.n	800dbce <_vsnprintf+0x436>
          base =  2U;
 800dbc8:	2302      	movs	r3, #2
 800dbca:	643b      	str	r3, [r7, #64]	; 0x40
 800dbcc:	e005      	b.n	800dbda <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800dbce:	230a      	movs	r3, #10
 800dbd0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800dbd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbd4:	f023 0310 	bic.w	r3, r3, #16
 800dbd8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	2b58      	cmp	r3, #88	; 0x58
 800dbe0:	d103      	bne.n	800dbea <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800dbe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbe4:	f043 0320 	orr.w	r3, r3, #32
 800dbe8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b69      	cmp	r3, #105	; 0x69
 800dbf0:	d007      	beq.n	800dc02 <_vsnprintf+0x46a>
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b64      	cmp	r3, #100	; 0x64
 800dbf8:	d003      	beq.n	800dc02 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800dbfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbfc:	f023 030c 	bic.w	r3, r3, #12
 800dc00:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800dc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d003      	beq.n	800dc14 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800dc0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc0e:	f023 0301 	bic.w	r3, r3, #1
 800dc12:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b69      	cmp	r3, #105	; 0x69
 800dc1a:	d004      	beq.n	800dc26 <_vsnprintf+0x48e>
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b64      	cmp	r3, #100	; 0x64
 800dc22:	f040 808d 	bne.w	800dd40 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800dc26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d02e      	beq.n	800dc8e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800dc30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc32:	3307      	adds	r3, #7
 800dc34:	f023 0307 	bic.w	r3, r3, #7
 800dc38:	f103 0208 	add.w	r2, r3, #8
 800dc3c:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dc42:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dc46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f174 0200 	sbcs.w	r2, r4, #0
 800dc50:	da02      	bge.n	800dc58 <_vsnprintf+0x4c0>
 800dc52:	425b      	negs	r3, r3
 800dc54:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4622      	mov	r2, r4
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	0fdb      	lsrs	r3, r3, #31
 800dc60:	b2d8      	uxtb	r0, r3
 800dc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc64:	f04f 0400 	mov.w	r4, #0
 800dc68:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800dc6a:	9508      	str	r5, [sp, #32]
 800dc6c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800dc6e:	9507      	str	r5, [sp, #28]
 800dc70:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800dc72:	9506      	str	r5, [sp, #24]
 800dc74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dc78:	9002      	str	r0, [sp, #8]
 800dc7a:	e9cd 1200 	strd	r1, r2, [sp]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f7ff f8be 	bl	800ce06 <_ntoa_long_long>
 800dc8a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800dc8c:	e0c8      	b.n	800de20 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800dc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01e      	beq.n	800dcd6 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800dc98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc9a:	1d1a      	adds	r2, r3, #4
 800dc9c:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bfb8      	it	lt
 800dca8:	425b      	neglt	r3, r3
 800dcaa:	4619      	mov	r1, r3
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	0fdb      	lsrs	r3, r3, #31
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dcb4:	9205      	str	r2, [sp, #20]
 800dcb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcb8:	9204      	str	r2, [sp, #16]
 800dcba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcbc:	9203      	str	r2, [sp, #12]
 800dcbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcc0:	9202      	str	r2, [sp, #8]
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	9100      	str	r1, [sp, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcca:	68b9      	ldr	r1, [r7, #8]
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f7ff f833 	bl	800cd38 <_ntoa_long>
 800dcd2:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800dcd4:	e0a4      	b.n	800de20 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800dcd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d005      	beq.n	800dcec <_vsnprintf+0x554>
 800dce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dce2:	1d1a      	adds	r2, r3, #4
 800dce4:	66ba      	str	r2, [r7, #104]	; 0x68
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	e00e      	b.n	800dd0a <_vsnprintf+0x572>
 800dcec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d005      	beq.n	800dd02 <_vsnprintf+0x56a>
 800dcf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcf8:	1d1a      	adds	r2, r3, #4
 800dcfa:	66ba      	str	r2, [r7, #104]	; 0x68
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	b21b      	sxth	r3, r3
 800dd00:	e003      	b.n	800dd0a <_vsnprintf+0x572>
 800dd02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd04:	1d1a      	adds	r2, r3, #4
 800dd06:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bfb8      	it	lt
 800dd12:	425b      	neglt	r3, r3
 800dd14:	4619      	mov	r1, r3
 800dd16:	6a3b      	ldr	r3, [r7, #32]
 800dd18:	0fdb      	lsrs	r3, r3, #31
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd1e:	9205      	str	r2, [sp, #20]
 800dd20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd22:	9204      	str	r2, [sp, #16]
 800dd24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd26:	9203      	str	r2, [sp, #12]
 800dd28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd2a:	9202      	str	r2, [sp, #8]
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	9100      	str	r1, [sp, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f7fe fffe 	bl	800cd38 <_ntoa_long>
 800dd3c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800dd3e:	e06f      	b.n	800de20 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800dd40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d020      	beq.n	800dd8c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800dd4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd4c:	3307      	adds	r3, #7
 800dd4e:	f023 0307 	bic.w	r3, r3, #7
 800dd52:	f103 0208 	add.w	r2, r3, #8
 800dd56:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd5e:	4611      	mov	r1, r2
 800dd60:	f04f 0200 	mov.w	r2, #0
 800dd64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dd66:	9008      	str	r0, [sp, #32]
 800dd68:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dd6a:	9007      	str	r0, [sp, #28]
 800dd6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd6e:	9006      	str	r0, [sp, #24]
 800dd70:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dd74:	2200      	movs	r2, #0
 800dd76:	9202      	str	r2, [sp, #8]
 800dd78:	e9cd 3400 	strd	r3, r4, [sp]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff f83f 	bl	800ce06 <_ntoa_long_long>
 800dd88:	6478      	str	r0, [r7, #68]	; 0x44
 800dd8a:	e049      	b.n	800de20 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800dd8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d016      	beq.n	800ddc4 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800dd96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd98:	1d1a      	adds	r2, r3, #4
 800dd9a:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dda0:	9205      	str	r2, [sp, #20]
 800dda2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dda4:	9204      	str	r2, [sp, #16]
 800dda6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dda8:	9203      	str	r2, [sp, #12]
 800ddaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddac:	9202      	str	r2, [sp, #8]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	9201      	str	r2, [sp, #4]
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7fe ffbc 	bl	800cd38 <_ntoa_long>
 800ddc0:	6478      	str	r0, [r7, #68]	; 0x44
 800ddc2:	e02d      	b.n	800de20 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800ddc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d005      	beq.n	800ddda <_vsnprintf+0x642>
 800ddce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddd0:	1d1a      	adds	r2, r3, #4
 800ddd2:	66ba      	str	r2, [r7, #104]	; 0x68
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	e00e      	b.n	800ddf8 <_vsnprintf+0x660>
 800ddda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d005      	beq.n	800ddf0 <_vsnprintf+0x658>
 800dde4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dde6:	1d1a      	adds	r2, r3, #4
 800dde8:	66ba      	str	r2, [r7, #104]	; 0x68
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	e003      	b.n	800ddf8 <_vsnprintf+0x660>
 800ddf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddf2:	1d1a      	adds	r2, r3, #4
 800ddf4:	66ba      	str	r2, [r7, #104]	; 0x68
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ddfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddfc:	9305      	str	r3, [sp, #20]
 800ddfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de00:	9304      	str	r3, [sp, #16]
 800de02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de04:	9303      	str	r3, [sp, #12]
 800de06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de08:	9302      	str	r3, [sp, #8]
 800de0a:	2300      	movs	r3, #0
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7fe ff8d 	bl	800cd38 <_ntoa_long>
 800de1e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	3301      	adds	r3, #1
 800de24:	603b      	str	r3, [r7, #0]
        break;
 800de26:	e152      	b.n	800e0ce <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b46      	cmp	r3, #70	; 0x46
 800de2e:	d103      	bne.n	800de38 <_vsnprintf+0x6a0>
 800de30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de32:	f043 0320 	orr.w	r3, r3, #32
 800de36:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800de38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de3a:	3307      	adds	r3, #7
 800de3c:	f023 0307 	bic.w	r3, r3, #7
 800de40:	f103 0208 	add.w	r2, r3, #8
 800de44:	66ba      	str	r2, [r7, #104]	; 0x68
 800de46:	ed93 7b00 	vldr	d7, [r3]
 800de4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de4c:	9302      	str	r3, [sp, #8]
 800de4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	eeb0 0b47 	vmov.f64	d0, d7
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de5e:	68b9      	ldr	r1, [r7, #8]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff f841 	bl	800cee8 <_ftoa>
 800de66:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	603b      	str	r3, [r7, #0]
        break;
 800de6e:	e12e      	b.n	800e0ce <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	2b67      	cmp	r3, #103	; 0x67
 800de76:	d003      	beq.n	800de80 <_vsnprintf+0x6e8>
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	2b47      	cmp	r3, #71	; 0x47
 800de7e:	d103      	bne.n	800de88 <_vsnprintf+0x6f0>
 800de80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de86:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b45      	cmp	r3, #69	; 0x45
 800de8e:	d003      	beq.n	800de98 <_vsnprintf+0x700>
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b47      	cmp	r3, #71	; 0x47
 800de96:	d103      	bne.n	800dea0 <_vsnprintf+0x708>
 800de98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de9a:	f043 0320 	orr.w	r3, r3, #32
 800de9e:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800dea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dea2:	3307      	adds	r3, #7
 800dea4:	f023 0307 	bic.w	r3, r3, #7
 800dea8:	f103 0208 	add.w	r2, r3, #8
 800deac:	66ba      	str	r2, [r7, #104]	; 0x68
 800deae:	ed93 7b00 	vldr	d7, [r3]
 800deb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deb4:	9302      	str	r3, [sp, #8]
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	eeb0 0b47 	vmov.f64	d0, d7
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dec6:	68b9      	ldr	r1, [r7, #8]
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7ff fa5d 	bl	800d388 <_etoa>
 800dece:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	603b      	str	r3, [r7, #0]
        break;
 800ded6:	e0fa      	b.n	800e0ce <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800ded8:	2301      	movs	r3, #1
 800deda:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800dedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d10e      	bne.n	800df04 <_vsnprintf+0x76c>
          while (l++ < width) {
 800dee6:	e007      	b.n	800def8 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 800dee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800deea:	1c53      	adds	r3, r2, #1
 800deec:	647b      	str	r3, [r7, #68]	; 0x44
 800deee:	68fc      	ldr	r4, [r7, #12]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68b9      	ldr	r1, [r7, #8]
 800def4:	2020      	movs	r0, #32
 800def6:	47a0      	blx	r4
          while (l++ < width) {
 800def8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800defe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df00:	429a      	cmp	r2, r3
 800df02:	d8f1      	bhi.n	800dee8 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800df04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df06:	1d1a      	adds	r2, r3, #4
 800df08:	66ba      	str	r2, [r7, #104]	; 0x68
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	b2d8      	uxtb	r0, r3
 800df0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df10:	1c53      	adds	r3, r2, #1
 800df12:	647b      	str	r3, [r7, #68]	; 0x44
 800df14:	68fc      	ldr	r4, [r7, #12]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68b9      	ldr	r1, [r7, #8]
 800df1a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800df1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df1e:	f003 0302 	and.w	r3, r3, #2
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00e      	beq.n	800df44 <_vsnprintf+0x7ac>
          while (l++ < width) {
 800df26:	e007      	b.n	800df38 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 800df28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df2a:	1c53      	adds	r3, r2, #1
 800df2c:	647b      	str	r3, [r7, #68]	; 0x44
 800df2e:	68fc      	ldr	r4, [r7, #12]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	2020      	movs	r0, #32
 800df36:	47a0      	blx	r4
          while (l++ < width) {
 800df38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800df3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df40:	429a      	cmp	r2, r3
 800df42:	d8f1      	bhi.n	800df28 <_vsnprintf+0x790>
          }
        }
        format++;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	603b      	str	r3, [r7, #0]
        break;
 800df4a:	e0c0      	b.n	800e0ce <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800df4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df4e:	1d1a      	adds	r2, r3, #4
 800df50:	66ba      	str	r2, [r7, #104]	; 0x68
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800df56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <_vsnprintf+0x7c8>
 800df5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df5e:	e001      	b.n	800df64 <_vsnprintf+0x7cc>
 800df60:	f04f 33ff 	mov.w	r3, #4294967295
 800df64:	4619      	mov	r1, r3
 800df66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df68:	f7fe fd62 	bl	800ca30 <_strnlen_s>
 800df6c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800df6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df74:	2b00      	cmp	r3, #0
 800df76:	d005      	beq.n	800df84 <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 800df78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df7c:	4293      	cmp	r3, r2
 800df7e:	bf28      	it	cs
 800df80:	4613      	movcs	r3, r2
 800df82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800df84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df86:	f003 0302 	and.w	r3, r3, #2
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d11a      	bne.n	800dfc4 <_vsnprintf+0x82c>
          while (l++ < width) {
 800df8e:	e007      	b.n	800dfa0 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 800df90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df92:	1c53      	adds	r3, r2, #1
 800df94:	647b      	str	r3, [r7, #68]	; 0x44
 800df96:	68fc      	ldr	r4, [r7, #12]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68b9      	ldr	r1, [r7, #8]
 800df9c:	2020      	movs	r0, #32
 800df9e:	47a0      	blx	r4
          while (l++ < width) {
 800dfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	637a      	str	r2, [r7, #52]	; 0x34
 800dfa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d8f1      	bhi.n	800df90 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800dfac:	e00a      	b.n	800dfc4 <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 800dfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	63ba      	str	r2, [r7, #56]	; 0x38
 800dfb4:	7818      	ldrb	r0, [r3, #0]
 800dfb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfb8:	1c53      	adds	r3, r2, #1
 800dfba:	647b      	str	r3, [r7, #68]	; 0x44
 800dfbc:	68fc      	ldr	r4, [r7, #12]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d009      	beq.n	800dfe0 <_vsnprintf+0x848>
 800dfcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d0eb      	beq.n	800dfae <_vsnprintf+0x816>
 800dfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfd8:	1e5a      	subs	r2, r3, #1
 800dfda:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1e6      	bne.n	800dfae <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800dfe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfe2:	f003 0302 	and.w	r3, r3, #2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00e      	beq.n	800e008 <_vsnprintf+0x870>
          while (l++ < width) {
 800dfea:	e007      	b.n	800dffc <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 800dfec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfee:	1c53      	adds	r3, r2, #1
 800dff0:	647b      	str	r3, [r7, #68]	; 0x44
 800dff2:	68fc      	ldr	r4, [r7, #12]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68b9      	ldr	r1, [r7, #8]
 800dff8:	2020      	movs	r0, #32
 800dffa:	47a0      	blx	r4
          while (l++ < width) {
 800dffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	637a      	str	r2, [r7, #52]	; 0x34
 800e002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e004:	429a      	cmp	r2, r3
 800e006:	d8f1      	bhi.n	800dfec <_vsnprintf+0x854>
          }
        }
        format++;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3301      	adds	r3, #1
 800e00c:	603b      	str	r3, [r7, #0]
        break;
 800e00e:	e05e      	b.n	800e0ce <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800e010:	2308      	movs	r3, #8
 800e012:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800e014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e016:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800e01a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800e01c:	2300      	movs	r3, #0
 800e01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800e022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e026:	2b00      	cmp	r3, #0
 800e028:	d01d      	beq.n	800e066 <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800e02a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e02c:	1d1a      	adds	r2, r3, #4
 800e02e:	66ba      	str	r2, [r7, #104]	; 0x68
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f04f 0400 	mov.w	r4, #0
 800e036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e038:	9208      	str	r2, [sp, #32]
 800e03a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e03c:	9207      	str	r2, [sp, #28]
 800e03e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e040:	9206      	str	r2, [sp, #24]
 800e042:	f04f 0110 	mov.w	r1, #16
 800e046:	f04f 0200 	mov.w	r2, #0
 800e04a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e04e:	2200      	movs	r2, #0
 800e050:	9202      	str	r2, [sp, #8]
 800e052:	e9cd 3400 	strd	r3, r4, [sp]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e05a:	68b9      	ldr	r1, [r7, #8]
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7fe fed2 	bl	800ce06 <_ntoa_long_long>
 800e062:	6478      	str	r0, [r7, #68]	; 0x44
 800e064:	e016      	b.n	800e094 <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800e066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e068:	1d1a      	adds	r2, r3, #4
 800e06a:	66ba      	str	r2, [r7, #104]	; 0x68
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	461a      	mov	r2, r3
 800e070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e072:	9305      	str	r3, [sp, #20]
 800e074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e07a:	9303      	str	r3, [sp, #12]
 800e07c:	2310      	movs	r3, #16
 800e07e:	9302      	str	r3, [sp, #8]
 800e080:	2300      	movs	r3, #0
 800e082:	9301      	str	r3, [sp, #4]
 800e084:	9200      	str	r2, [sp, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f7fe fe53 	bl	800cd38 <_ntoa_long>
 800e092:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	3301      	adds	r3, #1
 800e098:	603b      	str	r3, [r7, #0]
        break;
 800e09a:	e018      	b.n	800e0ce <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800e09c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e09e:	1c53      	adds	r3, r2, #1
 800e0a0:	647b      	str	r3, [r7, #68]	; 0x44
 800e0a2:	68fc      	ldr	r4, [r7, #12]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	68b9      	ldr	r1, [r7, #8]
 800e0a8:	2025      	movs	r0, #37	; 0x25
 800e0aa:	47a0      	blx	r4
        format++;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	603b      	str	r3, [r7, #0]
        break;
 800e0b2:	e00c      	b.n	800e0ce <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	7818      	ldrb	r0, [r3, #0]
 800e0b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0ba:	1c53      	adds	r3, r2, #1
 800e0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e0be:	68fc      	ldr	r4, [r7, #12]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	47a0      	blx	r4
        format++;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	603b      	str	r3, [r7, #0]
        break;
 800e0cc:	bf00      	nop
  while (*format)
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f47f ab71 	bne.w	800d7ba <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800e0d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d302      	bcc.n	800e0e6 <_vsnprintf+0x94e>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	1e5a      	subs	r2, r3, #1
 800e0e4:	e000      	b.n	800e0e8 <_vsnprintf+0x950>
 800e0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0e8:	68fc      	ldr	r4, [r7, #12]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	68b9      	ldr	r1, [r7, #8]
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800e0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3758      	adds	r7, #88	; 0x58
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bdb0      	pop	{r4, r5, r7, pc}

0800e0fc <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800e0fc:	b40c      	push	{r2, r3}
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b086      	sub	sp, #24
 800e102:	af02      	add	r7, sp, #8
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800e108:	f107 031c 	add.w	r3, r7, #28
 800e10c:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	6879      	ldr	r1, [r7, #4]
 800e118:	4805      	ldr	r0, [pc, #20]	; (800e130 <snprintf_+0x34>)
 800e11a:	f7ff fb3d 	bl	800d798 <_vsnprintf>
 800e11e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800e120:	68fb      	ldr	r3, [r7, #12]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e12c:	b002      	add	sp, #8
 800e12e:	4770      	bx	lr
 800e130:	0800c9e7 	.word	0x0800c9e7

0800e134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e13a:	4b11      	ldr	r3, [pc, #68]	; (800e180 <HAL_MspInit+0x4c>)
 800e13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e13e:	4a10      	ldr	r2, [pc, #64]	; (800e180 <HAL_MspInit+0x4c>)
 800e140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e144:	6413      	str	r3, [r2, #64]	; 0x40
 800e146:	4b0e      	ldr	r3, [pc, #56]	; (800e180 <HAL_MspInit+0x4c>)
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e14e:	607b      	str	r3, [r7, #4]
 800e150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e152:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <HAL_MspInit+0x4c>)
 800e154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e156:	4a0a      	ldr	r2, [pc, #40]	; (800e180 <HAL_MspInit+0x4c>)
 800e158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e15c:	6453      	str	r3, [r2, #68]	; 0x44
 800e15e:	4b08      	ldr	r3, [pc, #32]	; (800e180 <HAL_MspInit+0x4c>)
 800e160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e16a:	2200      	movs	r2, #0
 800e16c:	210f      	movs	r1, #15
 800e16e:	f06f 0001 	mvn.w	r0, #1
 800e172:	f000 fbce 	bl	800e912 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e176:	bf00      	nop
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	40023800 	.word	0x40023800

0800e184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08c      	sub	sp, #48	; 0x30
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e18c:	f107 031c 	add.w	r3, r7, #28
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]
 800e194:	605a      	str	r2, [r3, #4]
 800e196:	609a      	str	r2, [r3, #8]
 800e198:	60da      	str	r2, [r3, #12]
 800e19a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a4d      	ldr	r2, [pc, #308]	; (800e2d8 <HAL_I2C_MspInit+0x154>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d166      	bne.n	800e274 <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1a6:	4b4d      	ldr	r3, [pc, #308]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1aa:	4a4c      	ldr	r2, [pc, #304]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e1ac:	f043 0302 	orr.w	r3, r3, #2
 800e1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800e1b2:	4b4a      	ldr	r3, [pc, #296]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b6:	f003 0302 	and.w	r3, r3, #2
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e1be:	23c0      	movs	r3, #192	; 0xc0
 800e1c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e1c2:	2312      	movs	r3, #18
 800e1c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1ca:	2303      	movs	r3, #3
 800e1cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e1ce:	2304      	movs	r3, #4
 800e1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1d2:	f107 031c 	add.w	r3, r7, #28
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	4841      	ldr	r0, [pc, #260]	; (800e2e0 <HAL_I2C_MspInit+0x15c>)
 800e1da:	f000 ff69 	bl	800f0b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e1de:	4b3f      	ldr	r3, [pc, #252]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e2:	4a3e      	ldr	r2, [pc, #248]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e1e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e1e8:	6413      	str	r3, [r2, #64]	; 0x40
 800e1ea:	4b3c      	ldr	r3, [pc, #240]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800e1f6:	4b3b      	ldr	r3, [pc, #236]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e1f8:	4a3b      	ldr	r2, [pc, #236]	; (800e2e8 <HAL_I2C_MspInit+0x164>)
 800e1fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800e1fc:	4b39      	ldr	r3, [pc, #228]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e1fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e202:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e204:	4b37      	ldr	r3, [pc, #220]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e206:	2240      	movs	r2, #64	; 0x40
 800e208:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e20a:	4b36      	ldr	r3, [pc, #216]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e210:	4b34      	ldr	r3, [pc, #208]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e216:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e218:	4b32      	ldr	r3, [pc, #200]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e21e:	4b31      	ldr	r3, [pc, #196]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e220:	2200      	movs	r2, #0
 800e222:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800e224:	4b2f      	ldr	r3, [pc, #188]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e226:	2200      	movs	r2, #0
 800e228:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e22a:	4b2e      	ldr	r3, [pc, #184]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e230:	4b2c      	ldr	r3, [pc, #176]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e232:	2200      	movs	r2, #0
 800e234:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800e236:	482b      	ldr	r0, [pc, #172]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e238:	f000 fba2 	bl	800e980 <HAL_DMA_Init>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 800e242:	f7fe fbc9 	bl	800c9d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4a26      	ldr	r2, [pc, #152]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e24a:	639a      	str	r2, [r3, #56]	; 0x38
 800e24c:	4a25      	ldr	r2, [pc, #148]	; (800e2e4 <HAL_I2C_MspInit+0x160>)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800e252:	2200      	movs	r2, #0
 800e254:	2105      	movs	r1, #5
 800e256:	201f      	movs	r0, #31
 800e258:	f000 fb5b 	bl	800e912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e25c:	201f      	movs	r0, #31
 800e25e:	f000 fb74 	bl	800e94a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800e262:	2200      	movs	r2, #0
 800e264:	2105      	movs	r1, #5
 800e266:	2020      	movs	r0, #32
 800e268:	f000 fb53 	bl	800e912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e26c:	2020      	movs	r0, #32
 800e26e:	f000 fb6c 	bl	800e94a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800e272:	e02d      	b.n	800e2d0 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a1c      	ldr	r2, [pc, #112]	; (800e2ec <HAL_I2C_MspInit+0x168>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d128      	bne.n	800e2d0 <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e27e:	4b17      	ldr	r3, [pc, #92]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e282:	4a16      	ldr	r2, [pc, #88]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e284:	f043 0302 	orr.w	r3, r3, #2
 800e288:	6313      	str	r3, [r2, #48]	; 0x30
 800e28a:	4b14      	ldr	r3, [pc, #80]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	613b      	str	r3, [r7, #16]
 800e294:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e296:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e29a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e29c:	2312      	movs	r3, #18
 800e29e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2ac:	f107 031c 	add.w	r3, r7, #28
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	480b      	ldr	r0, [pc, #44]	; (800e2e0 <HAL_I2C_MspInit+0x15c>)
 800e2b4:	f000 fefc 	bl	800f0b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e2b8:	4b08      	ldr	r3, [pc, #32]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2bc:	4a07      	ldr	r2, [pc, #28]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e2be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e2c2:	6413      	str	r3, [r2, #64]	; 0x40
 800e2c4:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <HAL_I2C_MspInit+0x158>)
 800e2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
}
 800e2d0:	bf00      	nop
 800e2d2:	3730      	adds	r7, #48	; 0x30
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	40005400 	.word	0x40005400
 800e2dc:	40023800 	.word	0x40023800
 800e2e0:	40020400 	.word	0x40020400
 800e2e4:	200082b0 	.word	0x200082b0
 800e2e8:	400260a0 	.word	0x400260a0
 800e2ec:	40005800 	.word	0x40005800

0800e2f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08a      	sub	sp, #40	; 0x28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2f8:	f107 0314 	add.w	r3, r7, #20
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	605a      	str	r2, [r3, #4]
 800e302:	609a      	str	r2, [r3, #8]
 800e304:	60da      	str	r2, [r3, #12]
 800e306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a45      	ldr	r2, [pc, #276]	; (800e424 <HAL_SPI_MspInit+0x134>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	f040 8084 	bne.w	800e41c <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e314:	4b44      	ldr	r3, [pc, #272]	; (800e428 <HAL_SPI_MspInit+0x138>)
 800e316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e318:	4a43      	ldr	r2, [pc, #268]	; (800e428 <HAL_SPI_MspInit+0x138>)
 800e31a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e31e:	6453      	str	r3, [r2, #68]	; 0x44
 800e320:	4b41      	ldr	r3, [pc, #260]	; (800e428 <HAL_SPI_MspInit+0x138>)
 800e322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e328:	613b      	str	r3, [r7, #16]
 800e32a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e32c:	4b3e      	ldr	r3, [pc, #248]	; (800e428 <HAL_SPI_MspInit+0x138>)
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	4a3d      	ldr	r2, [pc, #244]	; (800e428 <HAL_SPI_MspInit+0x138>)
 800e332:	f043 0301 	orr.w	r3, r3, #1
 800e336:	6313      	str	r3, [r2, #48]	; 0x30
 800e338:	4b3b      	ldr	r3, [pc, #236]	; (800e428 <HAL_SPI_MspInit+0x138>)
 800e33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
 800e342:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e344:	23e0      	movs	r3, #224	; 0xe0
 800e346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e348:	2302      	movs	r3, #2
 800e34a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e350:	2303      	movs	r3, #3
 800e352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e354:	2305      	movs	r3, #5
 800e356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e358:	f107 0314 	add.w	r3, r7, #20
 800e35c:	4619      	mov	r1, r3
 800e35e:	4833      	ldr	r0, [pc, #204]	; (800e42c <HAL_SPI_MspInit+0x13c>)
 800e360:	f000 fea6 	bl	800f0b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800e364:	4b32      	ldr	r3, [pc, #200]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e366:	4a33      	ldr	r2, [pc, #204]	; (800e434 <HAL_SPI_MspInit+0x144>)
 800e368:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800e36a:	4b31      	ldr	r3, [pc, #196]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e36c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e370:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e372:	4b2f      	ldr	r3, [pc, #188]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e374:	2200      	movs	r2, #0
 800e376:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e378:	4b2d      	ldr	r3, [pc, #180]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e37e:	4b2c      	ldr	r3, [pc, #176]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e384:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e386:	4b2a      	ldr	r3, [pc, #168]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e388:	2200      	movs	r2, #0
 800e38a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e38c:	4b28      	ldr	r3, [pc, #160]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e38e:	2200      	movs	r2, #0
 800e390:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800e392:	4b27      	ldr	r3, [pc, #156]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e394:	2200      	movs	r2, #0
 800e396:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e398:	4b25      	ldr	r3, [pc, #148]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e39e:	4b24      	ldr	r3, [pc, #144]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800e3a4:	4822      	ldr	r0, [pc, #136]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e3a6:	f000 faeb 	bl	800e980 <HAL_DMA_Init>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800e3b0:	f7fe fb12 	bl	800c9d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a1e      	ldr	r2, [pc, #120]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e3b8:	659a      	str	r2, [r3, #88]	; 0x58
 800e3ba:	4a1d      	ldr	r2, [pc, #116]	; (800e430 <HAL_SPI_MspInit+0x140>)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800e3c0:	4b1d      	ldr	r3, [pc, #116]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3c2:	4a1e      	ldr	r2, [pc, #120]	; (800e43c <HAL_SPI_MspInit+0x14c>)
 800e3c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800e3c6:	4b1c      	ldr	r3, [pc, #112]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e3cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e3ce:	4b1a      	ldr	r3, [pc, #104]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3d0:	2240      	movs	r2, #64	; 0x40
 800e3d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3d4:	4b18      	ldr	r3, [pc, #96]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e3da:	4b17      	ldr	r3, [pc, #92]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e3e2:	4b15      	ldr	r3, [pc, #84]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e3e8:	4b13      	ldr	r3, [pc, #76]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800e3ee:	4b12      	ldr	r3, [pc, #72]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e3f4:	4b10      	ldr	r3, [pc, #64]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800e400:	480d      	ldr	r0, [pc, #52]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e402:	f000 fabd 	bl	800e980 <HAL_DMA_Init>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800e40c:	f7fe fae4 	bl	800c9d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a09      	ldr	r2, [pc, #36]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e414:	655a      	str	r2, [r3, #84]	; 0x54
 800e416:	4a08      	ldr	r2, [pc, #32]	; (800e438 <HAL_SPI_MspInit+0x148>)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e41c:	bf00      	nop
 800e41e:	3728      	adds	r7, #40	; 0x28
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	40013000 	.word	0x40013000
 800e428:	40023800 	.word	0x40023800
 800e42c:	40020000 	.word	0x40020000
 800e430:	200187f4 	.word	0x200187f4
 800e434:	40026410 	.word	0x40026410
 800e438:	2001c854 	.word	0x2001c854
 800e43c:	40026458 	.word	0x40026458

0800e440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b08a      	sub	sp, #40	; 0x28
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e448:	f107 0314 	add.w	r3, r7, #20
 800e44c:	2200      	movs	r2, #0
 800e44e:	601a      	str	r2, [r3, #0]
 800e450:	605a      	str	r2, [r3, #4]
 800e452:	609a      	str	r2, [r3, #8]
 800e454:	60da      	str	r2, [r3, #12]
 800e456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a32      	ldr	r2, [pc, #200]	; (800e528 <HAL_UART_MspInit+0xe8>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d15d      	bne.n	800e51e <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800e462:	4b32      	ldr	r3, [pc, #200]	; (800e52c <HAL_UART_MspInit+0xec>)
 800e464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e466:	4a31      	ldr	r2, [pc, #196]	; (800e52c <HAL_UART_MspInit+0xec>)
 800e468:	f043 0320 	orr.w	r3, r3, #32
 800e46c:	6453      	str	r3, [r2, #68]	; 0x44
 800e46e:	4b2f      	ldr	r3, [pc, #188]	; (800e52c <HAL_UART_MspInit+0xec>)
 800e470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e472:	f003 0320 	and.w	r3, r3, #32
 800e476:	613b      	str	r3, [r7, #16]
 800e478:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e47a:	4b2c      	ldr	r3, [pc, #176]	; (800e52c <HAL_UART_MspInit+0xec>)
 800e47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47e:	4a2b      	ldr	r2, [pc, #172]	; (800e52c <HAL_UART_MspInit+0xec>)
 800e480:	f043 0304 	orr.w	r3, r3, #4
 800e484:	6313      	str	r3, [r2, #48]	; 0x30
 800e486:	4b29      	ldr	r3, [pc, #164]	; (800e52c <HAL_UART_MspInit+0xec>)
 800e488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e48a:	f003 0304 	and.w	r3, r3, #4
 800e48e:	60fb      	str	r3, [r7, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e492:	23c0      	movs	r3, #192	; 0xc0
 800e494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e496:	2302      	movs	r3, #2
 800e498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e4a2:	2308      	movs	r3, #8
 800e4a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e4a6:	f107 0314 	add.w	r3, r7, #20
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4820      	ldr	r0, [pc, #128]	; (800e530 <HAL_UART_MspInit+0xf0>)
 800e4ae:	f000 fdff 	bl	800f0b0 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800e4b2:	4b20      	ldr	r3, [pc, #128]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4b4:	4a20      	ldr	r2, [pc, #128]	; (800e538 <HAL_UART_MspInit+0xf8>)
 800e4b6:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800e4b8:	4b1e      	ldr	r3, [pc, #120]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4ba:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800e4be:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e4c0:	4b1c      	ldr	r3, [pc, #112]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4c2:	2240      	movs	r2, #64	; 0x40
 800e4c4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4c6:	4b1b      	ldr	r3, [pc, #108]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e4cc:	4b19      	ldr	r3, [pc, #100]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e4d2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e4d4:	4b17      	ldr	r3, [pc, #92]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e4da:	4b16      	ldr	r3, [pc, #88]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800e4e0:	4b14      	ldr	r3, [pc, #80]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e4e6:	4b13      	ldr	r3, [pc, #76]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e4ec:	4b11      	ldr	r3, [pc, #68]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800e4f2:	4810      	ldr	r0, [pc, #64]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e4f4:	f000 fa44 	bl	800e980 <HAL_DMA_Init>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800e4fe:	f7fe fa6b 	bl	800c9d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a0b      	ldr	r2, [pc, #44]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e506:	669a      	str	r2, [r3, #104]	; 0x68
 800e508:	4a0a      	ldr	r2, [pc, #40]	; (800e534 <HAL_UART_MspInit+0xf4>)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800e50e:	2200      	movs	r2, #0
 800e510:	2105      	movs	r1, #5
 800e512:	2047      	movs	r0, #71	; 0x47
 800e514:	f000 f9fd 	bl	800e912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800e518:	2047      	movs	r0, #71	; 0x47
 800e51a:	f000 fa16 	bl	800e94a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e51e:	bf00      	nop
 800e520:	3728      	adds	r7, #40	; 0x28
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	40011400 	.word	0x40011400
 800e52c:	40023800 	.word	0x40023800
 800e530:	40020800 	.word	0x40020800
 800e534:	200084cc 	.word	0x200084cc
 800e538:	400264a0 	.word	0x400264a0

0800e53c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e53c:	b480      	push	{r7}
 800e53e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e540:	bf00      	nop
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e54a:	b480      	push	{r7}
 800e54c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e54e:	e7fe      	b.n	800e54e <HardFault_Handler+0x4>

0800e550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e550:	b480      	push	{r7}
 800e552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e554:	e7fe      	b.n	800e554 <MemManage_Handler+0x4>

0800e556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e556:	b480      	push	{r7}
 800e558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e55a:	e7fe      	b.n	800e55a <BusFault_Handler+0x4>

0800e55c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e560:	e7fe      	b.n	800e560 <UsageFault_Handler+0x4>

0800e562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e562:	b480      	push	{r7}
 800e564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e566:	bf00      	nop
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e574:	f000 f8d2 	bl	800e71c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e578:	f007 f91a 	bl	80157b0 <xTaskGetSchedulerState>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d001      	beq.n	800e586 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800e582:	f007 fce9 	bl	8015f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e586:	bf00      	nop
 800e588:	bd80      	pop	{r7, pc}

0800e58a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800e58e:	2008      	movs	r0, #8
 800e590:	f000 ff84 	bl	800f49c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800e594:	bf00      	nop
 800e596:	bd80      	pop	{r7, pc}

0800e598 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800e59c:	4802      	ldr	r0, [pc, #8]	; (800e5a8 <DMA1_Stream6_IRQHandler+0x10>)
 800e59e:	f000 fb1f 	bl	800ebe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800e5a2:	bf00      	nop
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	200082b0 	.word	0x200082b0

0800e5ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800e5b0:	4802      	ldr	r0, [pc, #8]	; (800e5bc <I2C1_EV_IRQHandler+0x10>)
 800e5b2:	f001 f935 	bl	800f820 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800e5b6:	bf00      	nop
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20008310 	.word	0x20008310

0800e5c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800e5c4:	4802      	ldr	r0, [pc, #8]	; (800e5d0 <I2C1_ER_IRQHandler+0x10>)
 800e5c6:	f001 f945 	bl	800f854 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800e5ca:	bf00      	nop
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20008310 	.word	0x20008310

0800e5d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800e5d8:	4802      	ldr	r0, [pc, #8]	; (800e5e4 <DMA2_Stream0_IRQHandler+0x10>)
 800e5da:	f000 fb01 	bl	800ebe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e5de:	bf00      	nop
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	200187f4 	.word	0x200187f4

0800e5e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800e5ec:	4802      	ldr	r0, [pc, #8]	; (800e5f8 <DMA2_Stream3_IRQHandler+0x10>)
 800e5ee:	f000 faf7 	bl	800ebe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800e5f2:	bf00      	nop
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	2001c854 	.word	0x2001c854

0800e5fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800e600:	4802      	ldr	r0, [pc, #8]	; (800e60c <DMA2_Stream6_IRQHandler+0x10>)
 800e602:	f000 faed 	bl	800ebe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800e606:	bf00      	nop
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	200084cc 	.word	0x200084cc

0800e610 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800e614:	4802      	ldr	r0, [pc, #8]	; (800e620 <USART6_IRQHandler+0x10>)
 800e616:	f004 fb37 	bl	8012c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800e61a:	bf00      	nop
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	20018700 	.word	0x20018700

0800e624 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e624:	b480      	push	{r7}
 800e626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e628:	4b07      	ldr	r3, [pc, #28]	; (800e648 <SystemInit+0x24>)
 800e62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e62e:	4a06      	ldr	r2, [pc, #24]	; (800e648 <SystemInit+0x24>)
 800e630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800e638:	4b03      	ldr	r3, [pc, #12]	; (800e648 <SystemInit+0x24>)
 800e63a:	4a04      	ldr	r2, [pc, #16]	; (800e64c <SystemInit+0x28>)
 800e63c:	609a      	str	r2, [r3, #8]
#endif
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	e000ed00 	.word	0xe000ed00
 800e64c:	08008000 	.word	0x08008000

0800e650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e650:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e688 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e654:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e656:	e003      	b.n	800e660 <LoopCopyDataInit>

0800e658 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e658:	4b0c      	ldr	r3, [pc, #48]	; (800e68c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e65a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e65c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e65e:	3104      	adds	r1, #4

0800e660 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e660:	480b      	ldr	r0, [pc, #44]	; (800e690 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e662:	4b0c      	ldr	r3, [pc, #48]	; (800e694 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e664:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e666:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e668:	d3f6      	bcc.n	800e658 <CopyDataInit>
  ldr  r2, =_sbss
 800e66a:	4a0b      	ldr	r2, [pc, #44]	; (800e698 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e66c:	e002      	b.n	800e674 <LoopFillZerobss>

0800e66e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e66e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e670:	f842 3b04 	str.w	r3, [r2], #4

0800e674 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e674:	4b09      	ldr	r3, [pc, #36]	; (800e69c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e676:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e678:	d3f9      	bcc.n	800e66e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e67a:	f7ff ffd3 	bl	800e624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e67e:	f007 fee3 	bl	8016448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e682:	f7fd fa1f 	bl	800bac4 <main>
  bx  lr    
 800e686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e688:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e68c:	0802080c 	.word	0x0802080c
  ldr  r0, =_sdata
 800e690:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e694:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 800e698:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800e69c:	2001c8c0 	.word	0x2001c8c0

0800e6a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e6a0:	e7fe      	b.n	800e6a0 <ADC_IRQHandler>

0800e6a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e6a6:	2003      	movs	r0, #3
 800e6a8:	f000 f928 	bl	800e8fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e6ac:	200f      	movs	r0, #15
 800e6ae:	f000 f805 	bl	800e6bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800e6b2:	f7ff fd3f 	bl	800e134 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e6c4:	4b12      	ldr	r3, [pc, #72]	; (800e710 <HAL_InitTick+0x54>)
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	4b12      	ldr	r3, [pc, #72]	; (800e714 <HAL_InitTick+0x58>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e6d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f000 f943 	bl	800e966 <HAL_SYSTICK_Config>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d001      	beq.n	800e6ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e00e      	b.n	800e708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b0f      	cmp	r3, #15
 800e6ee:	d80a      	bhi.n	800e706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	f000 f90b 	bl	800e912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e6fc:	4a06      	ldr	r2, [pc, #24]	; (800e718 <HAL_InitTick+0x5c>)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	e000      	b.n	800e708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e706:	2301      	movs	r3, #1
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20000014 	.word	0x20000014
 800e714:	2000001c 	.word	0x2000001c
 800e718:	20000018 	.word	0x20000018

0800e71c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e720:	4b06      	ldr	r3, [pc, #24]	; (800e73c <HAL_IncTick+0x20>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	4b06      	ldr	r3, [pc, #24]	; (800e740 <HAL_IncTick+0x24>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4413      	add	r3, r2
 800e72c:	4a04      	ldr	r2, [pc, #16]	; (800e740 <HAL_IncTick+0x24>)
 800e72e:	6013      	str	r3, [r2, #0]
}
 800e730:	bf00      	nop
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	2000001c 	.word	0x2000001c
 800e740:	2001c8bc 	.word	0x2001c8bc

0800e744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
  return uwTick;
 800e748:	4b03      	ldr	r3, [pc, #12]	; (800e758 <HAL_GetTick+0x14>)
 800e74a:	681b      	ldr	r3, [r3, #0]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	2001c8bc 	.word	0x2001c8bc

0800e75c <__NVIC_SetPriorityGrouping>:
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e76c:	4b0b      	ldr	r3, [pc, #44]	; (800e79c <__NVIC_SetPriorityGrouping+0x40>)
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e778:	4013      	ands	r3, r2
 800e77a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800e784:	4b06      	ldr	r3, [pc, #24]	; (800e7a0 <__NVIC_SetPriorityGrouping+0x44>)
 800e786:	4313      	orrs	r3, r2
 800e788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e78a:	4a04      	ldr	r2, [pc, #16]	; (800e79c <__NVIC_SetPriorityGrouping+0x40>)
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	60d3      	str	r3, [r2, #12]
}
 800e790:	bf00      	nop
 800e792:	3714      	adds	r7, #20
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	e000ed00 	.word	0xe000ed00
 800e7a0:	05fa0000 	.word	0x05fa0000

0800e7a4 <__NVIC_GetPriorityGrouping>:
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e7a8:	4b04      	ldr	r3, [pc, #16]	; (800e7bc <__NVIC_GetPriorityGrouping+0x18>)
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	0a1b      	lsrs	r3, r3, #8
 800e7ae:	f003 0307 	and.w	r3, r3, #7
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	e000ed00 	.word	0xe000ed00

0800e7c0 <__NVIC_EnableIRQ>:
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	db0b      	blt.n	800e7ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	f003 021f 	and.w	r2, r3, #31
 800e7d8:	4907      	ldr	r1, [pc, #28]	; (800e7f8 <__NVIC_EnableIRQ+0x38>)
 800e7da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7de:	095b      	lsrs	r3, r3, #5
 800e7e0:	2001      	movs	r0, #1
 800e7e2:	fa00 f202 	lsl.w	r2, r0, r2
 800e7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e7ea:	bf00      	nop
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	e000e100 	.word	0xe000e100

0800e7fc <__NVIC_SetPriority>:
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	6039      	str	r1, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	db0a      	blt.n	800e826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	b2da      	uxtb	r2, r3
 800e814:	490c      	ldr	r1, [pc, #48]	; (800e848 <__NVIC_SetPriority+0x4c>)
 800e816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e81a:	0112      	lsls	r2, r2, #4
 800e81c:	b2d2      	uxtb	r2, r2
 800e81e:	440b      	add	r3, r1
 800e820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e824:	e00a      	b.n	800e83c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	4908      	ldr	r1, [pc, #32]	; (800e84c <__NVIC_SetPriority+0x50>)
 800e82c:	79fb      	ldrb	r3, [r7, #7]
 800e82e:	f003 030f 	and.w	r3, r3, #15
 800e832:	3b04      	subs	r3, #4
 800e834:	0112      	lsls	r2, r2, #4
 800e836:	b2d2      	uxtb	r2, r2
 800e838:	440b      	add	r3, r1
 800e83a:	761a      	strb	r2, [r3, #24]
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	e000e100 	.word	0xe000e100
 800e84c:	e000ed00 	.word	0xe000ed00

0800e850 <NVIC_EncodePriority>:
{
 800e850:	b480      	push	{r7}
 800e852:	b089      	sub	sp, #36	; 0x24
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f003 0307 	and.w	r3, r3, #7
 800e862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	f1c3 0307 	rsb	r3, r3, #7
 800e86a:	2b04      	cmp	r3, #4
 800e86c:	bf28      	it	cs
 800e86e:	2304      	movcs	r3, #4
 800e870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	3304      	adds	r3, #4
 800e876:	2b06      	cmp	r3, #6
 800e878:	d902      	bls.n	800e880 <NVIC_EncodePriority+0x30>
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	3b03      	subs	r3, #3
 800e87e:	e000      	b.n	800e882 <NVIC_EncodePriority+0x32>
 800e880:	2300      	movs	r3, #0
 800e882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e884:	f04f 32ff 	mov.w	r2, #4294967295
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	fa02 f303 	lsl.w	r3, r2, r3
 800e88e:	43da      	mvns	r2, r3
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	401a      	ands	r2, r3
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e898:	f04f 31ff 	mov.w	r1, #4294967295
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	fa01 f303 	lsl.w	r3, r1, r3
 800e8a2:	43d9      	mvns	r1, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e8a8:	4313      	orrs	r3, r2
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3724      	adds	r7, #36	; 0x24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
	...

0800e8b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e8c8:	d301      	bcc.n	800e8ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e00f      	b.n	800e8ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e8ce:	4a0a      	ldr	r2, [pc, #40]	; (800e8f8 <SysTick_Config+0x40>)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e8d6:	210f      	movs	r1, #15
 800e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8dc:	f7ff ff8e 	bl	800e7fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e8e0:	4b05      	ldr	r3, [pc, #20]	; (800e8f8 <SysTick_Config+0x40>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e8e6:	4b04      	ldr	r3, [pc, #16]	; (800e8f8 <SysTick_Config+0x40>)
 800e8e8:	2207      	movs	r2, #7
 800e8ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	e000e010 	.word	0xe000e010

0800e8fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7ff ff29 	bl	800e75c <__NVIC_SetPriorityGrouping>
}
 800e90a:	bf00      	nop
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e912:	b580      	push	{r7, lr}
 800e914:	b086      	sub	sp, #24
 800e916:	af00      	add	r7, sp, #0
 800e918:	4603      	mov	r3, r0
 800e91a:	60b9      	str	r1, [r7, #8]
 800e91c:	607a      	str	r2, [r7, #4]
 800e91e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800e920:	2300      	movs	r3, #0
 800e922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e924:	f7ff ff3e 	bl	800e7a4 <__NVIC_GetPriorityGrouping>
 800e928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	68b9      	ldr	r1, [r7, #8]
 800e92e:	6978      	ldr	r0, [r7, #20]
 800e930:	f7ff ff8e 	bl	800e850 <NVIC_EncodePriority>
 800e934:	4602      	mov	r2, r0
 800e936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e93a:	4611      	mov	r1, r2
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7ff ff5d 	bl	800e7fc <__NVIC_SetPriority>
}
 800e942:	bf00      	nop
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
 800e950:	4603      	mov	r3, r0
 800e952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff ff31 	bl	800e7c0 <__NVIC_EnableIRQ>
}
 800e95e:	bf00      	nop
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7ff ffa2 	bl	800e8b8 <SysTick_Config>
 800e974:	4603      	mov	r3, r0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b086      	sub	sp, #24
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e98c:	f7ff feda 	bl	800e744 <HAL_GetTick>
 800e990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	e099      	b.n	800ead0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f022 0201 	bic.w	r2, r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e9bc:	e00f      	b.n	800e9de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e9be:	f7ff fec1 	bl	800e744 <HAL_GetTick>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	2b05      	cmp	r3, #5
 800e9ca:	d908      	bls.n	800e9de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2220      	movs	r2, #32
 800e9d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2203      	movs	r2, #3
 800e9d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e9da:	2303      	movs	r3, #3
 800e9dc:	e078      	b.n	800ead0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e8      	bne.n	800e9be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	4b38      	ldr	r3, [pc, #224]	; (800ead8 <HAL_DMA_Init+0x158>)
 800e9f8:	4013      	ands	r3, r2
 800e9fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ea0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ea16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	699b      	ldr	r3, [r3, #24]
 800ea1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ea22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a1b      	ldr	r3, [r3, #32]
 800ea28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	d107      	bne.n	800ea48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea40:	4313      	orrs	r3, r2
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	4313      	orrs	r3, r2
 800ea46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	697a      	ldr	r2, [r7, #20]
 800ea4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	f023 0307 	bic.w	r3, r3, #7
 800ea5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	2b04      	cmp	r3, #4
 800ea70:	d117      	bne.n	800eaa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00e      	beq.n	800eaa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 fa99 	bl	800efbc <DMA_CheckFifoParam>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d008      	beq.n	800eaa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2240      	movs	r2, #64	; 0x40
 800ea94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e016      	b.n	800ead0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fa50 	bl	800ef50 <DMA_CalcBaseAndBitshift>
 800eab0:	4603      	mov	r3, r0
 800eab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eab8:	223f      	movs	r2, #63	; 0x3f
 800eaba:	409a      	lsls	r2, r3
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3718      	adds	r7, #24
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	e010803f 	.word	0xe010803f

0800eadc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d101      	bne.n	800eb02 <HAL_DMA_Start_IT+0x26>
 800eafe:	2302      	movs	r3, #2
 800eb00:	e048      	b.n	800eb94 <HAL_DMA_Start_IT+0xb8>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d137      	bne.n	800eb86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2202      	movs	r2, #2
 800eb1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	68b9      	ldr	r1, [r7, #8]
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f000 f9e2 	bl	800eef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb34:	223f      	movs	r2, #63	; 0x3f
 800eb36:	409a      	lsls	r2, r3
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f042 0216 	orr.w	r2, r2, #22
 800eb4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	695a      	ldr	r2, [r3, #20]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eb5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d007      	beq.n	800eb74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f042 0208 	orr.w	r2, r2, #8
 800eb72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f042 0201 	orr.w	r2, r2, #1
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	e005      	b.n	800eb92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800eb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d004      	beq.n	800ebba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2280      	movs	r2, #128	; 0x80
 800ebb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e00c      	b.n	800ebd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2205      	movs	r2, #5
 800ebbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f022 0201 	bic.w	r2, r2, #1
 800ebd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800ebec:	4b92      	ldr	r3, [pc, #584]	; (800ee38 <HAL_DMA_IRQHandler+0x258>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a92      	ldr	r2, [pc, #584]	; (800ee3c <HAL_DMA_IRQHandler+0x25c>)
 800ebf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf6:	0a9b      	lsrs	r3, r3, #10
 800ebf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec0a:	2208      	movs	r2, #8
 800ec0c:	409a      	lsls	r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	4013      	ands	r3, r2
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d01a      	beq.n	800ec4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d013      	beq.n	800ec4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f022 0204 	bic.w	r2, r2, #4
 800ec32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec38:	2208      	movs	r2, #8
 800ec3a:	409a      	lsls	r2, r3
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec44:	f043 0201 	orr.w	r2, r3, #1
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec50:	2201      	movs	r2, #1
 800ec52:	409a      	lsls	r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	4013      	ands	r3, r2
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d012      	beq.n	800ec82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00b      	beq.n	800ec82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec6e:	2201      	movs	r2, #1
 800ec70:	409a      	lsls	r2, r3
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec7a:	f043 0202 	orr.w	r2, r3, #2
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec86:	2204      	movs	r2, #4
 800ec88:	409a      	lsls	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d012      	beq.n	800ecb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 0302 	and.w	r3, r3, #2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00b      	beq.n	800ecb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eca4:	2204      	movs	r2, #4
 800eca6:	409a      	lsls	r2, r3
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb0:	f043 0204 	orr.w	r2, r3, #4
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecbc:	2210      	movs	r2, #16
 800ecbe:	409a      	lsls	r2, r3
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d043      	beq.n	800ed50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f003 0308 	and.w	r3, r3, #8
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d03c      	beq.n	800ed50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecda:	2210      	movs	r2, #16
 800ecdc:	409a      	lsls	r2, r3
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d018      	beq.n	800ed22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d108      	bne.n	800ed10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d024      	beq.n	800ed50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	4798      	blx	r3
 800ed0e:	e01f      	b.n	800ed50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d01b      	beq.n	800ed50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	4798      	blx	r3
 800ed20:	e016      	b.n	800ed50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d107      	bne.n	800ed40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f022 0208 	bic.w	r2, r2, #8
 800ed3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d003      	beq.n	800ed50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed54:	2220      	movs	r2, #32
 800ed56:	409a      	lsls	r2, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 808e 	beq.w	800ee7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f003 0310 	and.w	r3, r3, #16
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 8086 	beq.w	800ee7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed76:	2220      	movs	r2, #32
 800ed78:	409a      	lsls	r2, r3
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b05      	cmp	r3, #5
 800ed88:	d136      	bne.n	800edf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f022 0216 	bic.w	r2, r2, #22
 800ed98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	695a      	ldr	r2, [r3, #20]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eda8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d103      	bne.n	800edba <HAL_DMA_IRQHandler+0x1da>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d007      	beq.n	800edca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f022 0208 	bic.w	r2, r2, #8
 800edc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edce:	223f      	movs	r2, #63	; 0x3f
 800edd0:	409a      	lsls	r2, r3
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2201      	movs	r2, #1
 800ede2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edea:	2b00      	cmp	r3, #0
 800edec:	d07d      	beq.n	800eeea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	4798      	blx	r3
        }
        return;
 800edf6:	e078      	b.n	800eeea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d01c      	beq.n	800ee40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d108      	bne.n	800ee26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d030      	beq.n	800ee7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	4798      	blx	r3
 800ee24:	e02b      	b.n	800ee7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d027      	beq.n	800ee7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	4798      	blx	r3
 800ee36:	e022      	b.n	800ee7e <HAL_DMA_IRQHandler+0x29e>
 800ee38:	20000014 	.word	0x20000014
 800ee3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10f      	bne.n	800ee6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f022 0210 	bic.w	r2, r2, #16
 800ee5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d003      	beq.n	800ee7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d032      	beq.n	800eeec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d022      	beq.n	800eed8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2205      	movs	r2, #5
 800ee96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f022 0201 	bic.w	r2, r2, #1
 800eea8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	3301      	adds	r3, #1
 800eeae:	60bb      	str	r3, [r7, #8]
 800eeb0:	697a      	ldr	r2, [r7, #20]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d307      	bcc.n	800eec6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f003 0301 	and.w	r3, r3, #1
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d1f2      	bne.n	800eeaa <HAL_DMA_IRQHandler+0x2ca>
 800eec4:	e000      	b.n	800eec8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800eec6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	4798      	blx	r3
 800eee8:	e000      	b.n	800eeec <HAL_DMA_IRQHandler+0x30c>
        return;
 800eeea:	bf00      	nop
    }
  }
}
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop

0800eef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ef10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	2b40      	cmp	r3, #64	; 0x40
 800ef20:	d108      	bne.n	800ef34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ef32:	e007      	b.n	800ef44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	60da      	str	r2, [r3, #12]
}
 800ef44:	bf00      	nop
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	3b10      	subs	r3, #16
 800ef60:	4a13      	ldr	r2, [pc, #76]	; (800efb0 <DMA_CalcBaseAndBitshift+0x60>)
 800ef62:	fba2 2303 	umull	r2, r3, r2, r3
 800ef66:	091b      	lsrs	r3, r3, #4
 800ef68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ef6a:	4a12      	ldr	r2, [pc, #72]	; (800efb4 <DMA_CalcBaseAndBitshift+0x64>)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2b03      	cmp	r3, #3
 800ef7c:	d908      	bls.n	800ef90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b0c      	ldr	r3, [pc, #48]	; (800efb8 <DMA_CalcBaseAndBitshift+0x68>)
 800ef86:	4013      	ands	r3, r2
 800ef88:	1d1a      	adds	r2, r3, #4
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	659a      	str	r2, [r3, #88]	; 0x58
 800ef8e:	e006      	b.n	800ef9e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	461a      	mov	r2, r3
 800ef96:	4b08      	ldr	r3, [pc, #32]	; (800efb8 <DMA_CalcBaseAndBitshift+0x68>)
 800ef98:	4013      	ands	r3, r2
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3714      	adds	r7, #20
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	aaaaaaab 	.word	0xaaaaaaab
 800efb4:	08020788 	.word	0x08020788
 800efb8:	fffffc00 	.word	0xfffffc00

0800efbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efc4:	2300      	movs	r3, #0
 800efc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d11f      	bne.n	800f016 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	2b03      	cmp	r3, #3
 800efda:	d855      	bhi.n	800f088 <DMA_CheckFifoParam+0xcc>
 800efdc:	a201      	add	r2, pc, #4	; (adr r2, 800efe4 <DMA_CheckFifoParam+0x28>)
 800efde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe2:	bf00      	nop
 800efe4:	0800eff5 	.word	0x0800eff5
 800efe8:	0800f007 	.word	0x0800f007
 800efec:	0800eff5 	.word	0x0800eff5
 800eff0:	0800f089 	.word	0x0800f089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d045      	beq.n	800f08c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f004:	e042      	b.n	800f08c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f00a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f00e:	d13f      	bne.n	800f090 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800f010:	2301      	movs	r3, #1
 800f012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f014:	e03c      	b.n	800f090 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	699b      	ldr	r3, [r3, #24]
 800f01a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f01e:	d121      	bne.n	800f064 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2b03      	cmp	r3, #3
 800f024:	d836      	bhi.n	800f094 <DMA_CheckFifoParam+0xd8>
 800f026:	a201      	add	r2, pc, #4	; (adr r2, 800f02c <DMA_CheckFifoParam+0x70>)
 800f028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f02c:	0800f03d 	.word	0x0800f03d
 800f030:	0800f043 	.word	0x0800f043
 800f034:	0800f03d 	.word	0x0800f03d
 800f038:	0800f055 	.word	0x0800f055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	73fb      	strb	r3, [r7, #15]
      break;
 800f040:	e02f      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d024      	beq.n	800f098 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800f04e:	2301      	movs	r3, #1
 800f050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f052:	e021      	b.n	800f098 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f05c:	d11e      	bne.n	800f09c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800f05e:	2301      	movs	r3, #1
 800f060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f062:	e01b      	b.n	800f09c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2b02      	cmp	r3, #2
 800f068:	d902      	bls.n	800f070 <DMA_CheckFifoParam+0xb4>
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d003      	beq.n	800f076 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f06e:	e018      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800f070:	2301      	movs	r3, #1
 800f072:	73fb      	strb	r3, [r7, #15]
      break;
 800f074:	e015      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00e      	beq.n	800f0a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	73fb      	strb	r3, [r7, #15]
      break;
 800f086:	e00b      	b.n	800f0a0 <DMA_CheckFifoParam+0xe4>
      break;
 800f088:	bf00      	nop
 800f08a:	e00a      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800f08c:	bf00      	nop
 800f08e:	e008      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800f090:	bf00      	nop
 800f092:	e006      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800f094:	bf00      	nop
 800f096:	e004      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800f098:	bf00      	nop
 800f09a:	e002      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800f09c:	bf00      	nop
 800f09e:	e000      	b.n	800f0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800f0a0:	bf00      	nop
    }
  } 
  
  return status; 
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b089      	sub	sp, #36	; 0x24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	61fb      	str	r3, [r7, #28]
 800f0ce:	e175      	b.n	800f3bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f0e4:	693a      	ldr	r2, [r7, #16]
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	f040 8164 	bne.w	800f3b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d00b      	beq.n	800f10e <HAL_GPIO_Init+0x5e>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	2b02      	cmp	r3, #2
 800f0fc:	d007      	beq.n	800f10e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f102:	2b11      	cmp	r3, #17
 800f104:	d003      	beq.n	800f10e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	2b12      	cmp	r3, #18
 800f10c:	d130      	bne.n	800f170 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	2203      	movs	r2, #3
 800f11a:	fa02 f303 	lsl.w	r3, r2, r3
 800f11e:	43db      	mvns	r3, r3
 800f120:	69ba      	ldr	r2, [r7, #24]
 800f122:	4013      	ands	r3, r2
 800f124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	68da      	ldr	r2, [r3, #12]
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	fa02 f303 	lsl.w	r3, r2, r3
 800f132:	69ba      	ldr	r2, [r7, #24]
 800f134:	4313      	orrs	r3, r2
 800f136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	69ba      	ldr	r2, [r7, #24]
 800f13c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f144:	2201      	movs	r2, #1
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	fa02 f303 	lsl.w	r3, r2, r3
 800f14c:	43db      	mvns	r3, r3
 800f14e:	69ba      	ldr	r2, [r7, #24]
 800f150:	4013      	ands	r3, r2
 800f152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	091b      	lsrs	r3, r3, #4
 800f15a:	f003 0201 	and.w	r2, r3, #1
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	fa02 f303 	lsl.w	r3, r2, r3
 800f164:	69ba      	ldr	r2, [r7, #24]
 800f166:	4313      	orrs	r3, r2
 800f168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	2203      	movs	r2, #3
 800f17c:	fa02 f303 	lsl.w	r3, r2, r3
 800f180:	43db      	mvns	r3, r3
 800f182:	69ba      	ldr	r2, [r7, #24]
 800f184:	4013      	ands	r3, r2
 800f186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	689a      	ldr	r2, [r3, #8]
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	005b      	lsls	r3, r3, #1
 800f190:	fa02 f303 	lsl.w	r3, r2, r3
 800f194:	69ba      	ldr	r2, [r7, #24]
 800f196:	4313      	orrs	r3, r2
 800f198:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	69ba      	ldr	r2, [r7, #24]
 800f19e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d003      	beq.n	800f1b0 <HAL_GPIO_Init+0x100>
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	2b12      	cmp	r3, #18
 800f1ae:	d123      	bne.n	800f1f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	08da      	lsrs	r2, r3, #3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	3208      	adds	r2, #8
 800f1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	f003 0307 	and.w	r3, r3, #7
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	220f      	movs	r2, #15
 800f1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800f1cc:	43db      	mvns	r3, r3
 800f1ce:	69ba      	ldr	r2, [r7, #24]
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	691a      	ldr	r2, [r3, #16]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	f003 0307 	and.w	r3, r3, #7
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	08da      	lsrs	r2, r3, #3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	3208      	adds	r2, #8
 800f1f2:	69b9      	ldr	r1, [r7, #24]
 800f1f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	005b      	lsls	r3, r3, #1
 800f202:	2203      	movs	r2, #3
 800f204:	fa02 f303 	lsl.w	r3, r2, r3
 800f208:	43db      	mvns	r3, r3
 800f20a:	69ba      	ldr	r2, [r7, #24]
 800f20c:	4013      	ands	r3, r2
 800f20e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	f003 0203 	and.w	r2, r3, #3
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	fa02 f303 	lsl.w	r3, r2, r3
 800f220:	69ba      	ldr	r2, [r7, #24]
 800f222:	4313      	orrs	r3, r2
 800f224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	69ba      	ldr	r2, [r7, #24]
 800f22a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f234:	2b00      	cmp	r3, #0
 800f236:	f000 80be 	beq.w	800f3b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f23a:	4b65      	ldr	r3, [pc, #404]	; (800f3d0 <HAL_GPIO_Init+0x320>)
 800f23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f23e:	4a64      	ldr	r2, [pc, #400]	; (800f3d0 <HAL_GPIO_Init+0x320>)
 800f240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f244:	6453      	str	r3, [r2, #68]	; 0x44
 800f246:	4b62      	ldr	r3, [pc, #392]	; (800f3d0 <HAL_GPIO_Init+0x320>)
 800f248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f24a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f24e:	60fb      	str	r3, [r7, #12]
 800f250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800f252:	4a60      	ldr	r2, [pc, #384]	; (800f3d4 <HAL_GPIO_Init+0x324>)
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	089b      	lsrs	r3, r3, #2
 800f258:	3302      	adds	r3, #2
 800f25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	f003 0303 	and.w	r3, r3, #3
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	220f      	movs	r2, #15
 800f26a:	fa02 f303 	lsl.w	r3, r2, r3
 800f26e:	43db      	mvns	r3, r3
 800f270:	69ba      	ldr	r2, [r7, #24]
 800f272:	4013      	ands	r3, r2
 800f274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a57      	ldr	r2, [pc, #348]	; (800f3d8 <HAL_GPIO_Init+0x328>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d037      	beq.n	800f2ee <HAL_GPIO_Init+0x23e>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a56      	ldr	r2, [pc, #344]	; (800f3dc <HAL_GPIO_Init+0x32c>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d031      	beq.n	800f2ea <HAL_GPIO_Init+0x23a>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a55      	ldr	r2, [pc, #340]	; (800f3e0 <HAL_GPIO_Init+0x330>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d02b      	beq.n	800f2e6 <HAL_GPIO_Init+0x236>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a54      	ldr	r2, [pc, #336]	; (800f3e4 <HAL_GPIO_Init+0x334>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d025      	beq.n	800f2e2 <HAL_GPIO_Init+0x232>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a53      	ldr	r2, [pc, #332]	; (800f3e8 <HAL_GPIO_Init+0x338>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d01f      	beq.n	800f2de <HAL_GPIO_Init+0x22e>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a52      	ldr	r2, [pc, #328]	; (800f3ec <HAL_GPIO_Init+0x33c>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d019      	beq.n	800f2da <HAL_GPIO_Init+0x22a>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a51      	ldr	r2, [pc, #324]	; (800f3f0 <HAL_GPIO_Init+0x340>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d013      	beq.n	800f2d6 <HAL_GPIO_Init+0x226>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a50      	ldr	r2, [pc, #320]	; (800f3f4 <HAL_GPIO_Init+0x344>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d00d      	beq.n	800f2d2 <HAL_GPIO_Init+0x222>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a4f      	ldr	r2, [pc, #316]	; (800f3f8 <HAL_GPIO_Init+0x348>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d007      	beq.n	800f2ce <HAL_GPIO_Init+0x21e>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a4e      	ldr	r2, [pc, #312]	; (800f3fc <HAL_GPIO_Init+0x34c>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d101      	bne.n	800f2ca <HAL_GPIO_Init+0x21a>
 800f2c6:	2309      	movs	r3, #9
 800f2c8:	e012      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2ca:	230a      	movs	r3, #10
 800f2cc:	e010      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2ce:	2308      	movs	r3, #8
 800f2d0:	e00e      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2d2:	2307      	movs	r3, #7
 800f2d4:	e00c      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2d6:	2306      	movs	r3, #6
 800f2d8:	e00a      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2da:	2305      	movs	r3, #5
 800f2dc:	e008      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2de:	2304      	movs	r3, #4
 800f2e0:	e006      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	e004      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2e6:	2302      	movs	r3, #2
 800f2e8:	e002      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e000      	b.n	800f2f0 <HAL_GPIO_Init+0x240>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	69fa      	ldr	r2, [r7, #28]
 800f2f2:	f002 0203 	and.w	r2, r2, #3
 800f2f6:	0092      	lsls	r2, r2, #2
 800f2f8:	4093      	lsls	r3, r2
 800f2fa:	69ba      	ldr	r2, [r7, #24]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800f300:	4934      	ldr	r1, [pc, #208]	; (800f3d4 <HAL_GPIO_Init+0x324>)
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	089b      	lsrs	r3, r3, #2
 800f306:	3302      	adds	r3, #2
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f30e:	4b3c      	ldr	r3, [pc, #240]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	43db      	mvns	r3, r3
 800f318:	69ba      	ldr	r2, [r7, #24]
 800f31a:	4013      	ands	r3, r2
 800f31c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	4313      	orrs	r3, r2
 800f330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f332:	4a33      	ldr	r2, [pc, #204]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f338:	4b31      	ldr	r3, [pc, #196]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	43db      	mvns	r3, r3
 800f342:	69ba      	ldr	r2, [r7, #24]
 800f344:	4013      	ands	r3, r2
 800f346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800f354:	69ba      	ldr	r2, [r7, #24]
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	4313      	orrs	r3, r2
 800f35a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f35c:	4a28      	ldr	r2, [pc, #160]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f362:	4b27      	ldr	r3, [pc, #156]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	43db      	mvns	r3, r3
 800f36c:	69ba      	ldr	r2, [r7, #24]
 800f36e:	4013      	ands	r3, r2
 800f370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d003      	beq.n	800f386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800f37e:	69ba      	ldr	r2, [r7, #24]
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	4313      	orrs	r3, r2
 800f384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f386:	4a1e      	ldr	r2, [pc, #120]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f38c:	4b1c      	ldr	r3, [pc, #112]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	43db      	mvns	r3, r3
 800f396:	69ba      	ldr	r2, [r7, #24]
 800f398:	4013      	ands	r3, r2
 800f39a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d003      	beq.n	800f3b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800f3a8:	69ba      	ldr	r2, [r7, #24]
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f3b0:	4a13      	ldr	r2, [pc, #76]	; (800f400 <HAL_GPIO_Init+0x350>)
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	61fb      	str	r3, [r7, #28]
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	2b0f      	cmp	r3, #15
 800f3c0:	f67f ae86 	bls.w	800f0d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800f3c4:	bf00      	nop
 800f3c6:	3724      	adds	r7, #36	; 0x24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	40023800 	.word	0x40023800
 800f3d4:	40013800 	.word	0x40013800
 800f3d8:	40020000 	.word	0x40020000
 800f3dc:	40020400 	.word	0x40020400
 800f3e0:	40020800 	.word	0x40020800
 800f3e4:	40020c00 	.word	0x40020c00
 800f3e8:	40021000 	.word	0x40021000
 800f3ec:	40021400 	.word	0x40021400
 800f3f0:	40021800 	.word	0x40021800
 800f3f4:	40021c00 	.word	0x40021c00
 800f3f8:	40022000 	.word	0x40022000
 800f3fc:	40022400 	.word	0x40022400
 800f400:	40013c00 	.word	0x40013c00

0800f404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	460b      	mov	r3, r1
 800f40e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	691a      	ldr	r2, [r3, #16]
 800f414:	887b      	ldrh	r3, [r7, #2]
 800f416:	4013      	ands	r3, r2
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d002      	beq.n	800f422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f41c:	2301      	movs	r3, #1
 800f41e:	73fb      	strb	r3, [r7, #15]
 800f420:	e001      	b.n	800f426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f422:	2300      	movs	r3, #0
 800f424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f426:	7bfb      	ldrb	r3, [r7, #15]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	460b      	mov	r3, r1
 800f43e:	807b      	strh	r3, [r7, #2]
 800f440:	4613      	mov	r3, r2
 800f442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f444:	787b      	ldrb	r3, [r7, #1]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f44a:	887a      	ldrh	r2, [r7, #2]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800f450:	e003      	b.n	800f45a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800f452:	887b      	ldrh	r3, [r7, #2]
 800f454:	041a      	lsls	r2, r3, #16
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	619a      	str	r2, [r3, #24]
}
 800f45a:	bf00      	nop
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f466:	b480      	push	{r7}
 800f468:	b083      	sub	sp, #12
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	460b      	mov	r3, r1
 800f470:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	695a      	ldr	r2, [r3, #20]
 800f476:	887b      	ldrh	r3, [r7, #2]
 800f478:	4013      	ands	r3, r2
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d004      	beq.n	800f488 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f47e:	887b      	ldrh	r3, [r7, #2]
 800f480:	041a      	lsls	r2, r3, #16
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800f486:	e002      	b.n	800f48e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f488:	887a      	ldrh	r2, [r7, #2]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	619a      	str	r2, [r3, #24]
}
 800f48e:	bf00      	nop
 800f490:	370c      	adds	r7, #12
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
	...

0800f49c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f4a6:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f4a8:	695a      	ldr	r2, [r3, #20]
 800f4aa:	88fb      	ldrh	r3, [r7, #6]
 800f4ac:	4013      	ands	r3, r2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d006      	beq.n	800f4c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f4b2:	4a05      	ldr	r2, [pc, #20]	; (800f4c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f4b4:	88fb      	ldrh	r3, [r7, #6]
 800f4b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f4b8:	88fb      	ldrh	r3, [r7, #6]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fc feca 	bl	800c254 <HAL_GPIO_EXTI_Callback>
  }
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	40013c00 	.word	0x40013c00

0800f4cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e07f      	b.n	800f5de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d106      	bne.n	800f4f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7fe fe46 	bl	800e184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2224      	movs	r2, #36	; 0x24
 800f4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f022 0201 	bic.w	r2, r2, #1
 800f50e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	685a      	ldr	r2, [r3, #4]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f51c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	689a      	ldr	r2, [r3, #8]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f52c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	2b01      	cmp	r3, #1
 800f534:	d107      	bne.n	800f546 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	689a      	ldr	r2, [r3, #8]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f542:	609a      	str	r2, [r3, #8]
 800f544:	e006      	b.n	800f554 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	689a      	ldr	r2, [r3, #8]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f552:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d104      	bne.n	800f566 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	6859      	ldr	r1, [r3, #4]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	4b1d      	ldr	r3, [pc, #116]	; (800f5e8 <HAL_I2C_Init+0x11c>)
 800f572:	430b      	orrs	r3, r1
 800f574:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68da      	ldr	r2, [r3, #12]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	691a      	ldr	r2, [r3, #16]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	ea42 0103 	orr.w	r1, r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	699b      	ldr	r3, [r3, #24]
 800f596:	021a      	lsls	r2, r3, #8
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	430a      	orrs	r2, r1
 800f59e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	69d9      	ldr	r1, [r3, #28]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6a1a      	ldr	r2, [r3, #32]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	430a      	orrs	r2, r1
 800f5ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f042 0201 	orr.w	r2, r2, #1
 800f5be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	02008000 	.word	0x02008000

0800f5ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b088      	sub	sp, #32
 800f5f0:	af02      	add	r7, sp, #8
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	4611      	mov	r1, r2
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	817b      	strh	r3, [r7, #10]
 800f5fe:	460b      	mov	r3, r1
 800f600:	813b      	strh	r3, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b20      	cmp	r3, #32
 800f610:	f040 80fd 	bne.w	800f80e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d002      	beq.n	800f620 <HAL_I2C_Mem_Read+0x34>
 800f61a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d105      	bne.n	800f62c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f626:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f628:	2301      	movs	r3, #1
 800f62a:	e0f1      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f632:	2b01      	cmp	r3, #1
 800f634:	d101      	bne.n	800f63a <HAL_I2C_Mem_Read+0x4e>
 800f636:	2302      	movs	r3, #2
 800f638:	e0ea      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2201      	movs	r2, #1
 800f63e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f642:	f7ff f87f 	bl	800e744 <HAL_GetTick>
 800f646:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	2319      	movs	r3, #25
 800f64e:	2201      	movs	r2, #1
 800f650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 fde7 	bl	8010228 <I2C_WaitOnFlagUntilTimeout>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800f660:	2301      	movs	r3, #1
 800f662:	e0d5      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2222      	movs	r2, #34	; 0x22
 800f668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2240      	movs	r2, #64	; 0x40
 800f670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6a3a      	ldr	r2, [r7, #32]
 800f67e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f68c:	88f8      	ldrh	r0, [r7, #6]
 800f68e:	893a      	ldrh	r2, [r7, #8]
 800f690:	8979      	ldrh	r1, [r7, #10]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	4603      	mov	r3, r0
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 fa7d 	bl	800fb9c <I2C_RequestMemoryRead>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d005      	beq.n	800f6b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e0ad      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	2bff      	cmp	r3, #255	; 0xff
 800f6bc:	d90e      	bls.n	800f6dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	22ff      	movs	r2, #255	; 0xff
 800f6c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	8979      	ldrh	r1, [r7, #10]
 800f6cc:	4b52      	ldr	r3, [pc, #328]	; (800f818 <HAL_I2C_Mem_Read+0x22c>)
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f000 fec9 	bl	801046c <I2C_TransferConfig>
 800f6da:	e00f      	b.n	800f6fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6e0:	b29a      	uxth	r2, r3
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6ea:	b2da      	uxtb	r2, r3
 800f6ec:	8979      	ldrh	r1, [r7, #10]
 800f6ee:	4b4a      	ldr	r3, [pc, #296]	; (800f818 <HAL_I2C_Mem_Read+0x22c>)
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	f000 feb8 	bl	801046c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	2200      	movs	r2, #0
 800f704:	2104      	movs	r1, #4
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	f000 fd8e 	bl	8010228 <I2C_WaitOnFlagUntilTimeout>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d001      	beq.n	800f716 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	e07c      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f720:	b2d2      	uxtb	r2, r2
 800f722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f728:	1c5a      	adds	r2, r3, #1
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f732:	3b01      	subs	r3, #1
 800f734:	b29a      	uxth	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f73e:	b29b      	uxth	r3, r3
 800f740:	3b01      	subs	r3, #1
 800f742:	b29a      	uxth	r2, r3
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d034      	beq.n	800f7bc <HAL_I2C_Mem_Read+0x1d0>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f756:	2b00      	cmp	r3, #0
 800f758:	d130      	bne.n	800f7bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f760:	2200      	movs	r2, #0
 800f762:	2180      	movs	r1, #128	; 0x80
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 fd5f 	bl	8010228 <I2C_WaitOnFlagUntilTimeout>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d001      	beq.n	800f774 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e04d      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f778:	b29b      	uxth	r3, r3
 800f77a:	2bff      	cmp	r3, #255	; 0xff
 800f77c:	d90e      	bls.n	800f79c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	22ff      	movs	r2, #255	; 0xff
 800f782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	8979      	ldrh	r1, [r7, #10]
 800f78c:	2300      	movs	r3, #0
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f000 fe69 	bl	801046c <I2C_TransferConfig>
 800f79a:	e00f      	b.n	800f7bc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	8979      	ldrh	r1, [r7, #10]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 fe58 	bl	801046c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d19a      	bne.n	800f6fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f7c6:	697a      	ldr	r2, [r7, #20]
 800f7c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f000 fdac 	bl	8010328 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d001      	beq.n	800f7da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e01a      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2220      	movs	r2, #32
 800f7e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	6859      	ldr	r1, [r3, #4]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	4b0b      	ldr	r3, [pc, #44]	; (800f81c <HAL_I2C_Mem_Read+0x230>)
 800f7ee:	400b      	ands	r3, r1
 800f7f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2220      	movs	r2, #32
 800f7f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2200      	movs	r2, #0
 800f806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	e000      	b.n	800f810 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800f80e:	2302      	movs	r3, #2
  }
}
 800f810:	4618      	mov	r0, r3
 800f812:	3718      	adds	r7, #24
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	80002400 	.word	0x80002400
 800f81c:	fe00e800 	.word	0xfe00e800

0800f820 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d005      	beq.n	800f84c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	68f9      	ldr	r1, [r7, #12]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	4798      	blx	r3
  }
}
 800f84c:	bf00      	nop
 800f84e:	3710      	adds	r7, #16
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b086      	sub	sp, #24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	699b      	ldr	r3, [r3, #24]
 800f862:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	0a1b      	lsrs	r3, r3, #8
 800f870:	f003 0301 	and.w	r3, r3, #1
 800f874:	2b00      	cmp	r3, #0
 800f876:	d010      	beq.n	800f89a <HAL_I2C_ER_IRQHandler+0x46>
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	09db      	lsrs	r3, r3, #7
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00a      	beq.n	800f89a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f888:	f043 0201 	orr.w	r2, r3, #1
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f898:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	0a9b      	lsrs	r3, r3, #10
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d010      	beq.n	800f8c8 <HAL_I2C_ER_IRQHandler+0x74>
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	09db      	lsrs	r3, r3, #7
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00a      	beq.n	800f8c8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8b6:	f043 0208 	orr.w	r2, r3, #8
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f8c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	0a5b      	lsrs	r3, r3, #9
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d010      	beq.n	800f8f6 <HAL_I2C_ER_IRQHandler+0xa2>
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	09db      	lsrs	r3, r3, #7
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00a      	beq.n	800f8f6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e4:	f043 0202 	orr.w	r2, r3, #2
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8f4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f003 030b 	and.w	r3, r3, #11
 800f902:	2b00      	cmp	r3, #0
 800f904:	d003      	beq.n	800f90e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800f906:	68f9      	ldr	r1, [r7, #12]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fb85 	bl	8010018 <I2C_ITError>
  }
}
 800f90e:	bf00      	nop
 800f910:	3718      	adds	r7, #24
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f916:	b480      	push	{r7}
 800f918:	b083      	sub	sp, #12
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f91e:	bf00      	nop
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f92a:	b480      	push	{r7}
 800f92c:	b083      	sub	sp, #12
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f932:	bf00      	nop
 800f934:	370c      	adds	r7, #12
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr

0800f93e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f93e:	b480      	push	{r7}
 800f940:	b083      	sub	sp, #12
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	460b      	mov	r3, r1
 800f948:	70fb      	strb	r3, [r7, #3]
 800f94a:	4613      	mov	r3, r2
 800f94c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f94e:	bf00      	nop
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f95a:	b480      	push	{r7}
 800f95c:	b083      	sub	sp, #12
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f962:	bf00      	nop
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f976:	bf00      	nop
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f982:	b480      	push	{r7}
 800f984:	b083      	sub	sp, #12
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b086      	sub	sp, #24
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	60b9      	str	r1, [r7, #8]
 800f9a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d101      	bne.n	800f9ba <I2C_Slave_ISR_IT+0x24>
 800f9b6:	2302      	movs	r3, #2
 800f9b8:	e0ec      	b.n	800fb94 <I2C_Slave_ISR_IT+0x1fe>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	095b      	lsrs	r3, r3, #5
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d009      	beq.n	800f9e2 <I2C_Slave_ISR_IT+0x4c>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	095b      	lsrs	r3, r3, #5
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d003      	beq.n	800f9e2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f9da:	6939      	ldr	r1, [r7, #16]
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	f000 f9f1 	bl	800fdc4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	091b      	lsrs	r3, r3, #4
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d04d      	beq.n	800fa8a <I2C_Slave_ISR_IT+0xf4>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	091b      	lsrs	r3, r3, #4
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d047      	beq.n	800fa8a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d128      	bne.n	800fa56 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	2b28      	cmp	r3, #40	; 0x28
 800fa0e:	d108      	bne.n	800fa22 <I2C_Slave_ISR_IT+0x8c>
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fa16:	d104      	bne.n	800fa22 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fa18:	6939      	ldr	r1, [r7, #16]
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 faa8 	bl	800ff70 <I2C_ITListenCplt>
 800fa20:	e032      	b.n	800fa88 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	2b29      	cmp	r3, #41	; 0x29
 800fa2c:	d10e      	bne.n	800fa4c <I2C_Slave_ISR_IT+0xb6>
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fa34:	d00a      	beq.n	800fa4c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2210      	movs	r2, #16
 800fa3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f000 fbaa 	bl	8010198 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f000 f97f 	bl	800fd48 <I2C_ITSlaveSeqCplt>
 800fa4a:	e01d      	b.n	800fa88 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2210      	movs	r2, #16
 800fa52:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fa54:	e096      	b.n	800fb84 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2210      	movs	r2, #16
 800fa5c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa62:	f043 0204 	orr.w	r2, r3, #4
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d004      	beq.n	800fa7a <I2C_Slave_ISR_IT+0xe4>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fa76:	f040 8085 	bne.w	800fb84 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa7e:	4619      	mov	r1, r3
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 fac9 	bl	8010018 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fa86:	e07d      	b.n	800fb84 <I2C_Slave_ISR_IT+0x1ee>
 800fa88:	e07c      	b.n	800fb84 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	089b      	lsrs	r3, r3, #2
 800fa8e:	f003 0301 	and.w	r3, r3, #1
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d030      	beq.n	800faf8 <I2C_Slave_ISR_IT+0x162>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	089b      	lsrs	r3, r3, #2
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d02a      	beq.n	800faf8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d018      	beq.n	800fade <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab6:	b2d2      	uxtb	r2, r2
 800fab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fac8:	3b01      	subs	r3, #1
 800faca:	b29a      	uxth	r2, r3
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	3b01      	subs	r3, #1
 800fad8:	b29a      	uxth	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d14f      	bne.n	800fb88 <I2C_Slave_ISR_IT+0x1f2>
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800faee:	d04b      	beq.n	800fb88 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f000 f929 	bl	800fd48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800faf6:	e047      	b.n	800fb88 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	08db      	lsrs	r3, r3, #3
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00a      	beq.n	800fb1a <I2C_Slave_ISR_IT+0x184>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	08db      	lsrs	r3, r3, #3
 800fb08:	f003 0301 	and.w	r3, r3, #1
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d004      	beq.n	800fb1a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fb10:	6939      	ldr	r1, [r7, #16]
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f000 f896 	bl	800fc44 <I2C_ITAddrCplt>
 800fb18:	e037      	b.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	085b      	lsrs	r3, r3, #1
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d031      	beq.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	085b      	lsrs	r3, r3, #1
 800fb2a:	f003 0301 	and.w	r3, r3, #1
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d02b      	beq.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d018      	beq.n	800fb6e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb64:	3b01      	subs	r3, #1
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	851a      	strh	r2, [r3, #40]	; 0x28
 800fb6c:	e00d      	b.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fb74:	d002      	beq.n	800fb7c <I2C_Slave_ISR_IT+0x1e6>
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d106      	bne.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f000 f8e3 	bl	800fd48 <I2C_ITSlaveSeqCplt>
 800fb82:	e002      	b.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fb84:	bf00      	nop
 800fb86:	e000      	b.n	800fb8a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fb88:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b086      	sub	sp, #24
 800fba0:	af02      	add	r7, sp, #8
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	4608      	mov	r0, r1
 800fba6:	4611      	mov	r1, r2
 800fba8:	461a      	mov	r2, r3
 800fbaa:	4603      	mov	r3, r0
 800fbac:	817b      	strh	r3, [r7, #10]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	813b      	strh	r3, [r7, #8]
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fbb6:	88fb      	ldrh	r3, [r7, #6]
 800fbb8:	b2da      	uxtb	r2, r3
 800fbba:	8979      	ldrh	r1, [r7, #10]
 800fbbc:	4b20      	ldr	r3, [pc, #128]	; (800fc40 <I2C_RequestMemoryRead+0xa4>)
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f000 fc52 	bl	801046c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fbc8:	69fa      	ldr	r2, [r7, #28]
 800fbca:	69b9      	ldr	r1, [r7, #24]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f000 fb6b 	bl	80102a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e02c      	b.n	800fc36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fbdc:	88fb      	ldrh	r3, [r7, #6]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d105      	bne.n	800fbee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fbe2:	893b      	ldrh	r3, [r7, #8]
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	629a      	str	r2, [r3, #40]	; 0x28
 800fbec:	e015      	b.n	800fc1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fbee:	893b      	ldrh	r3, [r7, #8]
 800fbf0:	0a1b      	lsrs	r3, r3, #8
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	69b9      	ldr	r1, [r7, #24]
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f000 fb51 	bl	80102a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	e012      	b.n	800fc36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fc10:	893b      	ldrh	r3, [r7, #8]
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	2200      	movs	r2, #0
 800fc22:	2140      	movs	r1, #64	; 0x40
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f000 faff 	bl	8010228 <I2C_WaitOnFlagUntilTimeout>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fc30:	2301      	movs	r3, #1
 800fc32:	e000      	b.n	800fc36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	80002000 	.word	0x80002000

0800fc44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fc5a:	2b28      	cmp	r3, #40	; 0x28
 800fc5c:	d168      	bne.n	800fd30 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	699b      	ldr	r3, [r3, #24]
 800fc64:	0c1b      	lsrs	r3, r3, #16
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	f003 0301 	and.w	r3, r3, #1
 800fc6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	0c1b      	lsrs	r3, r3, #16
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fc7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	689b      	ldr	r3, [r3, #8]
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fc98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d137      	bne.n	800fd12 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800fca2:	897b      	ldrh	r3, [r7, #10]
 800fca4:	09db      	lsrs	r3, r3, #7
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	89bb      	ldrh	r3, [r7, #12]
 800fcaa:	4053      	eors	r3, r2
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	f003 0306 	and.w	r3, r3, #6
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d11c      	bne.n	800fcf0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fcb6:	897b      	ldrh	r3, [r7, #10]
 800fcb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcbe:	1c5a      	adds	r2, r3, #1
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d139      	bne.n	800fd40 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2208      	movs	r2, #8
 800fcd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fce2:	89ba      	ldrh	r2, [r7, #12]
 800fce4:	7bfb      	ldrb	r3, [r7, #15]
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff fe28 	bl	800f93e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fcee:	e027      	b.n	800fd40 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800fcf0:	893b      	ldrh	r3, [r7, #8]
 800fcf2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fcf4:	2104      	movs	r1, #4
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fbe6 	bl	80104c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fd04:	89ba      	ldrh	r2, [r7, #12]
 800fd06:	7bfb      	ldrb	r3, [r7, #15]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7ff fe17 	bl	800f93e <HAL_I2C_AddrCallback>
}
 800fd10:	e016      	b.n	800fd40 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fd12:	2104      	movs	r1, #4
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fbd7 	bl	80104c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fd22:	89ba      	ldrh	r2, [r7, #12]
 800fd24:	7bfb      	ldrb	r3, [r7, #15]
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7ff fe08 	bl	800f93e <HAL_I2C_AddrCallback>
}
 800fd2e:	e007      	b.n	800fd40 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2208      	movs	r2, #8
 800fd36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800fd40:	bf00      	nop
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b29      	cmp	r3, #41	; 0x29
 800fd62:	d112      	bne.n	800fd8a <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2228      	movs	r2, #40	; 0x28
 800fd68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2221      	movs	r2, #33	; 0x21
 800fd70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd72:	2101      	movs	r1, #1
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 fba7 	bl	80104c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7ff fdc7 	bl	800f916 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fd88:	e017      	b.n	800fdba <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	2b2a      	cmp	r3, #42	; 0x2a
 800fd94:	d111      	bne.n	800fdba <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2228      	movs	r2, #40	; 0x28
 800fd9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2222      	movs	r2, #34	; 0x22
 800fda2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fda4:	2102      	movs	r1, #2
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fb8e 	bl	80104c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff fdb8 	bl	800f92a <HAL_I2C_SlaveRxCpltCallback>
}
 800fdba:	bf00      	nop
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2220      	movs	r2, #32
 800fde0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800fde2:	2107      	movs	r1, #7
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fb6f 	bl	80104c8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	685a      	ldr	r2, [r3, #4]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fdf8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	6859      	ldr	r1, [r3, #4]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	4b58      	ldr	r3, [pc, #352]	; (800ff68 <I2C_ITSlaveCplt+0x1a4>)
 800fe06:	400b      	ands	r3, r1
 800fe08:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 f9c4 	bl	8010198 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	0b9b      	lsrs	r3, r3, #14
 800fe14:	f003 0301 	and.w	r3, r3, #1
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00b      	beq.n	800fe34 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d018      	beq.n	800fe56 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fe32:	e010      	b.n	800fe56 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	0bdb      	lsrs	r3, r3, #15
 800fe38:	f003 0301 	and.w	r3, r3, #1
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00a      	beq.n	800fe56 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d006      	beq.n	800fe56 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	089b      	lsrs	r3, r3, #2
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d020      	beq.n	800fea4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f023 0304 	bic.w	r3, r3, #4
 800fe68:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe74:	b2d2      	uxtb	r2, r2
 800fe76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00c      	beq.n	800fea4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe8e:	3b01      	subs	r3, #1
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d005      	beq.n	800feba <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feb2:	f043 0204 	orr.w	r2, r3, #4
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2200      	movs	r2, #0
 800febe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d010      	beq.n	800fef8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 f89b 	bl	8010018 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	2b28      	cmp	r3, #40	; 0x28
 800feec:	d138      	bne.n	800ff60 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800feee:	68f9      	ldr	r1, [r7, #12]
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f83d 	bl	800ff70 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fef6:	e033      	b.n	800ff60 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ff00:	d011      	beq.n	800ff26 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7ff ff20 	bl	800fd48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a18      	ldr	r2, [pc, #96]	; (800ff6c <I2C_ITSlaveCplt+0x1a8>)
 800ff0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2220      	movs	r2, #32
 800ff12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7ff fd1b 	bl	800f95a <HAL_I2C_ListenCpltCallback>
}
 800ff24:	e01c      	b.n	800ff60 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	2b22      	cmp	r3, #34	; 0x22
 800ff30:	d10b      	bne.n	800ff4a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2220      	movs	r2, #32
 800ff36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f7ff fcf1 	bl	800f92a <HAL_I2C_SlaveRxCpltCallback>
}
 800ff48:	e00a      	b.n	800ff60 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2220      	movs	r2, #32
 800ff4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff fcdb 	bl	800f916 <HAL_I2C_SlaveTxCpltCallback>
}
 800ff60:	bf00      	nop
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	fe00e800 	.word	0xfe00e800
 800ff6c:	ffff0000 	.word	0xffff0000

0800ff70 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4a25      	ldr	r2, [pc, #148]	; (8010014 <I2C_ITListenCplt+0xa4>)
 800ff7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2220      	movs	r2, #32
 800ff8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	089b      	lsrs	r3, r3, #2
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d022      	beq.n	800ffee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb2:	b2d2      	uxtb	r2, r2
 800ffb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d012      	beq.n	800ffee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe6:	f043 0204 	orr.w	r2, r3, #4
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ffee:	2107      	movs	r1, #7
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fa69 	bl	80104c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2210      	movs	r2, #16
 800fffc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f7ff fca7 	bl	800f95a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	ffff0000 	.word	0xffff0000

08010018 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010028:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4a55      	ldr	r2, [pc, #340]	; (801018c <I2C_ITError+0x174>)
 8010036:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	431a      	orrs	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	2b28      	cmp	r3, #40	; 0x28
 801004e:	d005      	beq.n	801005c <I2C_ITError+0x44>
 8010050:	7bfb      	ldrb	r3, [r7, #15]
 8010052:	2b29      	cmp	r3, #41	; 0x29
 8010054:	d002      	beq.n	801005c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010056:	7bfb      	ldrb	r3, [r7, #15]
 8010058:	2b2a      	cmp	r3, #42	; 0x2a
 801005a:	d10e      	bne.n	801007a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801005c:	2103      	movs	r1, #3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fa32 	bl	80104c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2228      	movs	r2, #40	; 0x28
 8010068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4a46      	ldr	r2, [pc, #280]	; (8010190 <I2C_ITError+0x178>)
 8010076:	635a      	str	r2, [r3, #52]	; 0x34
 8010078:	e013      	b.n	80100a2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801007a:	2107      	movs	r1, #7
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fa23 	bl	80104c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b60      	cmp	r3, #96	; 0x60
 801008c:	d003      	beq.n	8010096 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2220      	movs	r2, #32
 8010092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100b0:	d123      	bne.n	80100fa <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80100c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d05c      	beq.n	8010184 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ce:	4a31      	ldr	r2, [pc, #196]	; (8010194 <I2C_ITError+0x17c>)
 80100d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe fd5c 	bl	800eb9c <HAL_DMA_Abort_IT>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d04c      	beq.n	8010184 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80100f4:	4610      	mov	r0, r2
 80100f6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80100f8:	e044      	b.n	8010184 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010108:	d123      	bne.n	8010152 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010118:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801011e:	2b00      	cmp	r3, #0
 8010120:	d030      	beq.n	8010184 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010126:	4a1b      	ldr	r2, [pc, #108]	; (8010194 <I2C_ITError+0x17c>)
 8010128:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010136:	4618      	mov	r0, r3
 8010138:	f7fe fd30 	bl	800eb9c <HAL_DMA_Abort_IT>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d020      	beq.n	8010184 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801014c:	4610      	mov	r0, r2
 801014e:	4798      	blx	r3
}
 8010150:	e018      	b.n	8010184 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010158:	b2db      	uxtb	r3, r3
 801015a:	2b60      	cmp	r3, #96	; 0x60
 801015c:	d10b      	bne.n	8010176 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2220      	movs	r2, #32
 8010162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fc07 	bl	800f982 <HAL_I2C_AbortCpltCallback>
}
 8010174:	e006      	b.n	8010184 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff fbf5 	bl	800f96e <HAL_I2C_ErrorCallback>
}
 8010184:	bf00      	nop
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	ffff0000 	.word	0xffff0000
 8010190:	0800f997 	.word	0x0800f997
 8010194:	080101e1 	.word	0x080101e1

08010198 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	699b      	ldr	r3, [r3, #24]
 80101a6:	f003 0302 	and.w	r3, r3, #2
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d103      	bne.n	80101b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2200      	movs	r2, #0
 80101b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	f003 0301 	and.w	r3, r3, #1
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d007      	beq.n	80101d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	699a      	ldr	r2, [r3, #24]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f042 0201 	orr.w	r2, r2, #1
 80101d2:	619a      	str	r2, [r3, #24]
  }
}
 80101d4:	bf00      	nop
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ec:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f2:	2200      	movs	r2, #0
 80101f4:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101fa:	2200      	movs	r2, #0
 80101fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010204:	b2db      	uxtb	r3, r3
 8010206:	2b60      	cmp	r3, #96	; 0x60
 8010208:	d107      	bne.n	801021a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2220      	movs	r2, #32
 801020e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f7ff fbb5 	bl	800f982 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010218:	e002      	b.n	8010220 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f7ff fba7 	bl	800f96e <HAL_I2C_ErrorCallback>
}
 8010220:	bf00      	nop
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	603b      	str	r3, [r7, #0]
 8010234:	4613      	mov	r3, r2
 8010236:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010238:	e022      	b.n	8010280 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010240:	d01e      	beq.n	8010280 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010242:	f7fe fa7f 	bl	800e744 <HAL_GetTick>
 8010246:	4602      	mov	r2, r0
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	429a      	cmp	r2, r3
 8010250:	d302      	bcc.n	8010258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d113      	bne.n	8010280 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801025c:	f043 0220 	orr.w	r2, r3, #32
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2220      	movs	r2, #32
 8010268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	e00f      	b.n	80102a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	699a      	ldr	r2, [r3, #24]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	4013      	ands	r3, r2
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	429a      	cmp	r2, r3
 801028e:	bf0c      	ite	eq
 8010290:	2301      	moveq	r3, #1
 8010292:	2300      	movne	r3, #0
 8010294:	b2db      	uxtb	r3, r3
 8010296:	461a      	mov	r2, r3
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	429a      	cmp	r2, r3
 801029c:	d0cd      	beq.n	801023a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80102b4:	e02c      	b.n	8010310 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	68b9      	ldr	r1, [r7, #8]
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f000 f870 	bl	80103a0 <I2C_IsAcknowledgeFailed>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d001      	beq.n	80102ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e02a      	b.n	8010320 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d0:	d01e      	beq.n	8010310 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102d2:	f7fe fa37 	bl	800e744 <HAL_GetTick>
 80102d6:	4602      	mov	r2, r0
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	68ba      	ldr	r2, [r7, #8]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d302      	bcc.n	80102e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d113      	bne.n	8010310 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ec:	f043 0220 	orr.w	r2, r3, #32
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2220      	movs	r2, #32
 80102f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801030c:	2301      	movs	r3, #1
 801030e:	e007      	b.n	8010320 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	699b      	ldr	r3, [r3, #24]
 8010316:	f003 0302 	and.w	r3, r3, #2
 801031a:	2b02      	cmp	r3, #2
 801031c:	d1cb      	bne.n	80102b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010334:	e028      	b.n	8010388 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	68b9      	ldr	r1, [r7, #8]
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f000 f830 	bl	80103a0 <I2C_IsAcknowledgeFailed>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d001      	beq.n	801034a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010346:	2301      	movs	r3, #1
 8010348:	e026      	b.n	8010398 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801034a:	f7fe f9fb 	bl	800e744 <HAL_GetTick>
 801034e:	4602      	mov	r2, r0
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	429a      	cmp	r2, r3
 8010358:	d302      	bcc.n	8010360 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d113      	bne.n	8010388 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010364:	f043 0220 	orr.w	r2, r3, #32
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2220      	movs	r2, #32
 8010370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2200      	movs	r2, #0
 8010378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2200      	movs	r2, #0
 8010380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8010384:	2301      	movs	r3, #1
 8010386:	e007      	b.n	8010398 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	699b      	ldr	r3, [r3, #24]
 801038e:	f003 0320 	and.w	r3, r3, #32
 8010392:	2b20      	cmp	r3, #32
 8010394:	d1cf      	bne.n	8010336 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	f003 0310 	and.w	r3, r3, #16
 80103b6:	2b10      	cmp	r3, #16
 80103b8:	d151      	bne.n	801045e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80103ba:	e022      	b.n	8010402 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c2:	d01e      	beq.n	8010402 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80103c4:	f7fe f9be 	bl	800e744 <HAL_GetTick>
 80103c8:	4602      	mov	r2, r0
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d302      	bcc.n	80103da <I2C_IsAcknowledgeFailed+0x3a>
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d113      	bne.n	8010402 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103de:	f043 0220 	orr.w	r2, r3, #32
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2220      	movs	r2, #32
 80103ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	e02e      	b.n	8010460 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	699b      	ldr	r3, [r3, #24]
 8010408:	f003 0320 	and.w	r3, r3, #32
 801040c:	2b20      	cmp	r3, #32
 801040e:	d1d5      	bne.n	80103bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2210      	movs	r2, #16
 8010416:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2220      	movs	r2, #32
 801041e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f7ff feb9 	bl	8010198 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	6859      	ldr	r1, [r3, #4]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681a      	ldr	r2, [r3, #0]
 8010430:	4b0d      	ldr	r3, [pc, #52]	; (8010468 <I2C_IsAcknowledgeFailed+0xc8>)
 8010432:	400b      	ands	r3, r1
 8010434:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043a:	f043 0204 	orr.w	r2, r3, #4
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2220      	movs	r2, #32
 8010446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2200      	movs	r2, #0
 8010456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801045a:	2301      	movs	r3, #1
 801045c:	e000      	b.n	8010460 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	fe00e800 	.word	0xfe00e800

0801046c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801046c:	b480      	push	{r7}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	607b      	str	r3, [r7, #4]
 8010476:	460b      	mov	r3, r1
 8010478:	817b      	strh	r3, [r7, #10]
 801047a:	4613      	mov	r3, r2
 801047c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	685a      	ldr	r2, [r3, #4]
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	0d5b      	lsrs	r3, r3, #21
 8010488:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801048c:	4b0d      	ldr	r3, [pc, #52]	; (80104c4 <I2C_TransferConfig+0x58>)
 801048e:	430b      	orrs	r3, r1
 8010490:	43db      	mvns	r3, r3
 8010492:	ea02 0103 	and.w	r1, r2, r3
 8010496:	897b      	ldrh	r3, [r7, #10]
 8010498:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801049c:	7a7b      	ldrb	r3, [r7, #9]
 801049e:	041b      	lsls	r3, r3, #16
 80104a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80104a4:	431a      	orrs	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	431a      	orrs	r2, r3
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	431a      	orrs	r2, r3
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	430a      	orrs	r2, r1
 80104b4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80104b6:	bf00      	nop
 80104b8:	3714      	adds	r7, #20
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	03ff63ff 	.word	0x03ff63ff

080104c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	460b      	mov	r3, r1
 80104d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80104d4:	2300      	movs	r3, #0
 80104d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80104d8:	887b      	ldrh	r3, [r7, #2]
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00f      	beq.n	8010502 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80104e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80104f6:	2b28      	cmp	r3, #40	; 0x28
 80104f8:	d003      	beq.n	8010502 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010500:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010502:	887b      	ldrh	r3, [r7, #2]
 8010504:	f003 0302 	and.w	r3, r3, #2
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00f      	beq.n	801052c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010512:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801051a:	b2db      	uxtb	r3, r3
 801051c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010520:	2b28      	cmp	r3, #40	; 0x28
 8010522:	d003      	beq.n	801052c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801052a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801052c:	887b      	ldrh	r3, [r7, #2]
 801052e:	f003 0304 	and.w	r3, r3, #4
 8010532:	2b00      	cmp	r3, #0
 8010534:	d003      	beq.n	801053e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801053c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 801053e:	887b      	ldrh	r3, [r7, #2]
 8010540:	f003 0311 	and.w	r3, r3, #17
 8010544:	2b11      	cmp	r3, #17
 8010546:	d103      	bne.n	8010550 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801054e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8010550:	887b      	ldrh	r3, [r7, #2]
 8010552:	f003 0312 	and.w	r3, r3, #18
 8010556:	2b12      	cmp	r3, #18
 8010558:	d103      	bne.n	8010562 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f043 0320 	orr.w	r3, r3, #32
 8010560:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8010562:	887b      	ldrh	r3, [r7, #2]
 8010564:	f003 0312 	and.w	r3, r3, #18
 8010568:	2b12      	cmp	r3, #18
 801056a:	d103      	bne.n	8010574 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010572:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	6819      	ldr	r1, [r3, #0]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	43da      	mvns	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	400a      	ands	r2, r1
 8010584:	601a      	str	r2, [r3, #0]
}
 8010586:	bf00      	nop
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr

08010592 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010592:	b480      	push	{r7}
 8010594:	b083      	sub	sp, #12
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
 801059a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	2b20      	cmp	r3, #32
 80105a6:	d138      	bne.n	801061a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d101      	bne.n	80105b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80105b2:	2302      	movs	r3, #2
 80105b4:	e032      	b.n	801061c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2201      	movs	r2, #1
 80105ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2224      	movs	r2, #36	; 0x24
 80105c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f022 0201 	bic.w	r2, r2, #1
 80105d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80105e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	6819      	ldr	r1, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	430a      	orrs	r2, r1
 80105f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f042 0201 	orr.w	r2, r2, #1
 8010604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2220      	movs	r2, #32
 801060a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010616:	2300      	movs	r3, #0
 8010618:	e000      	b.n	801061c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801061a:	2302      	movs	r3, #2
  }
}
 801061c:	4618      	mov	r0, r3
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010628:	b480      	push	{r7}
 801062a:	b085      	sub	sp, #20
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b20      	cmp	r3, #32
 801063c:	d139      	bne.n	80106b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010644:	2b01      	cmp	r3, #1
 8010646:	d101      	bne.n	801064c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010648:	2302      	movs	r3, #2
 801064a:	e033      	b.n	80106b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2201      	movs	r2, #1
 8010650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2224      	movs	r2, #36	; 0x24
 8010658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f022 0201 	bic.w	r2, r2, #1
 801066a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801067a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	021b      	lsls	r3, r3, #8
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	4313      	orrs	r3, r2
 8010684:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f042 0201 	orr.w	r2, r2, #1
 801069c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	e000      	b.n	80106b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80106b2:	2302      	movs	r3, #2
  }
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3714      	adds	r7, #20
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	e038      	b.n	8010744 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80106da:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80106e4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	6852      	ldr	r2, [r2, #4]
 80106ee:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	6892      	ldr	r2, [r2, #8]
 80106f8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80106fa:	f7fe f823 	bl	800e744 <HAL_GetTick>
 80106fe:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8010700:	e008      	b.n	8010714 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8010702:	f7fe f81f 	bl	800e744 <HAL_GetTick>
 8010706:	4602      	mov	r2, r0
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	2b30      	cmp	r3, #48	; 0x30
 801070e:	d901      	bls.n	8010714 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8010710:	2303      	movs	r3, #3
 8010712:	e017      	b.n	8010744 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1f1      	bne.n	8010702 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	691a      	ldr	r2, [r3, #16]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	429a      	cmp	r2, r3
 801072a:	d005      	beq.n	8010738 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	68d2      	ldr	r2, [r2, #12]
 8010734:	611a      	str	r2, [r3, #16]
 8010736:	e004      	b.n	8010742 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010742:	2300      	movs	r3, #0
}
 8010744:	4618      	mov	r0, r3
 8010746:	3710      	adds	r7, #16
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801075c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8010772:	2300      	movs	r3, #0
 8010774:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8010776:	4b23      	ldr	r3, [pc, #140]	; (8010804 <HAL_PWREx_EnableOverDrive+0x98>)
 8010778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801077a:	4a22      	ldr	r2, [pc, #136]	; (8010804 <HAL_PWREx_EnableOverDrive+0x98>)
 801077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010780:	6413      	str	r3, [r2, #64]	; 0x40
 8010782:	4b20      	ldr	r3, [pc, #128]	; (8010804 <HAL_PWREx_EnableOverDrive+0x98>)
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801078a:	603b      	str	r3, [r7, #0]
 801078c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801078e:	4b1e      	ldr	r3, [pc, #120]	; (8010808 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4a1d      	ldr	r2, [pc, #116]	; (8010808 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010798:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801079a:	f7fd ffd3 	bl	800e744 <HAL_GetTick>
 801079e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80107a0:	e009      	b.n	80107b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80107a2:	f7fd ffcf 	bl	800e744 <HAL_GetTick>
 80107a6:	4602      	mov	r2, r0
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80107b0:	d901      	bls.n	80107b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80107b2:	2303      	movs	r3, #3
 80107b4:	e022      	b.n	80107fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80107b6:	4b14      	ldr	r3, [pc, #80]	; (8010808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107c2:	d1ee      	bne.n	80107a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80107c4:	4b10      	ldr	r3, [pc, #64]	; (8010808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a0f      	ldr	r2, [pc, #60]	; (8010808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80107ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80107ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80107d0:	f7fd ffb8 	bl	800e744 <HAL_GetTick>
 80107d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80107d6:	e009      	b.n	80107ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80107d8:	f7fd ffb4 	bl	800e744 <HAL_GetTick>
 80107dc:	4602      	mov	r2, r0
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80107e6:	d901      	bls.n	80107ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80107e8:	2303      	movs	r3, #3
 80107ea:	e007      	b.n	80107fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80107ec:	4b06      	ldr	r3, [pc, #24]	; (8010808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107f8:	d1ee      	bne.n	80107d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80107fa:	2300      	movs	r3, #0
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	40023800 	.word	0x40023800
 8010808:	40007000 	.word	0x40007000

0801080c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010814:	2300      	movs	r3, #0
 8010816:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d101      	bne.n	8010822 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801081e:	2301      	movs	r3, #1
 8010820:	e29b      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f003 0301 	and.w	r3, r3, #1
 801082a:	2b00      	cmp	r3, #0
 801082c:	f000 8087 	beq.w	801093e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010830:	4b96      	ldr	r3, [pc, #600]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	f003 030c 	and.w	r3, r3, #12
 8010838:	2b04      	cmp	r3, #4
 801083a:	d00c      	beq.n	8010856 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801083c:	4b93      	ldr	r3, [pc, #588]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	f003 030c 	and.w	r3, r3, #12
 8010844:	2b08      	cmp	r3, #8
 8010846:	d112      	bne.n	801086e <HAL_RCC_OscConfig+0x62>
 8010848:	4b90      	ldr	r3, [pc, #576]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010854:	d10b      	bne.n	801086e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010856:	4b8d      	ldr	r3, [pc, #564]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801085e:	2b00      	cmp	r3, #0
 8010860:	d06c      	beq.n	801093c <HAL_RCC_OscConfig+0x130>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d168      	bne.n	801093c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	e275      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010876:	d106      	bne.n	8010886 <HAL_RCC_OscConfig+0x7a>
 8010878:	4b84      	ldr	r3, [pc, #528]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a83      	ldr	r2, [pc, #524]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 801087e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010882:	6013      	str	r3, [r2, #0]
 8010884:	e02e      	b.n	80108e4 <HAL_RCC_OscConfig+0xd8>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d10c      	bne.n	80108a8 <HAL_RCC_OscConfig+0x9c>
 801088e:	4b7f      	ldr	r3, [pc, #508]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a7e      	ldr	r2, [pc, #504]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010898:	6013      	str	r3, [r2, #0]
 801089a:	4b7c      	ldr	r3, [pc, #496]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a7b      	ldr	r2, [pc, #492]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108a4:	6013      	str	r3, [r2, #0]
 80108a6:	e01d      	b.n	80108e4 <HAL_RCC_OscConfig+0xd8>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80108b0:	d10c      	bne.n	80108cc <HAL_RCC_OscConfig+0xc0>
 80108b2:	4b76      	ldr	r3, [pc, #472]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a75      	ldr	r2, [pc, #468]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80108bc:	6013      	str	r3, [r2, #0]
 80108be:	4b73      	ldr	r3, [pc, #460]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4a72      	ldr	r2, [pc, #456]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80108c8:	6013      	str	r3, [r2, #0]
 80108ca:	e00b      	b.n	80108e4 <HAL_RCC_OscConfig+0xd8>
 80108cc:	4b6f      	ldr	r3, [pc, #444]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a6e      	ldr	r2, [pc, #440]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108d6:	6013      	str	r3, [r2, #0]
 80108d8:	4b6c      	ldr	r3, [pc, #432]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a6b      	ldr	r2, [pc, #428]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80108de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d013      	beq.n	8010914 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108ec:	f7fd ff2a 	bl	800e744 <HAL_GetTick>
 80108f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108f2:	e008      	b.n	8010906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80108f4:	f7fd ff26 	bl	800e744 <HAL_GetTick>
 80108f8:	4602      	mov	r2, r0
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	2b64      	cmp	r3, #100	; 0x64
 8010900:	d901      	bls.n	8010906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010902:	2303      	movs	r3, #3
 8010904:	e229      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010906:	4b61      	ldr	r3, [pc, #388]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801090e:	2b00      	cmp	r3, #0
 8010910:	d0f0      	beq.n	80108f4 <HAL_RCC_OscConfig+0xe8>
 8010912:	e014      	b.n	801093e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010914:	f7fd ff16 	bl	800e744 <HAL_GetTick>
 8010918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801091a:	e008      	b.n	801092e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801091c:	f7fd ff12 	bl	800e744 <HAL_GetTick>
 8010920:	4602      	mov	r2, r0
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	1ad3      	subs	r3, r2, r3
 8010926:	2b64      	cmp	r3, #100	; 0x64
 8010928:	d901      	bls.n	801092e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801092a:	2303      	movs	r3, #3
 801092c:	e215      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801092e:	4b57      	ldr	r3, [pc, #348]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1f0      	bne.n	801091c <HAL_RCC_OscConfig+0x110>
 801093a:	e000      	b.n	801093e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801093c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f003 0302 	and.w	r3, r3, #2
 8010946:	2b00      	cmp	r3, #0
 8010948:	d069      	beq.n	8010a1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801094a:	4b50      	ldr	r3, [pc, #320]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 801094c:	689b      	ldr	r3, [r3, #8]
 801094e:	f003 030c 	and.w	r3, r3, #12
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00b      	beq.n	801096e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010956:	4b4d      	ldr	r3, [pc, #308]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	f003 030c 	and.w	r3, r3, #12
 801095e:	2b08      	cmp	r3, #8
 8010960:	d11c      	bne.n	801099c <HAL_RCC_OscConfig+0x190>
 8010962:	4b4a      	ldr	r3, [pc, #296]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801096a:	2b00      	cmp	r3, #0
 801096c:	d116      	bne.n	801099c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801096e:	4b47      	ldr	r3, [pc, #284]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f003 0302 	and.w	r3, r3, #2
 8010976:	2b00      	cmp	r3, #0
 8010978:	d005      	beq.n	8010986 <HAL_RCC_OscConfig+0x17a>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d001      	beq.n	8010986 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	e1e9      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010986:	4b41      	ldr	r3, [pc, #260]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	691b      	ldr	r3, [r3, #16]
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	493d      	ldr	r1, [pc, #244]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010996:	4313      	orrs	r3, r2
 8010998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801099a:	e040      	b.n	8010a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d023      	beq.n	80109ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80109a4:	4b39      	ldr	r3, [pc, #228]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a38      	ldr	r2, [pc, #224]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109aa:	f043 0301 	orr.w	r3, r3, #1
 80109ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109b0:	f7fd fec8 	bl	800e744 <HAL_GetTick>
 80109b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80109b6:	e008      	b.n	80109ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80109b8:	f7fd fec4 	bl	800e744 <HAL_GetTick>
 80109bc:	4602      	mov	r2, r0
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	d901      	bls.n	80109ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80109c6:	2303      	movs	r3, #3
 80109c8:	e1c7      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80109ca:	4b30      	ldr	r3, [pc, #192]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f003 0302 	and.w	r3, r3, #2
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0f0      	beq.n	80109b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109d6:	4b2d      	ldr	r3, [pc, #180]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	691b      	ldr	r3, [r3, #16]
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	4929      	ldr	r1, [pc, #164]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109e6:	4313      	orrs	r3, r2
 80109e8:	600b      	str	r3, [r1, #0]
 80109ea:	e018      	b.n	8010a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80109ec:	4b27      	ldr	r3, [pc, #156]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a26      	ldr	r2, [pc, #152]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 80109f2:	f023 0301 	bic.w	r3, r3, #1
 80109f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109f8:	f7fd fea4 	bl	800e744 <HAL_GetTick>
 80109fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109fe:	e008      	b.n	8010a12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010a00:	f7fd fea0 	bl	800e744 <HAL_GetTick>
 8010a04:	4602      	mov	r2, r0
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	2b02      	cmp	r3, #2
 8010a0c:	d901      	bls.n	8010a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	e1a3      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010a12:	4b1e      	ldr	r3, [pc, #120]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f003 0302 	and.w	r3, r3, #2
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d1f0      	bne.n	8010a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f003 0308 	and.w	r3, r3, #8
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d038      	beq.n	8010a9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	695b      	ldr	r3, [r3, #20]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d019      	beq.n	8010a66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010a32:	4b16      	ldr	r3, [pc, #88]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a36:	4a15      	ldr	r2, [pc, #84]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010a38:	f043 0301 	orr.w	r3, r3, #1
 8010a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a3e:	f7fd fe81 	bl	800e744 <HAL_GetTick>
 8010a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a44:	e008      	b.n	8010a58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010a46:	f7fd fe7d 	bl	800e744 <HAL_GetTick>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	2b02      	cmp	r3, #2
 8010a52:	d901      	bls.n	8010a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010a54:	2303      	movs	r3, #3
 8010a56:	e180      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a58:	4b0c      	ldr	r3, [pc, #48]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a5c:	f003 0302 	and.w	r3, r3, #2
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d0f0      	beq.n	8010a46 <HAL_RCC_OscConfig+0x23a>
 8010a64:	e01a      	b.n	8010a9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010a66:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a6a:	4a08      	ldr	r2, [pc, #32]	; (8010a8c <HAL_RCC_OscConfig+0x280>)
 8010a6c:	f023 0301 	bic.w	r3, r3, #1
 8010a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a72:	f7fd fe67 	bl	800e744 <HAL_GetTick>
 8010a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a78:	e00a      	b.n	8010a90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010a7a:	f7fd fe63 	bl	800e744 <HAL_GetTick>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	d903      	bls.n	8010a90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8010a88:	2303      	movs	r3, #3
 8010a8a:	e166      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
 8010a8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a90:	4b92      	ldr	r3, [pc, #584]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a94:	f003 0302 	and.w	r3, r3, #2
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1ee      	bne.n	8010a7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f003 0304 	and.w	r3, r3, #4
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f000 80a4 	beq.w	8010bf2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010aaa:	4b8c      	ldr	r3, [pc, #560]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d10d      	bne.n	8010ad2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8010ab6:	4b89      	ldr	r3, [pc, #548]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aba:	4a88      	ldr	r2, [pc, #544]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8010ac2:	4b86      	ldr	r3, [pc, #536]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010aca:	60bb      	str	r3, [r7, #8]
 8010acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010ace:	2301      	movs	r3, #1
 8010ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010ad2:	4b83      	ldr	r3, [pc, #524]	; (8010ce0 <HAL_RCC_OscConfig+0x4d4>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d118      	bne.n	8010b10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8010ade:	4b80      	ldr	r3, [pc, #512]	; (8010ce0 <HAL_RCC_OscConfig+0x4d4>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a7f      	ldr	r2, [pc, #508]	; (8010ce0 <HAL_RCC_OscConfig+0x4d4>)
 8010ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010aea:	f7fd fe2b 	bl	800e744 <HAL_GetTick>
 8010aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010af0:	e008      	b.n	8010b04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010af2:	f7fd fe27 	bl	800e744 <HAL_GetTick>
 8010af6:	4602      	mov	r2, r0
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	2b64      	cmp	r3, #100	; 0x64
 8010afe:	d901      	bls.n	8010b04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8010b00:	2303      	movs	r3, #3
 8010b02:	e12a      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010b04:	4b76      	ldr	r3, [pc, #472]	; (8010ce0 <HAL_RCC_OscConfig+0x4d4>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d0f0      	beq.n	8010af2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d106      	bne.n	8010b26 <HAL_RCC_OscConfig+0x31a>
 8010b18:	4b70      	ldr	r3, [pc, #448]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b1c:	4a6f      	ldr	r2, [pc, #444]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b1e:	f043 0301 	orr.w	r3, r3, #1
 8010b22:	6713      	str	r3, [r2, #112]	; 0x70
 8010b24:	e02d      	b.n	8010b82 <HAL_RCC_OscConfig+0x376>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10c      	bne.n	8010b48 <HAL_RCC_OscConfig+0x33c>
 8010b2e:	4b6b      	ldr	r3, [pc, #428]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b32:	4a6a      	ldr	r2, [pc, #424]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b34:	f023 0301 	bic.w	r3, r3, #1
 8010b38:	6713      	str	r3, [r2, #112]	; 0x70
 8010b3a:	4b68      	ldr	r3, [pc, #416]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b3e:	4a67      	ldr	r2, [pc, #412]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b40:	f023 0304 	bic.w	r3, r3, #4
 8010b44:	6713      	str	r3, [r2, #112]	; 0x70
 8010b46:	e01c      	b.n	8010b82 <HAL_RCC_OscConfig+0x376>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	689b      	ldr	r3, [r3, #8]
 8010b4c:	2b05      	cmp	r3, #5
 8010b4e:	d10c      	bne.n	8010b6a <HAL_RCC_OscConfig+0x35e>
 8010b50:	4b62      	ldr	r3, [pc, #392]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b54:	4a61      	ldr	r2, [pc, #388]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b56:	f043 0304 	orr.w	r3, r3, #4
 8010b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8010b5c:	4b5f      	ldr	r3, [pc, #380]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b60:	4a5e      	ldr	r2, [pc, #376]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b62:	f043 0301 	orr.w	r3, r3, #1
 8010b66:	6713      	str	r3, [r2, #112]	; 0x70
 8010b68:	e00b      	b.n	8010b82 <HAL_RCC_OscConfig+0x376>
 8010b6a:	4b5c      	ldr	r3, [pc, #368]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b6e:	4a5b      	ldr	r2, [pc, #364]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b70:	f023 0301 	bic.w	r3, r3, #1
 8010b74:	6713      	str	r3, [r2, #112]	; 0x70
 8010b76:	4b59      	ldr	r3, [pc, #356]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b7a:	4a58      	ldr	r2, [pc, #352]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010b7c:	f023 0304 	bic.w	r3, r3, #4
 8010b80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	689b      	ldr	r3, [r3, #8]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d015      	beq.n	8010bb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b8a:	f7fd fddb 	bl	800e744 <HAL_GetTick>
 8010b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b90:	e00a      	b.n	8010ba8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010b92:	f7fd fdd7 	bl	800e744 <HAL_GetTick>
 8010b96:	4602      	mov	r2, r0
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d901      	bls.n	8010ba8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	e0d8      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010ba8:	4b4c      	ldr	r3, [pc, #304]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bac:	f003 0302 	and.w	r3, r3, #2
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d0ee      	beq.n	8010b92 <HAL_RCC_OscConfig+0x386>
 8010bb4:	e014      	b.n	8010be0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010bb6:	f7fd fdc5 	bl	800e744 <HAL_GetTick>
 8010bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010bbc:	e00a      	b.n	8010bd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010bbe:	f7fd fdc1 	bl	800e744 <HAL_GetTick>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	1ad3      	subs	r3, r2, r3
 8010bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d901      	bls.n	8010bd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8010bd0:	2303      	movs	r3, #3
 8010bd2:	e0c2      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010bd4:	4b41      	ldr	r3, [pc, #260]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bd8:	f003 0302 	and.w	r3, r3, #2
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1ee      	bne.n	8010bbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010be0:	7dfb      	ldrb	r3, [r7, #23]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d105      	bne.n	8010bf2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010be6:	4b3d      	ldr	r3, [pc, #244]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bea:	4a3c      	ldr	r2, [pc, #240]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010bf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	699b      	ldr	r3, [r3, #24]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 80ae 	beq.w	8010d58 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010bfc:	4b37      	ldr	r3, [pc, #220]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	f003 030c 	and.w	r3, r3, #12
 8010c04:	2b08      	cmp	r3, #8
 8010c06:	d06d      	beq.n	8010ce4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	699b      	ldr	r3, [r3, #24]
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d14b      	bne.n	8010ca8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010c10:	4b32      	ldr	r3, [pc, #200]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a31      	ldr	r2, [pc, #196]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c1c:	f7fd fd92 	bl	800e744 <HAL_GetTick>
 8010c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c22:	e008      	b.n	8010c36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010c24:	f7fd fd8e 	bl	800e744 <HAL_GetTick>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	2b02      	cmp	r3, #2
 8010c30:	d901      	bls.n	8010c36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8010c32:	2303      	movs	r3, #3
 8010c34:	e091      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c36:	4b29      	ldr	r3, [pc, #164]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1f0      	bne.n	8010c24 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	69da      	ldr	r2, [r3, #28]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6a1b      	ldr	r3, [r3, #32]
 8010c4a:	431a      	orrs	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c50:	019b      	lsls	r3, r3, #6
 8010c52:	431a      	orrs	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c58:	085b      	lsrs	r3, r3, #1
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	041b      	lsls	r3, r3, #16
 8010c5e:	431a      	orrs	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c64:	061b      	lsls	r3, r3, #24
 8010c66:	431a      	orrs	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c6c:	071b      	lsls	r3, r3, #28
 8010c6e:	491b      	ldr	r1, [pc, #108]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c70:	4313      	orrs	r3, r2
 8010c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010c74:	4b19      	ldr	r3, [pc, #100]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4a18      	ldr	r2, [pc, #96]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c80:	f7fd fd60 	bl	800e744 <HAL_GetTick>
 8010c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c86:	e008      	b.n	8010c9a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010c88:	f7fd fd5c 	bl	800e744 <HAL_GetTick>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	1ad3      	subs	r3, r2, r3
 8010c92:	2b02      	cmp	r3, #2
 8010c94:	d901      	bls.n	8010c9a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8010c96:	2303      	movs	r3, #3
 8010c98:	e05f      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c9a:	4b10      	ldr	r3, [pc, #64]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d0f0      	beq.n	8010c88 <HAL_RCC_OscConfig+0x47c>
 8010ca6:	e057      	b.n	8010d58 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010ca8:	4b0c      	ldr	r3, [pc, #48]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a0b      	ldr	r2, [pc, #44]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010cb4:	f7fd fd46 	bl	800e744 <HAL_GetTick>
 8010cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010cba:	e008      	b.n	8010cce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010cbc:	f7fd fd42 	bl	800e744 <HAL_GetTick>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	d901      	bls.n	8010cce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8010cca:	2303      	movs	r3, #3
 8010ccc:	e045      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010cce:	4b03      	ldr	r3, [pc, #12]	; (8010cdc <HAL_RCC_OscConfig+0x4d0>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1f0      	bne.n	8010cbc <HAL_RCC_OscConfig+0x4b0>
 8010cda:	e03d      	b.n	8010d58 <HAL_RCC_OscConfig+0x54c>
 8010cdc:	40023800 	.word	0x40023800
 8010ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8010ce4:	4b1f      	ldr	r3, [pc, #124]	; (8010d64 <HAL_RCC_OscConfig+0x558>)
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	699b      	ldr	r3, [r3, #24]
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d030      	beq.n	8010d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d129      	bne.n	8010d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d122      	bne.n	8010d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010d0e:	68fa      	ldr	r2, [r7, #12]
 8010d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010d14:	4013      	ands	r3, r2
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010d1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d119      	bne.n	8010d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d2a:	085b      	lsrs	r3, r3, #1
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d10f      	bne.n	8010d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d107      	bne.n	8010d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d4e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d001      	beq.n	8010d58 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8010d54:	2301      	movs	r3, #1
 8010d56:	e000      	b.n	8010d5a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3718      	adds	r7, #24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	40023800 	.word	0x40023800

08010d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d101      	bne.n	8010d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e0d0      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010d80:	4b6a      	ldr	r3, [pc, #424]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f003 030f 	and.w	r3, r3, #15
 8010d88:	683a      	ldr	r2, [r7, #0]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d910      	bls.n	8010db0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d8e:	4b67      	ldr	r3, [pc, #412]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f023 020f 	bic.w	r2, r3, #15
 8010d96:	4965      	ldr	r1, [pc, #404]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010d9e:	4b63      	ldr	r3, [pc, #396]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f003 030f 	and.w	r3, r3, #15
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d001      	beq.n	8010db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e0b8      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f003 0302 	and.w	r3, r3, #2
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d020      	beq.n	8010dfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f003 0304 	and.w	r3, r3, #4
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010dc8:	4b59      	ldr	r3, [pc, #356]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	4a58      	ldr	r2, [pc, #352]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010dd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f003 0308 	and.w	r3, r3, #8
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d005      	beq.n	8010dec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010de0:	4b53      	ldr	r3, [pc, #332]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010de2:	689b      	ldr	r3, [r3, #8]
 8010de4:	4a52      	ldr	r2, [pc, #328]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010dea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010dec:	4b50      	ldr	r3, [pc, #320]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	494d      	ldr	r1, [pc, #308]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d040      	beq.n	8010e8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d107      	bne.n	8010e22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e12:	4b47      	ldr	r3, [pc, #284]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d115      	bne.n	8010e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e07f      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	d107      	bne.n	8010e3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010e2a:	4b41      	ldr	r3, [pc, #260]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d109      	bne.n	8010e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e073      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e3a:	4b3d      	ldr	r3, [pc, #244]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f003 0302 	and.w	r3, r3, #2
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010e46:	2301      	movs	r3, #1
 8010e48:	e06b      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010e4a:	4b39      	ldr	r3, [pc, #228]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	f023 0203 	bic.w	r2, r3, #3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	4936      	ldr	r1, [pc, #216]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010e5c:	f7fd fc72 	bl	800e744 <HAL_GetTick>
 8010e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e62:	e00a      	b.n	8010e7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e64:	f7fd fc6e 	bl	800e744 <HAL_GetTick>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d901      	bls.n	8010e7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8010e76:	2303      	movs	r3, #3
 8010e78:	e053      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e7a:	4b2d      	ldr	r3, [pc, #180]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	f003 020c 	and.w	r2, r3, #12
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d1eb      	bne.n	8010e64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010e8c:	4b27      	ldr	r3, [pc, #156]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f003 030f 	and.w	r3, r3, #15
 8010e94:	683a      	ldr	r2, [r7, #0]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d210      	bcs.n	8010ebc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010e9a:	4b24      	ldr	r3, [pc, #144]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f023 020f 	bic.w	r2, r3, #15
 8010ea2:	4922      	ldr	r1, [pc, #136]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010eaa:	4b20      	ldr	r3, [pc, #128]	; (8010f2c <HAL_RCC_ClockConfig+0x1c4>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f003 030f 	and.w	r3, r3, #15
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d001      	beq.n	8010ebc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e032      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f003 0304 	and.w	r3, r3, #4
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d008      	beq.n	8010eda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010ec8:	4b19      	ldr	r3, [pc, #100]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	4916      	ldr	r1, [pc, #88]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f003 0308 	and.w	r3, r3, #8
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d009      	beq.n	8010efa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010ee6:	4b12      	ldr	r3, [pc, #72]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010ee8:	689b      	ldr	r3, [r3, #8]
 8010eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	490e      	ldr	r1, [pc, #56]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010efa:	f000 f821 	bl	8010f40 <HAL_RCC_GetSysClockFreq>
 8010efe:	4601      	mov	r1, r0
 8010f00:	4b0b      	ldr	r3, [pc, #44]	; (8010f30 <HAL_RCC_ClockConfig+0x1c8>)
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	091b      	lsrs	r3, r3, #4
 8010f06:	f003 030f 	and.w	r3, r3, #15
 8010f0a:	4a0a      	ldr	r2, [pc, #40]	; (8010f34 <HAL_RCC_ClockConfig+0x1cc>)
 8010f0c:	5cd3      	ldrb	r3, [r2, r3]
 8010f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8010f12:	4a09      	ldr	r2, [pc, #36]	; (8010f38 <HAL_RCC_ClockConfig+0x1d0>)
 8010f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8010f16:	4b09      	ldr	r3, [pc, #36]	; (8010f3c <HAL_RCC_ClockConfig+0x1d4>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fd fbce 	bl	800e6bc <HAL_InitTick>

  return HAL_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	40023c00 	.word	0x40023c00
 8010f30:	40023800 	.word	0x40023800
 8010f34:	08020770 	.word	0x08020770
 8010f38:	20000014 	.word	0x20000014
 8010f3c:	20000018 	.word	0x20000018

08010f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8010f46:	2300      	movs	r3, #0
 8010f48:	607b      	str	r3, [r7, #4]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60fb      	str	r3, [r7, #12]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010f56:	4b63      	ldr	r3, [pc, #396]	; (80110e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	f003 030c 	and.w	r3, r3, #12
 8010f5e:	2b04      	cmp	r3, #4
 8010f60:	d007      	beq.n	8010f72 <HAL_RCC_GetSysClockFreq+0x32>
 8010f62:	2b08      	cmp	r3, #8
 8010f64:	d008      	beq.n	8010f78 <HAL_RCC_GetSysClockFreq+0x38>
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f040 80b4 	bne.w	80110d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010f6c:	4b5e      	ldr	r3, [pc, #376]	; (80110e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010f6e:	60bb      	str	r3, [r7, #8]
      break;
 8010f70:	e0b3      	b.n	80110da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010f72:	4b5d      	ldr	r3, [pc, #372]	; (80110e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010f74:	60bb      	str	r3, [r7, #8]
      break;
 8010f76:	e0b0      	b.n	80110da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010f78:	4b5a      	ldr	r3, [pc, #360]	; (80110e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8010f82:	4b58      	ldr	r3, [pc, #352]	; (80110e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d04a      	beq.n	8011024 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010f8e:	4b55      	ldr	r3, [pc, #340]	; (80110e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	099b      	lsrs	r3, r3, #6
 8010f94:	f04f 0400 	mov.w	r4, #0
 8010f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010f9c:	f04f 0200 	mov.w	r2, #0
 8010fa0:	ea03 0501 	and.w	r5, r3, r1
 8010fa4:	ea04 0602 	and.w	r6, r4, r2
 8010fa8:	4629      	mov	r1, r5
 8010faa:	4632      	mov	r2, r6
 8010fac:	f04f 0300 	mov.w	r3, #0
 8010fb0:	f04f 0400 	mov.w	r4, #0
 8010fb4:	0154      	lsls	r4, r2, #5
 8010fb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010fba:	014b      	lsls	r3, r1, #5
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	1b49      	subs	r1, r1, r5
 8010fc2:	eb62 0206 	sbc.w	r2, r2, r6
 8010fc6:	f04f 0300 	mov.w	r3, #0
 8010fca:	f04f 0400 	mov.w	r4, #0
 8010fce:	0194      	lsls	r4, r2, #6
 8010fd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010fd4:	018b      	lsls	r3, r1, #6
 8010fd6:	1a5b      	subs	r3, r3, r1
 8010fd8:	eb64 0402 	sbc.w	r4, r4, r2
 8010fdc:	f04f 0100 	mov.w	r1, #0
 8010fe0:	f04f 0200 	mov.w	r2, #0
 8010fe4:	00e2      	lsls	r2, r4, #3
 8010fe6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010fea:	00d9      	lsls	r1, r3, #3
 8010fec:	460b      	mov	r3, r1
 8010fee:	4614      	mov	r4, r2
 8010ff0:	195b      	adds	r3, r3, r5
 8010ff2:	eb44 0406 	adc.w	r4, r4, r6
 8010ff6:	f04f 0100 	mov.w	r1, #0
 8010ffa:	f04f 0200 	mov.w	r2, #0
 8010ffe:	02a2      	lsls	r2, r4, #10
 8011000:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8011004:	0299      	lsls	r1, r3, #10
 8011006:	460b      	mov	r3, r1
 8011008:	4614      	mov	r4, r2
 801100a:	4618      	mov	r0, r3
 801100c:	4621      	mov	r1, r4
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f04f 0400 	mov.w	r4, #0
 8011014:	461a      	mov	r2, r3
 8011016:	4623      	mov	r3, r4
 8011018:	f7f7 f97a 	bl	8008310 <__aeabi_uldivmod>
 801101c:	4603      	mov	r3, r0
 801101e:	460c      	mov	r4, r1
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	e049      	b.n	80110b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011024:	4b2f      	ldr	r3, [pc, #188]	; (80110e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	099b      	lsrs	r3, r3, #6
 801102a:	f04f 0400 	mov.w	r4, #0
 801102e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011032:	f04f 0200 	mov.w	r2, #0
 8011036:	ea03 0501 	and.w	r5, r3, r1
 801103a:	ea04 0602 	and.w	r6, r4, r2
 801103e:	4629      	mov	r1, r5
 8011040:	4632      	mov	r2, r6
 8011042:	f04f 0300 	mov.w	r3, #0
 8011046:	f04f 0400 	mov.w	r4, #0
 801104a:	0154      	lsls	r4, r2, #5
 801104c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011050:	014b      	lsls	r3, r1, #5
 8011052:	4619      	mov	r1, r3
 8011054:	4622      	mov	r2, r4
 8011056:	1b49      	subs	r1, r1, r5
 8011058:	eb62 0206 	sbc.w	r2, r2, r6
 801105c:	f04f 0300 	mov.w	r3, #0
 8011060:	f04f 0400 	mov.w	r4, #0
 8011064:	0194      	lsls	r4, r2, #6
 8011066:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801106a:	018b      	lsls	r3, r1, #6
 801106c:	1a5b      	subs	r3, r3, r1
 801106e:	eb64 0402 	sbc.w	r4, r4, r2
 8011072:	f04f 0100 	mov.w	r1, #0
 8011076:	f04f 0200 	mov.w	r2, #0
 801107a:	00e2      	lsls	r2, r4, #3
 801107c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011080:	00d9      	lsls	r1, r3, #3
 8011082:	460b      	mov	r3, r1
 8011084:	4614      	mov	r4, r2
 8011086:	195b      	adds	r3, r3, r5
 8011088:	eb44 0406 	adc.w	r4, r4, r6
 801108c:	f04f 0100 	mov.w	r1, #0
 8011090:	f04f 0200 	mov.w	r2, #0
 8011094:	02a2      	lsls	r2, r4, #10
 8011096:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801109a:	0299      	lsls	r1, r3, #10
 801109c:	460b      	mov	r3, r1
 801109e:	4614      	mov	r4, r2
 80110a0:	4618      	mov	r0, r3
 80110a2:	4621      	mov	r1, r4
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f04f 0400 	mov.w	r4, #0
 80110aa:	461a      	mov	r2, r3
 80110ac:	4623      	mov	r3, r4
 80110ae:	f7f7 f92f 	bl	8008310 <__aeabi_uldivmod>
 80110b2:	4603      	mov	r3, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80110b8:	4b0a      	ldr	r3, [pc, #40]	; (80110e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	0c1b      	lsrs	r3, r3, #16
 80110be:	f003 0303 	and.w	r3, r3, #3
 80110c2:	3301      	adds	r3, #1
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80110d0:	60bb      	str	r3, [r7, #8]
      break;
 80110d2:	e002      	b.n	80110da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80110d4:	4b04      	ldr	r3, [pc, #16]	; (80110e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80110d6:	60bb      	str	r3, [r7, #8]
      break;
 80110d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80110da:	68bb      	ldr	r3, [r7, #8]
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3714      	adds	r7, #20
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e4:	40023800 	.word	0x40023800
 80110e8:	00f42400 	.word	0x00f42400

080110ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <HAL_RCC_GetHCLKFreq+0x14>)
 80110f2:	681b      	ldr	r3, [r3, #0]
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	20000014 	.word	0x20000014

08011104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011108:	f7ff fff0 	bl	80110ec <HAL_RCC_GetHCLKFreq>
 801110c:	4601      	mov	r1, r0
 801110e:	4b05      	ldr	r3, [pc, #20]	; (8011124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	0a9b      	lsrs	r3, r3, #10
 8011114:	f003 0307 	and.w	r3, r3, #7
 8011118:	4a03      	ldr	r2, [pc, #12]	; (8011128 <HAL_RCC_GetPCLK1Freq+0x24>)
 801111a:	5cd3      	ldrb	r3, [r2, r3]
 801111c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011120:	4618      	mov	r0, r3
 8011122:	bd80      	pop	{r7, pc}
 8011124:	40023800 	.word	0x40023800
 8011128:	08020780 	.word	0x08020780

0801112c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011130:	f7ff ffdc 	bl	80110ec <HAL_RCC_GetHCLKFreq>
 8011134:	4601      	mov	r1, r0
 8011136:	4b05      	ldr	r3, [pc, #20]	; (801114c <HAL_RCC_GetPCLK2Freq+0x20>)
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	0b5b      	lsrs	r3, r3, #13
 801113c:	f003 0307 	and.w	r3, r3, #7
 8011140:	4a03      	ldr	r2, [pc, #12]	; (8011150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011142:	5cd3      	ldrb	r3, [r2, r3]
 8011144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011148:	4618      	mov	r0, r3
 801114a:	bd80      	pop	{r7, pc}
 801114c:	40023800 	.word	0x40023800
 8011150:	08020780 	.word	0x08020780

08011154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b088      	sub	sp, #32
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8011160:	2300      	movs	r3, #0
 8011162:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8011164:	2300      	movs	r3, #0
 8011166:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8011168:	2300      	movs	r3, #0
 801116a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801116c:	2300      	movs	r3, #0
 801116e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f003 0301 	and.w	r3, r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	d012      	beq.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801117c:	4b69      	ldr	r3, [pc, #420]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	4a68      	ldr	r2, [pc, #416]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011186:	6093      	str	r3, [r2, #8]
 8011188:	4b66      	ldr	r3, [pc, #408]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801118a:	689a      	ldr	r2, [r3, #8]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011190:	4964      	ldr	r1, [pc, #400]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011192:	4313      	orrs	r3, r2
 8011194:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801119a:	2b00      	cmp	r3, #0
 801119c:	d101      	bne.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801119e:	2301      	movs	r3, #1
 80111a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d017      	beq.n	80111de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80111ae:	4b5d      	ldr	r3, [pc, #372]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111bc:	4959      	ldr	r1, [pc, #356]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111be:	4313      	orrs	r3, r2
 80111c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111cc:	d101      	bne.n	80111d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80111ce:	2301      	movs	r3, #1
 80111d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d101      	bne.n	80111de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80111da:	2301      	movs	r3, #1
 80111dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d017      	beq.n	801121a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80111ea:	4b4e      	ldr	r3, [pc, #312]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111f8:	494a      	ldr	r1, [pc, #296]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111fa:	4313      	orrs	r3, r2
 80111fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011208:	d101      	bne.n	801120e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801120a:	2301      	movs	r3, #1
 801120c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011212:	2b00      	cmp	r3, #0
 8011214:	d101      	bne.n	801121a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8011216:	2301      	movs	r3, #1
 8011218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011222:	2b00      	cmp	r3, #0
 8011224:	d001      	beq.n	801122a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8011226:	2301      	movs	r3, #1
 8011228:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f003 0320 	and.w	r3, r3, #32
 8011232:	2b00      	cmp	r3, #0
 8011234:	f000 808b 	beq.w	801134e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011238:	4b3a      	ldr	r3, [pc, #232]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801123c:	4a39      	ldr	r2, [pc, #228]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011242:	6413      	str	r3, [r2, #64]	; 0x40
 8011244:	4b37      	ldr	r3, [pc, #220]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801124c:	60bb      	str	r3, [r7, #8]
 801124e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011250:	4b35      	ldr	r3, [pc, #212]	; (8011328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4a34      	ldr	r2, [pc, #208]	; (8011328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801125a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801125c:	f7fd fa72 	bl	800e744 <HAL_GetTick>
 8011260:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8011262:	e008      	b.n	8011276 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011264:	f7fd fa6e 	bl	800e744 <HAL_GetTick>
 8011268:	4602      	mov	r2, r0
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	1ad3      	subs	r3, r2, r3
 801126e:	2b64      	cmp	r3, #100	; 0x64
 8011270:	d901      	bls.n	8011276 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8011272:	2303      	movs	r3, #3
 8011274:	e38d      	b.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8011276:	4b2c      	ldr	r3, [pc, #176]	; (8011328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0f0      	beq.n	8011264 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011282:	4b28      	ldr	r3, [pc, #160]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801128a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d035      	beq.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801129a:	693a      	ldr	r2, [r7, #16]
 801129c:	429a      	cmp	r2, r3
 801129e:	d02e      	beq.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80112a0:	4b20      	ldr	r3, [pc, #128]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80112aa:	4b1e      	ldr	r3, [pc, #120]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ae:	4a1d      	ldr	r2, [pc, #116]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80112b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80112b6:	4b1b      	ldr	r3, [pc, #108]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ba:	4a1a      	ldr	r2, [pc, #104]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80112c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80112c2:	4a18      	ldr	r2, [pc, #96]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80112c8:	4b16      	ldr	r3, [pc, #88]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112cc:	f003 0301 	and.w	r3, r3, #1
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d114      	bne.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112d4:	f7fd fa36 	bl	800e744 <HAL_GetTick>
 80112d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80112da:	e00a      	b.n	80112f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112dc:	f7fd fa32 	bl	800e744 <HAL_GetTick>
 80112e0:	4602      	mov	r2, r0
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d901      	bls.n	80112f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80112ee:	2303      	movs	r3, #3
 80112f0:	e34f      	b.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80112f2:	4b0c      	ldr	r3, [pc, #48]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f6:	f003 0302 	and.w	r3, r3, #2
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0ee      	beq.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801130a:	d111      	bne.n	8011330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801130c:	4b05      	ldr	r3, [pc, #20]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011318:	4b04      	ldr	r3, [pc, #16]	; (801132c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801131a:	400b      	ands	r3, r1
 801131c:	4901      	ldr	r1, [pc, #4]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801131e:	4313      	orrs	r3, r2
 8011320:	608b      	str	r3, [r1, #8]
 8011322:	e00b      	b.n	801133c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8011324:	40023800 	.word	0x40023800
 8011328:	40007000 	.word	0x40007000
 801132c:	0ffffcff 	.word	0x0ffffcff
 8011330:	4bb3      	ldr	r3, [pc, #716]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	4ab2      	ldr	r2, [pc, #712]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011336:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801133a:	6093      	str	r3, [r2, #8]
 801133c:	4bb0      	ldr	r3, [pc, #704]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801133e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011348:	49ad      	ldr	r1, [pc, #692]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801134a:	4313      	orrs	r3, r2
 801134c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f003 0310 	and.w	r3, r3, #16
 8011356:	2b00      	cmp	r3, #0
 8011358:	d010      	beq.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801135a:	4ba9      	ldr	r3, [pc, #676]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801135c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011360:	4aa7      	ldr	r2, [pc, #668]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011366:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801136a:	4ba5      	ldr	r3, [pc, #660]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801136c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011374:	49a2      	ldr	r1, [pc, #648]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011376:	4313      	orrs	r3, r2
 8011378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00a      	beq.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011388:	4b9d      	ldr	r3, [pc, #628]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801138a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801138e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011396:	499a      	ldr	r1, [pc, #616]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011398:	4313      	orrs	r3, r2
 801139a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00a      	beq.n	80113c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80113aa:	4b95      	ldr	r3, [pc, #596]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113b8:	4991      	ldr	r1, [pc, #580]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113ba:	4313      	orrs	r3, r2
 80113bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00a      	beq.n	80113e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80113cc:	4b8c      	ldr	r3, [pc, #560]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113da:	4989      	ldr	r1, [pc, #548]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113dc:	4313      	orrs	r3, r2
 80113de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00a      	beq.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80113ee:	4b84      	ldr	r3, [pc, #528]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113fc:	4980      	ldr	r1, [pc, #512]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113fe:	4313      	orrs	r3, r2
 8011400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00a      	beq.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011410:	4b7b      	ldr	r3, [pc, #492]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011416:	f023 0203 	bic.w	r2, r3, #3
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801141e:	4978      	ldr	r1, [pc, #480]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011420:	4313      	orrs	r3, r2
 8011422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00a      	beq.n	8011448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011432:	4b73      	ldr	r3, [pc, #460]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011438:	f023 020c 	bic.w	r2, r3, #12
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011440:	496f      	ldr	r1, [pc, #444]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011442:	4313      	orrs	r3, r2
 8011444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00a      	beq.n	801146a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011454:	4b6a      	ldr	r3, [pc, #424]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801145a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011462:	4967      	ldr	r1, [pc, #412]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011464:	4313      	orrs	r3, r2
 8011466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00a      	beq.n	801148c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011476:	4b62      	ldr	r3, [pc, #392]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801147c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011484:	495e      	ldr	r1, [pc, #376]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011486:	4313      	orrs	r3, r2
 8011488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00a      	beq.n	80114ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011498:	4b59      	ldr	r3, [pc, #356]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801149e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114a6:	4956      	ldr	r1, [pc, #344]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114a8:	4313      	orrs	r3, r2
 80114aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00a      	beq.n	80114d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80114ba:	4b51      	ldr	r3, [pc, #324]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114c8:	494d      	ldr	r1, [pc, #308]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114ca:	4313      	orrs	r3, r2
 80114cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00a      	beq.n	80114f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80114dc:	4b48      	ldr	r3, [pc, #288]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114ea:	4945      	ldr	r1, [pc, #276]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114ec:	4313      	orrs	r3, r2
 80114ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00a      	beq.n	8011514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80114fe:	4b40      	ldr	r3, [pc, #256]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801150c:	493c      	ldr	r1, [pc, #240]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801150e:	4313      	orrs	r3, r2
 8011510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00a      	beq.n	8011536 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011520:	4b37      	ldr	r3, [pc, #220]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011526:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801152e:	4934      	ldr	r1, [pc, #208]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011530:	4313      	orrs	r3, r2
 8011532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801153e:	2b00      	cmp	r3, #0
 8011540:	d011      	beq.n	8011566 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8011542:	4b2f      	ldr	r3, [pc, #188]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011548:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011550:	492b      	ldr	r1, [pc, #172]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011552:	4313      	orrs	r3, r2
 8011554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801155c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011560:	d101      	bne.n	8011566 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8011562:	2301      	movs	r3, #1
 8011564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f003 0308 	and.w	r3, r3, #8
 801156e:	2b00      	cmp	r3, #0
 8011570:	d001      	beq.n	8011576 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8011572:	2301      	movs	r3, #1
 8011574:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00a      	beq.n	8011598 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011582:	4b1f      	ldr	r3, [pc, #124]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011588:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011590:	491b      	ldr	r1, [pc, #108]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011592:	4313      	orrs	r3, r2
 8011594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d00b      	beq.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80115a4:	4b16      	ldr	r3, [pc, #88]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80115a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115b4:	4912      	ldr	r1, [pc, #72]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80115b6:	4313      	orrs	r3, r2
 80115b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d00b      	beq.n	80115e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80115c8:	4b0d      	ldr	r3, [pc, #52]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80115ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115d8:	4909      	ldr	r1, [pc, #36]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80115da:	4313      	orrs	r3, r2
 80115dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00f      	beq.n	801160c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80115ec:	4b04      	ldr	r3, [pc, #16]	; (8011600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80115ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115fc:	e002      	b.n	8011604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80115fe:	bf00      	nop
 8011600:	40023800 	.word	0x40023800
 8011604:	4985      	ldr	r1, [pc, #532]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011606:	4313      	orrs	r3, r2
 8011608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00b      	beq.n	8011630 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8011618:	4b80      	ldr	r3, [pc, #512]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801161a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801161e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011628:	497c      	ldr	r1, [pc, #496]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801162a:	4313      	orrs	r3, r2
 801162c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	2b01      	cmp	r3, #1
 8011634:	d005      	beq.n	8011642 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801163e:	f040 80d6 	bne.w	80117ee <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011642:	4b76      	ldr	r3, [pc, #472]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4a75      	ldr	r2, [pc, #468]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011648:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801164c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801164e:	f7fd f879 	bl	800e744 <HAL_GetTick>
 8011652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011654:	e008      	b.n	8011668 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011656:	f7fd f875 	bl	800e744 <HAL_GetTick>
 801165a:	4602      	mov	r2, r0
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	2b64      	cmp	r3, #100	; 0x64
 8011662:	d901      	bls.n	8011668 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011664:	2303      	movs	r3, #3
 8011666:	e194      	b.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011668:	4b6c      	ldr	r3, [pc, #432]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1f0      	bne.n	8011656 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f003 0301 	and.w	r3, r3, #1
 801167c:	2b00      	cmp	r3, #0
 801167e:	d021      	beq.n	80116c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011684:	2b00      	cmp	r3, #0
 8011686:	d11d      	bne.n	80116c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011688:	4b64      	ldr	r3, [pc, #400]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801168a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801168e:	0c1b      	lsrs	r3, r3, #16
 8011690:	f003 0303 	and.w	r3, r3, #3
 8011694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011696:	4b61      	ldr	r3, [pc, #388]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801169c:	0e1b      	lsrs	r3, r3, #24
 801169e:	f003 030f 	and.w	r3, r3, #15
 80116a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	019a      	lsls	r2, r3, #6
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	041b      	lsls	r3, r3, #16
 80116ae:	431a      	orrs	r2, r3
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	061b      	lsls	r3, r3, #24
 80116b4:	431a      	orrs	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	071b      	lsls	r3, r3, #28
 80116bc:	4957      	ldr	r1, [pc, #348]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116be:	4313      	orrs	r3, r2
 80116c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d004      	beq.n	80116da <HAL_RCCEx_PeriphCLKConfig+0x586>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80116d8:	d00a      	beq.n	80116f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d02e      	beq.n	8011744 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80116ee:	d129      	bne.n	8011744 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80116f0:	4b4a      	ldr	r3, [pc, #296]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116f6:	0c1b      	lsrs	r3, r3, #16
 80116f8:	f003 0303 	and.w	r3, r3, #3
 80116fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80116fe:	4b47      	ldr	r3, [pc, #284]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011704:	0f1b      	lsrs	r3, r3, #28
 8011706:	f003 0307 	and.w	r3, r3, #7
 801170a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	019a      	lsls	r2, r3, #6
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	041b      	lsls	r3, r3, #16
 8011716:	431a      	orrs	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	061b      	lsls	r3, r3, #24
 801171e:	431a      	orrs	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	071b      	lsls	r3, r3, #28
 8011724:	493d      	ldr	r1, [pc, #244]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011726:	4313      	orrs	r3, r2
 8011728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801172c:	4b3b      	ldr	r3, [pc, #236]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011732:	f023 021f 	bic.w	r2, r3, #31
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173a:	3b01      	subs	r3, #1
 801173c:	4937      	ldr	r1, [pc, #220]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801173e:	4313      	orrs	r3, r2
 8011740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801174c:	2b00      	cmp	r3, #0
 801174e:	d01d      	beq.n	801178c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011750:	4b32      	ldr	r3, [pc, #200]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011756:	0e1b      	lsrs	r3, r3, #24
 8011758:	f003 030f 	and.w	r3, r3, #15
 801175c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801175e:	4b2f      	ldr	r3, [pc, #188]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011764:	0f1b      	lsrs	r3, r3, #28
 8011766:	f003 0307 	and.w	r3, r3, #7
 801176a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	019a      	lsls	r2, r3, #6
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	041b      	lsls	r3, r3, #16
 8011778:	431a      	orrs	r2, r3
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	061b      	lsls	r3, r3, #24
 801177e:	431a      	orrs	r2, r3
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	071b      	lsls	r3, r3, #28
 8011784:	4925      	ldr	r1, [pc, #148]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011786:	4313      	orrs	r3, r2
 8011788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011794:	2b00      	cmp	r3, #0
 8011796:	d011      	beq.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	019a      	lsls	r2, r3, #6
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	691b      	ldr	r3, [r3, #16]
 80117a2:	041b      	lsls	r3, r3, #16
 80117a4:	431a      	orrs	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	061b      	lsls	r3, r3, #24
 80117ac:	431a      	orrs	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	071b      	lsls	r3, r3, #28
 80117b4:	4919      	ldr	r1, [pc, #100]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80117b6:	4313      	orrs	r3, r2
 80117b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80117bc:	4b17      	ldr	r3, [pc, #92]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	4a16      	ldr	r2, [pc, #88]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80117c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80117c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80117c8:	f7fc ffbc 	bl	800e744 <HAL_GetTick>
 80117cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80117ce:	e008      	b.n	80117e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80117d0:	f7fc ffb8 	bl	800e744 <HAL_GetTick>
 80117d4:	4602      	mov	r2, r0
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	1ad3      	subs	r3, r2, r3
 80117da:	2b64      	cmp	r3, #100	; 0x64
 80117dc:	d901      	bls.n	80117e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80117de:	2303      	movs	r3, #3
 80117e0:	e0d7      	b.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80117e2:	4b0e      	ldr	r3, [pc, #56]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d0f0      	beq.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	f040 80cd 	bne.w	8011990 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80117f6:	4b09      	ldr	r3, [pc, #36]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4a08      	ldr	r2, [pc, #32]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80117fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011802:	f7fc ff9f 	bl	800e744 <HAL_GetTick>
 8011806:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011808:	e00a      	b.n	8011820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801180a:	f7fc ff9b 	bl	800e744 <HAL_GetTick>
 801180e:	4602      	mov	r2, r0
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	2b64      	cmp	r3, #100	; 0x64
 8011816:	d903      	bls.n	8011820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011818:	2303      	movs	r3, #3
 801181a:	e0ba      	b.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 801181c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011820:	4b5e      	ldr	r3, [pc, #376]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801182c:	d0ed      	beq.n	801180a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801183e:	2b00      	cmp	r3, #0
 8011840:	d009      	beq.n	8011856 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801184a:	2b00      	cmp	r3, #0
 801184c:	d02e      	beq.n	80118ac <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011852:	2b00      	cmp	r3, #0
 8011854:	d12a      	bne.n	80118ac <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011856:	4b51      	ldr	r3, [pc, #324]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801185c:	0c1b      	lsrs	r3, r3, #16
 801185e:	f003 0303 	and.w	r3, r3, #3
 8011862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011864:	4b4d      	ldr	r3, [pc, #308]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801186a:	0f1b      	lsrs	r3, r3, #28
 801186c:	f003 0307 	and.w	r3, r3, #7
 8011870:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	695b      	ldr	r3, [r3, #20]
 8011876:	019a      	lsls	r2, r3, #6
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	041b      	lsls	r3, r3, #16
 801187c:	431a      	orrs	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	699b      	ldr	r3, [r3, #24]
 8011882:	061b      	lsls	r3, r3, #24
 8011884:	431a      	orrs	r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	071b      	lsls	r3, r3, #28
 801188a:	4944      	ldr	r1, [pc, #272]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801188c:	4313      	orrs	r3, r2
 801188e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011892:	4b42      	ldr	r3, [pc, #264]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011898:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a0:	3b01      	subs	r3, #1
 80118a2:	021b      	lsls	r3, r3, #8
 80118a4:	493d      	ldr	r1, [pc, #244]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118a6:	4313      	orrs	r3, r2
 80118a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d022      	beq.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80118c0:	d11d      	bne.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80118c2:	4b36      	ldr	r3, [pc, #216]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118c8:	0e1b      	lsrs	r3, r3, #24
 80118ca:	f003 030f 	and.w	r3, r3, #15
 80118ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80118d0:	4b32      	ldr	r3, [pc, #200]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118d6:	0f1b      	lsrs	r3, r3, #28
 80118d8:	f003 0307 	and.w	r3, r3, #7
 80118dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	695b      	ldr	r3, [r3, #20]
 80118e2:	019a      	lsls	r2, r3, #6
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a1b      	ldr	r3, [r3, #32]
 80118e8:	041b      	lsls	r3, r3, #16
 80118ea:	431a      	orrs	r2, r3
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	061b      	lsls	r3, r3, #24
 80118f0:	431a      	orrs	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	071b      	lsls	r3, r3, #28
 80118f6:	4929      	ldr	r1, [pc, #164]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118f8:	4313      	orrs	r3, r2
 80118fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f003 0308 	and.w	r3, r3, #8
 8011906:	2b00      	cmp	r3, #0
 8011908:	d028      	beq.n	801195c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801190a:	4b24      	ldr	r3, [pc, #144]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801190c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011910:	0e1b      	lsrs	r3, r3, #24
 8011912:	f003 030f 	and.w	r3, r3, #15
 8011916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011918:	4b20      	ldr	r3, [pc, #128]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801191e:	0c1b      	lsrs	r3, r3, #16
 8011920:	f003 0303 	and.w	r3, r3, #3
 8011924:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	695b      	ldr	r3, [r3, #20]
 801192a:	019a      	lsls	r2, r3, #6
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	041b      	lsls	r3, r3, #16
 8011930:	431a      	orrs	r2, r3
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	061b      	lsls	r3, r3, #24
 8011936:	431a      	orrs	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	69db      	ldr	r3, [r3, #28]
 801193c:	071b      	lsls	r3, r3, #28
 801193e:	4917      	ldr	r1, [pc, #92]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011940:	4313      	orrs	r3, r2
 8011942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011946:	4b15      	ldr	r3, [pc, #84]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801194c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011954:	4911      	ldr	r1, [pc, #68]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011956:	4313      	orrs	r3, r2
 8011958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801195c:	4b0f      	ldr	r3, [pc, #60]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a0e      	ldr	r2, [pc, #56]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011968:	f7fc feec 	bl	800e744 <HAL_GetTick>
 801196c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801196e:	e008      	b.n	8011982 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011970:	f7fc fee8 	bl	800e744 <HAL_GetTick>
 8011974:	4602      	mov	r2, r0
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	2b64      	cmp	r3, #100	; 0x64
 801197c:	d901      	bls.n	8011982 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801197e:	2303      	movs	r3, #3
 8011980:	e007      	b.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011982:	4b06      	ldr	r3, [pc, #24]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801198a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801198e:	d1ef      	bne.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8011990:	2300      	movs	r3, #0
}
 8011992:	4618      	mov	r0, r3
 8011994:	3720      	adds	r7, #32
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	40023800 	.word	0x40023800

080119a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d101      	bne.n	80119b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80119ae:	2301      	movs	r3, #1
 80119b0:	e084      	b.n	8011abc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d106      	bne.n	80119d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7fc fc8f 	bl	800e2f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2202      	movs	r2, #2
 80119d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80119e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80119f2:	d902      	bls.n	80119fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80119f4:	2300      	movs	r3, #0
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	e002      	b.n	8011a00 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80119fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011a08:	d007      	beq.n	8011a1a <HAL_SPI_Init+0x7a>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011a12:	d002      	beq.n	8011a1a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2200      	movs	r2, #0
 8011a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d10b      	bne.n	8011a3a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011a2a:	d903      	bls.n	8011a34 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2202      	movs	r2, #2
 8011a30:	631a      	str	r2, [r3, #48]	; 0x30
 8011a32:	e002      	b.n	8011a3a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685a      	ldr	r2, [r3, #4]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	689b      	ldr	r3, [r3, #8]
 8011a42:	431a      	orrs	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	691b      	ldr	r3, [r3, #16]
 8011a48:	431a      	orrs	r2, r3
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	695b      	ldr	r3, [r3, #20]
 8011a4e:	431a      	orrs	r2, r3
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	699b      	ldr	r3, [r3, #24]
 8011a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a58:	431a      	orrs	r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	69db      	ldr	r3, [r3, #28]
 8011a5e:	431a      	orrs	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6a1b      	ldr	r3, [r3, #32]
 8011a64:	ea42 0103 	orr.w	r1, r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	430a      	orrs	r2, r1
 8011a72:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	0c1b      	lsrs	r3, r3, #16
 8011a7a:	f003 0204 	and.w	r2, r3, #4
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a82:	431a      	orrs	r2, r3
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a88:	431a      	orrs	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	ea42 0103 	orr.w	r1, r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	430a      	orrs	r2, r1
 8011a9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	69da      	ldr	r2, [r3, #28]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011aaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2201      	movs	r2, #1
 8011ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8011aba:	2300      	movs	r3, #0
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3710      	adds	r7, #16
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b088      	sub	sp, #32
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	603b      	str	r3, [r7, #0]
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d101      	bne.n	8011ae6 <HAL_SPI_Transmit+0x22>
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	e150      	b.n	8011d88 <HAL_SPI_Transmit+0x2c4>
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011aee:	f7fc fe29 	bl	800e744 <HAL_GetTick>
 8011af2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011af4:	88fb      	ldrh	r3, [r7, #6]
 8011af6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d002      	beq.n	8011b0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011b04:	2302      	movs	r3, #2
 8011b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011b08:	e135      	b.n	8011d76 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d002      	beq.n	8011b16 <HAL_SPI_Transmit+0x52>
 8011b10:	88fb      	ldrh	r3, [r7, #6]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011b1a:	e12c      	b.n	8011d76 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2203      	movs	r2, #3
 8011b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	68ba      	ldr	r2, [r7, #8]
 8011b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	88fa      	ldrh	r2, [r7, #6]
 8011b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	88fa      	ldrh	r2, [r7, #6]
 8011b3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2200      	movs	r2, #0
 8011b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2200      	movs	r2, #0
 8011b56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b66:	d107      	bne.n	8011b78 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011b76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b82:	2b40      	cmp	r3, #64	; 0x40
 8011b84:	d007      	beq.n	8011b96 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011b9e:	d94b      	bls.n	8011c38 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d002      	beq.n	8011bae <HAL_SPI_Transmit+0xea>
 8011ba8:	8afb      	ldrh	r3, [r7, #22]
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d13e      	bne.n	8011c2c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bb2:	881a      	ldrh	r2, [r3, #0]
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bbe:	1c9a      	adds	r2, r3, #2
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	3b01      	subs	r3, #1
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011bd2:	e02b      	b.n	8011c2c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	f003 0302 	and.w	r3, r3, #2
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d112      	bne.n	8011c08 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be6:	881a      	ldrh	r2, [r3, #0]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bf2:	1c9a      	adds	r2, r3, #2
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c06:	e011      	b.n	8011c2c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c08:	f7fc fd9c 	bl	800e744 <HAL_GetTick>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d803      	bhi.n	8011c20 <HAL_SPI_Transmit+0x15c>
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c1e:	d102      	bne.n	8011c26 <HAL_SPI_Transmit+0x162>
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d102      	bne.n	8011c2c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8011c26:	2303      	movs	r3, #3
 8011c28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011c2a:	e0a4      	b.n	8011d76 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d1ce      	bne.n	8011bd4 <HAL_SPI_Transmit+0x110>
 8011c36:	e07c      	b.n	8011d32 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <HAL_SPI_Transmit+0x182>
 8011c40:	8afb      	ldrh	r3, [r7, #22]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d170      	bne.n	8011d28 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d912      	bls.n	8011c76 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c54:	881a      	ldrh	r2, [r3, #0]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c60:	1c9a      	adds	r2, r3, #2
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	3b02      	subs	r3, #2
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c74:	e058      	b.n	8011d28 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	330c      	adds	r3, #12
 8011c80:	7812      	ldrb	r2, [r2, #0]
 8011c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c88:	1c5a      	adds	r2, r3, #1
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	3b01      	subs	r3, #1
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011c9c:	e044      	b.n	8011d28 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	f003 0302 	and.w	r3, r3, #2
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	d12b      	bne.n	8011d04 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d912      	bls.n	8011cdc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cba:	881a      	ldrh	r2, [r3, #0]
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc6:	1c9a      	adds	r2, r3, #2
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	3b02      	subs	r3, #2
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011cda:	e025      	b.n	8011d28 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	330c      	adds	r3, #12
 8011ce6:	7812      	ldrb	r2, [r2, #0]
 8011ce8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cee:	1c5a      	adds	r2, r3, #1
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	3b01      	subs	r3, #1
 8011cfc:	b29a      	uxth	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011d02:	e011      	b.n	8011d28 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d04:	f7fc fd1e 	bl	800e744 <HAL_GetTick>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	683a      	ldr	r2, [r7, #0]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d803      	bhi.n	8011d1c <HAL_SPI_Transmit+0x258>
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d1a:	d102      	bne.n	8011d22 <HAL_SPI_Transmit+0x25e>
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d102      	bne.n	8011d28 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8011d22:	2303      	movs	r3, #3
 8011d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011d26:	e026      	b.n	8011d76 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1b5      	bne.n	8011c9e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011d32:	69ba      	ldr	r2, [r7, #24]
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f000 fdf3 	bl	8012922 <SPI_EndRxTxTransaction>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2220      	movs	r2, #32
 8011d46:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d10a      	bne.n	8011d66 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011d50:	2300      	movs	r3, #0
 8011d52:	613b      	str	r3, [r7, #16]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	613b      	str	r3, [r7, #16]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	613b      	str	r3, [r7, #16]
 8011d64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d002      	beq.n	8011d74 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8011d6e:	2301      	movs	r3, #1
 8011d70:	77fb      	strb	r3, [r7, #31]
 8011d72:	e000      	b.n	8011d76 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8011d74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3720      	adds	r7, #32
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08a      	sub	sp, #40	; 0x28
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
 8011d9c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011d9e:	2301      	movs	r3, #1
 8011da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d101      	bne.n	8011db6 <HAL_SPI_TransmitReceive+0x26>
 8011db2:	2302      	movs	r3, #2
 8011db4:	e1fb      	b.n	80121ae <HAL_SPI_TransmitReceive+0x41e>
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2201      	movs	r2, #1
 8011dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011dbe:	f7fc fcc1 	bl	800e744 <HAL_GetTick>
 8011dc2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011dca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8011dd2:	887b      	ldrh	r3, [r7, #2]
 8011dd4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8011dd6:	887b      	ldrh	r3, [r7, #2]
 8011dd8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011dda:	7efb      	ldrb	r3, [r7, #27]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d00e      	beq.n	8011dfe <HAL_SPI_TransmitReceive+0x6e>
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011de6:	d106      	bne.n	8011df6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d102      	bne.n	8011df6 <HAL_SPI_TransmitReceive+0x66>
 8011df0:	7efb      	ldrb	r3, [r7, #27]
 8011df2:	2b04      	cmp	r3, #4
 8011df4:	d003      	beq.n	8011dfe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8011df6:	2302      	movs	r3, #2
 8011df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011dfc:	e1cd      	b.n	801219a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d005      	beq.n	8011e10 <HAL_SPI_TransmitReceive+0x80>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <HAL_SPI_TransmitReceive+0x80>
 8011e0a:	887b      	ldrh	r3, [r7, #2]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d103      	bne.n	8011e18 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8011e10:	2301      	movs	r3, #1
 8011e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011e16:	e1c0      	b.n	801219a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	2b04      	cmp	r3, #4
 8011e22:	d003      	beq.n	8011e2c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2205      	movs	r2, #5
 8011e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	887a      	ldrh	r2, [r7, #2]
 8011e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	887a      	ldrh	r2, [r7, #2]
 8011e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	887a      	ldrh	r2, [r7, #2]
 8011e52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	887a      	ldrh	r2, [r7, #2]
 8011e58:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2200      	movs	r2, #0
 8011e64:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011e6e:	d802      	bhi.n	8011e76 <HAL_SPI_TransmitReceive+0xe6>
 8011e70:	8a3b      	ldrh	r3, [r7, #16]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d908      	bls.n	8011e88 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	685a      	ldr	r2, [r3, #4]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011e84:	605a      	str	r2, [r3, #4]
 8011e86:	e007      	b.n	8011e98 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	685a      	ldr	r2, [r3, #4]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011e96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ea2:	2b40      	cmp	r3, #64	; 0x40
 8011ea4:	d007      	beq.n	8011eb6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011eb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011ebe:	d97c      	bls.n	8011fba <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d002      	beq.n	8011ece <HAL_SPI_TransmitReceive+0x13e>
 8011ec8:	8a7b      	ldrh	r3, [r7, #18]
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d169      	bne.n	8011fa2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed2:	881a      	ldrh	r2, [r3, #0]
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ede:	1c9a      	adds	r2, r3, #2
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	3b01      	subs	r3, #1
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011ef2:	e056      	b.n	8011fa2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	689b      	ldr	r3, [r3, #8]
 8011efa:	f003 0302 	and.w	r3, r3, #2
 8011efe:	2b02      	cmp	r3, #2
 8011f00:	d11b      	bne.n	8011f3a <HAL_SPI_TransmitReceive+0x1aa>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d016      	beq.n	8011f3a <HAL_SPI_TransmitReceive+0x1aa>
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d113      	bne.n	8011f3a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f16:	881a      	ldrh	r2, [r3, #0]
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f22:	1c9a      	adds	r2, r3, #2
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011f36:	2300      	movs	r3, #0
 8011f38:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	f003 0301 	and.w	r3, r3, #1
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d11c      	bne.n	8011f82 <HAL_SPI_TransmitReceive+0x1f2>
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d016      	beq.n	8011f82 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	68da      	ldr	r2, [r3, #12]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f5e:	b292      	uxth	r2, r2
 8011f60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f66:	1c9a      	adds	r2, r3, #2
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	3b01      	subs	r3, #1
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011f82:	f7fc fbdf 	bl	800e744 <HAL_GetTick>
 8011f86:	4602      	mov	r2, r0
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d807      	bhi.n	8011fa2 <HAL_SPI_TransmitReceive+0x212>
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f98:	d003      	beq.n	8011fa2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011f9a:	2303      	movs	r3, #3
 8011f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011fa0:	e0fb      	b.n	801219a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1a3      	bne.n	8011ef4 <HAL_SPI_TransmitReceive+0x164>
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d19d      	bne.n	8011ef4 <HAL_SPI_TransmitReceive+0x164>
 8011fb8:	e0df      	b.n	801217a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d003      	beq.n	8011fca <HAL_SPI_TransmitReceive+0x23a>
 8011fc2:	8a7b      	ldrh	r3, [r7, #18]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	f040 80cb 	bne.w	8012160 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d912      	bls.n	8011ffa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fd8:	881a      	ldrh	r2, [r3, #0]
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe4:	1c9a      	adds	r2, r3, #2
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	3b02      	subs	r3, #2
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011ff8:	e0b2      	b.n	8012160 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	330c      	adds	r3, #12
 8012004:	7812      	ldrb	r2, [r2, #0]
 8012006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801200c:	1c5a      	adds	r2, r3, #1
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012016:	b29b      	uxth	r3, r3
 8012018:	3b01      	subs	r3, #1
 801201a:	b29a      	uxth	r2, r3
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012020:	e09e      	b.n	8012160 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	f003 0302 	and.w	r3, r3, #2
 801202c:	2b02      	cmp	r3, #2
 801202e:	d134      	bne.n	801209a <HAL_SPI_TransmitReceive+0x30a>
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012034:	b29b      	uxth	r3, r3
 8012036:	2b00      	cmp	r3, #0
 8012038:	d02f      	beq.n	801209a <HAL_SPI_TransmitReceive+0x30a>
 801203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203c:	2b01      	cmp	r3, #1
 801203e:	d12c      	bne.n	801209a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012044:	b29b      	uxth	r3, r3
 8012046:	2b01      	cmp	r3, #1
 8012048:	d912      	bls.n	8012070 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801204e:	881a      	ldrh	r2, [r3, #0]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801205a:	1c9a      	adds	r2, r3, #2
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012064:	b29b      	uxth	r3, r3
 8012066:	3b02      	subs	r3, #2
 8012068:	b29a      	uxth	r2, r3
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801206e:	e012      	b.n	8012096 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	330c      	adds	r3, #12
 801207a:	7812      	ldrb	r2, [r2, #0]
 801207c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012082:	1c5a      	adds	r2, r3, #1
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801208c:	b29b      	uxth	r3, r3
 801208e:	3b01      	subs	r3, #1
 8012090:	b29a      	uxth	r2, r3
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012096:	2300      	movs	r3, #0
 8012098:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d148      	bne.n	801213a <HAL_SPI_TransmitReceive+0x3aa>
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d042      	beq.n	801213a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d923      	bls.n	8012108 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	68da      	ldr	r2, [r3, #12]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ca:	b292      	uxth	r2, r2
 80120cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120d2:	1c9a      	adds	r2, r3, #2
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120de:	b29b      	uxth	r3, r3
 80120e0:	3b02      	subs	r3, #2
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d81f      	bhi.n	8012136 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	685a      	ldr	r2, [r3, #4]
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012104:	605a      	str	r2, [r3, #4]
 8012106:	e016      	b.n	8012136 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f103 020c 	add.w	r2, r3, #12
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012114:	7812      	ldrb	r2, [r2, #0]
 8012116:	b2d2      	uxtb	r2, r2
 8012118:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801211e:	1c5a      	adds	r2, r3, #1
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801212a:	b29b      	uxth	r3, r3
 801212c:	3b01      	subs	r3, #1
 801212e:	b29a      	uxth	r2, r3
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012136:	2301      	movs	r3, #1
 8012138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801213a:	f7fc fb03 	bl	800e744 <HAL_GetTick>
 801213e:	4602      	mov	r2, r0
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012146:	429a      	cmp	r2, r3
 8012148:	d803      	bhi.n	8012152 <HAL_SPI_TransmitReceive+0x3c2>
 801214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012150:	d102      	bne.n	8012158 <HAL_SPI_TransmitReceive+0x3c8>
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	2b00      	cmp	r3, #0
 8012156:	d103      	bne.n	8012160 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8012158:	2303      	movs	r3, #3
 801215a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801215e:	e01c      	b.n	801219a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012164:	b29b      	uxth	r3, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	f47f af5b 	bne.w	8012022 <HAL_SPI_TransmitReceive+0x292>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012172:	b29b      	uxth	r3, r3
 8012174:	2b00      	cmp	r3, #0
 8012176:	f47f af54 	bne.w	8012022 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801217a:	69fa      	ldr	r2, [r7, #28]
 801217c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	f000 fbcf 	bl	8012922 <SPI_EndRxTxTransaction>
 8012184:	4603      	mov	r3, r0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d006      	beq.n	8012198 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801218a:	2301      	movs	r3, #1
 801218c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2220      	movs	r2, #32
 8012194:	661a      	str	r2, [r3, #96]	; 0x60
 8012196:	e000      	b.n	801219a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8012198:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2201      	movs	r2, #1
 801219e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2200      	movs	r2, #0
 80121a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80121aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3728      	adds	r7, #40	; 0x28
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
	...

080121b8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b086      	sub	sp, #24
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	607a      	str	r2, [r7, #4]
 80121c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80121c6:	2300      	movs	r3, #0
 80121c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d101      	bne.n	80121d8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80121d4:	2302      	movs	r3, #2
 80121d6:	e16c      	b.n	80124b2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2201      	movs	r2, #1
 80121dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80121e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80121ee:	7dbb      	ldrb	r3, [r7, #22]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d00d      	beq.n	8012210 <HAL_SPI_TransmitReceive_DMA+0x58>
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80121fa:	d106      	bne.n	801220a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d102      	bne.n	801220a <HAL_SPI_TransmitReceive_DMA+0x52>
 8012204:	7dbb      	ldrb	r3, [r7, #22]
 8012206:	2b04      	cmp	r3, #4
 8012208:	d002      	beq.n	8012210 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 801220a:	2302      	movs	r3, #2
 801220c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801220e:	e14b      	b.n	80124a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d005      	beq.n	8012222 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d002      	beq.n	8012222 <HAL_SPI_TransmitReceive_DMA+0x6a>
 801221c:	887b      	ldrh	r3, [r7, #2]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d102      	bne.n	8012228 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8012222:	2301      	movs	r3, #1
 8012224:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012226:	e13f      	b.n	80124a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801222e:	b2db      	uxtb	r3, r3
 8012230:	2b04      	cmp	r3, #4
 8012232:	d003      	beq.n	801223c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2205      	movs	r2, #5
 8012238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2200      	movs	r2, #0
 8012240:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	68ba      	ldr	r2, [r7, #8]
 8012246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	887a      	ldrh	r2, [r7, #2]
 801224c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	887a      	ldrh	r2, [r7, #2]
 8012252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	887a      	ldrh	r2, [r7, #2]
 801225e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	887a      	ldrh	r2, [r7, #2]
 8012266:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2200      	movs	r2, #0
 801226e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2200      	movs	r2, #0
 8012274:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8012284:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	68db      	ldr	r3, [r3, #12]
 801228a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801228e:	d908      	bls.n	80122a2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	685a      	ldr	r2, [r3, #4]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801229e:	605a      	str	r2, [r3, #4]
 80122a0:	e06f      	b.n	8012382 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	685a      	ldr	r2, [r3, #4]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80122b0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122b6:	699b      	ldr	r3, [r3, #24]
 80122b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80122bc:	d126      	bne.n	801230c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80122c2:	f003 0301 	and.w	r3, r3, #1
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d10f      	bne.n	80122ea <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	685a      	ldr	r2, [r3, #4]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80122d8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122de:	b29b      	uxth	r3, r3
 80122e0:	085b      	lsrs	r3, r3, #1
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80122e8:	e010      	b.n	801230c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	685a      	ldr	r2, [r3, #4]
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80122f8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122fe:	b29b      	uxth	r3, r3
 8012300:	085b      	lsrs	r3, r3, #1
 8012302:	b29b      	uxth	r3, r3
 8012304:	3301      	adds	r3, #1
 8012306:	b29a      	uxth	r2, r3
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012310:	699b      	ldr	r3, [r3, #24]
 8012312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012316:	d134      	bne.n	8012382 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	685a      	ldr	r2, [r3, #4]
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012326:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801232e:	b29b      	uxth	r3, r3
 8012330:	f003 0301 	and.w	r3, r3, #1
 8012334:	2b00      	cmp	r3, #0
 8012336:	d111      	bne.n	801235c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	685a      	ldr	r2, [r3, #4]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012346:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801234e:	b29b      	uxth	r3, r3
 8012350:	085b      	lsrs	r3, r3, #1
 8012352:	b29a      	uxth	r2, r3
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801235a:	e012      	b.n	8012382 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	685a      	ldr	r2, [r3, #4]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801236a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012372:	b29b      	uxth	r3, r3
 8012374:	085b      	lsrs	r3, r3, #1
 8012376:	b29b      	uxth	r3, r3
 8012378:	3301      	adds	r3, #1
 801237a:	b29a      	uxth	r2, r3
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012388:	b2db      	uxtb	r3, r3
 801238a:	2b04      	cmp	r3, #4
 801238c:	d108      	bne.n	80123a0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012392:	4a4a      	ldr	r2, [pc, #296]	; (80124bc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8012394:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801239a:	4a49      	ldr	r2, [pc, #292]	; (80124c0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 801239c:	63da      	str	r2, [r3, #60]	; 0x3c
 801239e:	e007      	b.n	80123b0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123a4:	4a47      	ldr	r2, [pc, #284]	; (80124c4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80123a6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123ac:	4a46      	ldr	r2, [pc, #280]	; (80124c8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80123ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123b4:	4a45      	ldr	r2, [pc, #276]	; (80124cc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80123b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123bc:	2200      	movs	r2, #0
 80123be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	330c      	adds	r3, #12
 80123ca:	4619      	mov	r1, r3
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d0:	461a      	mov	r2, r3
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80123d8:	b29b      	uxth	r3, r3
 80123da:	f7fc fb7f 	bl	800eadc <HAL_DMA_Start_IT>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00c      	beq.n	80123fe <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80123e8:	f043 0210 	orr.w	r2, r3, #16
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80123f0:	2301      	movs	r3, #1
 80123f2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2201      	movs	r2, #1
 80123f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80123fc:	e054      	b.n	80124a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	685a      	ldr	r2, [r3, #4]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f042 0201 	orr.w	r2, r2, #1
 801240c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012412:	2200      	movs	r2, #0
 8012414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801241a:	2200      	movs	r2, #0
 801241c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012422:	2200      	movs	r2, #0
 8012424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801242a:	2200      	movs	r2, #0
 801242c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012436:	4619      	mov	r1, r3
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	330c      	adds	r3, #12
 801243e:	461a      	mov	r2, r3
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012444:	b29b      	uxth	r3, r3
 8012446:	f7fc fb49 	bl	800eadc <HAL_DMA_Start_IT>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d00c      	beq.n	801246a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012454:	f043 0210 	orr.w	r2, r3, #16
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 801245c:	2301      	movs	r3, #1
 801245e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2201      	movs	r2, #1
 8012464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8012468:	e01e      	b.n	80124a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012474:	2b40      	cmp	r3, #64	; 0x40
 8012476:	d007      	beq.n	8012488 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012486:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	f042 0220 	orr.w	r2, r2, #32
 8012496:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	685a      	ldr	r2, [r3, #4]
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f042 0202 	orr.w	r2, r2, #2
 80124a6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80124b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3718      	adds	r7, #24
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	0801264d 	.word	0x0801264d
 80124c0:	08012535 	.word	0x08012535
 80124c4:	08012669 	.word	0x08012669
 80124c8:	080125bb 	.word	0x080125bb
 80124cc:	08012685 	.word	0x08012685

080124d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80124d8:	bf00      	nop
 80124da:	370c      	adds	r7, #12
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80124ec:	bf00      	nop
 80124ee:	370c      	adds	r7, #12
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8012514:	bf00      	nop
 8012516:	370c      	adds	r7, #12
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr

08012520 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012520:	b480      	push	{r7}
 8012522:	b083      	sub	sp, #12
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012528:	bf00      	nop
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr

08012534 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012540:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012542:	f7fc f8ff 	bl	800e744 <HAL_GetTick>
 8012546:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012556:	d02a      	beq.n	80125ae <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	685a      	ldr	r2, [r3, #4]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f022 0220 	bic.w	r2, r2, #32
 8012566:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	685a      	ldr	r2, [r3, #4]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f022 0203 	bic.w	r2, r2, #3
 8012576:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012578:	68ba      	ldr	r2, [r7, #8]
 801257a:	2164      	movs	r1, #100	; 0x64
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f000 f978 	bl	8012872 <SPI_EndRxTransaction>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d002      	beq.n	801258e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2220      	movs	r2, #32
 801258c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2200      	movs	r2, #0
 8012592:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	2201      	movs	r2, #1
 801259a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d003      	beq.n	80125ae <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f7ff ffba 	bl	8012520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80125ac:	e002      	b.n	80125b4 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f7ff ff8e 	bl	80124d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80125b4:	3710      	adds	r7, #16
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}

080125ba <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b084      	sub	sp, #16
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125c6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80125c8:	f7fc f8bc 	bl	800e744 <HAL_GetTick>
 80125cc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125dc:	d030      	beq.n	8012640 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	685a      	ldr	r2, [r3, #4]
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f022 0220 	bic.w	r2, r2, #32
 80125ec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	2164      	movs	r1, #100	; 0x64
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f000 f995 	bl	8012922 <SPI_EndRxTxTransaction>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d005      	beq.n	801260a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012602:	f043 0220 	orr.w	r2, r3, #32
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	685a      	ldr	r2, [r3, #4]
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f022 0203 	bic.w	r2, r2, #3
 8012618:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2200      	movs	r2, #0
 801261e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	2200      	movs	r2, #0
 8012624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2201      	movs	r2, #1
 801262c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012634:	2b00      	cmp	r3, #0
 8012636:	d003      	beq.n	8012640 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	f7ff ff71 	bl	8012520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801263e:	e002      	b.n	8012646 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7ff ff4f 	bl	80124e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012658:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f7ff ff4c 	bl	80124f8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012660:	bf00      	nop
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012674:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7ff ff48 	bl	801250c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801267c:	bf00      	nop
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012690:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	685a      	ldr	r2, [r3, #4]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	f022 0203 	bic.w	r2, r2, #3
 80126a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80126a6:	f043 0210 	orr.w	r2, r3, #16
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2201      	movs	r2, #1
 80126b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f7ff ff32 	bl	8012520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80126bc:	bf00      	nop
 80126be:	3710      	adds	r7, #16
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	603b      	str	r3, [r7, #0]
 80126d0:	4613      	mov	r3, r2
 80126d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80126d4:	e04c      	b.n	8012770 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126dc:	d048      	beq.n	8012770 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80126de:	f7fc f831 	bl	800e744 <HAL_GetTick>
 80126e2:	4602      	mov	r2, r0
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	683a      	ldr	r2, [r7, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d902      	bls.n	80126f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d13d      	bne.n	8012770 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	685a      	ldr	r2, [r3, #4]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012702:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801270c:	d111      	bne.n	8012732 <SPI_WaitFlagStateUntilTimeout+0x6e>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	689b      	ldr	r3, [r3, #8]
 8012712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012716:	d004      	beq.n	8012722 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012720:	d107      	bne.n	8012732 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801273a:	d10f      	bne.n	801275c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801274a:	601a      	str	r2, [r3, #0]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801275a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2201      	movs	r2, #1
 8012760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2200      	movs	r2, #0
 8012768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801276c:	2303      	movs	r3, #3
 801276e:	e00f      	b.n	8012790 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	689a      	ldr	r2, [r3, #8]
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	4013      	ands	r3, r2
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	429a      	cmp	r2, r3
 801277e:	bf0c      	ite	eq
 8012780:	2301      	moveq	r3, #1
 8012782:	2300      	movne	r3, #0
 8012784:	b2db      	uxtb	r3, r3
 8012786:	461a      	mov	r2, r3
 8012788:	79fb      	ldrb	r3, [r7, #7]
 801278a:	429a      	cmp	r2, r3
 801278c:	d1a3      	bne.n	80126d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3710      	adds	r7, #16
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b084      	sub	sp, #16
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80127a6:	e057      	b.n	8012858 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80127ae:	d106      	bne.n	80127be <SPI_WaitFifoStateUntilTimeout+0x26>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d103      	bne.n	80127be <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	330c      	adds	r3, #12
 80127bc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c4:	d048      	beq.n	8012858 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80127c6:	f7fb ffbd 	bl	800e744 <HAL_GetTick>
 80127ca:	4602      	mov	r2, r0
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	1ad3      	subs	r3, r2, r3
 80127d0:	683a      	ldr	r2, [r7, #0]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d902      	bls.n	80127dc <SPI_WaitFifoStateUntilTimeout+0x44>
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d13d      	bne.n	8012858 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	685a      	ldr	r2, [r3, #4]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80127ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80127f4:	d111      	bne.n	801281a <SPI_WaitFifoStateUntilTimeout+0x82>
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127fe:	d004      	beq.n	801280a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012808:	d107      	bne.n	801281a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012822:	d10f      	bne.n	8012844 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012832:	601a      	str	r2, [r3, #0]
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012842:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2201      	movs	r2, #1
 8012848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2200      	movs	r2, #0
 8012850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8012854:	2303      	movs	r3, #3
 8012856:	e008      	b.n	801286a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	689a      	ldr	r2, [r3, #8]
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	4013      	ands	r3, r2
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	429a      	cmp	r2, r3
 8012866:	d19f      	bne.n	80127a8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b086      	sub	sp, #24
 8012876:	af02      	add	r7, sp, #8
 8012878:	60f8      	str	r0, [r7, #12]
 801287a:	60b9      	str	r1, [r7, #8]
 801287c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012886:	d111      	bne.n	80128ac <SPI_EndRxTransaction+0x3a>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	689b      	ldr	r3, [r3, #8]
 801288c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012890:	d004      	beq.n	801289c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801289a:	d107      	bne.n	80128ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80128aa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	2200      	movs	r2, #0
 80128b4:	2180      	movs	r1, #128	; 0x80
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f7ff ff04 	bl	80126c4 <SPI_WaitFlagStateUntilTimeout>
 80128bc:	4603      	mov	r3, r0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d007      	beq.n	80128d2 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128c6:	f043 0220 	orr.w	r2, r3, #32
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80128ce:	2303      	movs	r3, #3
 80128d0:	e023      	b.n	801291a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80128da:	d11d      	bne.n	8012918 <SPI_EndRxTransaction+0xa6>
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128e4:	d004      	beq.n	80128f0 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	689b      	ldr	r3, [r3, #8]
 80128ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80128ee:	d113      	bne.n	8012918 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	9300      	str	r3, [sp, #0]
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	2200      	movs	r2, #0
 80128f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f7ff ff4b 	bl	8012798 <SPI_WaitFifoStateUntilTimeout>
 8012902:	4603      	mov	r3, r0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d007      	beq.n	8012918 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801290c:	f043 0220 	orr.w	r2, r3, #32
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8012914:	2303      	movs	r3, #3
 8012916:	e000      	b.n	801291a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8012918:	2300      	movs	r3, #0
}
 801291a:	4618      	mov	r0, r3
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012922:	b580      	push	{r7, lr}
 8012924:	b086      	sub	sp, #24
 8012926:	af02      	add	r7, sp, #8
 8012928:	60f8      	str	r0, [r7, #12]
 801292a:	60b9      	str	r1, [r7, #8]
 801292c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	2200      	movs	r2, #0
 8012936:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801293a:	68f8      	ldr	r0, [r7, #12]
 801293c:	f7ff ff2c 	bl	8012798 <SPI_WaitFifoStateUntilTimeout>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d007      	beq.n	8012956 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801294a:	f043 0220 	orr.w	r2, r3, #32
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012952:	2303      	movs	r3, #3
 8012954:	e027      	b.n	80129a6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	2200      	movs	r2, #0
 801295e:	2180      	movs	r1, #128	; 0x80
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f7ff feaf 	bl	80126c4 <SPI_WaitFlagStateUntilTimeout>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d007      	beq.n	801297c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012970:	f043 0220 	orr.w	r2, r3, #32
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012978:	2303      	movs	r3, #3
 801297a:	e014      	b.n	80129a6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	2200      	movs	r2, #0
 8012984:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f7ff ff05 	bl	8012798 <SPI_WaitFifoStateUntilTimeout>
 801298e:	4603      	mov	r3, r0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012998:	f043 0220 	orr.w	r2, r3, #32
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80129a0:	2303      	movs	r3, #3
 80129a2:	e000      	b.n	80129a6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}

080129ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80129ae:	b580      	push	{r7, lr}
 80129b0:	b082      	sub	sp, #8
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d101      	bne.n	80129c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80129bc:	2301      	movs	r3, #1
 80129be:	e040      	b.n	8012a42 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d106      	bne.n	80129d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2200      	movs	r2, #0
 80129cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7fb fd35 	bl	800e440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2224      	movs	r2, #36	; 0x24
 80129da:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f022 0201 	bic.w	r2, r2, #1
 80129ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f000 fab9 	bl	8012f64 <UART_SetConfig>
 80129f2:	4603      	mov	r3, r0
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	d101      	bne.n	80129fc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80129f8:	2301      	movs	r3, #1
 80129fa:	e022      	b.n	8012a42 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 fd57 	bl	80134b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	685a      	ldr	r2, [r3, #4]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	689a      	ldr	r2, [r3, #8]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012a28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f042 0201 	orr.w	r2, r2, #1
 8012a38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fdde 	bl	80135fc <UART_CheckIdleState>
 8012a40:	4603      	mov	r3, r0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3708      	adds	r7, #8
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	4613      	mov	r3, r2
 8012a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a5e:	2b20      	cmp	r3, #32
 8012a60:	f040 808a 	bne.w	8012b78 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d002      	beq.n	8012a70 <HAL_UART_Receive_IT+0x24>
 8012a6a:	88fb      	ldrh	r3, [r7, #6]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d101      	bne.n	8012a74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012a70:	2301      	movs	r3, #1
 8012a72:	e082      	b.n	8012b7a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d101      	bne.n	8012a82 <HAL_UART_Receive_IT+0x36>
 8012a7e:	2302      	movs	r3, #2
 8012a80:	e07b      	b.n	8012b7a <HAL_UART_Receive_IT+0x12e>
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2201      	movs	r2, #1
 8012a86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	68ba      	ldr	r2, [r7, #8]
 8012a8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	88fa      	ldrh	r2, [r7, #6]
 8012a94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	88fa      	ldrh	r2, [r7, #6]
 8012a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	689b      	ldr	r3, [r3, #8]
 8012aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012aae:	d10e      	bne.n	8012ace <HAL_UART_Receive_IT+0x82>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	691b      	ldr	r3, [r3, #16]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d105      	bne.n	8012ac4 <HAL_UART_Receive_IT+0x78>
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012ac2:	e02d      	b.n	8012b20 <HAL_UART_Receive_IT+0xd4>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	22ff      	movs	r2, #255	; 0xff
 8012ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012acc:	e028      	b.n	8012b20 <HAL_UART_Receive_IT+0xd4>
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	689b      	ldr	r3, [r3, #8]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d10d      	bne.n	8012af2 <HAL_UART_Receive_IT+0xa6>
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	691b      	ldr	r3, [r3, #16]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d104      	bne.n	8012ae8 <HAL_UART_Receive_IT+0x9c>
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	22ff      	movs	r2, #255	; 0xff
 8012ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012ae6:	e01b      	b.n	8012b20 <HAL_UART_Receive_IT+0xd4>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	227f      	movs	r2, #127	; 0x7f
 8012aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012af0:	e016      	b.n	8012b20 <HAL_UART_Receive_IT+0xd4>
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012afa:	d10d      	bne.n	8012b18 <HAL_UART_Receive_IT+0xcc>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	691b      	ldr	r3, [r3, #16]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d104      	bne.n	8012b0e <HAL_UART_Receive_IT+0xc2>
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	227f      	movs	r2, #127	; 0x7f
 8012b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b0c:	e008      	b.n	8012b20 <HAL_UART_Receive_IT+0xd4>
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	223f      	movs	r2, #63	; 0x3f
 8012b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b16:	e003      	b.n	8012b20 <HAL_UART_Receive_IT+0xd4>
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2200      	movs	r2, #0
 8012b24:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2222      	movs	r2, #34	; 0x22
 8012b2a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	689a      	ldr	r2, [r3, #8]
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f042 0201 	orr.w	r2, r2, #1
 8012b3a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b44:	d107      	bne.n	8012b56 <HAL_UART_Receive_IT+0x10a>
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	691b      	ldr	r3, [r3, #16]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d103      	bne.n	8012b56 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	4a0d      	ldr	r2, [pc, #52]	; (8012b88 <HAL_UART_Receive_IT+0x13c>)
 8012b52:	661a      	str	r2, [r3, #96]	; 0x60
 8012b54:	e002      	b.n	8012b5c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	4a0c      	ldr	r2, [pc, #48]	; (8012b8c <HAL_UART_Receive_IT+0x140>)
 8012b5a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8012b72:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8012b74:	2300      	movs	r3, #0
 8012b76:	e000      	b.n	8012b7a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8012b78:	2302      	movs	r3, #2
  }
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3714      	adds	r7, #20
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	080139cf 	.word	0x080139cf
 8012b8c:	08013929 	.word	0x08013929

08012b90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ba2:	2b20      	cmp	r3, #32
 8012ba4:	d164      	bne.n	8012c70 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d002      	beq.n	8012bb2 <HAL_UART_Transmit_DMA+0x22>
 8012bac:	88fb      	ldrh	r3, [r7, #6]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d101      	bne.n	8012bb6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e05d      	b.n	8012c72 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d101      	bne.n	8012bc4 <HAL_UART_Transmit_DMA+0x34>
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	e056      	b.n	8012c72 <HAL_UART_Transmit_DMA+0xe2>
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	68ba      	ldr	r2, [r7, #8]
 8012bd0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	88fa      	ldrh	r2, [r7, #6]
 8012bd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	88fa      	ldrh	r2, [r7, #6]
 8012bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	2200      	movs	r2, #0
 8012be6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2221      	movs	r2, #33	; 0x21
 8012bec:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d02a      	beq.n	8012c4c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bfa:	4a20      	ldr	r2, [pc, #128]	; (8012c7c <HAL_UART_Transmit_DMA+0xec>)
 8012bfc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c02:	4a1f      	ldr	r2, [pc, #124]	; (8012c80 <HAL_UART_Transmit_DMA+0xf0>)
 8012c04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c0a:	4a1e      	ldr	r2, [pc, #120]	; (8012c84 <HAL_UART_Transmit_DMA+0xf4>)
 8012c0c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c12:	2200      	movs	r2, #0
 8012c14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c1e:	4619      	mov	r1, r3
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3328      	adds	r3, #40	; 0x28
 8012c26:	461a      	mov	r2, r3
 8012c28:	88fb      	ldrh	r3, [r7, #6]
 8012c2a:	f7fb ff57 	bl	800eadc <HAL_DMA_Start_IT>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00b      	beq.n	8012c4c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2210      	movs	r2, #16
 8012c38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2220      	movs	r2, #32
 8012c46:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e012      	b.n	8012c72 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2240      	movs	r2, #64	; 0x40
 8012c52:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	689a      	ldr	r2, [r3, #8]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012c6a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	e000      	b.n	8012c72 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8012c70:	2302      	movs	r3, #2
  }
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	080137e7 	.word	0x080137e7
 8012c80:	08013837 	.word	0x08013837
 8012c84:	08013853 	.word	0x08013853

08012c88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b088      	sub	sp, #32
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	69db      	ldr	r3, [r3, #28]
 8012c96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012ca8:	69fa      	ldr	r2, [r7, #28]
 8012caa:	f640 030f 	movw	r3, #2063	; 0x80f
 8012cae:	4013      	ands	r3, r2
 8012cb0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d113      	bne.n	8012ce0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	f003 0320 	and.w	r3, r3, #32
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d00e      	beq.n	8012ce0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012cc2:	69bb      	ldr	r3, [r7, #24]
 8012cc4:	f003 0320 	and.w	r3, r3, #32
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d009      	beq.n	8012ce0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	f000 8114 	beq.w	8012efe <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	4798      	blx	r3
      }
      return;
 8012cde:	e10e      	b.n	8012efe <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f000 80d6 	beq.w	8012e94 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	f003 0301 	and.w	r3, r3, #1
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d105      	bne.n	8012cfe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 80cb 	beq.w	8012e94 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	f003 0301 	and.w	r3, r3, #1
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d00e      	beq.n	8012d26 <HAL_UART_IRQHandler+0x9e>
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d009      	beq.n	8012d26 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2201      	movs	r2, #1
 8012d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d1e:	f043 0201 	orr.w	r2, r3, #1
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	f003 0302 	and.w	r3, r3, #2
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d00e      	beq.n	8012d4e <HAL_UART_IRQHandler+0xc6>
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	f003 0301 	and.w	r3, r3, #1
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d009      	beq.n	8012d4e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2202      	movs	r2, #2
 8012d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d46:	f043 0204 	orr.w	r2, r3, #4
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	f003 0304 	and.w	r3, r3, #4
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00e      	beq.n	8012d76 <HAL_UART_IRQHandler+0xee>
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	f003 0301 	and.w	r3, r3, #1
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d009      	beq.n	8012d76 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2204      	movs	r2, #4
 8012d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d6e:	f043 0202 	orr.w	r2, r3, #2
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	f003 0308 	and.w	r3, r3, #8
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d013      	beq.n	8012da8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f003 0320 	and.w	r3, r3, #32
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d104      	bne.n	8012d94 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d009      	beq.n	8012da8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2208      	movs	r2, #8
 8012d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012da0:	f043 0208 	orr.w	r2, r3, #8
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d00f      	beq.n	8012dd2 <HAL_UART_IRQHandler+0x14a>
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d00a      	beq.n	8012dd2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012dc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dca:	f043 0220 	orr.w	r2, r3, #32
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f000 8093 	beq.w	8012f02 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	f003 0320 	and.w	r3, r3, #32
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00c      	beq.n	8012e00 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	f003 0320 	and.w	r3, r3, #32
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d007      	beq.n	8012e00 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d003      	beq.n	8012e00 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e04:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	689b      	ldr	r3, [r3, #8]
 8012e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e10:	2b40      	cmp	r3, #64	; 0x40
 8012e12:	d004      	beq.n	8012e1e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d031      	beq.n	8012e82 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f000 fcc1 	bl	80137a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e2e:	2b40      	cmp	r3, #64	; 0x40
 8012e30:	d123      	bne.n	8012e7a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	689a      	ldr	r2, [r3, #8]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e40:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d013      	beq.n	8012e72 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e4e:	4a30      	ldr	r2, [pc, #192]	; (8012f10 <HAL_UART_IRQHandler+0x288>)
 8012e50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7fb fea0 	bl	800eb9c <HAL_DMA_Abort_IT>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d016      	beq.n	8012e90 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8012e6c:	4610      	mov	r0, r2
 8012e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e70:	e00e      	b.n	8012e90 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 f862 	bl	8012f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e78:	e00a      	b.n	8012e90 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 f85e 	bl	8012f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e80:	e006      	b.n	8012e90 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 f85a 	bl	8012f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8012e8e:	e038      	b.n	8012f02 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e90:	bf00      	nop
    return;
 8012e92:	e036      	b.n	8012f02 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00d      	beq.n	8012eba <HAL_UART_IRQHandler+0x232>
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d008      	beq.n	8012eba <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f000 f84c 	bl	8012f50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012eb8:	e026      	b.n	8012f08 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d00d      	beq.n	8012ee0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d008      	beq.n	8012ee0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d017      	beq.n	8012f06 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	4798      	blx	r3
    }
    return;
 8012ede:	e012      	b.n	8012f06 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d00e      	beq.n	8012f08 <HAL_UART_IRQHandler+0x280>
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d009      	beq.n	8012f08 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 fcfe 	bl	80138f6 <UART_EndTransmit_IT>
    return;
 8012efa:	bf00      	nop
 8012efc:	e004      	b.n	8012f08 <HAL_UART_IRQHandler+0x280>
      return;
 8012efe:	bf00      	nop
 8012f00:	e002      	b.n	8012f08 <HAL_UART_IRQHandler+0x280>
    return;
 8012f02:	bf00      	nop
 8012f04:	e000      	b.n	8012f08 <HAL_UART_IRQHandler+0x280>
    return;
 8012f06:	bf00      	nop
  }

}
 8012f08:	3720      	adds	r7, #32
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	080138cb 	.word	0x080138cb

08012f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b083      	sub	sp, #12
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012f1c:	bf00      	nop
 8012f1e:	370c      	adds	r7, #12
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr

08012f28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b083      	sub	sp, #12
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012f30:	bf00      	nop
 8012f32:	370c      	adds	r7, #12
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr

08012f3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b083      	sub	sp, #12
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012f44:	bf00      	nop
 8012f46:	370c      	adds	r7, #12
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4e:	4770      	bx	lr

08012f50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b083      	sub	sp, #12
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012f58:	bf00      	nop
 8012f5a:	370c      	adds	r7, #12
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr

08012f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b088      	sub	sp, #32
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f70:	2300      	movs	r3, #0
 8012f72:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	689a      	ldr	r2, [r3, #8]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	431a      	orrs	r2, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	695b      	ldr	r3, [r3, #20]
 8012f82:	431a      	orrs	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	69db      	ldr	r3, [r3, #28]
 8012f88:	4313      	orrs	r3, r2
 8012f8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	4bb1      	ldr	r3, [pc, #708]	; (8013258 <UART_SetConfig+0x2f4>)
 8012f94:	4013      	ands	r3, r2
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	6812      	ldr	r2, [r2, #0]
 8012f9a:	6939      	ldr	r1, [r7, #16]
 8012f9c:	430b      	orrs	r3, r1
 8012f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	68da      	ldr	r2, [r3, #12]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	430a      	orrs	r2, r1
 8012fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	699b      	ldr	r3, [r3, #24]
 8012fba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6a1b      	ldr	r3, [r3, #32]
 8012fc0:	693a      	ldr	r2, [r7, #16]
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	689b      	ldr	r3, [r3, #8]
 8012fcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	693a      	ldr	r2, [r7, #16]
 8012fd6:	430a      	orrs	r2, r1
 8012fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	4a9f      	ldr	r2, [pc, #636]	; (801325c <UART_SetConfig+0x2f8>)
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d121      	bne.n	8013028 <UART_SetConfig+0xc4>
 8012fe4:	4b9e      	ldr	r3, [pc, #632]	; (8013260 <UART_SetConfig+0x2fc>)
 8012fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012fea:	f003 0303 	and.w	r3, r3, #3
 8012fee:	2b03      	cmp	r3, #3
 8012ff0:	d816      	bhi.n	8013020 <UART_SetConfig+0xbc>
 8012ff2:	a201      	add	r2, pc, #4	; (adr r2, 8012ff8 <UART_SetConfig+0x94>)
 8012ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff8:	08013009 	.word	0x08013009
 8012ffc:	08013015 	.word	0x08013015
 8013000:	0801300f 	.word	0x0801300f
 8013004:	0801301b 	.word	0x0801301b
 8013008:	2301      	movs	r3, #1
 801300a:	77fb      	strb	r3, [r7, #31]
 801300c:	e151      	b.n	80132b2 <UART_SetConfig+0x34e>
 801300e:	2302      	movs	r3, #2
 8013010:	77fb      	strb	r3, [r7, #31]
 8013012:	e14e      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013014:	2304      	movs	r3, #4
 8013016:	77fb      	strb	r3, [r7, #31]
 8013018:	e14b      	b.n	80132b2 <UART_SetConfig+0x34e>
 801301a:	2308      	movs	r3, #8
 801301c:	77fb      	strb	r3, [r7, #31]
 801301e:	e148      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013020:	2310      	movs	r3, #16
 8013022:	77fb      	strb	r3, [r7, #31]
 8013024:	bf00      	nop
 8013026:	e144      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4a8d      	ldr	r2, [pc, #564]	; (8013264 <UART_SetConfig+0x300>)
 801302e:	4293      	cmp	r3, r2
 8013030:	d134      	bne.n	801309c <UART_SetConfig+0x138>
 8013032:	4b8b      	ldr	r3, [pc, #556]	; (8013260 <UART_SetConfig+0x2fc>)
 8013034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013038:	f003 030c 	and.w	r3, r3, #12
 801303c:	2b0c      	cmp	r3, #12
 801303e:	d829      	bhi.n	8013094 <UART_SetConfig+0x130>
 8013040:	a201      	add	r2, pc, #4	; (adr r2, 8013048 <UART_SetConfig+0xe4>)
 8013042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013046:	bf00      	nop
 8013048:	0801307d 	.word	0x0801307d
 801304c:	08013095 	.word	0x08013095
 8013050:	08013095 	.word	0x08013095
 8013054:	08013095 	.word	0x08013095
 8013058:	08013089 	.word	0x08013089
 801305c:	08013095 	.word	0x08013095
 8013060:	08013095 	.word	0x08013095
 8013064:	08013095 	.word	0x08013095
 8013068:	08013083 	.word	0x08013083
 801306c:	08013095 	.word	0x08013095
 8013070:	08013095 	.word	0x08013095
 8013074:	08013095 	.word	0x08013095
 8013078:	0801308f 	.word	0x0801308f
 801307c:	2300      	movs	r3, #0
 801307e:	77fb      	strb	r3, [r7, #31]
 8013080:	e117      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013082:	2302      	movs	r3, #2
 8013084:	77fb      	strb	r3, [r7, #31]
 8013086:	e114      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013088:	2304      	movs	r3, #4
 801308a:	77fb      	strb	r3, [r7, #31]
 801308c:	e111      	b.n	80132b2 <UART_SetConfig+0x34e>
 801308e:	2308      	movs	r3, #8
 8013090:	77fb      	strb	r3, [r7, #31]
 8013092:	e10e      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013094:	2310      	movs	r3, #16
 8013096:	77fb      	strb	r3, [r7, #31]
 8013098:	bf00      	nop
 801309a:	e10a      	b.n	80132b2 <UART_SetConfig+0x34e>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	4a71      	ldr	r2, [pc, #452]	; (8013268 <UART_SetConfig+0x304>)
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d120      	bne.n	80130e8 <UART_SetConfig+0x184>
 80130a6:	4b6e      	ldr	r3, [pc, #440]	; (8013260 <UART_SetConfig+0x2fc>)
 80130a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80130b0:	2b10      	cmp	r3, #16
 80130b2:	d00f      	beq.n	80130d4 <UART_SetConfig+0x170>
 80130b4:	2b10      	cmp	r3, #16
 80130b6:	d802      	bhi.n	80130be <UART_SetConfig+0x15a>
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d005      	beq.n	80130c8 <UART_SetConfig+0x164>
 80130bc:	e010      	b.n	80130e0 <UART_SetConfig+0x17c>
 80130be:	2b20      	cmp	r3, #32
 80130c0:	d005      	beq.n	80130ce <UART_SetConfig+0x16a>
 80130c2:	2b30      	cmp	r3, #48	; 0x30
 80130c4:	d009      	beq.n	80130da <UART_SetConfig+0x176>
 80130c6:	e00b      	b.n	80130e0 <UART_SetConfig+0x17c>
 80130c8:	2300      	movs	r3, #0
 80130ca:	77fb      	strb	r3, [r7, #31]
 80130cc:	e0f1      	b.n	80132b2 <UART_SetConfig+0x34e>
 80130ce:	2302      	movs	r3, #2
 80130d0:	77fb      	strb	r3, [r7, #31]
 80130d2:	e0ee      	b.n	80132b2 <UART_SetConfig+0x34e>
 80130d4:	2304      	movs	r3, #4
 80130d6:	77fb      	strb	r3, [r7, #31]
 80130d8:	e0eb      	b.n	80132b2 <UART_SetConfig+0x34e>
 80130da:	2308      	movs	r3, #8
 80130dc:	77fb      	strb	r3, [r7, #31]
 80130de:	e0e8      	b.n	80132b2 <UART_SetConfig+0x34e>
 80130e0:	2310      	movs	r3, #16
 80130e2:	77fb      	strb	r3, [r7, #31]
 80130e4:	bf00      	nop
 80130e6:	e0e4      	b.n	80132b2 <UART_SetConfig+0x34e>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	4a5f      	ldr	r2, [pc, #380]	; (801326c <UART_SetConfig+0x308>)
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d120      	bne.n	8013134 <UART_SetConfig+0x1d0>
 80130f2:	4b5b      	ldr	r3, [pc, #364]	; (8013260 <UART_SetConfig+0x2fc>)
 80130f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80130fc:	2b40      	cmp	r3, #64	; 0x40
 80130fe:	d00f      	beq.n	8013120 <UART_SetConfig+0x1bc>
 8013100:	2b40      	cmp	r3, #64	; 0x40
 8013102:	d802      	bhi.n	801310a <UART_SetConfig+0x1a6>
 8013104:	2b00      	cmp	r3, #0
 8013106:	d005      	beq.n	8013114 <UART_SetConfig+0x1b0>
 8013108:	e010      	b.n	801312c <UART_SetConfig+0x1c8>
 801310a:	2b80      	cmp	r3, #128	; 0x80
 801310c:	d005      	beq.n	801311a <UART_SetConfig+0x1b6>
 801310e:	2bc0      	cmp	r3, #192	; 0xc0
 8013110:	d009      	beq.n	8013126 <UART_SetConfig+0x1c2>
 8013112:	e00b      	b.n	801312c <UART_SetConfig+0x1c8>
 8013114:	2300      	movs	r3, #0
 8013116:	77fb      	strb	r3, [r7, #31]
 8013118:	e0cb      	b.n	80132b2 <UART_SetConfig+0x34e>
 801311a:	2302      	movs	r3, #2
 801311c:	77fb      	strb	r3, [r7, #31]
 801311e:	e0c8      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013120:	2304      	movs	r3, #4
 8013122:	77fb      	strb	r3, [r7, #31]
 8013124:	e0c5      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013126:	2308      	movs	r3, #8
 8013128:	77fb      	strb	r3, [r7, #31]
 801312a:	e0c2      	b.n	80132b2 <UART_SetConfig+0x34e>
 801312c:	2310      	movs	r3, #16
 801312e:	77fb      	strb	r3, [r7, #31]
 8013130:	bf00      	nop
 8013132:	e0be      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	4a4d      	ldr	r2, [pc, #308]	; (8013270 <UART_SetConfig+0x30c>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d124      	bne.n	8013188 <UART_SetConfig+0x224>
 801313e:	4b48      	ldr	r3, [pc, #288]	; (8013260 <UART_SetConfig+0x2fc>)
 8013140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801314c:	d012      	beq.n	8013174 <UART_SetConfig+0x210>
 801314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013152:	d802      	bhi.n	801315a <UART_SetConfig+0x1f6>
 8013154:	2b00      	cmp	r3, #0
 8013156:	d007      	beq.n	8013168 <UART_SetConfig+0x204>
 8013158:	e012      	b.n	8013180 <UART_SetConfig+0x21c>
 801315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801315e:	d006      	beq.n	801316e <UART_SetConfig+0x20a>
 8013160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013164:	d009      	beq.n	801317a <UART_SetConfig+0x216>
 8013166:	e00b      	b.n	8013180 <UART_SetConfig+0x21c>
 8013168:	2300      	movs	r3, #0
 801316a:	77fb      	strb	r3, [r7, #31]
 801316c:	e0a1      	b.n	80132b2 <UART_SetConfig+0x34e>
 801316e:	2302      	movs	r3, #2
 8013170:	77fb      	strb	r3, [r7, #31]
 8013172:	e09e      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013174:	2304      	movs	r3, #4
 8013176:	77fb      	strb	r3, [r7, #31]
 8013178:	e09b      	b.n	80132b2 <UART_SetConfig+0x34e>
 801317a:	2308      	movs	r3, #8
 801317c:	77fb      	strb	r3, [r7, #31]
 801317e:	e098      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013180:	2310      	movs	r3, #16
 8013182:	77fb      	strb	r3, [r7, #31]
 8013184:	bf00      	nop
 8013186:	e094      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a39      	ldr	r2, [pc, #228]	; (8013274 <UART_SetConfig+0x310>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d124      	bne.n	80131dc <UART_SetConfig+0x278>
 8013192:	4b33      	ldr	r3, [pc, #204]	; (8013260 <UART_SetConfig+0x2fc>)
 8013194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131a0:	d012      	beq.n	80131c8 <UART_SetConfig+0x264>
 80131a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131a6:	d802      	bhi.n	80131ae <UART_SetConfig+0x24a>
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d007      	beq.n	80131bc <UART_SetConfig+0x258>
 80131ac:	e012      	b.n	80131d4 <UART_SetConfig+0x270>
 80131ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131b2:	d006      	beq.n	80131c2 <UART_SetConfig+0x25e>
 80131b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80131b8:	d009      	beq.n	80131ce <UART_SetConfig+0x26a>
 80131ba:	e00b      	b.n	80131d4 <UART_SetConfig+0x270>
 80131bc:	2301      	movs	r3, #1
 80131be:	77fb      	strb	r3, [r7, #31]
 80131c0:	e077      	b.n	80132b2 <UART_SetConfig+0x34e>
 80131c2:	2302      	movs	r3, #2
 80131c4:	77fb      	strb	r3, [r7, #31]
 80131c6:	e074      	b.n	80132b2 <UART_SetConfig+0x34e>
 80131c8:	2304      	movs	r3, #4
 80131ca:	77fb      	strb	r3, [r7, #31]
 80131cc:	e071      	b.n	80132b2 <UART_SetConfig+0x34e>
 80131ce:	2308      	movs	r3, #8
 80131d0:	77fb      	strb	r3, [r7, #31]
 80131d2:	e06e      	b.n	80132b2 <UART_SetConfig+0x34e>
 80131d4:	2310      	movs	r3, #16
 80131d6:	77fb      	strb	r3, [r7, #31]
 80131d8:	bf00      	nop
 80131da:	e06a      	b.n	80132b2 <UART_SetConfig+0x34e>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4a25      	ldr	r2, [pc, #148]	; (8013278 <UART_SetConfig+0x314>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d124      	bne.n	8013230 <UART_SetConfig+0x2cc>
 80131e6:	4b1e      	ldr	r3, [pc, #120]	; (8013260 <UART_SetConfig+0x2fc>)
 80131e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80131f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80131f4:	d012      	beq.n	801321c <UART_SetConfig+0x2b8>
 80131f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80131fa:	d802      	bhi.n	8013202 <UART_SetConfig+0x29e>
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d007      	beq.n	8013210 <UART_SetConfig+0x2ac>
 8013200:	e012      	b.n	8013228 <UART_SetConfig+0x2c4>
 8013202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013206:	d006      	beq.n	8013216 <UART_SetConfig+0x2b2>
 8013208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801320c:	d009      	beq.n	8013222 <UART_SetConfig+0x2be>
 801320e:	e00b      	b.n	8013228 <UART_SetConfig+0x2c4>
 8013210:	2300      	movs	r3, #0
 8013212:	77fb      	strb	r3, [r7, #31]
 8013214:	e04d      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013216:	2302      	movs	r3, #2
 8013218:	77fb      	strb	r3, [r7, #31]
 801321a:	e04a      	b.n	80132b2 <UART_SetConfig+0x34e>
 801321c:	2304      	movs	r3, #4
 801321e:	77fb      	strb	r3, [r7, #31]
 8013220:	e047      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013222:	2308      	movs	r3, #8
 8013224:	77fb      	strb	r3, [r7, #31]
 8013226:	e044      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013228:	2310      	movs	r3, #16
 801322a:	77fb      	strb	r3, [r7, #31]
 801322c:	bf00      	nop
 801322e:	e040      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4a11      	ldr	r2, [pc, #68]	; (801327c <UART_SetConfig+0x318>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d139      	bne.n	80132ae <UART_SetConfig+0x34a>
 801323a:	4b09      	ldr	r3, [pc, #36]	; (8013260 <UART_SetConfig+0x2fc>)
 801323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013248:	d027      	beq.n	801329a <UART_SetConfig+0x336>
 801324a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801324e:	d817      	bhi.n	8013280 <UART_SetConfig+0x31c>
 8013250:	2b00      	cmp	r3, #0
 8013252:	d01c      	beq.n	801328e <UART_SetConfig+0x32a>
 8013254:	e027      	b.n	80132a6 <UART_SetConfig+0x342>
 8013256:	bf00      	nop
 8013258:	efff69f3 	.word	0xefff69f3
 801325c:	40011000 	.word	0x40011000
 8013260:	40023800 	.word	0x40023800
 8013264:	40004400 	.word	0x40004400
 8013268:	40004800 	.word	0x40004800
 801326c:	40004c00 	.word	0x40004c00
 8013270:	40005000 	.word	0x40005000
 8013274:	40011400 	.word	0x40011400
 8013278:	40007800 	.word	0x40007800
 801327c:	40007c00 	.word	0x40007c00
 8013280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013284:	d006      	beq.n	8013294 <UART_SetConfig+0x330>
 8013286:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801328a:	d009      	beq.n	80132a0 <UART_SetConfig+0x33c>
 801328c:	e00b      	b.n	80132a6 <UART_SetConfig+0x342>
 801328e:	2300      	movs	r3, #0
 8013290:	77fb      	strb	r3, [r7, #31]
 8013292:	e00e      	b.n	80132b2 <UART_SetConfig+0x34e>
 8013294:	2302      	movs	r3, #2
 8013296:	77fb      	strb	r3, [r7, #31]
 8013298:	e00b      	b.n	80132b2 <UART_SetConfig+0x34e>
 801329a:	2304      	movs	r3, #4
 801329c:	77fb      	strb	r3, [r7, #31]
 801329e:	e008      	b.n	80132b2 <UART_SetConfig+0x34e>
 80132a0:	2308      	movs	r3, #8
 80132a2:	77fb      	strb	r3, [r7, #31]
 80132a4:	e005      	b.n	80132b2 <UART_SetConfig+0x34e>
 80132a6:	2310      	movs	r3, #16
 80132a8:	77fb      	strb	r3, [r7, #31]
 80132aa:	bf00      	nop
 80132ac:	e001      	b.n	80132b2 <UART_SetConfig+0x34e>
 80132ae:	2310      	movs	r3, #16
 80132b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	69db      	ldr	r3, [r3, #28]
 80132b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132ba:	d17f      	bne.n	80133bc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80132bc:	7ffb      	ldrb	r3, [r7, #31]
 80132be:	2b08      	cmp	r3, #8
 80132c0:	d85c      	bhi.n	801337c <UART_SetConfig+0x418>
 80132c2:	a201      	add	r2, pc, #4	; (adr r2, 80132c8 <UART_SetConfig+0x364>)
 80132c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132c8:	080132ed 	.word	0x080132ed
 80132cc:	0801330d 	.word	0x0801330d
 80132d0:	0801332d 	.word	0x0801332d
 80132d4:	0801337d 	.word	0x0801337d
 80132d8:	08013345 	.word	0x08013345
 80132dc:	0801337d 	.word	0x0801337d
 80132e0:	0801337d 	.word	0x0801337d
 80132e4:	0801337d 	.word	0x0801337d
 80132e8:	08013365 	.word	0x08013365
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80132ec:	f7fd ff0a 	bl	8011104 <HAL_RCC_GetPCLK1Freq>
 80132f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	005a      	lsls	r2, r3, #1
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	085b      	lsrs	r3, r3, #1
 80132fc:	441a      	add	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	fbb2 f3f3 	udiv	r3, r2, r3
 8013306:	b29b      	uxth	r3, r3
 8013308:	61bb      	str	r3, [r7, #24]
        break;
 801330a:	e03a      	b.n	8013382 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801330c:	f7fd ff0e 	bl	801112c <HAL_RCC_GetPCLK2Freq>
 8013310:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	005a      	lsls	r2, r3, #1
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	085b      	lsrs	r3, r3, #1
 801331c:	441a      	add	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	fbb2 f3f3 	udiv	r3, r2, r3
 8013326:	b29b      	uxth	r3, r3
 8013328:	61bb      	str	r3, [r7, #24]
        break;
 801332a:	e02a      	b.n	8013382 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	085a      	lsrs	r2, r3, #1
 8013332:	4b5f      	ldr	r3, [pc, #380]	; (80134b0 <UART_SetConfig+0x54c>)
 8013334:	4413      	add	r3, r2
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	6852      	ldr	r2, [r2, #4]
 801333a:	fbb3 f3f2 	udiv	r3, r3, r2
 801333e:	b29b      	uxth	r3, r3
 8013340:	61bb      	str	r3, [r7, #24]
        break;
 8013342:	e01e      	b.n	8013382 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013344:	f7fd fdfc 	bl	8010f40 <HAL_RCC_GetSysClockFreq>
 8013348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	005a      	lsls	r2, r3, #1
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	085b      	lsrs	r3, r3, #1
 8013354:	441a      	add	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	fbb2 f3f3 	udiv	r3, r2, r3
 801335e:	b29b      	uxth	r3, r3
 8013360:	61bb      	str	r3, [r7, #24]
        break;
 8013362:	e00e      	b.n	8013382 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	085b      	lsrs	r3, r3, #1
 801336a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	fbb2 f3f3 	udiv	r3, r2, r3
 8013376:	b29b      	uxth	r3, r3
 8013378:	61bb      	str	r3, [r7, #24]
        break;
 801337a:	e002      	b.n	8013382 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 801337c:	2301      	movs	r3, #1
 801337e:	75fb      	strb	r3, [r7, #23]
        break;
 8013380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	2b0f      	cmp	r3, #15
 8013386:	d916      	bls.n	80133b6 <UART_SetConfig+0x452>
 8013388:	69bb      	ldr	r3, [r7, #24]
 801338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801338e:	d212      	bcs.n	80133b6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	b29b      	uxth	r3, r3
 8013394:	f023 030f 	bic.w	r3, r3, #15
 8013398:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	085b      	lsrs	r3, r3, #1
 801339e:	b29b      	uxth	r3, r3
 80133a0:	f003 0307 	and.w	r3, r3, #7
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	897b      	ldrh	r3, [r7, #10]
 80133a8:	4313      	orrs	r3, r2
 80133aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	897a      	ldrh	r2, [r7, #10]
 80133b2:	60da      	str	r2, [r3, #12]
 80133b4:	e070      	b.n	8013498 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80133b6:	2301      	movs	r3, #1
 80133b8:	75fb      	strb	r3, [r7, #23]
 80133ba:	e06d      	b.n	8013498 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80133bc:	7ffb      	ldrb	r3, [r7, #31]
 80133be:	2b08      	cmp	r3, #8
 80133c0:	d859      	bhi.n	8013476 <UART_SetConfig+0x512>
 80133c2:	a201      	add	r2, pc, #4	; (adr r2, 80133c8 <UART_SetConfig+0x464>)
 80133c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c8:	080133ed 	.word	0x080133ed
 80133cc:	0801340b 	.word	0x0801340b
 80133d0:	08013429 	.word	0x08013429
 80133d4:	08013477 	.word	0x08013477
 80133d8:	08013441 	.word	0x08013441
 80133dc:	08013477 	.word	0x08013477
 80133e0:	08013477 	.word	0x08013477
 80133e4:	08013477 	.word	0x08013477
 80133e8:	0801345f 	.word	0x0801345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133ec:	f7fd fe8a 	bl	8011104 <HAL_RCC_GetPCLK1Freq>
 80133f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	085a      	lsrs	r2, r3, #1
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	441a      	add	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	fbb2 f3f3 	udiv	r3, r2, r3
 8013404:	b29b      	uxth	r3, r3
 8013406:	61bb      	str	r3, [r7, #24]
        break;
 8013408:	e038      	b.n	801347c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801340a:	f7fd fe8f 	bl	801112c <HAL_RCC_GetPCLK2Freq>
 801340e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	085a      	lsrs	r2, r3, #1
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	441a      	add	r2, r3
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013422:	b29b      	uxth	r3, r3
 8013424:	61bb      	str	r3, [r7, #24]
        break;
 8013426:	e029      	b.n	801347c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	685b      	ldr	r3, [r3, #4]
 801342c:	085a      	lsrs	r2, r3, #1
 801342e:	4b21      	ldr	r3, [pc, #132]	; (80134b4 <UART_SetConfig+0x550>)
 8013430:	4413      	add	r3, r2
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	6852      	ldr	r2, [r2, #4]
 8013436:	fbb3 f3f2 	udiv	r3, r3, r2
 801343a:	b29b      	uxth	r3, r3
 801343c:	61bb      	str	r3, [r7, #24]
        break;
 801343e:	e01d      	b.n	801347c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013440:	f7fd fd7e 	bl	8010f40 <HAL_RCC_GetSysClockFreq>
 8013444:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	085a      	lsrs	r2, r3, #1
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	441a      	add	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	fbb2 f3f3 	udiv	r3, r2, r3
 8013458:	b29b      	uxth	r3, r3
 801345a:	61bb      	str	r3, [r7, #24]
        break;
 801345c:	e00e      	b.n	801347c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	085b      	lsrs	r3, r3, #1
 8013464:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013470:	b29b      	uxth	r3, r3
 8013472:	61bb      	str	r3, [r7, #24]
        break;
 8013474:	e002      	b.n	801347c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8013476:	2301      	movs	r3, #1
 8013478:	75fb      	strb	r3, [r7, #23]
        break;
 801347a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	2b0f      	cmp	r3, #15
 8013480:	d908      	bls.n	8013494 <UART_SetConfig+0x530>
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013488:	d204      	bcs.n	8013494 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	69ba      	ldr	r2, [r7, #24]
 8013490:	60da      	str	r2, [r3, #12]
 8013492:	e001      	b.n	8013498 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8013494:	2301      	movs	r3, #1
 8013496:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2200      	movs	r2, #0
 801349c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2200      	movs	r2, #0
 80134a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80134a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3720      	adds	r7, #32
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	01e84800 	.word	0x01e84800
 80134b4:	00f42400 	.word	0x00f42400

080134b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134b8:	b480      	push	{r7}
 80134ba:	b083      	sub	sp, #12
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c4:	f003 0301 	and.w	r3, r3, #1
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d00a      	beq.n	80134e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	430a      	orrs	r2, r1
 80134e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e6:	f003 0302 	and.w	r3, r3, #2
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d00a      	beq.n	8013504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	430a      	orrs	r2, r1
 8013502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013508:	f003 0304 	and.w	r3, r3, #4
 801350c:	2b00      	cmp	r3, #0
 801350e:	d00a      	beq.n	8013526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	430a      	orrs	r2, r1
 8013524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801352a:	f003 0308 	and.w	r3, r3, #8
 801352e:	2b00      	cmp	r3, #0
 8013530:	d00a      	beq.n	8013548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	430a      	orrs	r2, r1
 8013546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801354c:	f003 0310 	and.w	r3, r3, #16
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00a      	beq.n	801356a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	430a      	orrs	r2, r1
 8013568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801356e:	f003 0320 	and.w	r3, r3, #32
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00a      	beq.n	801358c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	689b      	ldr	r3, [r3, #8]
 801357c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	430a      	orrs	r2, r1
 801358a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013594:	2b00      	cmp	r3, #0
 8013596:	d01a      	beq.n	80135ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	685b      	ldr	r3, [r3, #4]
 801359e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	430a      	orrs	r2, r1
 80135ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135b6:	d10a      	bne.n	80135ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	430a      	orrs	r2, r1
 80135cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00a      	beq.n	80135f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	430a      	orrs	r2, r1
 80135ee:	605a      	str	r2, [r3, #4]
  }
}
 80135f0:	bf00      	nop
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b086      	sub	sp, #24
 8013600:	af02      	add	r7, sp, #8
 8013602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801360a:	f7fb f89b 	bl	800e744 <HAL_GetTick>
 801360e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f003 0308 	and.w	r3, r3, #8
 801361a:	2b08      	cmp	r3, #8
 801361c:	d10e      	bne.n	801363c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801361e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2200      	movs	r2, #0
 8013628:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 f82a 	bl	8013686 <UART_WaitOnFlagUntilTimeout>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d001      	beq.n	801363c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013638:	2303      	movs	r3, #3
 801363a:	e020      	b.n	801367e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f003 0304 	and.w	r3, r3, #4
 8013646:	2b04      	cmp	r3, #4
 8013648:	d10e      	bne.n	8013668 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801364a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	2200      	movs	r2, #0
 8013654:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f000 f814 	bl	8013686 <UART_WaitOnFlagUntilTimeout>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d001      	beq.n	8013668 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013664:	2303      	movs	r3, #3
 8013666:	e00a      	b.n	801367e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2220      	movs	r2, #32
 801366c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2220      	movs	r2, #32
 8013672:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2200      	movs	r2, #0
 8013678:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}

08013686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013686:	b580      	push	{r7, lr}
 8013688:	b084      	sub	sp, #16
 801368a:	af00      	add	r7, sp, #0
 801368c:	60f8      	str	r0, [r7, #12]
 801368e:	60b9      	str	r1, [r7, #8]
 8013690:	603b      	str	r3, [r7, #0]
 8013692:	4613      	mov	r3, r2
 8013694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013696:	e05d      	b.n	8013754 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013698:	69bb      	ldr	r3, [r7, #24]
 801369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369e:	d059      	beq.n	8013754 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80136a0:	f7fb f850 	bl	800e744 <HAL_GetTick>
 80136a4:	4602      	mov	r2, r0
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	1ad3      	subs	r3, r2, r3
 80136aa:	69ba      	ldr	r2, [r7, #24]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d302      	bcc.n	80136b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d11b      	bne.n	80136ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80136c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	689a      	ldr	r2, [r3, #8]
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f022 0201 	bic.w	r2, r2, #1
 80136d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2220      	movs	r2, #32
 80136da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2220      	movs	r2, #32
 80136e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2200      	movs	r2, #0
 80136e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80136ea:	2303      	movs	r3, #3
 80136ec:	e042      	b.n	8013774 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f003 0304 	and.w	r3, r3, #4
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d02b      	beq.n	8013754 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	69db      	ldr	r3, [r3, #28]
 8013702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801370a:	d123      	bne.n	8013754 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013714:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013724:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	689a      	ldr	r2, [r3, #8]
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f022 0201 	bic.w	r2, r2, #1
 8013734:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2220      	movs	r2, #32
 801373a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2220      	movs	r2, #32
 8013740:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	2220      	movs	r2, #32
 8013746:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2200      	movs	r2, #0
 801374c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8013750:	2303      	movs	r3, #3
 8013752:	e00f      	b.n	8013774 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	69da      	ldr	r2, [r3, #28]
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	4013      	ands	r3, r2
 801375e:	68ba      	ldr	r2, [r7, #8]
 8013760:	429a      	cmp	r2, r3
 8013762:	bf0c      	ite	eq
 8013764:	2301      	moveq	r3, #1
 8013766:	2300      	movne	r3, #0
 8013768:	b2db      	uxtb	r3, r3
 801376a:	461a      	mov	r2, r3
 801376c:	79fb      	ldrb	r3, [r7, #7]
 801376e:	429a      	cmp	r2, r3
 8013770:	d092      	beq.n	8013698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8013792:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2220      	movs	r2, #32
 8013798:	675a      	str	r2, [r3, #116]	; 0x74
}
 801379a:	bf00      	nop
 801379c:	370c      	adds	r7, #12
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr

080137a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80137a6:	b480      	push	{r7}
 80137a8:	b083      	sub	sp, #12
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	681a      	ldr	r2, [r3, #0]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80137bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	689a      	ldr	r2, [r3, #8]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f022 0201 	bic.w	r2, r2, #1
 80137cc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2220      	movs	r2, #32
 80137d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2200      	movs	r2, #0
 80137d8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80137da:	bf00      	nop
 80137dc:	370c      	adds	r7, #12
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr

080137e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b084      	sub	sp, #16
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137f2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	69db      	ldr	r3, [r3, #28]
 80137f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137fc:	d014      	beq.n	8013828 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2200      	movs	r2, #0
 8013802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	689a      	ldr	r2, [r3, #8]
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013814:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	681a      	ldr	r2, [r3, #0]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013824:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013826:	e002      	b.n	801382e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8013828:	68f8      	ldr	r0, [r7, #12]
 801382a:	f7ff fb73 	bl	8012f14 <HAL_UART_TxCpltCallback>
}
 801382e:	bf00      	nop
 8013830:	3710      	adds	r7, #16
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013836:	b580      	push	{r7, lr}
 8013838:	b084      	sub	sp, #16
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013842:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f7ff fb6f 	bl	8012f28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801384a:	bf00      	nop
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b086      	sub	sp, #24
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013864:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801386a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013876:	2b80      	cmp	r3, #128	; 0x80
 8013878:	d109      	bne.n	801388e <UART_DMAError+0x3c>
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	2b21      	cmp	r3, #33	; 0x21
 801387e:	d106      	bne.n	801388e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	2200      	movs	r2, #0
 8013884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8013888:	6978      	ldr	r0, [r7, #20]
 801388a:	f7ff ff77 	bl	801377c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	689b      	ldr	r3, [r3, #8]
 8013894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013898:	2b40      	cmp	r3, #64	; 0x40
 801389a:	d109      	bne.n	80138b0 <UART_DMAError+0x5e>
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2b22      	cmp	r3, #34	; 0x22
 80138a0:	d106      	bne.n	80138b0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2200      	movs	r2, #0
 80138a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80138aa:	6978      	ldr	r0, [r7, #20]
 80138ac:	f7ff ff7b 	bl	80137a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138b4:	f043 0210 	orr.w	r2, r3, #16
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80138bc:	6978      	ldr	r0, [r7, #20]
 80138be:	f7ff fb3d 	bl	8012f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138c2:	bf00      	nop
 80138c4:	3718      	adds	r7, #24
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}

080138ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80138ca:	b580      	push	{r7, lr}
 80138cc:	b084      	sub	sp, #16
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2200      	movs	r2, #0
 80138dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2200      	movs	r2, #0
 80138e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	f7ff fb27 	bl	8012f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138ee:	bf00      	nop
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b082      	sub	sp, #8
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801390c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2220      	movs	r2, #32
 8013912:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2200      	movs	r2, #0
 8013918:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7ff fafa 	bl	8012f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013920:	bf00      	nop
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013936:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801393c:	2b22      	cmp	r3, #34	; 0x22
 801393e:	d13a      	bne.n	80139b6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013946:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013948:	89bb      	ldrh	r3, [r7, #12]
 801394a:	b2d9      	uxtb	r1, r3
 801394c:	89fb      	ldrh	r3, [r7, #14]
 801394e:	b2da      	uxtb	r2, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013954:	400a      	ands	r2, r1
 8013956:	b2d2      	uxtb	r2, r2
 8013958:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801396a:	b29b      	uxth	r3, r3
 801396c:	3b01      	subs	r3, #1
 801396e:	b29a      	uxth	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801397c:	b29b      	uxth	r3, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	d121      	bne.n	80139c6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013990:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	689a      	ldr	r2, [r3, #8]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f022 0201 	bic.w	r2, r2, #1
 80139a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2220      	movs	r2, #32
 80139a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7f8 fc8e 	bl	800c2d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80139b4:	e007      	b.n	80139c6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	699a      	ldr	r2, [r3, #24]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f042 0208 	orr.w	r2, r2, #8
 80139c4:	619a      	str	r2, [r3, #24]
}
 80139c6:	bf00      	nop
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b084      	sub	sp, #16
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80139dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139e2:	2b22      	cmp	r3, #34	; 0x22
 80139e4:	d13a      	bne.n	8013a5c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80139f4:	89ba      	ldrh	r2, [r7, #12]
 80139f6:	89fb      	ldrh	r3, [r7, #14]
 80139f8:	4013      	ands	r3, r2
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a04:	1c9a      	adds	r2, r3, #2
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	3b01      	subs	r3, #1
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d121      	bne.n	8013a6c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013a36:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	689a      	ldr	r2, [r3, #8]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	f022 0201 	bic.w	r2, r2, #1
 8013a46:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2220      	movs	r2, #32
 8013a4c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2200      	movs	r2, #0
 8013a52:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7f8 fc3b 	bl	800c2d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013a5a:	e007      	b.n	8013a6c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	699a      	ldr	r2, [r3, #24]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f042 0208 	orr.w	r2, r2, #8
 8013a6a:	619a      	str	r2, [r3, #24]
}
 8013a6c:	bf00      	nop
 8013a6e:	3710      	adds	r7, #16
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b085      	sub	sp, #20
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a86:	2b84      	cmp	r3, #132	; 0x84
 8013a88:	d005      	beq.n	8013a96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	4413      	add	r3, r2
 8013a92:	3303      	adds	r3, #3
 8013a94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013a96:	68fb      	ldr	r3, [r7, #12]
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3714      	adds	r7, #20
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr

08013aa4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013aa8:	f001 fa7a 	bl	8014fa0 <vTaskStartScheduler>
  
  return osOK;
 8013aac:	2300      	movs	r3, #0
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ab4:	b089      	sub	sp, #36	; 0x24
 8013ab6:	af04      	add	r7, sp, #16
 8013ab8:	6078      	str	r0, [r7, #4]
 8013aba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d020      	beq.n	8013b06 <osThreadCreate+0x54>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	699b      	ldr	r3, [r3, #24]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d01c      	beq.n	8013b06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	685c      	ldr	r4, [r3, #4]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681d      	ldr	r5, [r3, #0]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	691e      	ldr	r6, [r3, #16]
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7ff ffc8 	bl	8013a74 <makeFreeRtosPriority>
 8013ae4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	695b      	ldr	r3, [r3, #20]
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013aee:	9202      	str	r2, [sp, #8]
 8013af0:	9301      	str	r3, [sp, #4]
 8013af2:	9100      	str	r1, [sp, #0]
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	4632      	mov	r2, r6
 8013af8:	4629      	mov	r1, r5
 8013afa:	4620      	mov	r0, r4
 8013afc:	f000 ff5f 	bl	80149be <xTaskCreateStatic>
 8013b00:	4603      	mov	r3, r0
 8013b02:	60fb      	str	r3, [r7, #12]
 8013b04:	e01c      	b.n	8013b40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	685c      	ldr	r4, [r3, #4]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b12:	b29e      	uxth	r6, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7ff ffaa 	bl	8013a74 <makeFreeRtosPriority>
 8013b20:	4602      	mov	r2, r0
 8013b22:	f107 030c 	add.w	r3, r7, #12
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	9200      	str	r2, [sp, #0]
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	4632      	mov	r2, r6
 8013b2e:	4629      	mov	r1, r5
 8013b30:	4620      	mov	r0, r4
 8013b32:	f000 ffa4 	bl	8014a7e <xTaskCreate>
 8013b36:	4603      	mov	r3, r0
 8013b38:	2b01      	cmp	r3, #1
 8013b3a:	d001      	beq.n	8013b40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	e000      	b.n	8013b42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013b40:	68fb      	ldr	r3, [r7, #12]
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3714      	adds	r7, #20
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b084      	sub	sp, #16
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <osDelay+0x16>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	e000      	b.n	8013b62 <osDelay+0x18>
 8013b60:	2301      	movs	r3, #1
 8013b62:	4618      	mov	r0, r3
 8013b64:	f001 f8c2 	bl	8014cec <vTaskDelay>
  
  return osOK;
 8013b68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b086      	sub	sp, #24
 8013b76:	af02      	add	r7, sp, #8
 8013b78:	6078      	str	r0, [r7, #4]
 8013b7a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	685b      	ldr	r3, [r3, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d010      	beq.n	8013ba6 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d10b      	bne.n	8013ba2 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	685a      	ldr	r2, [r3, #4]
 8013b8e:	2303      	movs	r3, #3
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	4613      	mov	r3, r2
 8013b94:	2200      	movs	r2, #0
 8013b96:	2100      	movs	r1, #0
 8013b98:	2001      	movs	r0, #1
 8013b9a:	f000 f965 	bl	8013e68 <xQueueGenericCreateStatic>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	e016      	b.n	8013bd0 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	e014      	b.n	8013bd0 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d110      	bne.n	8013bce <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8013bac:	2203      	movs	r2, #3
 8013bae:	2100      	movs	r1, #0
 8013bb0:	2001      	movs	r0, #1
 8013bb2:	f000 f9d6 	bl	8013f62 <xQueueGenericCreate>
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d005      	beq.n	8013bca <osSemaphoreCreate+0x58>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f000 fa2d 	bl	8014024 <xQueueGenericSend>
      return sema;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	e000      	b.n	8013bd0 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8013bce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3710      	adds	r7, #16
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013bd8:	b590      	push	{r4, r7, lr}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af02      	add	r7, sp, #8
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	689b      	ldr	r3, [r3, #8]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d012      	beq.n	8013c10 <osMessageCreate+0x38>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d00e      	beq.n	8013c10 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6818      	ldr	r0, [r3, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6859      	ldr	r1, [r3, #4]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	689a      	ldr	r2, [r3, #8]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	68dc      	ldr	r4, [r3, #12]
 8013c02:	2300      	movs	r3, #0
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	4623      	mov	r3, r4
 8013c08:	f000 f92e 	bl	8013e68 <xQueueGenericCreateStatic>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	e008      	b.n	8013c22 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6818      	ldr	r0, [r3, #0]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	f000 f9a1 	bl	8013f62 <xQueueGenericCreate>
 8013c20:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd90      	pop	{r4, r7, pc}

08013c2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013c2a:	b480      	push	{r7}
 8013c2c:	b083      	sub	sp, #12
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f103 0208 	add.w	r2, r3, #8
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f103 0208 	add.w	r2, r3, #8
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f103 0208 	add.w	r2, r3, #8
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013c5e:	bf00      	nop
 8013c60:	370c      	adds	r7, #12
 8013c62:	46bd      	mov	sp, r7
 8013c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c68:	4770      	bx	lr

08013c6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013c6a:	b480      	push	{r7}
 8013c6c:	b083      	sub	sp, #12
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013c78:	bf00      	nop
 8013c7a:	370c      	adds	r7, #12
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr

08013c84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c84:	b480      	push	{r7}
 8013c86:	b085      	sub	sp, #20
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	68fa      	ldr	r2, [r7, #12]
 8013c98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	689a      	ldr	r2, [r3, #8]
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	683a      	ldr	r2, [r7, #0]
 8013cae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	687a      	ldr	r2, [r7, #4]
 8013cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	1c5a      	adds	r2, r3, #1
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	601a      	str	r2, [r3, #0]
}
 8013cc0:	bf00      	nop
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce2:	d103      	bne.n	8013cec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	691b      	ldr	r3, [r3, #16]
 8013ce8:	60fb      	str	r3, [r7, #12]
 8013cea:	e00c      	b.n	8013d06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	3308      	adds	r3, #8
 8013cf0:	60fb      	str	r3, [r7, #12]
 8013cf2:	e002      	b.n	8013cfa <vListInsert+0x2e>
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	60fb      	str	r3, [r7, #12]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d2f6      	bcs.n	8013cf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	685a      	ldr	r2, [r3, #4]
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	683a      	ldr	r2, [r7, #0]
 8013d14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	1c5a      	adds	r2, r3, #1
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	601a      	str	r2, [r3, #0]
}
 8013d32:	bf00      	nop
 8013d34:	3714      	adds	r7, #20
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr

08013d3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013d3e:	b480      	push	{r7}
 8013d40:	b085      	sub	sp, #20
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	691b      	ldr	r3, [r3, #16]
 8013d4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	6892      	ldr	r2, [r2, #8]
 8013d54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	6852      	ldr	r2, [r2, #4]
 8013d5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d103      	bne.n	8013d72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	689a      	ldr	r2, [r3, #8]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2200      	movs	r2, #0
 8013d76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	1e5a      	subs	r2, r3, #1
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3714      	adds	r7, #20
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr
	...

08013d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d10b      	bne.n	8013dc0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dac:	b672      	cpsid	i
 8013dae:	f383 8811 	msr	BASEPRI, r3
 8013db2:	f3bf 8f6f 	isb	sy
 8013db6:	f3bf 8f4f 	dsb	sy
 8013dba:	b662      	cpsie	i
 8013dbc:	60bb      	str	r3, [r7, #8]
 8013dbe:	e7fe      	b.n	8013dbe <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013dc0:	f002 f83a 	bl	8015e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dcc:	68f9      	ldr	r1, [r7, #12]
 8013dce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013dd0:	fb01 f303 	mul.w	r3, r1, r3
 8013dd4:	441a      	add	r2, r3
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013df0:	3b01      	subs	r3, #1
 8013df2:	68f9      	ldr	r1, [r7, #12]
 8013df4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013df6:	fb01 f303 	mul.w	r3, r1, r3
 8013dfa:	441a      	add	r2, r3
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	22ff      	movs	r2, #255	; 0xff
 8013e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	22ff      	movs	r2, #255	; 0xff
 8013e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d114      	bne.n	8013e40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	691b      	ldr	r3, [r3, #16]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d01a      	beq.n	8013e54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	3310      	adds	r3, #16
 8013e22:	4618      	mov	r0, r3
 8013e24:	f001 fb06 	bl	8015434 <xTaskRemoveFromEventList>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d012      	beq.n	8013e54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013e2e:	4b0d      	ldr	r3, [pc, #52]	; (8013e64 <xQueueGenericReset+0xd0>)
 8013e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e34:	601a      	str	r2, [r3, #0]
 8013e36:	f3bf 8f4f 	dsb	sy
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	e009      	b.n	8013e54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	3310      	adds	r3, #16
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7ff fef0 	bl	8013c2a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	3324      	adds	r3, #36	; 0x24
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7ff feeb 	bl	8013c2a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013e54:	f002 f822 	bl	8015e9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013e58:	2301      	movs	r3, #1
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3710      	adds	r7, #16
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	e000ed04 	.word	0xe000ed04

08013e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b08e      	sub	sp, #56	; 0x38
 8013e6c:	af02      	add	r7, sp, #8
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
 8013e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d10b      	bne.n	8013e94 <xQueueGenericCreateStatic+0x2c>
 8013e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e80:	b672      	cpsid	i
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	b662      	cpsie	i
 8013e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e92:	e7fe      	b.n	8013e92 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d10b      	bne.n	8013eb2 <xQueueGenericCreateStatic+0x4a>
 8013e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9e:	b672      	cpsid	i
 8013ea0:	f383 8811 	msr	BASEPRI, r3
 8013ea4:	f3bf 8f6f 	isb	sy
 8013ea8:	f3bf 8f4f 	dsb	sy
 8013eac:	b662      	cpsie	i
 8013eae:	627b      	str	r3, [r7, #36]	; 0x24
 8013eb0:	e7fe      	b.n	8013eb0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d002      	beq.n	8013ebe <xQueueGenericCreateStatic+0x56>
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <xQueueGenericCreateStatic+0x5a>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	e000      	b.n	8013ec4 <xQueueGenericCreateStatic+0x5c>
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d10b      	bne.n	8013ee0 <xQueueGenericCreateStatic+0x78>
 8013ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ecc:	b672      	cpsid	i
 8013ece:	f383 8811 	msr	BASEPRI, r3
 8013ed2:	f3bf 8f6f 	isb	sy
 8013ed6:	f3bf 8f4f 	dsb	sy
 8013eda:	b662      	cpsie	i
 8013edc:	623b      	str	r3, [r7, #32]
 8013ede:	e7fe      	b.n	8013ede <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d102      	bne.n	8013eec <xQueueGenericCreateStatic+0x84>
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d101      	bne.n	8013ef0 <xQueueGenericCreateStatic+0x88>
 8013eec:	2301      	movs	r3, #1
 8013eee:	e000      	b.n	8013ef2 <xQueueGenericCreateStatic+0x8a>
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d10b      	bne.n	8013f0e <xQueueGenericCreateStatic+0xa6>
 8013ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efa:	b672      	cpsid	i
 8013efc:	f383 8811 	msr	BASEPRI, r3
 8013f00:	f3bf 8f6f 	isb	sy
 8013f04:	f3bf 8f4f 	dsb	sy
 8013f08:	b662      	cpsie	i
 8013f0a:	61fb      	str	r3, [r7, #28]
 8013f0c:	e7fe      	b.n	8013f0c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013f0e:	2348      	movs	r3, #72	; 0x48
 8013f10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2b48      	cmp	r3, #72	; 0x48
 8013f16:	d00b      	beq.n	8013f30 <xQueueGenericCreateStatic+0xc8>
 8013f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1c:	b672      	cpsid	i
 8013f1e:	f383 8811 	msr	BASEPRI, r3
 8013f22:	f3bf 8f6f 	isb	sy
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	b662      	cpsie	i
 8013f2c:	61bb      	str	r3, [r7, #24]
 8013f2e:	e7fe      	b.n	8013f2e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013f30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d00d      	beq.n	8013f58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3e:	2201      	movs	r2, #1
 8013f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013f44:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	9300      	str	r3, [sp, #0]
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	68b9      	ldr	r1, [r7, #8]
 8013f52:	68f8      	ldr	r0, [r7, #12]
 8013f54:	f000 f846 	bl	8013fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3730      	adds	r7, #48	; 0x30
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b08a      	sub	sp, #40	; 0x28
 8013f66:	af02      	add	r7, sp, #8
 8013f68:	60f8      	str	r0, [r7, #12]
 8013f6a:	60b9      	str	r1, [r7, #8]
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d10b      	bne.n	8013f8e <xQueueGenericCreate+0x2c>
 8013f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f7a:	b672      	cpsid	i
 8013f7c:	f383 8811 	msr	BASEPRI, r3
 8013f80:	f3bf 8f6f 	isb	sy
 8013f84:	f3bf 8f4f 	dsb	sy
 8013f88:	b662      	cpsie	i
 8013f8a:	613b      	str	r3, [r7, #16]
 8013f8c:	e7fe      	b.n	8013f8c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d102      	bne.n	8013f9a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013f94:	2300      	movs	r3, #0
 8013f96:	61fb      	str	r3, [r7, #28]
 8013f98:	e004      	b.n	8013fa4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	68ba      	ldr	r2, [r7, #8]
 8013f9e:	fb02 f303 	mul.w	r3, r2, r3
 8013fa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	3348      	adds	r3, #72	; 0x48
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f002 f867 	bl	801607c <pvPortMalloc>
 8013fae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d011      	beq.n	8013fda <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013fb6:	69bb      	ldr	r3, [r7, #24]
 8013fb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	3348      	adds	r3, #72	; 0x48
 8013fbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013fc8:	79fa      	ldrb	r2, [r7, #7]
 8013fca:	69bb      	ldr	r3, [r7, #24]
 8013fcc:	9300      	str	r3, [sp, #0]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	697a      	ldr	r2, [r7, #20]
 8013fd2:	68b9      	ldr	r1, [r7, #8]
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	f000 f805 	bl	8013fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013fda:	69bb      	ldr	r3, [r7, #24]
	}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3720      	adds	r7, #32
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
 8013ff0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d103      	bne.n	8014000 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	69ba      	ldr	r2, [r7, #24]
 8013ffc:	601a      	str	r2, [r3, #0]
 8013ffe:	e002      	b.n	8014006 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014000:	69bb      	ldr	r3, [r7, #24]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014006:	69bb      	ldr	r3, [r7, #24]
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801400c:	69bb      	ldr	r3, [r7, #24]
 801400e:	68ba      	ldr	r2, [r7, #8]
 8014010:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014012:	2101      	movs	r1, #1
 8014014:	69b8      	ldr	r0, [r7, #24]
 8014016:	f7ff febd 	bl	8013d94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801401a:	bf00      	nop
 801401c:	3710      	adds	r7, #16
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b08e      	sub	sp, #56	; 0x38
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	607a      	str	r2, [r7, #4]
 8014030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014032:	2300      	movs	r3, #0
 8014034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403c:	2b00      	cmp	r3, #0
 801403e:	d10b      	bne.n	8014058 <xQueueGenericSend+0x34>
 8014040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014044:	b672      	cpsid	i
 8014046:	f383 8811 	msr	BASEPRI, r3
 801404a:	f3bf 8f6f 	isb	sy
 801404e:	f3bf 8f4f 	dsb	sy
 8014052:	b662      	cpsie	i
 8014054:	62bb      	str	r3, [r7, #40]	; 0x28
 8014056:	e7fe      	b.n	8014056 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d103      	bne.n	8014066 <xQueueGenericSend+0x42>
 801405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014062:	2b00      	cmp	r3, #0
 8014064:	d101      	bne.n	801406a <xQueueGenericSend+0x46>
 8014066:	2301      	movs	r3, #1
 8014068:	e000      	b.n	801406c <xQueueGenericSend+0x48>
 801406a:	2300      	movs	r3, #0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d10b      	bne.n	8014088 <xQueueGenericSend+0x64>
 8014070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014074:	b672      	cpsid	i
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	b662      	cpsie	i
 8014084:	627b      	str	r3, [r7, #36]	; 0x24
 8014086:	e7fe      	b.n	8014086 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	2b02      	cmp	r3, #2
 801408c:	d103      	bne.n	8014096 <xQueueGenericSend+0x72>
 801408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014092:	2b01      	cmp	r3, #1
 8014094:	d101      	bne.n	801409a <xQueueGenericSend+0x76>
 8014096:	2301      	movs	r3, #1
 8014098:	e000      	b.n	801409c <xQueueGenericSend+0x78>
 801409a:	2300      	movs	r3, #0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d10b      	bne.n	80140b8 <xQueueGenericSend+0x94>
 80140a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a4:	b672      	cpsid	i
 80140a6:	f383 8811 	msr	BASEPRI, r3
 80140aa:	f3bf 8f6f 	isb	sy
 80140ae:	f3bf 8f4f 	dsb	sy
 80140b2:	b662      	cpsie	i
 80140b4:	623b      	str	r3, [r7, #32]
 80140b6:	e7fe      	b.n	80140b6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80140b8:	f001 fb7a 	bl	80157b0 <xTaskGetSchedulerState>
 80140bc:	4603      	mov	r3, r0
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d102      	bne.n	80140c8 <xQueueGenericSend+0xa4>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d101      	bne.n	80140cc <xQueueGenericSend+0xa8>
 80140c8:	2301      	movs	r3, #1
 80140ca:	e000      	b.n	80140ce <xQueueGenericSend+0xaa>
 80140cc:	2300      	movs	r3, #0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d10b      	bne.n	80140ea <xQueueGenericSend+0xc6>
 80140d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d6:	b672      	cpsid	i
 80140d8:	f383 8811 	msr	BASEPRI, r3
 80140dc:	f3bf 8f6f 	isb	sy
 80140e0:	f3bf 8f4f 	dsb	sy
 80140e4:	b662      	cpsie	i
 80140e6:	61fb      	str	r3, [r7, #28]
 80140e8:	e7fe      	b.n	80140e8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80140ea:	f001 fea5 	bl	8015e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80140ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d302      	bcc.n	8014100 <xQueueGenericSend+0xdc>
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	2b02      	cmp	r3, #2
 80140fe:	d129      	bne.n	8014154 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	68b9      	ldr	r1, [r7, #8]
 8014104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014106:	f000 fb4a 	bl	801479e <prvCopyDataToQueue>
 801410a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014110:	2b00      	cmp	r3, #0
 8014112:	d010      	beq.n	8014136 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014116:	3324      	adds	r3, #36	; 0x24
 8014118:	4618      	mov	r0, r3
 801411a:	f001 f98b 	bl	8015434 <xTaskRemoveFromEventList>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d013      	beq.n	801414c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014124:	4b3f      	ldr	r3, [pc, #252]	; (8014224 <xQueueGenericSend+0x200>)
 8014126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801412a:	601a      	str	r2, [r3, #0]
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	f3bf 8f6f 	isb	sy
 8014134:	e00a      	b.n	801414c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014138:	2b00      	cmp	r3, #0
 801413a:	d007      	beq.n	801414c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801413c:	4b39      	ldr	r3, [pc, #228]	; (8014224 <xQueueGenericSend+0x200>)
 801413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014142:	601a      	str	r2, [r3, #0]
 8014144:	f3bf 8f4f 	dsb	sy
 8014148:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801414c:	f001 fea6 	bl	8015e9c <vPortExitCritical>
				return pdPASS;
 8014150:	2301      	movs	r3, #1
 8014152:	e063      	b.n	801421c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d103      	bne.n	8014162 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801415a:	f001 fe9f 	bl	8015e9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801415e:	2300      	movs	r3, #0
 8014160:	e05c      	b.n	801421c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014164:	2b00      	cmp	r3, #0
 8014166:	d106      	bne.n	8014176 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014168:	f107 0314 	add.w	r3, r7, #20
 801416c:	4618      	mov	r0, r3
 801416e:	f001 f9c5 	bl	80154fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014172:	2301      	movs	r3, #1
 8014174:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014176:	f001 fe91 	bl	8015e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801417a:	f000 ff73 	bl	8015064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801417e:	f001 fe5b 	bl	8015e38 <vPortEnterCritical>
 8014182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014188:	b25b      	sxtb	r3, r3
 801418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801418e:	d103      	bne.n	8014198 <xQueueGenericSend+0x174>
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	2200      	movs	r2, #0
 8014194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801419e:	b25b      	sxtb	r3, r3
 80141a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141a4:	d103      	bne.n	80141ae <xQueueGenericSend+0x18a>
 80141a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a8:	2200      	movs	r2, #0
 80141aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141ae:	f001 fe75 	bl	8015e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80141b2:	1d3a      	adds	r2, r7, #4
 80141b4:	f107 0314 	add.w	r3, r7, #20
 80141b8:	4611      	mov	r1, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f001 f9b4 	bl	8015528 <xTaskCheckForTimeOut>
 80141c0:	4603      	mov	r3, r0
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d124      	bne.n	8014210 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80141c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141c8:	f000 fbe1 	bl	801498e <prvIsQueueFull>
 80141cc:	4603      	mov	r3, r0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d018      	beq.n	8014204 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80141d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d4:	3310      	adds	r3, #16
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	4611      	mov	r1, r2
 80141da:	4618      	mov	r0, r3
 80141dc:	f001 f904 	bl	80153e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80141e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141e2:	f000 fb6c 	bl	80148be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80141e6:	f000 ff4b 	bl	8015080 <xTaskResumeAll>
 80141ea:	4603      	mov	r3, r0
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f47f af7c 	bne.w	80140ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80141f2:	4b0c      	ldr	r3, [pc, #48]	; (8014224 <xQueueGenericSend+0x200>)
 80141f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141f8:	601a      	str	r2, [r3, #0]
 80141fa:	f3bf 8f4f 	dsb	sy
 80141fe:	f3bf 8f6f 	isb	sy
 8014202:	e772      	b.n	80140ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014206:	f000 fb5a 	bl	80148be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801420a:	f000 ff39 	bl	8015080 <xTaskResumeAll>
 801420e:	e76c      	b.n	80140ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014212:	f000 fb54 	bl	80148be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014216:	f000 ff33 	bl	8015080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801421a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801421c:	4618      	mov	r0, r3
 801421e:	3738      	adds	r7, #56	; 0x38
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	e000ed04 	.word	0xe000ed04

08014228 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b08e      	sub	sp, #56	; 0x38
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014238:	2b00      	cmp	r3, #0
 801423a:	d10b      	bne.n	8014254 <xQueueGiveFromISR+0x2c>
 801423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014240:	b672      	cpsid	i
 8014242:	f383 8811 	msr	BASEPRI, r3
 8014246:	f3bf 8f6f 	isb	sy
 801424a:	f3bf 8f4f 	dsb	sy
 801424e:	b662      	cpsie	i
 8014250:	623b      	str	r3, [r7, #32]
 8014252:	e7fe      	b.n	8014252 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00b      	beq.n	8014274 <xQueueGiveFromISR+0x4c>
 801425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014260:	b672      	cpsid	i
 8014262:	f383 8811 	msr	BASEPRI, r3
 8014266:	f3bf 8f6f 	isb	sy
 801426a:	f3bf 8f4f 	dsb	sy
 801426e:	b662      	cpsie	i
 8014270:	61fb      	str	r3, [r7, #28]
 8014272:	e7fe      	b.n	8014272 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d103      	bne.n	8014284 <xQueueGiveFromISR+0x5c>
 801427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427e:	689b      	ldr	r3, [r3, #8]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d101      	bne.n	8014288 <xQueueGiveFromISR+0x60>
 8014284:	2301      	movs	r3, #1
 8014286:	e000      	b.n	801428a <xQueueGiveFromISR+0x62>
 8014288:	2300      	movs	r3, #0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d10b      	bne.n	80142a6 <xQueueGiveFromISR+0x7e>
 801428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014292:	b672      	cpsid	i
 8014294:	f383 8811 	msr	BASEPRI, r3
 8014298:	f3bf 8f6f 	isb	sy
 801429c:	f3bf 8f4f 	dsb	sy
 80142a0:	b662      	cpsie	i
 80142a2:	61bb      	str	r3, [r7, #24]
 80142a4:	e7fe      	b.n	80142a4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80142a6:	f001 fea7 	bl	8015ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80142aa:	f3ef 8211 	mrs	r2, BASEPRI
 80142ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b2:	b672      	cpsid	i
 80142b4:	f383 8811 	msr	BASEPRI, r3
 80142b8:	f3bf 8f6f 	isb	sy
 80142bc:	f3bf 8f4f 	dsb	sy
 80142c0:	b662      	cpsie	i
 80142c2:	617a      	str	r2, [r7, #20]
 80142c4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80142c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80142c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80142ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80142d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d22b      	bcs.n	8014332 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80142da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80142e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e6:	1c5a      	adds	r2, r3, #1
 80142e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80142ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80142f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142f4:	d112      	bne.n	801431c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80142f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d016      	beq.n	801432c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80142fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014300:	3324      	adds	r3, #36	; 0x24
 8014302:	4618      	mov	r0, r3
 8014304:	f001 f896 	bl	8015434 <xTaskRemoveFromEventList>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00e      	beq.n	801432c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d00b      	beq.n	801432c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	2201      	movs	r2, #1
 8014318:	601a      	str	r2, [r3, #0]
 801431a:	e007      	b.n	801432c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801431c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014320:	3301      	adds	r3, #1
 8014322:	b2db      	uxtb	r3, r3
 8014324:	b25a      	sxtb	r2, r3
 8014326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801432c:	2301      	movs	r3, #1
 801432e:	637b      	str	r3, [r7, #52]	; 0x34
 8014330:	e001      	b.n	8014336 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014332:	2300      	movs	r3, #0
 8014334:	637b      	str	r3, [r7, #52]	; 0x34
 8014336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014338:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014342:	4618      	mov	r0, r3
 8014344:	3738      	adds	r7, #56	; 0x38
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
	...

0801434c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b08c      	sub	sp, #48	; 0x30
 8014350:	af00      	add	r7, sp, #0
 8014352:	60f8      	str	r0, [r7, #12]
 8014354:	60b9      	str	r1, [r7, #8]
 8014356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014358:	2300      	movs	r3, #0
 801435a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014362:	2b00      	cmp	r3, #0
 8014364:	d10b      	bne.n	801437e <xQueueReceive+0x32>
	__asm volatile
 8014366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436a:	b672      	cpsid	i
 801436c:	f383 8811 	msr	BASEPRI, r3
 8014370:	f3bf 8f6f 	isb	sy
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	b662      	cpsie	i
 801437a:	623b      	str	r3, [r7, #32]
 801437c:	e7fe      	b.n	801437c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d103      	bne.n	801438c <xQueueReceive+0x40>
 8014384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014388:	2b00      	cmp	r3, #0
 801438a:	d101      	bne.n	8014390 <xQueueReceive+0x44>
 801438c:	2301      	movs	r3, #1
 801438e:	e000      	b.n	8014392 <xQueueReceive+0x46>
 8014390:	2300      	movs	r3, #0
 8014392:	2b00      	cmp	r3, #0
 8014394:	d10b      	bne.n	80143ae <xQueueReceive+0x62>
 8014396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439a:	b672      	cpsid	i
 801439c:	f383 8811 	msr	BASEPRI, r3
 80143a0:	f3bf 8f6f 	isb	sy
 80143a4:	f3bf 8f4f 	dsb	sy
 80143a8:	b662      	cpsie	i
 80143aa:	61fb      	str	r3, [r7, #28]
 80143ac:	e7fe      	b.n	80143ac <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80143ae:	f001 f9ff 	bl	80157b0 <xTaskGetSchedulerState>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d102      	bne.n	80143be <xQueueReceive+0x72>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <xQueueReceive+0x76>
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <xQueueReceive+0x78>
 80143c2:	2300      	movs	r3, #0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10b      	bne.n	80143e0 <xQueueReceive+0x94>
 80143c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143cc:	b672      	cpsid	i
 80143ce:	f383 8811 	msr	BASEPRI, r3
 80143d2:	f3bf 8f6f 	isb	sy
 80143d6:	f3bf 8f4f 	dsb	sy
 80143da:	b662      	cpsie	i
 80143dc:	61bb      	str	r3, [r7, #24]
 80143de:	e7fe      	b.n	80143de <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80143e0:	f001 fd2a 	bl	8015e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d01f      	beq.n	8014430 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143f4:	f000 fa3d 	bl	8014872 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	1e5a      	subs	r2, r3, #1
 80143fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014402:	691b      	ldr	r3, [r3, #16]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d00f      	beq.n	8014428 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801440a:	3310      	adds	r3, #16
 801440c:	4618      	mov	r0, r3
 801440e:	f001 f811 	bl	8015434 <xTaskRemoveFromEventList>
 8014412:	4603      	mov	r3, r0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d007      	beq.n	8014428 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014418:	4b3c      	ldr	r3, [pc, #240]	; (801450c <xQueueReceive+0x1c0>)
 801441a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801441e:	601a      	str	r2, [r3, #0]
 8014420:	f3bf 8f4f 	dsb	sy
 8014424:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014428:	f001 fd38 	bl	8015e9c <vPortExitCritical>
				return pdPASS;
 801442c:	2301      	movs	r3, #1
 801442e:	e069      	b.n	8014504 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d103      	bne.n	801443e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014436:	f001 fd31 	bl	8015e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801443a:	2300      	movs	r3, #0
 801443c:	e062      	b.n	8014504 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014440:	2b00      	cmp	r3, #0
 8014442:	d106      	bne.n	8014452 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014444:	f107 0310 	add.w	r3, r7, #16
 8014448:	4618      	mov	r0, r3
 801444a:	f001 f857 	bl	80154fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801444e:	2301      	movs	r3, #1
 8014450:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014452:	f001 fd23 	bl	8015e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014456:	f000 fe05 	bl	8015064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801445a:	f001 fced 	bl	8015e38 <vPortEnterCritical>
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014464:	b25b      	sxtb	r3, r3
 8014466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801446a:	d103      	bne.n	8014474 <xQueueReceive+0x128>
 801446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446e:	2200      	movs	r2, #0
 8014470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801447a:	b25b      	sxtb	r3, r3
 801447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014480:	d103      	bne.n	801448a <xQueueReceive+0x13e>
 8014482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014484:	2200      	movs	r2, #0
 8014486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801448a:	f001 fd07 	bl	8015e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801448e:	1d3a      	adds	r2, r7, #4
 8014490:	f107 0310 	add.w	r3, r7, #16
 8014494:	4611      	mov	r1, r2
 8014496:	4618      	mov	r0, r3
 8014498:	f001 f846 	bl	8015528 <xTaskCheckForTimeOut>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d123      	bne.n	80144ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80144a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144a4:	f000 fa5d 	bl	8014962 <prvIsQueueEmpty>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d017      	beq.n	80144de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80144ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b0:	3324      	adds	r3, #36	; 0x24
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	4611      	mov	r1, r2
 80144b6:	4618      	mov	r0, r3
 80144b8:	f000 ff96 	bl	80153e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80144bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144be:	f000 f9fe 	bl	80148be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80144c2:	f000 fddd 	bl	8015080 <xTaskResumeAll>
 80144c6:	4603      	mov	r3, r0
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d189      	bne.n	80143e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80144cc:	4b0f      	ldr	r3, [pc, #60]	; (801450c <xQueueReceive+0x1c0>)
 80144ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144d2:	601a      	str	r2, [r3, #0]
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	e780      	b.n	80143e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80144de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144e0:	f000 f9ed 	bl	80148be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80144e4:	f000 fdcc 	bl	8015080 <xTaskResumeAll>
 80144e8:	e77a      	b.n	80143e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80144ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144ec:	f000 f9e7 	bl	80148be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80144f0:	f000 fdc6 	bl	8015080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80144f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144f6:	f000 fa34 	bl	8014962 <prvIsQueueEmpty>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	f43f af6f 	beq.w	80143e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014502:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014504:	4618      	mov	r0, r3
 8014506:	3730      	adds	r7, #48	; 0x30
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	e000ed04 	.word	0xe000ed04

08014510 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b08e      	sub	sp, #56	; 0x38
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801451a:	2300      	movs	r3, #0
 801451c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014522:	2300      	movs	r3, #0
 8014524:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014528:	2b00      	cmp	r3, #0
 801452a:	d10b      	bne.n	8014544 <xQueueSemaphoreTake+0x34>
 801452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014530:	b672      	cpsid	i
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	b662      	cpsie	i
 8014540:	623b      	str	r3, [r7, #32]
 8014542:	e7fe      	b.n	8014542 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00b      	beq.n	8014564 <xQueueSemaphoreTake+0x54>
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	b672      	cpsid	i
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	b662      	cpsie	i
 8014560:	61fb      	str	r3, [r7, #28]
 8014562:	e7fe      	b.n	8014562 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014564:	f001 f924 	bl	80157b0 <xTaskGetSchedulerState>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d102      	bne.n	8014574 <xQueueSemaphoreTake+0x64>
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d101      	bne.n	8014578 <xQueueSemaphoreTake+0x68>
 8014574:	2301      	movs	r3, #1
 8014576:	e000      	b.n	801457a <xQueueSemaphoreTake+0x6a>
 8014578:	2300      	movs	r3, #0
 801457a:	2b00      	cmp	r3, #0
 801457c:	d10b      	bne.n	8014596 <xQueueSemaphoreTake+0x86>
 801457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014582:	b672      	cpsid	i
 8014584:	f383 8811 	msr	BASEPRI, r3
 8014588:	f3bf 8f6f 	isb	sy
 801458c:	f3bf 8f4f 	dsb	sy
 8014590:	b662      	cpsie	i
 8014592:	61bb      	str	r3, [r7, #24]
 8014594:	e7fe      	b.n	8014594 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014596:	f001 fc4f 	bl	8015e38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801459e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80145a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d024      	beq.n	80145f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80145a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a8:	1e5a      	subs	r2, r3, #1
 80145aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d104      	bne.n	80145c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80145b6:	f001 fabd 	bl	8015b34 <pvTaskIncrementMutexHeldCount>
 80145ba:	4602      	mov	r2, r0
 80145bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80145c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c2:	691b      	ldr	r3, [r3, #16]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d00f      	beq.n	80145e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80145c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ca:	3310      	adds	r3, #16
 80145cc:	4618      	mov	r0, r3
 80145ce:	f000 ff31 	bl	8015434 <xTaskRemoveFromEventList>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d007      	beq.n	80145e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80145d8:	4b54      	ldr	r3, [pc, #336]	; (801472c <xQueueSemaphoreTake+0x21c>)
 80145da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145de:	601a      	str	r2, [r3, #0]
 80145e0:	f3bf 8f4f 	dsb	sy
 80145e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80145e8:	f001 fc58 	bl	8015e9c <vPortExitCritical>
				return pdPASS;
 80145ec:	2301      	movs	r3, #1
 80145ee:	e098      	b.n	8014722 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d112      	bne.n	801461c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80145f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d00b      	beq.n	8014614 <xQueueSemaphoreTake+0x104>
 80145fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014600:	b672      	cpsid	i
 8014602:	f383 8811 	msr	BASEPRI, r3
 8014606:	f3bf 8f6f 	isb	sy
 801460a:	f3bf 8f4f 	dsb	sy
 801460e:	b662      	cpsie	i
 8014610:	617b      	str	r3, [r7, #20]
 8014612:	e7fe      	b.n	8014612 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014614:	f001 fc42 	bl	8015e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014618:	2300      	movs	r3, #0
 801461a:	e082      	b.n	8014722 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801461e:	2b00      	cmp	r3, #0
 8014620:	d106      	bne.n	8014630 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014622:	f107 030c 	add.w	r3, r7, #12
 8014626:	4618      	mov	r0, r3
 8014628:	f000 ff68 	bl	80154fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801462c:	2301      	movs	r3, #1
 801462e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014630:	f001 fc34 	bl	8015e9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014634:	f000 fd16 	bl	8015064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014638:	f001 fbfe 	bl	8015e38 <vPortEnterCritical>
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014642:	b25b      	sxtb	r3, r3
 8014644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014648:	d103      	bne.n	8014652 <xQueueSemaphoreTake+0x142>
 801464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464c:	2200      	movs	r2, #0
 801464e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014658:	b25b      	sxtb	r3, r3
 801465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465e:	d103      	bne.n	8014668 <xQueueSemaphoreTake+0x158>
 8014660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014662:	2200      	movs	r2, #0
 8014664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014668:	f001 fc18 	bl	8015e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801466c:	463a      	mov	r2, r7
 801466e:	f107 030c 	add.w	r3, r7, #12
 8014672:	4611      	mov	r1, r2
 8014674:	4618      	mov	r0, r3
 8014676:	f000 ff57 	bl	8015528 <xTaskCheckForTimeOut>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d132      	bne.n	80146e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014682:	f000 f96e 	bl	8014962 <prvIsQueueEmpty>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d026      	beq.n	80146da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d109      	bne.n	80146a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014694:	f001 fbd0 	bl	8015e38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	4618      	mov	r0, r3
 801469e:	f001 f8a5 	bl	80157ec <xTaskPriorityInherit>
 80146a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80146a4:	f001 fbfa 	bl	8015e9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80146a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146aa:	3324      	adds	r3, #36	; 0x24
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	4611      	mov	r1, r2
 80146b0:	4618      	mov	r0, r3
 80146b2:	f000 fe99 	bl	80153e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80146b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146b8:	f000 f901 	bl	80148be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80146bc:	f000 fce0 	bl	8015080 <xTaskResumeAll>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	f47f af67 	bne.w	8014596 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80146c8:	4b18      	ldr	r3, [pc, #96]	; (801472c <xQueueSemaphoreTake+0x21c>)
 80146ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146ce:	601a      	str	r2, [r3, #0]
 80146d0:	f3bf 8f4f 	dsb	sy
 80146d4:	f3bf 8f6f 	isb	sy
 80146d8:	e75d      	b.n	8014596 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80146da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146dc:	f000 f8ef 	bl	80148be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146e0:	f000 fcce 	bl	8015080 <xTaskResumeAll>
 80146e4:	e757      	b.n	8014596 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80146e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146e8:	f000 f8e9 	bl	80148be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80146ec:	f000 fcc8 	bl	8015080 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80146f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146f2:	f000 f936 	bl	8014962 <prvIsQueueEmpty>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	f43f af4c 	beq.w	8014596 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80146fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00d      	beq.n	8014720 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014704:	f001 fb98 	bl	8015e38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801470a:	f000 f830 	bl	801476e <prvGetDisinheritPriorityAfterTimeout>
 801470e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014712:	689b      	ldr	r3, [r3, #8]
 8014714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014716:	4618      	mov	r0, r3
 8014718:	f001 f970 	bl	80159fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801471c:	f001 fbbe 	bl	8015e9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014722:	4618      	mov	r0, r3
 8014724:	3738      	adds	r7, #56	; 0x38
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	e000ed04 	.word	0xe000ed04

08014730 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d10b      	bne.n	8014756 <uxQueueMessagesWaiting+0x26>
 801473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014742:	b672      	cpsid	i
 8014744:	f383 8811 	msr	BASEPRI, r3
 8014748:	f3bf 8f6f 	isb	sy
 801474c:	f3bf 8f4f 	dsb	sy
 8014750:	b662      	cpsie	i
 8014752:	60bb      	str	r3, [r7, #8]
 8014754:	e7fe      	b.n	8014754 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8014756:	f001 fb6f 	bl	8015e38 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801475e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014760:	f001 fb9c 	bl	8015e9c <vPortExitCritical>

	return uxReturn;
 8014764:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014766:	4618      	mov	r0, r3
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801476e:	b480      	push	{r7}
 8014770:	b085      	sub	sp, #20
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801477a:	2b00      	cmp	r3, #0
 801477c:	d006      	beq.n	801478c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f1c3 0307 	rsb	r3, r3, #7
 8014788:	60fb      	str	r3, [r7, #12]
 801478a:	e001      	b.n	8014790 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801478c:	2300      	movs	r3, #0
 801478e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014790:	68fb      	ldr	r3, [r7, #12]
	}
 8014792:	4618      	mov	r0, r3
 8014794:	3714      	adds	r7, #20
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr

0801479e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801479e:	b580      	push	{r7, lr}
 80147a0:	b086      	sub	sp, #24
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	60f8      	str	r0, [r7, #12]
 80147a6:	60b9      	str	r1, [r7, #8]
 80147a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80147aa:	2300      	movs	r3, #0
 80147ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d10d      	bne.n	80147d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d14d      	bne.n	8014860 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	689b      	ldr	r3, [r3, #8]
 80147c8:	4618      	mov	r0, r3
 80147ca:	f001 f88f 	bl	80158ec <xTaskPriorityDisinherit>
 80147ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2200      	movs	r2, #0
 80147d4:	609a      	str	r2, [r3, #8]
 80147d6:	e043      	b.n	8014860 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d119      	bne.n	8014812 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	6858      	ldr	r0, [r3, #4]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e6:	461a      	mov	r2, r3
 80147e8:	68b9      	ldr	r1, [r7, #8]
 80147ea:	f001 fe51 	bl	8016490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	685a      	ldr	r2, [r3, #4]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147f6:	441a      	add	r2, r3
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	685a      	ldr	r2, [r3, #4]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	689b      	ldr	r3, [r3, #8]
 8014804:	429a      	cmp	r2, r3
 8014806:	d32b      	bcc.n	8014860 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	605a      	str	r2, [r3, #4]
 8014810:	e026      	b.n	8014860 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	68d8      	ldr	r0, [r3, #12]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801481a:	461a      	mov	r2, r3
 801481c:	68b9      	ldr	r1, [r7, #8]
 801481e:	f001 fe37 	bl	8016490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	68da      	ldr	r2, [r3, #12]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801482a:	425b      	negs	r3, r3
 801482c:	441a      	add	r2, r3
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	68da      	ldr	r2, [r3, #12]
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	429a      	cmp	r2, r3
 801483c:	d207      	bcs.n	801484e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	689a      	ldr	r2, [r3, #8]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014846:	425b      	negs	r3, r3
 8014848:	441a      	add	r2, r3
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b02      	cmp	r3, #2
 8014852:	d105      	bne.n	8014860 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d002      	beq.n	8014860 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	3b01      	subs	r3, #1
 801485e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	1c5a      	adds	r2, r3, #1
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014868:	697b      	ldr	r3, [r7, #20]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3718      	adds	r7, #24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}

08014872 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014872:	b580      	push	{r7, lr}
 8014874:	b082      	sub	sp, #8
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
 801487a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014880:	2b00      	cmp	r3, #0
 8014882:	d018      	beq.n	80148b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	68da      	ldr	r2, [r3, #12]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801488c:	441a      	add	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	68da      	ldr	r2, [r3, #12]
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	689b      	ldr	r3, [r3, #8]
 801489a:	429a      	cmp	r2, r3
 801489c:	d303      	bcc.n	80148a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	68d9      	ldr	r1, [r3, #12]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148ae:	461a      	mov	r2, r3
 80148b0:	6838      	ldr	r0, [r7, #0]
 80148b2:	f001 fded 	bl	8016490 <memcpy>
	}
}
 80148b6:	bf00      	nop
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}

080148be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80148be:	b580      	push	{r7, lr}
 80148c0:	b084      	sub	sp, #16
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80148c6:	f001 fab7 	bl	8015e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148d2:	e011      	b.n	80148f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d012      	beq.n	8014902 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	3324      	adds	r3, #36	; 0x24
 80148e0:	4618      	mov	r0, r3
 80148e2:	f000 fda7 	bl	8015434 <xTaskRemoveFromEventList>
 80148e6:	4603      	mov	r3, r0
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d001      	beq.n	80148f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80148ec:	f000 fe80 	bl	80155f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80148f0:	7bfb      	ldrb	r3, [r7, #15]
 80148f2:	3b01      	subs	r3, #1
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	dce9      	bgt.n	80148d4 <prvUnlockQueue+0x16>
 8014900:	e000      	b.n	8014904 <prvUnlockQueue+0x46>
					break;
 8014902:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	22ff      	movs	r2, #255	; 0xff
 8014908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801490c:	f001 fac6 	bl	8015e9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014910:	f001 fa92 	bl	8015e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801491a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801491c:	e011      	b.n	8014942 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	691b      	ldr	r3, [r3, #16]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d012      	beq.n	801494c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	3310      	adds	r3, #16
 801492a:	4618      	mov	r0, r3
 801492c:	f000 fd82 	bl	8015434 <xTaskRemoveFromEventList>
 8014930:	4603      	mov	r3, r0
 8014932:	2b00      	cmp	r3, #0
 8014934:	d001      	beq.n	801493a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014936:	f000 fe5b 	bl	80155f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801493a:	7bbb      	ldrb	r3, [r7, #14]
 801493c:	3b01      	subs	r3, #1
 801493e:	b2db      	uxtb	r3, r3
 8014940:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014946:	2b00      	cmp	r3, #0
 8014948:	dce9      	bgt.n	801491e <prvUnlockQueue+0x60>
 801494a:	e000      	b.n	801494e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801494c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	22ff      	movs	r2, #255	; 0xff
 8014952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014956:	f001 faa1 	bl	8015e9c <vPortExitCritical>
}
 801495a:	bf00      	nop
 801495c:	3710      	adds	r7, #16
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}

08014962 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014962:	b580      	push	{r7, lr}
 8014964:	b084      	sub	sp, #16
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801496a:	f001 fa65 	bl	8015e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014972:	2b00      	cmp	r3, #0
 8014974:	d102      	bne.n	801497c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014976:	2301      	movs	r3, #1
 8014978:	60fb      	str	r3, [r7, #12]
 801497a:	e001      	b.n	8014980 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801497c:	2300      	movs	r3, #0
 801497e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014980:	f001 fa8c 	bl	8015e9c <vPortExitCritical>

	return xReturn;
 8014984:	68fb      	ldr	r3, [r7, #12]
}
 8014986:	4618      	mov	r0, r3
 8014988:	3710      	adds	r7, #16
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801498e:	b580      	push	{r7, lr}
 8014990:	b084      	sub	sp, #16
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014996:	f001 fa4f 	bl	8015e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d102      	bne.n	80149ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80149a6:	2301      	movs	r3, #1
 80149a8:	60fb      	str	r3, [r7, #12]
 80149aa:	e001      	b.n	80149b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80149ac:	2300      	movs	r3, #0
 80149ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80149b0:	f001 fa74 	bl	8015e9c <vPortExitCritical>

	return xReturn;
 80149b4:	68fb      	ldr	r3, [r7, #12]
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}

080149be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80149be:	b580      	push	{r7, lr}
 80149c0:	b08e      	sub	sp, #56	; 0x38
 80149c2:	af04      	add	r7, sp, #16
 80149c4:	60f8      	str	r0, [r7, #12]
 80149c6:	60b9      	str	r1, [r7, #8]
 80149c8:	607a      	str	r2, [r7, #4]
 80149ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d10b      	bne.n	80149ea <xTaskCreateStatic+0x2c>
 80149d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d6:	b672      	cpsid	i
 80149d8:	f383 8811 	msr	BASEPRI, r3
 80149dc:	f3bf 8f6f 	isb	sy
 80149e0:	f3bf 8f4f 	dsb	sy
 80149e4:	b662      	cpsie	i
 80149e6:	623b      	str	r3, [r7, #32]
 80149e8:	e7fe      	b.n	80149e8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80149ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d10b      	bne.n	8014a08 <xTaskCreateStatic+0x4a>
 80149f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f4:	b672      	cpsid	i
 80149f6:	f383 8811 	msr	BASEPRI, r3
 80149fa:	f3bf 8f6f 	isb	sy
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	b662      	cpsie	i
 8014a04:	61fb      	str	r3, [r7, #28]
 8014a06:	e7fe      	b.n	8014a06 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a08:	2354      	movs	r3, #84	; 0x54
 8014a0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	2b54      	cmp	r3, #84	; 0x54
 8014a10:	d00b      	beq.n	8014a2a <xTaskCreateStatic+0x6c>
 8014a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a16:	b672      	cpsid	i
 8014a18:	f383 8811 	msr	BASEPRI, r3
 8014a1c:	f3bf 8f6f 	isb	sy
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	b662      	cpsie	i
 8014a26:	61bb      	str	r3, [r7, #24]
 8014a28:	e7fe      	b.n	8014a28 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014a2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d01e      	beq.n	8014a70 <xTaskCreateStatic+0xb2>
 8014a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d01b      	beq.n	8014a70 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a44:	2202      	movs	r2, #2
 8014a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	9303      	str	r3, [sp, #12]
 8014a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a50:	9302      	str	r3, [sp, #8]
 8014a52:	f107 0314 	add.w	r3, r7, #20
 8014a56:	9301      	str	r3, [sp, #4]
 8014a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	68b9      	ldr	r1, [r7, #8]
 8014a62:	68f8      	ldr	r0, [r7, #12]
 8014a64:	f000 f850 	bl	8014b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a6a:	f000 f8d5 	bl	8014c18 <prvAddNewTaskToReadyList>
 8014a6e:	e001      	b.n	8014a74 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014a70:	2300      	movs	r3, #0
 8014a72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a74:	697b      	ldr	r3, [r7, #20]
	}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3728      	adds	r7, #40	; 0x28
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b08c      	sub	sp, #48	; 0x30
 8014a82:	af04      	add	r7, sp, #16
 8014a84:	60f8      	str	r0, [r7, #12]
 8014a86:	60b9      	str	r1, [r7, #8]
 8014a88:	603b      	str	r3, [r7, #0]
 8014a8a:	4613      	mov	r3, r2
 8014a8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a8e:	88fb      	ldrh	r3, [r7, #6]
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	4618      	mov	r0, r3
 8014a94:	f001 faf2 	bl	801607c <pvPortMalloc>
 8014a98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d00e      	beq.n	8014abe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014aa0:	2054      	movs	r0, #84	; 0x54
 8014aa2:	f001 faeb 	bl	801607c <pvPortMalloc>
 8014aa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d003      	beq.n	8014ab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014aae:	69fb      	ldr	r3, [r7, #28]
 8014ab0:	697a      	ldr	r2, [r7, #20]
 8014ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8014ab4:	e005      	b.n	8014ac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ab6:	6978      	ldr	r0, [r7, #20]
 8014ab8:	f001 fba8 	bl	801620c <vPortFree>
 8014abc:	e001      	b.n	8014ac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d017      	beq.n	8014af8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	2200      	movs	r2, #0
 8014acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014ad0:	88fa      	ldrh	r2, [r7, #6]
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	9303      	str	r3, [sp, #12]
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	9302      	str	r3, [sp, #8]
 8014ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014adc:	9301      	str	r3, [sp, #4]
 8014ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	68b9      	ldr	r1, [r7, #8]
 8014ae6:	68f8      	ldr	r0, [r7, #12]
 8014ae8:	f000 f80e 	bl	8014b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014aec:	69f8      	ldr	r0, [r7, #28]
 8014aee:	f000 f893 	bl	8014c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014af2:	2301      	movs	r3, #1
 8014af4:	61bb      	str	r3, [r7, #24]
 8014af6:	e002      	b.n	8014afe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014af8:	f04f 33ff 	mov.w	r3, #4294967295
 8014afc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014afe:	69bb      	ldr	r3, [r7, #24]
	}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3720      	adds	r7, #32
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b088      	sub	sp, #32
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]
 8014b14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b1a:	6879      	ldr	r1, [r7, #4]
 8014b1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014b20:	440b      	add	r3, r1
 8014b22:	009b      	lsls	r3, r3, #2
 8014b24:	4413      	add	r3, r2
 8014b26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	f023 0307 	bic.w	r3, r3, #7
 8014b2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	f003 0307 	and.w	r3, r3, #7
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d00b      	beq.n	8014b52 <prvInitialiseNewTask+0x4a>
 8014b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b3e:	b672      	cpsid	i
 8014b40:	f383 8811 	msr	BASEPRI, r3
 8014b44:	f3bf 8f6f 	isb	sy
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	b662      	cpsie	i
 8014b4e:	617b      	str	r3, [r7, #20]
 8014b50:	e7fe      	b.n	8014b50 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d01f      	beq.n	8014b98 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b58:	2300      	movs	r3, #0
 8014b5a:	61fb      	str	r3, [r7, #28]
 8014b5c:	e012      	b.n	8014b84 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b5e:	68ba      	ldr	r2, [r7, #8]
 8014b60:	69fb      	ldr	r3, [r7, #28]
 8014b62:	4413      	add	r3, r2
 8014b64:	7819      	ldrb	r1, [r3, #0]
 8014b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b68:	69fb      	ldr	r3, [r7, #28]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	3334      	adds	r3, #52	; 0x34
 8014b6e:	460a      	mov	r2, r1
 8014b70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b72:	68ba      	ldr	r2, [r7, #8]
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	4413      	add	r3, r2
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d006      	beq.n	8014b8c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b7e:	69fb      	ldr	r3, [r7, #28]
 8014b80:	3301      	adds	r3, #1
 8014b82:	61fb      	str	r3, [r7, #28]
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	2b0f      	cmp	r3, #15
 8014b88:	d9e9      	bls.n	8014b5e <prvInitialiseNewTask+0x56>
 8014b8a:	e000      	b.n	8014b8e <prvInitialiseNewTask+0x86>
			{
				break;
 8014b8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	2200      	movs	r2, #0
 8014b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014b96:	e003      	b.n	8014ba0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba2:	2b06      	cmp	r3, #6
 8014ba4:	d901      	bls.n	8014baa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014ba6:	2306      	movs	r3, #6
 8014ba8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bb4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb8:	2200      	movs	r2, #0
 8014bba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbe:	3304      	adds	r3, #4
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7ff f852 	bl	8013c6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	3318      	adds	r3, #24
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7ff f84d 	bl	8013c6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd8:	f1c3 0207 	rsb	r2, r3, #7
 8014bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014be4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be8:	2200      	movs	r2, #0
 8014bea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bee:	2200      	movs	r2, #0
 8014bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014bf4:	683a      	ldr	r2, [r7, #0]
 8014bf6:	68f9      	ldr	r1, [r7, #12]
 8014bf8:	69b8      	ldr	r0, [r7, #24]
 8014bfa:	f001 f815 	bl	8015c28 <pxPortInitialiseStack>
 8014bfe:	4602      	mov	r2, r0
 8014c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d002      	beq.n	8014c10 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c10:	bf00      	nop
 8014c12:	3720      	adds	r7, #32
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c20:	f001 f90a 	bl	8015e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c24:	4b2a      	ldr	r3, [pc, #168]	; (8014cd0 <prvAddNewTaskToReadyList+0xb8>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	3301      	adds	r3, #1
 8014c2a:	4a29      	ldr	r2, [pc, #164]	; (8014cd0 <prvAddNewTaskToReadyList+0xb8>)
 8014c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c2e:	4b29      	ldr	r3, [pc, #164]	; (8014cd4 <prvAddNewTaskToReadyList+0xbc>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d109      	bne.n	8014c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c36:	4a27      	ldr	r2, [pc, #156]	; (8014cd4 <prvAddNewTaskToReadyList+0xbc>)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014c3c:	4b24      	ldr	r3, [pc, #144]	; (8014cd0 <prvAddNewTaskToReadyList+0xb8>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d110      	bne.n	8014c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014c44:	f000 fcf8 	bl	8015638 <prvInitialiseTaskLists>
 8014c48:	e00d      	b.n	8014c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014c4a:	4b23      	ldr	r3, [pc, #140]	; (8014cd8 <prvAddNewTaskToReadyList+0xc0>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d109      	bne.n	8014c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014c52:	4b20      	ldr	r3, [pc, #128]	; (8014cd4 <prvAddNewTaskToReadyList+0xbc>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d802      	bhi.n	8014c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014c60:	4a1c      	ldr	r2, [pc, #112]	; (8014cd4 <prvAddNewTaskToReadyList+0xbc>)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014c66:	4b1d      	ldr	r3, [pc, #116]	; (8014cdc <prvAddNewTaskToReadyList+0xc4>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	4a1b      	ldr	r2, [pc, #108]	; (8014cdc <prvAddNewTaskToReadyList+0xc4>)
 8014c6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c74:	2201      	movs	r2, #1
 8014c76:	409a      	lsls	r2, r3
 8014c78:	4b19      	ldr	r3, [pc, #100]	; (8014ce0 <prvAddNewTaskToReadyList+0xc8>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	4313      	orrs	r3, r2
 8014c7e:	4a18      	ldr	r2, [pc, #96]	; (8014ce0 <prvAddNewTaskToReadyList+0xc8>)
 8014c80:	6013      	str	r3, [r2, #0]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c86:	4613      	mov	r3, r2
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	4413      	add	r3, r2
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	4a15      	ldr	r2, [pc, #84]	; (8014ce4 <prvAddNewTaskToReadyList+0xcc>)
 8014c90:	441a      	add	r2, r3
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	3304      	adds	r3, #4
 8014c96:	4619      	mov	r1, r3
 8014c98:	4610      	mov	r0, r2
 8014c9a:	f7fe fff3 	bl	8013c84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014c9e:	f001 f8fd 	bl	8015e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014ca2:	4b0d      	ldr	r3, [pc, #52]	; (8014cd8 <prvAddNewTaskToReadyList+0xc0>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d00e      	beq.n	8014cc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014caa:	4b0a      	ldr	r3, [pc, #40]	; (8014cd4 <prvAddNewTaskToReadyList+0xbc>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d207      	bcs.n	8014cc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014cb8:	4b0b      	ldr	r3, [pc, #44]	; (8014ce8 <prvAddNewTaskToReadyList+0xd0>)
 8014cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cbe:	601a      	str	r2, [r3, #0]
 8014cc0:	f3bf 8f4f 	dsb	sy
 8014cc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cc8:	bf00      	nop
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}
 8014cd0:	2000043c 	.word	0x2000043c
 8014cd4:	2000033c 	.word	0x2000033c
 8014cd8:	20000448 	.word	0x20000448
 8014cdc:	20000458 	.word	0x20000458
 8014ce0:	20000444 	.word	0x20000444
 8014ce4:	20000340 	.word	0x20000340
 8014ce8:	e000ed04 	.word	0xe000ed04

08014cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d018      	beq.n	8014d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014cfe:	4b14      	ldr	r3, [pc, #80]	; (8014d50 <vTaskDelay+0x64>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00b      	beq.n	8014d1e <vTaskDelay+0x32>
 8014d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0a:	b672      	cpsid	i
 8014d0c:	f383 8811 	msr	BASEPRI, r3
 8014d10:	f3bf 8f6f 	isb	sy
 8014d14:	f3bf 8f4f 	dsb	sy
 8014d18:	b662      	cpsie	i
 8014d1a:	60bb      	str	r3, [r7, #8]
 8014d1c:	e7fe      	b.n	8014d1c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014d1e:	f000 f9a1 	bl	8015064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014d22:	2100      	movs	r1, #0
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 ff19 	bl	8015b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014d2a:	f000 f9a9 	bl	8015080 <xTaskResumeAll>
 8014d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d107      	bne.n	8014d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014d36:	4b07      	ldr	r3, [pc, #28]	; (8014d54 <vTaskDelay+0x68>)
 8014d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d3c:	601a      	str	r2, [r3, #0]
 8014d3e:	f3bf 8f4f 	dsb	sy
 8014d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d46:	bf00      	nop
 8014d48:	3710      	adds	r7, #16
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	20000464 	.word	0x20000464
 8014d54:	e000ed04 	.word	0xe000ed04

08014d58 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014d60:	f001 f86a 	bl	8015e38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d102      	bne.n	8014d70 <vTaskSuspend+0x18>
 8014d6a:	4b3d      	ldr	r3, [pc, #244]	; (8014e60 <vTaskSuspend+0x108>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	e000      	b.n	8014d72 <vTaskSuspend+0x1a>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	3304      	adds	r3, #4
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7fe ffe0 	bl	8013d3e <uxListRemove>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d115      	bne.n	8014db0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d88:	4936      	ldr	r1, [pc, #216]	; (8014e64 <vTaskSuspend+0x10c>)
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	4413      	add	r3, r2
 8014d90:	009b      	lsls	r3, r3, #2
 8014d92:	440b      	add	r3, r1
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d10a      	bne.n	8014db0 <vTaskSuspend+0x58>
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d9e:	2201      	movs	r2, #1
 8014da0:	fa02 f303 	lsl.w	r3, r2, r3
 8014da4:	43da      	mvns	r2, r3
 8014da6:	4b30      	ldr	r3, [pc, #192]	; (8014e68 <vTaskSuspend+0x110>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	4013      	ands	r3, r2
 8014dac:	4a2e      	ldr	r2, [pc, #184]	; (8014e68 <vTaskSuspend+0x110>)
 8014dae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d004      	beq.n	8014dc2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	3318      	adds	r3, #24
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7fe ffbe 	bl	8013d3e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	3304      	adds	r3, #4
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	4828      	ldr	r0, [pc, #160]	; (8014e6c <vTaskSuspend+0x114>)
 8014dca:	f7fe ff5b 	bl	8013c84 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d103      	bne.n	8014de2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014de2:	f001 f85b 	bl	8015e9c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014de6:	4b22      	ldr	r3, [pc, #136]	; (8014e70 <vTaskSuspend+0x118>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d005      	beq.n	8014dfa <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014dee:	f001 f823 	bl	8015e38 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014df2:	f000 fcbd 	bl	8015770 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014df6:	f001 f851 	bl	8015e9c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014dfa:	4b19      	ldr	r3, [pc, #100]	; (8014e60 <vTaskSuspend+0x108>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d128      	bne.n	8014e56 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8014e04:	4b1a      	ldr	r3, [pc, #104]	; (8014e70 <vTaskSuspend+0x118>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d018      	beq.n	8014e3e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014e0c:	4b19      	ldr	r3, [pc, #100]	; (8014e74 <vTaskSuspend+0x11c>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d00b      	beq.n	8014e2c <vTaskSuspend+0xd4>
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	b672      	cpsid	i
 8014e1a:	f383 8811 	msr	BASEPRI, r3
 8014e1e:	f3bf 8f6f 	isb	sy
 8014e22:	f3bf 8f4f 	dsb	sy
 8014e26:	b662      	cpsie	i
 8014e28:	60bb      	str	r3, [r7, #8]
 8014e2a:	e7fe      	b.n	8014e2a <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 8014e2c:	4b12      	ldr	r3, [pc, #72]	; (8014e78 <vTaskSuspend+0x120>)
 8014e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e32:	601a      	str	r2, [r3, #0]
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e3c:	e00b      	b.n	8014e56 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014e3e:	4b0b      	ldr	r3, [pc, #44]	; (8014e6c <vTaskSuspend+0x114>)
 8014e40:	681a      	ldr	r2, [r3, #0]
 8014e42:	4b0e      	ldr	r3, [pc, #56]	; (8014e7c <vTaskSuspend+0x124>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d103      	bne.n	8014e52 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8014e4a:	4b05      	ldr	r3, [pc, #20]	; (8014e60 <vTaskSuspend+0x108>)
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	601a      	str	r2, [r3, #0]
	}
 8014e50:	e001      	b.n	8014e56 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8014e52:	f000 fa6d 	bl	8015330 <vTaskSwitchContext>
	}
 8014e56:	bf00      	nop
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	2000033c 	.word	0x2000033c
 8014e64:	20000340 	.word	0x20000340
 8014e68:	20000444 	.word	0x20000444
 8014e6c:	20000428 	.word	0x20000428
 8014e70:	20000448 	.word	0x20000448
 8014e74:	20000464 	.word	0x20000464
 8014e78:	e000ed04 	.word	0xe000ed04
 8014e7c:	2000043c 	.word	0x2000043c

08014e80 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014e80:	b480      	push	{r7}
 8014e82:	b087      	sub	sp, #28
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d10b      	bne.n	8014eae <prvTaskIsTaskSuspended+0x2e>
 8014e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9a:	b672      	cpsid	i
 8014e9c:	f383 8811 	msr	BASEPRI, r3
 8014ea0:	f3bf 8f6f 	isb	sy
 8014ea4:	f3bf 8f4f 	dsb	sy
 8014ea8:	b662      	cpsie	i
 8014eaa:	60fb      	str	r3, [r7, #12]
 8014eac:	e7fe      	b.n	8014eac <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	695b      	ldr	r3, [r3, #20]
 8014eb2:	4a0a      	ldr	r2, [pc, #40]	; (8014edc <prvTaskIsTaskSuspended+0x5c>)
 8014eb4:	4293      	cmp	r3, r2
 8014eb6:	d10a      	bne.n	8014ece <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ebc:	4a08      	ldr	r2, [pc, #32]	; (8014ee0 <prvTaskIsTaskSuspended+0x60>)
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	d005      	beq.n	8014ece <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d101      	bne.n	8014ece <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8014eca:	2301      	movs	r3, #1
 8014ecc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ece:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	371c      	adds	r7, #28
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr
 8014edc:	20000428 	.word	0x20000428
 8014ee0:	200003fc 	.word	0x200003fc

08014ee4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d10b      	bne.n	8014f0e <vTaskResume+0x2a>
 8014ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efa:	b672      	cpsid	i
 8014efc:	f383 8811 	msr	BASEPRI, r3
 8014f00:	f3bf 8f6f 	isb	sy
 8014f04:	f3bf 8f4f 	dsb	sy
 8014f08:	b662      	cpsie	i
 8014f0a:	60bb      	str	r3, [r7, #8]
 8014f0c:	e7fe      	b.n	8014f0c <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014f0e:	4b20      	ldr	r3, [pc, #128]	; (8014f90 <vTaskResume+0xac>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	68fa      	ldr	r2, [r7, #12]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d037      	beq.n	8014f88 <vTaskResume+0xa4>
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d034      	beq.n	8014f88 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8014f1e:	f000 ff8b 	bl	8015e38 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014f22:	68f8      	ldr	r0, [r7, #12]
 8014f24:	f7ff ffac 	bl	8014e80 <prvTaskIsTaskSuspended>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d02a      	beq.n	8014f84 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	3304      	adds	r3, #4
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fe ff03 	bl	8013d3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	409a      	lsls	r2, r3
 8014f40:	4b14      	ldr	r3, [pc, #80]	; (8014f94 <vTaskResume+0xb0>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	4313      	orrs	r3, r2
 8014f46:	4a13      	ldr	r2, [pc, #76]	; (8014f94 <vTaskResume+0xb0>)
 8014f48:	6013      	str	r3, [r2, #0]
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f4e:	4613      	mov	r3, r2
 8014f50:	009b      	lsls	r3, r3, #2
 8014f52:	4413      	add	r3, r2
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	4a10      	ldr	r2, [pc, #64]	; (8014f98 <vTaskResume+0xb4>)
 8014f58:	441a      	add	r2, r3
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	3304      	adds	r3, #4
 8014f5e:	4619      	mov	r1, r3
 8014f60:	4610      	mov	r0, r2
 8014f62:	f7fe fe8f 	bl	8013c84 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f6a:	4b09      	ldr	r3, [pc, #36]	; (8014f90 <vTaskResume+0xac>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d307      	bcc.n	8014f84 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014f74:	4b09      	ldr	r3, [pc, #36]	; (8014f9c <vTaskResume+0xb8>)
 8014f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f7a:	601a      	str	r2, [r3, #0]
 8014f7c:	f3bf 8f4f 	dsb	sy
 8014f80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014f84:	f000 ff8a 	bl	8015e9c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f88:	bf00      	nop
 8014f8a:	3710      	adds	r7, #16
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	2000033c 	.word	0x2000033c
 8014f94:	20000444 	.word	0x20000444
 8014f98:	20000340 	.word	0x20000340
 8014f9c:	e000ed04 	.word	0xe000ed04

08014fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b08a      	sub	sp, #40	; 0x28
 8014fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014faa:	2300      	movs	r3, #0
 8014fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014fae:	463a      	mov	r2, r7
 8014fb0:	1d39      	adds	r1, r7, #4
 8014fb2:	f107 0308 	add.w	r3, r7, #8
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7f6 fd52 	bl	800ba60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014fbc:	6839      	ldr	r1, [r7, #0]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	68ba      	ldr	r2, [r7, #8]
 8014fc2:	9202      	str	r2, [sp, #8]
 8014fc4:	9301      	str	r3, [sp, #4]
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	2300      	movs	r3, #0
 8014fcc:	460a      	mov	r2, r1
 8014fce:	491f      	ldr	r1, [pc, #124]	; (801504c <vTaskStartScheduler+0xac>)
 8014fd0:	481f      	ldr	r0, [pc, #124]	; (8015050 <vTaskStartScheduler+0xb0>)
 8014fd2:	f7ff fcf4 	bl	80149be <xTaskCreateStatic>
 8014fd6:	4602      	mov	r2, r0
 8014fd8:	4b1e      	ldr	r3, [pc, #120]	; (8015054 <vTaskStartScheduler+0xb4>)
 8014fda:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014fdc:	4b1d      	ldr	r3, [pc, #116]	; (8015054 <vTaskStartScheduler+0xb4>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d002      	beq.n	8014fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	617b      	str	r3, [r7, #20]
 8014fe8:	e001      	b.n	8014fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014fea:	2300      	movs	r3, #0
 8014fec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d117      	bne.n	8015024 <vTaskStartScheduler+0x84>
 8014ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff8:	b672      	cpsid	i
 8014ffa:	f383 8811 	msr	BASEPRI, r3
 8014ffe:	f3bf 8f6f 	isb	sy
 8015002:	f3bf 8f4f 	dsb	sy
 8015006:	b662      	cpsie	i
 8015008:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801500a:	4b13      	ldr	r3, [pc, #76]	; (8015058 <vTaskStartScheduler+0xb8>)
 801500c:	f04f 32ff 	mov.w	r2, #4294967295
 8015010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015012:	4b12      	ldr	r3, [pc, #72]	; (801505c <vTaskStartScheduler+0xbc>)
 8015014:	2201      	movs	r2, #1
 8015016:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015018:	4b11      	ldr	r3, [pc, #68]	; (8015060 <vTaskStartScheduler+0xc0>)
 801501a:	2200      	movs	r2, #0
 801501c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801501e:	f000 fe8f 	bl	8015d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015022:	e00f      	b.n	8015044 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801502a:	d10b      	bne.n	8015044 <vTaskStartScheduler+0xa4>
 801502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015030:	b672      	cpsid	i
 8015032:	f383 8811 	msr	BASEPRI, r3
 8015036:	f3bf 8f6f 	isb	sy
 801503a:	f3bf 8f4f 	dsb	sy
 801503e:	b662      	cpsie	i
 8015040:	60fb      	str	r3, [r7, #12]
 8015042:	e7fe      	b.n	8015042 <vTaskStartScheduler+0xa2>
}
 8015044:	bf00      	nop
 8015046:	3718      	adds	r7, #24
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	08016788 	.word	0x08016788
 8015050:	08015609 	.word	0x08015609
 8015054:	20000460 	.word	0x20000460
 8015058:	2000045c 	.word	0x2000045c
 801505c:	20000448 	.word	0x20000448
 8015060:	20000440 	.word	0x20000440

08015064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015064:	b480      	push	{r7}
 8015066:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015068:	4b04      	ldr	r3, [pc, #16]	; (801507c <vTaskSuspendAll+0x18>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	3301      	adds	r3, #1
 801506e:	4a03      	ldr	r2, [pc, #12]	; (801507c <vTaskSuspendAll+0x18>)
 8015070:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015072:	bf00      	nop
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr
 801507c:	20000464 	.word	0x20000464

08015080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015086:	2300      	movs	r3, #0
 8015088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801508a:	2300      	movs	r3, #0
 801508c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801508e:	4b42      	ldr	r3, [pc, #264]	; (8015198 <xTaskResumeAll+0x118>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d10b      	bne.n	80150ae <xTaskResumeAll+0x2e>
 8015096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509a:	b672      	cpsid	i
 801509c:	f383 8811 	msr	BASEPRI, r3
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	b662      	cpsie	i
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	e7fe      	b.n	80150ac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80150ae:	f000 fec3 	bl	8015e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80150b2:	4b39      	ldr	r3, [pc, #228]	; (8015198 <xTaskResumeAll+0x118>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	3b01      	subs	r3, #1
 80150b8:	4a37      	ldr	r2, [pc, #220]	; (8015198 <xTaskResumeAll+0x118>)
 80150ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150bc:	4b36      	ldr	r3, [pc, #216]	; (8015198 <xTaskResumeAll+0x118>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d161      	bne.n	8015188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80150c4:	4b35      	ldr	r3, [pc, #212]	; (801519c <xTaskResumeAll+0x11c>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d05d      	beq.n	8015188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150cc:	e02e      	b.n	801512c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150ce:	4b34      	ldr	r3, [pc, #208]	; (80151a0 <xTaskResumeAll+0x120>)
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	68db      	ldr	r3, [r3, #12]
 80150d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	3318      	adds	r3, #24
 80150da:	4618      	mov	r0, r3
 80150dc:	f7fe fe2f 	bl	8013d3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	3304      	adds	r3, #4
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fe fe2a 	bl	8013d3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ee:	2201      	movs	r2, #1
 80150f0:	409a      	lsls	r2, r3
 80150f2:	4b2c      	ldr	r3, [pc, #176]	; (80151a4 <xTaskResumeAll+0x124>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	4313      	orrs	r3, r2
 80150f8:	4a2a      	ldr	r2, [pc, #168]	; (80151a4 <xTaskResumeAll+0x124>)
 80150fa:	6013      	str	r3, [r2, #0]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015100:	4613      	mov	r3, r2
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	4413      	add	r3, r2
 8015106:	009b      	lsls	r3, r3, #2
 8015108:	4a27      	ldr	r2, [pc, #156]	; (80151a8 <xTaskResumeAll+0x128>)
 801510a:	441a      	add	r2, r3
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	3304      	adds	r3, #4
 8015110:	4619      	mov	r1, r3
 8015112:	4610      	mov	r0, r2
 8015114:	f7fe fdb6 	bl	8013c84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801511c:	4b23      	ldr	r3, [pc, #140]	; (80151ac <xTaskResumeAll+0x12c>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015122:	429a      	cmp	r2, r3
 8015124:	d302      	bcc.n	801512c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015126:	4b22      	ldr	r3, [pc, #136]	; (80151b0 <xTaskResumeAll+0x130>)
 8015128:	2201      	movs	r2, #1
 801512a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801512c:	4b1c      	ldr	r3, [pc, #112]	; (80151a0 <xTaskResumeAll+0x120>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d1cc      	bne.n	80150ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d001      	beq.n	801513e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801513a:	f000 fb19 	bl	8015770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801513e:	4b1d      	ldr	r3, [pc, #116]	; (80151b4 <xTaskResumeAll+0x134>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d010      	beq.n	801516c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801514a:	f000 f837 	bl	80151bc <xTaskIncrementTick>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d002      	beq.n	801515a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015154:	4b16      	ldr	r3, [pc, #88]	; (80151b0 <xTaskResumeAll+0x130>)
 8015156:	2201      	movs	r2, #1
 8015158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	3b01      	subs	r3, #1
 801515e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d1f1      	bne.n	801514a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8015166:	4b13      	ldr	r3, [pc, #76]	; (80151b4 <xTaskResumeAll+0x134>)
 8015168:	2200      	movs	r2, #0
 801516a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801516c:	4b10      	ldr	r3, [pc, #64]	; (80151b0 <xTaskResumeAll+0x130>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d009      	beq.n	8015188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015174:	2301      	movs	r3, #1
 8015176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015178:	4b0f      	ldr	r3, [pc, #60]	; (80151b8 <xTaskResumeAll+0x138>)
 801517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801517e:	601a      	str	r2, [r3, #0]
 8015180:	f3bf 8f4f 	dsb	sy
 8015184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015188:	f000 fe88 	bl	8015e9c <vPortExitCritical>

	return xAlreadyYielded;
 801518c:	68bb      	ldr	r3, [r7, #8]
}
 801518e:	4618      	mov	r0, r3
 8015190:	3710      	adds	r7, #16
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	20000464 	.word	0x20000464
 801519c:	2000043c 	.word	0x2000043c
 80151a0:	200003fc 	.word	0x200003fc
 80151a4:	20000444 	.word	0x20000444
 80151a8:	20000340 	.word	0x20000340
 80151ac:	2000033c 	.word	0x2000033c
 80151b0:	20000450 	.word	0x20000450
 80151b4:	2000044c 	.word	0x2000044c
 80151b8:	e000ed04 	.word	0xe000ed04

080151bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b086      	sub	sp, #24
 80151c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80151c2:	2300      	movs	r3, #0
 80151c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151c6:	4b4f      	ldr	r3, [pc, #316]	; (8015304 <xTaskIncrementTick+0x148>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	f040 8089 	bne.w	80152e2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80151d0:	4b4d      	ldr	r3, [pc, #308]	; (8015308 <xTaskIncrementTick+0x14c>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	3301      	adds	r3, #1
 80151d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80151d8:	4a4b      	ldr	r2, [pc, #300]	; (8015308 <xTaskIncrementTick+0x14c>)
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d121      	bne.n	8015228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80151e4:	4b49      	ldr	r3, [pc, #292]	; (801530c <xTaskIncrementTick+0x150>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d00b      	beq.n	8015206 <xTaskIncrementTick+0x4a>
 80151ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f2:	b672      	cpsid	i
 80151f4:	f383 8811 	msr	BASEPRI, r3
 80151f8:	f3bf 8f6f 	isb	sy
 80151fc:	f3bf 8f4f 	dsb	sy
 8015200:	b662      	cpsie	i
 8015202:	603b      	str	r3, [r7, #0]
 8015204:	e7fe      	b.n	8015204 <xTaskIncrementTick+0x48>
 8015206:	4b41      	ldr	r3, [pc, #260]	; (801530c <xTaskIncrementTick+0x150>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	60fb      	str	r3, [r7, #12]
 801520c:	4b40      	ldr	r3, [pc, #256]	; (8015310 <xTaskIncrementTick+0x154>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4a3e      	ldr	r2, [pc, #248]	; (801530c <xTaskIncrementTick+0x150>)
 8015212:	6013      	str	r3, [r2, #0]
 8015214:	4a3e      	ldr	r2, [pc, #248]	; (8015310 <xTaskIncrementTick+0x154>)
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	6013      	str	r3, [r2, #0]
 801521a:	4b3e      	ldr	r3, [pc, #248]	; (8015314 <xTaskIncrementTick+0x158>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	3301      	adds	r3, #1
 8015220:	4a3c      	ldr	r2, [pc, #240]	; (8015314 <xTaskIncrementTick+0x158>)
 8015222:	6013      	str	r3, [r2, #0]
 8015224:	f000 faa4 	bl	8015770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015228:	4b3b      	ldr	r3, [pc, #236]	; (8015318 <xTaskIncrementTick+0x15c>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	693a      	ldr	r2, [r7, #16]
 801522e:	429a      	cmp	r2, r3
 8015230:	d348      	bcc.n	80152c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015232:	4b36      	ldr	r3, [pc, #216]	; (801530c <xTaskIncrementTick+0x150>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d104      	bne.n	8015246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801523c:	4b36      	ldr	r3, [pc, #216]	; (8015318 <xTaskIncrementTick+0x15c>)
 801523e:	f04f 32ff 	mov.w	r2, #4294967295
 8015242:	601a      	str	r2, [r3, #0]
					break;
 8015244:	e03e      	b.n	80152c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015246:	4b31      	ldr	r3, [pc, #196]	; (801530c <xTaskIncrementTick+0x150>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015256:	693a      	ldr	r2, [r7, #16]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	429a      	cmp	r2, r3
 801525c:	d203      	bcs.n	8015266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801525e:	4a2e      	ldr	r2, [pc, #184]	; (8015318 <xTaskIncrementTick+0x15c>)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015264:	e02e      	b.n	80152c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	3304      	adds	r3, #4
 801526a:	4618      	mov	r0, r3
 801526c:	f7fe fd67 	bl	8013d3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015274:	2b00      	cmp	r3, #0
 8015276:	d004      	beq.n	8015282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	3318      	adds	r3, #24
 801527c:	4618      	mov	r0, r3
 801527e:	f7fe fd5e 	bl	8013d3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015286:	2201      	movs	r2, #1
 8015288:	409a      	lsls	r2, r3
 801528a:	4b24      	ldr	r3, [pc, #144]	; (801531c <xTaskIncrementTick+0x160>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	4313      	orrs	r3, r2
 8015290:	4a22      	ldr	r2, [pc, #136]	; (801531c <xTaskIncrementTick+0x160>)
 8015292:	6013      	str	r3, [r2, #0]
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015298:	4613      	mov	r3, r2
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	4413      	add	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4a1f      	ldr	r2, [pc, #124]	; (8015320 <xTaskIncrementTick+0x164>)
 80152a2:	441a      	add	r2, r3
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	3304      	adds	r3, #4
 80152a8:	4619      	mov	r1, r3
 80152aa:	4610      	mov	r0, r2
 80152ac:	f7fe fcea 	bl	8013c84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b4:	4b1b      	ldr	r3, [pc, #108]	; (8015324 <xTaskIncrementTick+0x168>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d3b9      	bcc.n	8015232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80152be:	2301      	movs	r3, #1
 80152c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152c2:	e7b6      	b.n	8015232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80152c4:	4b17      	ldr	r3, [pc, #92]	; (8015324 <xTaskIncrementTick+0x168>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ca:	4915      	ldr	r1, [pc, #84]	; (8015320 <xTaskIncrementTick+0x164>)
 80152cc:	4613      	mov	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4413      	add	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	440b      	add	r3, r1
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d907      	bls.n	80152ec <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80152dc:	2301      	movs	r3, #1
 80152de:	617b      	str	r3, [r7, #20]
 80152e0:	e004      	b.n	80152ec <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80152e2:	4b11      	ldr	r3, [pc, #68]	; (8015328 <xTaskIncrementTick+0x16c>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	3301      	adds	r3, #1
 80152e8:	4a0f      	ldr	r2, [pc, #60]	; (8015328 <xTaskIncrementTick+0x16c>)
 80152ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80152ec:	4b0f      	ldr	r3, [pc, #60]	; (801532c <xTaskIncrementTick+0x170>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d001      	beq.n	80152f8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80152f4:	2301      	movs	r3, #1
 80152f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80152f8:	697b      	ldr	r3, [r7, #20]
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3718      	adds	r7, #24
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	20000464 	.word	0x20000464
 8015308:	20000440 	.word	0x20000440
 801530c:	200003f4 	.word	0x200003f4
 8015310:	200003f8 	.word	0x200003f8
 8015314:	20000454 	.word	0x20000454
 8015318:	2000045c 	.word	0x2000045c
 801531c:	20000444 	.word	0x20000444
 8015320:	20000340 	.word	0x20000340
 8015324:	2000033c 	.word	0x2000033c
 8015328:	2000044c 	.word	0x2000044c
 801532c:	20000450 	.word	0x20000450

08015330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015330:	b480      	push	{r7}
 8015332:	b087      	sub	sp, #28
 8015334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015336:	4b27      	ldr	r3, [pc, #156]	; (80153d4 <vTaskSwitchContext+0xa4>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d003      	beq.n	8015346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801533e:	4b26      	ldr	r3, [pc, #152]	; (80153d8 <vTaskSwitchContext+0xa8>)
 8015340:	2201      	movs	r2, #1
 8015342:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015344:	e040      	b.n	80153c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8015346:	4b24      	ldr	r3, [pc, #144]	; (80153d8 <vTaskSwitchContext+0xa8>)
 8015348:	2200      	movs	r2, #0
 801534a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801534c:	4b23      	ldr	r3, [pc, #140]	; (80153dc <vTaskSwitchContext+0xac>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	fab3 f383 	clz	r3, r3
 8015358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801535a:	7afb      	ldrb	r3, [r7, #11]
 801535c:	f1c3 031f 	rsb	r3, r3, #31
 8015360:	617b      	str	r3, [r7, #20]
 8015362:	491f      	ldr	r1, [pc, #124]	; (80153e0 <vTaskSwitchContext+0xb0>)
 8015364:	697a      	ldr	r2, [r7, #20]
 8015366:	4613      	mov	r3, r2
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	4413      	add	r3, r2
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	440b      	add	r3, r1
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d10b      	bne.n	801538e <vTaskSwitchContext+0x5e>
	__asm volatile
 8015376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537a:	b672      	cpsid	i
 801537c:	f383 8811 	msr	BASEPRI, r3
 8015380:	f3bf 8f6f 	isb	sy
 8015384:	f3bf 8f4f 	dsb	sy
 8015388:	b662      	cpsie	i
 801538a:	607b      	str	r3, [r7, #4]
 801538c:	e7fe      	b.n	801538c <vTaskSwitchContext+0x5c>
 801538e:	697a      	ldr	r2, [r7, #20]
 8015390:	4613      	mov	r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4413      	add	r3, r2
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	4a11      	ldr	r2, [pc, #68]	; (80153e0 <vTaskSwitchContext+0xb0>)
 801539a:	4413      	add	r3, r2
 801539c:	613b      	str	r3, [r7, #16]
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	685a      	ldr	r2, [r3, #4]
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	605a      	str	r2, [r3, #4]
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	685a      	ldr	r2, [r3, #4]
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	3308      	adds	r3, #8
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d104      	bne.n	80153be <vTaskSwitchContext+0x8e>
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	685a      	ldr	r2, [r3, #4]
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	605a      	str	r2, [r3, #4]
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	685b      	ldr	r3, [r3, #4]
 80153c2:	68db      	ldr	r3, [r3, #12]
 80153c4:	4a07      	ldr	r2, [pc, #28]	; (80153e4 <vTaskSwitchContext+0xb4>)
 80153c6:	6013      	str	r3, [r2, #0]
}
 80153c8:	bf00      	nop
 80153ca:	371c      	adds	r7, #28
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr
 80153d4:	20000464 	.word	0x20000464
 80153d8:	20000450 	.word	0x20000450
 80153dc:	20000444 	.word	0x20000444
 80153e0:	20000340 	.word	0x20000340
 80153e4:	2000033c 	.word	0x2000033c

080153e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d10b      	bne.n	8015410 <vTaskPlaceOnEventList+0x28>
 80153f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153fc:	b672      	cpsid	i
 80153fe:	f383 8811 	msr	BASEPRI, r3
 8015402:	f3bf 8f6f 	isb	sy
 8015406:	f3bf 8f4f 	dsb	sy
 801540a:	b662      	cpsie	i
 801540c:	60fb      	str	r3, [r7, #12]
 801540e:	e7fe      	b.n	801540e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015410:	4b07      	ldr	r3, [pc, #28]	; (8015430 <vTaskPlaceOnEventList+0x48>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	3318      	adds	r3, #24
 8015416:	4619      	mov	r1, r3
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7fe fc57 	bl	8013ccc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801541e:	2101      	movs	r1, #1
 8015420:	6838      	ldr	r0, [r7, #0]
 8015422:	f000 fb9b 	bl	8015b5c <prvAddCurrentTaskToDelayedList>
}
 8015426:	bf00      	nop
 8015428:	3710      	adds	r7, #16
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	2000033c 	.word	0x2000033c

08015434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b086      	sub	sp, #24
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	68db      	ldr	r3, [r3, #12]
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d10b      	bne.n	8015462 <xTaskRemoveFromEventList+0x2e>
 801544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801544e:	b672      	cpsid	i
 8015450:	f383 8811 	msr	BASEPRI, r3
 8015454:	f3bf 8f6f 	isb	sy
 8015458:	f3bf 8f4f 	dsb	sy
 801545c:	b662      	cpsie	i
 801545e:	60fb      	str	r3, [r7, #12]
 8015460:	e7fe      	b.n	8015460 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	3318      	adds	r3, #24
 8015466:	4618      	mov	r0, r3
 8015468:	f7fe fc69 	bl	8013d3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801546c:	4b1d      	ldr	r3, [pc, #116]	; (80154e4 <xTaskRemoveFromEventList+0xb0>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d11c      	bne.n	80154ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	3304      	adds	r3, #4
 8015478:	4618      	mov	r0, r3
 801547a:	f7fe fc60 	bl	8013d3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015482:	2201      	movs	r2, #1
 8015484:	409a      	lsls	r2, r3
 8015486:	4b18      	ldr	r3, [pc, #96]	; (80154e8 <xTaskRemoveFromEventList+0xb4>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	4313      	orrs	r3, r2
 801548c:	4a16      	ldr	r2, [pc, #88]	; (80154e8 <xTaskRemoveFromEventList+0xb4>)
 801548e:	6013      	str	r3, [r2, #0]
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015494:	4613      	mov	r3, r2
 8015496:	009b      	lsls	r3, r3, #2
 8015498:	4413      	add	r3, r2
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	4a13      	ldr	r2, [pc, #76]	; (80154ec <xTaskRemoveFromEventList+0xb8>)
 801549e:	441a      	add	r2, r3
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	3304      	adds	r3, #4
 80154a4:	4619      	mov	r1, r3
 80154a6:	4610      	mov	r0, r2
 80154a8:	f7fe fbec 	bl	8013c84 <vListInsertEnd>
 80154ac:	e005      	b.n	80154ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	3318      	adds	r3, #24
 80154b2:	4619      	mov	r1, r3
 80154b4:	480e      	ldr	r0, [pc, #56]	; (80154f0 <xTaskRemoveFromEventList+0xbc>)
 80154b6:	f7fe fbe5 	bl	8013c84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154be:	4b0d      	ldr	r3, [pc, #52]	; (80154f4 <xTaskRemoveFromEventList+0xc0>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d905      	bls.n	80154d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80154c8:	2301      	movs	r3, #1
 80154ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80154cc:	4b0a      	ldr	r3, [pc, #40]	; (80154f8 <xTaskRemoveFromEventList+0xc4>)
 80154ce:	2201      	movs	r2, #1
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	e001      	b.n	80154d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80154d4:	2300      	movs	r3, #0
 80154d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80154d8:	697b      	ldr	r3, [r7, #20]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3718      	adds	r7, #24
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop
 80154e4:	20000464 	.word	0x20000464
 80154e8:	20000444 	.word	0x20000444
 80154ec:	20000340 	.word	0x20000340
 80154f0:	200003fc 	.word	0x200003fc
 80154f4:	2000033c 	.word	0x2000033c
 80154f8:	20000450 	.word	0x20000450

080154fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80154fc:	b480      	push	{r7}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015504:	4b06      	ldr	r3, [pc, #24]	; (8015520 <vTaskInternalSetTimeOutState+0x24>)
 8015506:	681a      	ldr	r2, [r3, #0]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801550c:	4b05      	ldr	r3, [pc, #20]	; (8015524 <vTaskInternalSetTimeOutState+0x28>)
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	605a      	str	r2, [r3, #4]
}
 8015514:	bf00      	nop
 8015516:	370c      	adds	r7, #12
 8015518:	46bd      	mov	sp, r7
 801551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551e:	4770      	bx	lr
 8015520:	20000454 	.word	0x20000454
 8015524:	20000440 	.word	0x20000440

08015528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b088      	sub	sp, #32
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10b      	bne.n	8015550 <xTaskCheckForTimeOut+0x28>
 8015538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801553c:	b672      	cpsid	i
 801553e:	f383 8811 	msr	BASEPRI, r3
 8015542:	f3bf 8f6f 	isb	sy
 8015546:	f3bf 8f4f 	dsb	sy
 801554a:	b662      	cpsie	i
 801554c:	613b      	str	r3, [r7, #16]
 801554e:	e7fe      	b.n	801554e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d10b      	bne.n	801556e <xTaskCheckForTimeOut+0x46>
 8015556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801555a:	b672      	cpsid	i
 801555c:	f383 8811 	msr	BASEPRI, r3
 8015560:	f3bf 8f6f 	isb	sy
 8015564:	f3bf 8f4f 	dsb	sy
 8015568:	b662      	cpsie	i
 801556a:	60fb      	str	r3, [r7, #12]
 801556c:	e7fe      	b.n	801556c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801556e:	f000 fc63 	bl	8015e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015572:	4b1d      	ldr	r3, [pc, #116]	; (80155e8 <xTaskCheckForTimeOut+0xc0>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	69ba      	ldr	r2, [r7, #24]
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801558a:	d102      	bne.n	8015592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801558c:	2300      	movs	r3, #0
 801558e:	61fb      	str	r3, [r7, #28]
 8015590:	e023      	b.n	80155da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	4b15      	ldr	r3, [pc, #84]	; (80155ec <xTaskCheckForTimeOut+0xc4>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	429a      	cmp	r2, r3
 801559c:	d007      	beq.n	80155ae <xTaskCheckForTimeOut+0x86>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	69ba      	ldr	r2, [r7, #24]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d302      	bcc.n	80155ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80155a8:	2301      	movs	r3, #1
 80155aa:	61fb      	str	r3, [r7, #28]
 80155ac:	e015      	b.n	80155da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	697a      	ldr	r2, [r7, #20]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d20b      	bcs.n	80155d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	681a      	ldr	r2, [r3, #0]
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	1ad2      	subs	r2, r2, r3
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7ff ff99 	bl	80154fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80155ca:	2300      	movs	r3, #0
 80155cc:	61fb      	str	r3, [r7, #28]
 80155ce:	e004      	b.n	80155da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	2200      	movs	r2, #0
 80155d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80155d6:	2301      	movs	r3, #1
 80155d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80155da:	f000 fc5f 	bl	8015e9c <vPortExitCritical>

	return xReturn;
 80155de:	69fb      	ldr	r3, [r7, #28]
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3720      	adds	r7, #32
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	20000440 	.word	0x20000440
 80155ec:	20000454 	.word	0x20000454

080155f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80155f0:	b480      	push	{r7}
 80155f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80155f4:	4b03      	ldr	r3, [pc, #12]	; (8015604 <vTaskMissedYield+0x14>)
 80155f6:	2201      	movs	r2, #1
 80155f8:	601a      	str	r2, [r3, #0]
}
 80155fa:	bf00      	nop
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr
 8015604:	20000450 	.word	0x20000450

08015608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015610:	f000 f852 	bl	80156b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015614:	4b06      	ldr	r3, [pc, #24]	; (8015630 <prvIdleTask+0x28>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b01      	cmp	r3, #1
 801561a:	d9f9      	bls.n	8015610 <prvIdleTask+0x8>
			{
				taskYIELD();
 801561c:	4b05      	ldr	r3, [pc, #20]	; (8015634 <prvIdleTask+0x2c>)
 801561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015622:	601a      	str	r2, [r3, #0]
 8015624:	f3bf 8f4f 	dsb	sy
 8015628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801562c:	e7f0      	b.n	8015610 <prvIdleTask+0x8>
 801562e:	bf00      	nop
 8015630:	20000340 	.word	0x20000340
 8015634:	e000ed04 	.word	0xe000ed04

08015638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801563e:	2300      	movs	r3, #0
 8015640:	607b      	str	r3, [r7, #4]
 8015642:	e00c      	b.n	801565e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	4613      	mov	r3, r2
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	4413      	add	r3, r2
 801564c:	009b      	lsls	r3, r3, #2
 801564e:	4a12      	ldr	r2, [pc, #72]	; (8015698 <prvInitialiseTaskLists+0x60>)
 8015650:	4413      	add	r3, r2
 8015652:	4618      	mov	r0, r3
 8015654:	f7fe fae9 	bl	8013c2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	3301      	adds	r3, #1
 801565c:	607b      	str	r3, [r7, #4]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2b06      	cmp	r3, #6
 8015662:	d9ef      	bls.n	8015644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015664:	480d      	ldr	r0, [pc, #52]	; (801569c <prvInitialiseTaskLists+0x64>)
 8015666:	f7fe fae0 	bl	8013c2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801566a:	480d      	ldr	r0, [pc, #52]	; (80156a0 <prvInitialiseTaskLists+0x68>)
 801566c:	f7fe fadd 	bl	8013c2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015670:	480c      	ldr	r0, [pc, #48]	; (80156a4 <prvInitialiseTaskLists+0x6c>)
 8015672:	f7fe fada 	bl	8013c2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015676:	480c      	ldr	r0, [pc, #48]	; (80156a8 <prvInitialiseTaskLists+0x70>)
 8015678:	f7fe fad7 	bl	8013c2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801567c:	480b      	ldr	r0, [pc, #44]	; (80156ac <prvInitialiseTaskLists+0x74>)
 801567e:	f7fe fad4 	bl	8013c2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015682:	4b0b      	ldr	r3, [pc, #44]	; (80156b0 <prvInitialiseTaskLists+0x78>)
 8015684:	4a05      	ldr	r2, [pc, #20]	; (801569c <prvInitialiseTaskLists+0x64>)
 8015686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015688:	4b0a      	ldr	r3, [pc, #40]	; (80156b4 <prvInitialiseTaskLists+0x7c>)
 801568a:	4a05      	ldr	r2, [pc, #20]	; (80156a0 <prvInitialiseTaskLists+0x68>)
 801568c:	601a      	str	r2, [r3, #0]
}
 801568e:	bf00      	nop
 8015690:	3708      	adds	r7, #8
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
 8015696:	bf00      	nop
 8015698:	20000340 	.word	0x20000340
 801569c:	200003cc 	.word	0x200003cc
 80156a0:	200003e0 	.word	0x200003e0
 80156a4:	200003fc 	.word	0x200003fc
 80156a8:	20000410 	.word	0x20000410
 80156ac:	20000428 	.word	0x20000428
 80156b0:	200003f4 	.word	0x200003f4
 80156b4:	200003f8 	.word	0x200003f8

080156b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80156be:	e019      	b.n	80156f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80156c0:	f000 fbba 	bl	8015e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156c4:	4b0f      	ldr	r3, [pc, #60]	; (8015704 <prvCheckTasksWaitingTermination+0x4c>)
 80156c6:	68db      	ldr	r3, [r3, #12]
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	3304      	adds	r3, #4
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7fe fb34 	bl	8013d3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80156d6:	4b0c      	ldr	r3, [pc, #48]	; (8015708 <prvCheckTasksWaitingTermination+0x50>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	3b01      	subs	r3, #1
 80156dc:	4a0a      	ldr	r2, [pc, #40]	; (8015708 <prvCheckTasksWaitingTermination+0x50>)
 80156de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80156e0:	4b0a      	ldr	r3, [pc, #40]	; (801570c <prvCheckTasksWaitingTermination+0x54>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	3b01      	subs	r3, #1
 80156e6:	4a09      	ldr	r2, [pc, #36]	; (801570c <prvCheckTasksWaitingTermination+0x54>)
 80156e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80156ea:	f000 fbd7 	bl	8015e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f000 f80e 	bl	8015710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80156f4:	4b05      	ldr	r3, [pc, #20]	; (801570c <prvCheckTasksWaitingTermination+0x54>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d1e1      	bne.n	80156c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80156fc:	bf00      	nop
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	20000410 	.word	0x20000410
 8015708:	2000043c 	.word	0x2000043c
 801570c:	20000424 	.word	0x20000424

08015710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801571e:	2b00      	cmp	r3, #0
 8015720:	d108      	bne.n	8015734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015726:	4618      	mov	r0, r3
 8015728:	f000 fd70 	bl	801620c <vPortFree>
				vPortFree( pxTCB );
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f000 fd6d 	bl	801620c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015732:	e019      	b.n	8015768 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801573a:	2b01      	cmp	r3, #1
 801573c:	d103      	bne.n	8015746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f000 fd64 	bl	801620c <vPortFree>
	}
 8015744:	e010      	b.n	8015768 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801574c:	2b02      	cmp	r3, #2
 801574e:	d00b      	beq.n	8015768 <prvDeleteTCB+0x58>
 8015750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015754:	b672      	cpsid	i
 8015756:	f383 8811 	msr	BASEPRI, r3
 801575a:	f3bf 8f6f 	isb	sy
 801575e:	f3bf 8f4f 	dsb	sy
 8015762:	b662      	cpsie	i
 8015764:	60fb      	str	r3, [r7, #12]
 8015766:	e7fe      	b.n	8015766 <prvDeleteTCB+0x56>
	}
 8015768:	bf00      	nop
 801576a:	3710      	adds	r7, #16
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015770:	b480      	push	{r7}
 8015772:	b083      	sub	sp, #12
 8015774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015776:	4b0c      	ldr	r3, [pc, #48]	; (80157a8 <prvResetNextTaskUnblockTime+0x38>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d104      	bne.n	801578a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015780:	4b0a      	ldr	r3, [pc, #40]	; (80157ac <prvResetNextTaskUnblockTime+0x3c>)
 8015782:	f04f 32ff 	mov.w	r2, #4294967295
 8015786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015788:	e008      	b.n	801579c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801578a:	4b07      	ldr	r3, [pc, #28]	; (80157a8 <prvResetNextTaskUnblockTime+0x38>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	68db      	ldr	r3, [r3, #12]
 8015792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	4a04      	ldr	r2, [pc, #16]	; (80157ac <prvResetNextTaskUnblockTime+0x3c>)
 801579a:	6013      	str	r3, [r2, #0]
}
 801579c:	bf00      	nop
 801579e:	370c      	adds	r7, #12
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr
 80157a8:	200003f4 	.word	0x200003f4
 80157ac:	2000045c 	.word	0x2000045c

080157b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80157b6:	4b0b      	ldr	r3, [pc, #44]	; (80157e4 <xTaskGetSchedulerState+0x34>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d102      	bne.n	80157c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80157be:	2301      	movs	r3, #1
 80157c0:	607b      	str	r3, [r7, #4]
 80157c2:	e008      	b.n	80157d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157c4:	4b08      	ldr	r3, [pc, #32]	; (80157e8 <xTaskGetSchedulerState+0x38>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d102      	bne.n	80157d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80157cc:	2302      	movs	r3, #2
 80157ce:	607b      	str	r3, [r7, #4]
 80157d0:	e001      	b.n	80157d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80157d2:	2300      	movs	r3, #0
 80157d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80157d6:	687b      	ldr	r3, [r7, #4]
	}
 80157d8:	4618      	mov	r0, r3
 80157da:	370c      	adds	r7, #12
 80157dc:	46bd      	mov	sp, r7
 80157de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e2:	4770      	bx	lr
 80157e4:	20000448 	.word	0x20000448
 80157e8:	20000464 	.word	0x20000464

080157ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80157f8:	2300      	movs	r3, #0
 80157fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d069      	beq.n	80158d6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015806:	4b36      	ldr	r3, [pc, #216]	; (80158e0 <xTaskPriorityInherit+0xf4>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801580c:	429a      	cmp	r2, r3
 801580e:	d259      	bcs.n	80158c4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	699b      	ldr	r3, [r3, #24]
 8015814:	2b00      	cmp	r3, #0
 8015816:	db06      	blt.n	8015826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015818:	4b31      	ldr	r3, [pc, #196]	; (80158e0 <xTaskPriorityInherit+0xf4>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801581e:	f1c3 0207 	rsb	r2, r3, #7
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	6959      	ldr	r1, [r3, #20]
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801582e:	4613      	mov	r3, r2
 8015830:	009b      	lsls	r3, r3, #2
 8015832:	4413      	add	r3, r2
 8015834:	009b      	lsls	r3, r3, #2
 8015836:	4a2b      	ldr	r2, [pc, #172]	; (80158e4 <xTaskPriorityInherit+0xf8>)
 8015838:	4413      	add	r3, r2
 801583a:	4299      	cmp	r1, r3
 801583c:	d13a      	bne.n	80158b4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	3304      	adds	r3, #4
 8015842:	4618      	mov	r0, r3
 8015844:	f7fe fa7b 	bl	8013d3e <uxListRemove>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d115      	bne.n	801587a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015852:	4924      	ldr	r1, [pc, #144]	; (80158e4 <xTaskPriorityInherit+0xf8>)
 8015854:	4613      	mov	r3, r2
 8015856:	009b      	lsls	r3, r3, #2
 8015858:	4413      	add	r3, r2
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	440b      	add	r3, r1
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d10a      	bne.n	801587a <xTaskPriorityInherit+0x8e>
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015868:	2201      	movs	r2, #1
 801586a:	fa02 f303 	lsl.w	r3, r2, r3
 801586e:	43da      	mvns	r2, r3
 8015870:	4b1d      	ldr	r3, [pc, #116]	; (80158e8 <xTaskPriorityInherit+0xfc>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	4013      	ands	r3, r2
 8015876:	4a1c      	ldr	r2, [pc, #112]	; (80158e8 <xTaskPriorityInherit+0xfc>)
 8015878:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801587a:	4b19      	ldr	r3, [pc, #100]	; (80158e0 <xTaskPriorityInherit+0xf4>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015888:	2201      	movs	r2, #1
 801588a:	409a      	lsls	r2, r3
 801588c:	4b16      	ldr	r3, [pc, #88]	; (80158e8 <xTaskPriorityInherit+0xfc>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	4313      	orrs	r3, r2
 8015892:	4a15      	ldr	r2, [pc, #84]	; (80158e8 <xTaskPriorityInherit+0xfc>)
 8015894:	6013      	str	r3, [r2, #0]
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801589a:	4613      	mov	r3, r2
 801589c:	009b      	lsls	r3, r3, #2
 801589e:	4413      	add	r3, r2
 80158a0:	009b      	lsls	r3, r3, #2
 80158a2:	4a10      	ldr	r2, [pc, #64]	; (80158e4 <xTaskPriorityInherit+0xf8>)
 80158a4:	441a      	add	r2, r3
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	3304      	adds	r3, #4
 80158aa:	4619      	mov	r1, r3
 80158ac:	4610      	mov	r0, r2
 80158ae:	f7fe f9e9 	bl	8013c84 <vListInsertEnd>
 80158b2:	e004      	b.n	80158be <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80158b4:	4b0a      	ldr	r3, [pc, #40]	; (80158e0 <xTaskPriorityInherit+0xf4>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80158be:	2301      	movs	r3, #1
 80158c0:	60fb      	str	r3, [r7, #12]
 80158c2:	e008      	b.n	80158d6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80158c8:	4b05      	ldr	r3, [pc, #20]	; (80158e0 <xTaskPriorityInherit+0xf4>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d201      	bcs.n	80158d6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80158d2:	2301      	movs	r3, #1
 80158d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80158d6:	68fb      	ldr	r3, [r7, #12]
	}
 80158d8:	4618      	mov	r0, r3
 80158da:	3710      	adds	r7, #16
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	2000033c 	.word	0x2000033c
 80158e4:	20000340 	.word	0x20000340
 80158e8:	20000444 	.word	0x20000444

080158ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b086      	sub	sp, #24
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80158f8:	2300      	movs	r3, #0
 80158fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d070      	beq.n	80159e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015902:	4b3b      	ldr	r3, [pc, #236]	; (80159f0 <xTaskPriorityDisinherit+0x104>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	693a      	ldr	r2, [r7, #16]
 8015908:	429a      	cmp	r2, r3
 801590a:	d00b      	beq.n	8015924 <xTaskPriorityDisinherit+0x38>
 801590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015910:	b672      	cpsid	i
 8015912:	f383 8811 	msr	BASEPRI, r3
 8015916:	f3bf 8f6f 	isb	sy
 801591a:	f3bf 8f4f 	dsb	sy
 801591e:	b662      	cpsie	i
 8015920:	60fb      	str	r3, [r7, #12]
 8015922:	e7fe      	b.n	8015922 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10b      	bne.n	8015944 <xTaskPriorityDisinherit+0x58>
 801592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015930:	b672      	cpsid	i
 8015932:	f383 8811 	msr	BASEPRI, r3
 8015936:	f3bf 8f6f 	isb	sy
 801593a:	f3bf 8f4f 	dsb	sy
 801593e:	b662      	cpsie	i
 8015940:	60bb      	str	r3, [r7, #8]
 8015942:	e7fe      	b.n	8015942 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015948:	1e5a      	subs	r2, r3, #1
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015956:	429a      	cmp	r2, r3
 8015958:	d044      	beq.n	80159e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801595e:	2b00      	cmp	r3, #0
 8015960:	d140      	bne.n	80159e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015962:	693b      	ldr	r3, [r7, #16]
 8015964:	3304      	adds	r3, #4
 8015966:	4618      	mov	r0, r3
 8015968:	f7fe f9e9 	bl	8013d3e <uxListRemove>
 801596c:	4603      	mov	r3, r0
 801596e:	2b00      	cmp	r3, #0
 8015970:	d115      	bne.n	801599e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015976:	491f      	ldr	r1, [pc, #124]	; (80159f4 <xTaskPriorityDisinherit+0x108>)
 8015978:	4613      	mov	r3, r2
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	4413      	add	r3, r2
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	440b      	add	r3, r1
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d10a      	bne.n	801599e <xTaskPriorityDisinherit+0xb2>
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801598c:	2201      	movs	r2, #1
 801598e:	fa02 f303 	lsl.w	r3, r2, r3
 8015992:	43da      	mvns	r2, r3
 8015994:	4b18      	ldr	r3, [pc, #96]	; (80159f8 <xTaskPriorityDisinherit+0x10c>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4013      	ands	r3, r2
 801599a:	4a17      	ldr	r2, [pc, #92]	; (80159f8 <xTaskPriorityDisinherit+0x10c>)
 801599c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159aa:	f1c3 0207 	rsb	r2, r3, #7
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b6:	2201      	movs	r2, #1
 80159b8:	409a      	lsls	r2, r3
 80159ba:	4b0f      	ldr	r3, [pc, #60]	; (80159f8 <xTaskPriorityDisinherit+0x10c>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4313      	orrs	r3, r2
 80159c0:	4a0d      	ldr	r2, [pc, #52]	; (80159f8 <xTaskPriorityDisinherit+0x10c>)
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159c8:	4613      	mov	r3, r2
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	4413      	add	r3, r2
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	4a08      	ldr	r2, [pc, #32]	; (80159f4 <xTaskPriorityDisinherit+0x108>)
 80159d2:	441a      	add	r2, r3
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	3304      	adds	r3, #4
 80159d8:	4619      	mov	r1, r3
 80159da:	4610      	mov	r0, r2
 80159dc:	f7fe f952 	bl	8013c84 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80159e0:	2301      	movs	r3, #1
 80159e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80159e4:	697b      	ldr	r3, [r7, #20]
	}
 80159e6:	4618      	mov	r0, r3
 80159e8:	3718      	adds	r7, #24
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	2000033c 	.word	0x2000033c
 80159f4:	20000340 	.word	0x20000340
 80159f8:	20000444 	.word	0x20000444

080159fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b088      	sub	sp, #32
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	f000 8085 	beq.w	8015b20 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d10b      	bne.n	8015a36 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8015a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a22:	b672      	cpsid	i
 8015a24:	f383 8811 	msr	BASEPRI, r3
 8015a28:	f3bf 8f6f 	isb	sy
 8015a2c:	f3bf 8f4f 	dsb	sy
 8015a30:	b662      	cpsie	i
 8015a32:	60fb      	str	r3, [r7, #12]
 8015a34:	e7fe      	b.n	8015a34 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d902      	bls.n	8015a46 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	61fb      	str	r3, [r7, #28]
 8015a44:	e002      	b.n	8015a4c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015a4c:	69bb      	ldr	r3, [r7, #24]
 8015a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a50:	69fa      	ldr	r2, [r7, #28]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d064      	beq.n	8015b20 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015a56:	69bb      	ldr	r3, [r7, #24]
 8015a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a5a:	697a      	ldr	r2, [r7, #20]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d15f      	bne.n	8015b20 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015a60:	4b31      	ldr	r3, [pc, #196]	; (8015b28 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	69ba      	ldr	r2, [r7, #24]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d10b      	bne.n	8015a82 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8015a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a6e:	b672      	cpsid	i
 8015a70:	f383 8811 	msr	BASEPRI, r3
 8015a74:	f3bf 8f6f 	isb	sy
 8015a78:	f3bf 8f4f 	dsb	sy
 8015a7c:	b662      	cpsie	i
 8015a7e:	60bb      	str	r3, [r7, #8]
 8015a80:	e7fe      	b.n	8015a80 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015a82:	69bb      	ldr	r3, [r7, #24]
 8015a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a86:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015a88:	69bb      	ldr	r3, [r7, #24]
 8015a8a:	69fa      	ldr	r2, [r7, #28]
 8015a8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	699b      	ldr	r3, [r3, #24]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	db04      	blt.n	8015aa0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	f1c3 0207 	rsb	r2, r3, #7
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	6959      	ldr	r1, [r3, #20]
 8015aa4:	693a      	ldr	r2, [r7, #16]
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	4413      	add	r3, r2
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	4a1f      	ldr	r2, [pc, #124]	; (8015b2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015ab0:	4413      	add	r3, r2
 8015ab2:	4299      	cmp	r1, r3
 8015ab4:	d134      	bne.n	8015b20 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ab6:	69bb      	ldr	r3, [r7, #24]
 8015ab8:	3304      	adds	r3, #4
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fe f93f 	bl	8013d3e <uxListRemove>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d115      	bne.n	8015af2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ac6:	69bb      	ldr	r3, [r7, #24]
 8015ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aca:	4918      	ldr	r1, [pc, #96]	; (8015b2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015acc:	4613      	mov	r3, r2
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	4413      	add	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	440b      	add	r3, r1
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d10a      	bne.n	8015af2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8015adc:	69bb      	ldr	r3, [r7, #24]
 8015ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae0:	2201      	movs	r2, #1
 8015ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ae6:	43da      	mvns	r2, r3
 8015ae8:	4b11      	ldr	r3, [pc, #68]	; (8015b30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4013      	ands	r3, r2
 8015aee:	4a10      	ldr	r2, [pc, #64]	; (8015b30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015af0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015af2:	69bb      	ldr	r3, [r7, #24]
 8015af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015af6:	2201      	movs	r2, #1
 8015af8:	409a      	lsls	r2, r3
 8015afa:	4b0d      	ldr	r3, [pc, #52]	; (8015b30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	4313      	orrs	r3, r2
 8015b00:	4a0b      	ldr	r2, [pc, #44]	; (8015b30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015b02:	6013      	str	r3, [r2, #0]
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b08:	4613      	mov	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	4413      	add	r3, r2
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	4a06      	ldr	r2, [pc, #24]	; (8015b2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015b12:	441a      	add	r2, r3
 8015b14:	69bb      	ldr	r3, [r7, #24]
 8015b16:	3304      	adds	r3, #4
 8015b18:	4619      	mov	r1, r3
 8015b1a:	4610      	mov	r0, r2
 8015b1c:	f7fe f8b2 	bl	8013c84 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b20:	bf00      	nop
 8015b22:	3720      	adds	r7, #32
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	2000033c 	.word	0x2000033c
 8015b2c:	20000340 	.word	0x20000340
 8015b30:	20000444 	.word	0x20000444

08015b34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015b34:	b480      	push	{r7}
 8015b36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015b38:	4b07      	ldr	r3, [pc, #28]	; (8015b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d004      	beq.n	8015b4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015b40:	4b05      	ldr	r3, [pc, #20]	; (8015b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015b46:	3201      	adds	r2, #1
 8015b48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8015b4a:	4b03      	ldr	r3, [pc, #12]	; (8015b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
	}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	46bd      	mov	sp, r7
 8015b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b56:	4770      	bx	lr
 8015b58:	2000033c 	.word	0x2000033c

08015b5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b084      	sub	sp, #16
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015b66:	4b29      	ldr	r3, [pc, #164]	; (8015c0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b6c:	4b28      	ldr	r3, [pc, #160]	; (8015c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	3304      	adds	r3, #4
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fe f8e3 	bl	8013d3e <uxListRemove>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d10b      	bne.n	8015b96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015b7e:	4b24      	ldr	r3, [pc, #144]	; (8015c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b84:	2201      	movs	r2, #1
 8015b86:	fa02 f303 	lsl.w	r3, r2, r3
 8015b8a:	43da      	mvns	r2, r3
 8015b8c:	4b21      	ldr	r3, [pc, #132]	; (8015c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	4013      	ands	r3, r2
 8015b92:	4a20      	ldr	r2, [pc, #128]	; (8015c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015b94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b9c:	d10a      	bne.n	8015bb4 <prvAddCurrentTaskToDelayedList+0x58>
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d007      	beq.n	8015bb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015ba4:	4b1a      	ldr	r3, [pc, #104]	; (8015c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	3304      	adds	r3, #4
 8015baa:	4619      	mov	r1, r3
 8015bac:	481a      	ldr	r0, [pc, #104]	; (8015c18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015bae:	f7fe f869 	bl	8013c84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015bb2:	e026      	b.n	8015c02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	4413      	add	r3, r2
 8015bba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015bbc:	4b14      	ldr	r3, [pc, #80]	; (8015c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	68ba      	ldr	r2, [r7, #8]
 8015bc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015bc4:	68ba      	ldr	r2, [r7, #8]
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d209      	bcs.n	8015be0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bcc:	4b13      	ldr	r3, [pc, #76]	; (8015c1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	4b0f      	ldr	r3, [pc, #60]	; (8015c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	3304      	adds	r3, #4
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4610      	mov	r0, r2
 8015bda:	f7fe f877 	bl	8013ccc <vListInsert>
}
 8015bde:	e010      	b.n	8015c02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015be0:	4b0f      	ldr	r3, [pc, #60]	; (8015c20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	4b0a      	ldr	r3, [pc, #40]	; (8015c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	3304      	adds	r3, #4
 8015bea:	4619      	mov	r1, r3
 8015bec:	4610      	mov	r0, r2
 8015bee:	f7fe f86d 	bl	8013ccc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015bf2:	4b0c      	ldr	r3, [pc, #48]	; (8015c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	68ba      	ldr	r2, [r7, #8]
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d202      	bcs.n	8015c02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015bfc:	4a09      	ldr	r2, [pc, #36]	; (8015c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	6013      	str	r3, [r2, #0]
}
 8015c02:	bf00      	nop
 8015c04:	3710      	adds	r7, #16
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	20000440 	.word	0x20000440
 8015c10:	2000033c 	.word	0x2000033c
 8015c14:	20000444 	.word	0x20000444
 8015c18:	20000428 	.word	0x20000428
 8015c1c:	200003f8 	.word	0x200003f8
 8015c20:	200003f4 	.word	0x200003f4
 8015c24:	2000045c 	.word	0x2000045c

08015c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015c28:	b480      	push	{r7}
 8015c2a:	b085      	sub	sp, #20
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	60f8      	str	r0, [r7, #12]
 8015c30:	60b9      	str	r1, [r7, #8]
 8015c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	3b04      	subs	r3, #4
 8015c38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	3b04      	subs	r3, #4
 8015c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	f023 0201 	bic.w	r2, r3, #1
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	3b04      	subs	r3, #4
 8015c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015c58:	4a0c      	ldr	r2, [pc, #48]	; (8015c8c <pxPortInitialiseStack+0x64>)
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	3b14      	subs	r3, #20
 8015c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	3b04      	subs	r3, #4
 8015c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	f06f 0202 	mvn.w	r2, #2
 8015c76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	3b20      	subs	r3, #32
 8015c7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3714      	adds	r7, #20
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	08015c91 	.word	0x08015c91

08015c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015c90:	b480      	push	{r7}
 8015c92:	b085      	sub	sp, #20
 8015c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015c96:	2300      	movs	r3, #0
 8015c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015c9a:	4b13      	ldr	r3, [pc, #76]	; (8015ce8 <prvTaskExitError+0x58>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca2:	d00b      	beq.n	8015cbc <prvTaskExitError+0x2c>
 8015ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca8:	b672      	cpsid	i
 8015caa:	f383 8811 	msr	BASEPRI, r3
 8015cae:	f3bf 8f6f 	isb	sy
 8015cb2:	f3bf 8f4f 	dsb	sy
 8015cb6:	b662      	cpsie	i
 8015cb8:	60fb      	str	r3, [r7, #12]
 8015cba:	e7fe      	b.n	8015cba <prvTaskExitError+0x2a>
 8015cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc0:	b672      	cpsid	i
 8015cc2:	f383 8811 	msr	BASEPRI, r3
 8015cc6:	f3bf 8f6f 	isb	sy
 8015cca:	f3bf 8f4f 	dsb	sy
 8015cce:	b662      	cpsie	i
 8015cd0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015cd2:	bf00      	nop
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d0fc      	beq.n	8015cd4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015cda:	bf00      	nop
 8015cdc:	3714      	adds	r7, #20
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop
 8015ce8:	20000020 	.word	0x20000020
 8015cec:	00000000 	.word	0x00000000

08015cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015cf0:	4b07      	ldr	r3, [pc, #28]	; (8015d10 <pxCurrentTCBConst2>)
 8015cf2:	6819      	ldr	r1, [r3, #0]
 8015cf4:	6808      	ldr	r0, [r1, #0]
 8015cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfa:	f380 8809 	msr	PSP, r0
 8015cfe:	f3bf 8f6f 	isb	sy
 8015d02:	f04f 0000 	mov.w	r0, #0
 8015d06:	f380 8811 	msr	BASEPRI, r0
 8015d0a:	4770      	bx	lr
 8015d0c:	f3af 8000 	nop.w

08015d10 <pxCurrentTCBConst2>:
 8015d10:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015d14:	bf00      	nop
 8015d16:	bf00      	nop

08015d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015d18:	4808      	ldr	r0, [pc, #32]	; (8015d3c <prvPortStartFirstTask+0x24>)
 8015d1a:	6800      	ldr	r0, [r0, #0]
 8015d1c:	6800      	ldr	r0, [r0, #0]
 8015d1e:	f380 8808 	msr	MSP, r0
 8015d22:	f04f 0000 	mov.w	r0, #0
 8015d26:	f380 8814 	msr	CONTROL, r0
 8015d2a:	b662      	cpsie	i
 8015d2c:	b661      	cpsie	f
 8015d2e:	f3bf 8f4f 	dsb	sy
 8015d32:	f3bf 8f6f 	isb	sy
 8015d36:	df00      	svc	0
 8015d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015d3a:	bf00      	nop
 8015d3c:	e000ed08 	.word	0xe000ed08

08015d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015d46:	4b36      	ldr	r3, [pc, #216]	; (8015e20 <xPortStartScheduler+0xe0>)
 8015d48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	22ff      	movs	r2, #255	; 0xff
 8015d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015d60:	78fb      	ldrb	r3, [r7, #3]
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015d68:	b2da      	uxtb	r2, r3
 8015d6a:	4b2e      	ldr	r3, [pc, #184]	; (8015e24 <xPortStartScheduler+0xe4>)
 8015d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015d6e:	4b2e      	ldr	r3, [pc, #184]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015d70:	2207      	movs	r2, #7
 8015d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d74:	e009      	b.n	8015d8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015d76:	4b2c      	ldr	r3, [pc, #176]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	4a2a      	ldr	r2, [pc, #168]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015d80:	78fb      	ldrb	r3, [r7, #3]
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d8a:	78fb      	ldrb	r3, [r7, #3]
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d92:	2b80      	cmp	r3, #128	; 0x80
 8015d94:	d0ef      	beq.n	8015d76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015d96:	4b24      	ldr	r3, [pc, #144]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	f1c3 0307 	rsb	r3, r3, #7
 8015d9e:	2b04      	cmp	r3, #4
 8015da0:	d00b      	beq.n	8015dba <xPortStartScheduler+0x7a>
 8015da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da6:	b672      	cpsid	i
 8015da8:	f383 8811 	msr	BASEPRI, r3
 8015dac:	f3bf 8f6f 	isb	sy
 8015db0:	f3bf 8f4f 	dsb	sy
 8015db4:	b662      	cpsie	i
 8015db6:	60bb      	str	r3, [r7, #8]
 8015db8:	e7fe      	b.n	8015db8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015dba:	4b1b      	ldr	r3, [pc, #108]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	021b      	lsls	r3, r3, #8
 8015dc0:	4a19      	ldr	r2, [pc, #100]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015dc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015dc4:	4b18      	ldr	r3, [pc, #96]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015dcc:	4a16      	ldr	r2, [pc, #88]	; (8015e28 <xPortStartScheduler+0xe8>)
 8015dce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	b2da      	uxtb	r2, r3
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015dd8:	4b14      	ldr	r3, [pc, #80]	; (8015e2c <xPortStartScheduler+0xec>)
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	4a13      	ldr	r2, [pc, #76]	; (8015e2c <xPortStartScheduler+0xec>)
 8015dde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015de2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015de4:	4b11      	ldr	r3, [pc, #68]	; (8015e2c <xPortStartScheduler+0xec>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	4a10      	ldr	r2, [pc, #64]	; (8015e2c <xPortStartScheduler+0xec>)
 8015dea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015dee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015df0:	f000 f8d4 	bl	8015f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015df4:	4b0e      	ldr	r3, [pc, #56]	; (8015e30 <xPortStartScheduler+0xf0>)
 8015df6:	2200      	movs	r2, #0
 8015df8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015dfa:	f000 f8f3 	bl	8015fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015dfe:	4b0d      	ldr	r3, [pc, #52]	; (8015e34 <xPortStartScheduler+0xf4>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	4a0c      	ldr	r2, [pc, #48]	; (8015e34 <xPortStartScheduler+0xf4>)
 8015e04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015e08:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015e0a:	f7ff ff85 	bl	8015d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015e0e:	f7ff fa8f 	bl	8015330 <vTaskSwitchContext>
	prvTaskExitError();
 8015e12:	f7ff ff3d 	bl	8015c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015e16:	2300      	movs	r3, #0
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3710      	adds	r7, #16
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	e000e400 	.word	0xe000e400
 8015e24:	20000468 	.word	0x20000468
 8015e28:	2000046c 	.word	0x2000046c
 8015e2c:	e000ed20 	.word	0xe000ed20
 8015e30:	20000020 	.word	0x20000020
 8015e34:	e000ef34 	.word	0xe000ef34

08015e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015e38:	b480      	push	{r7}
 8015e3a:	b083      	sub	sp, #12
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e42:	b672      	cpsid	i
 8015e44:	f383 8811 	msr	BASEPRI, r3
 8015e48:	f3bf 8f6f 	isb	sy
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	b662      	cpsie	i
 8015e52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015e54:	4b0f      	ldr	r3, [pc, #60]	; (8015e94 <vPortEnterCritical+0x5c>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	4a0e      	ldr	r2, [pc, #56]	; (8015e94 <vPortEnterCritical+0x5c>)
 8015e5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015e5e:	4b0d      	ldr	r3, [pc, #52]	; (8015e94 <vPortEnterCritical+0x5c>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	2b01      	cmp	r3, #1
 8015e64:	d110      	bne.n	8015e88 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015e66:	4b0c      	ldr	r3, [pc, #48]	; (8015e98 <vPortEnterCritical+0x60>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00b      	beq.n	8015e88 <vPortEnterCritical+0x50>
 8015e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e74:	b672      	cpsid	i
 8015e76:	f383 8811 	msr	BASEPRI, r3
 8015e7a:	f3bf 8f6f 	isb	sy
 8015e7e:	f3bf 8f4f 	dsb	sy
 8015e82:	b662      	cpsie	i
 8015e84:	603b      	str	r3, [r7, #0]
 8015e86:	e7fe      	b.n	8015e86 <vPortEnterCritical+0x4e>
	}
}
 8015e88:	bf00      	nop
 8015e8a:	370c      	adds	r7, #12
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e92:	4770      	bx	lr
 8015e94:	20000020 	.word	0x20000020
 8015e98:	e000ed04 	.word	0xe000ed04

08015e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b083      	sub	sp, #12
 8015ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015ea2:	4b12      	ldr	r3, [pc, #72]	; (8015eec <vPortExitCritical+0x50>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d10b      	bne.n	8015ec2 <vPortExitCritical+0x26>
 8015eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eae:	b672      	cpsid	i
 8015eb0:	f383 8811 	msr	BASEPRI, r3
 8015eb4:	f3bf 8f6f 	isb	sy
 8015eb8:	f3bf 8f4f 	dsb	sy
 8015ebc:	b662      	cpsie	i
 8015ebe:	607b      	str	r3, [r7, #4]
 8015ec0:	e7fe      	b.n	8015ec0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015ec2:	4b0a      	ldr	r3, [pc, #40]	; (8015eec <vPortExitCritical+0x50>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	3b01      	subs	r3, #1
 8015ec8:	4a08      	ldr	r2, [pc, #32]	; (8015eec <vPortExitCritical+0x50>)
 8015eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015ecc:	4b07      	ldr	r3, [pc, #28]	; (8015eec <vPortExitCritical+0x50>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d104      	bne.n	8015ede <vPortExitCritical+0x42>
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015ede:	bf00      	nop
 8015ee0:	370c      	adds	r7, #12
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee8:	4770      	bx	lr
 8015eea:	bf00      	nop
 8015eec:	20000020 	.word	0x20000020

08015ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015ef0:	f3ef 8009 	mrs	r0, PSP
 8015ef4:	f3bf 8f6f 	isb	sy
 8015ef8:	4b15      	ldr	r3, [pc, #84]	; (8015f50 <pxCurrentTCBConst>)
 8015efa:	681a      	ldr	r2, [r3, #0]
 8015efc:	f01e 0f10 	tst.w	lr, #16
 8015f00:	bf08      	it	eq
 8015f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0a:	6010      	str	r0, [r2, #0]
 8015f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015f14:	b672      	cpsid	i
 8015f16:	f380 8811 	msr	BASEPRI, r0
 8015f1a:	f3bf 8f4f 	dsb	sy
 8015f1e:	f3bf 8f6f 	isb	sy
 8015f22:	b662      	cpsie	i
 8015f24:	f7ff fa04 	bl	8015330 <vTaskSwitchContext>
 8015f28:	f04f 0000 	mov.w	r0, #0
 8015f2c:	f380 8811 	msr	BASEPRI, r0
 8015f30:	bc09      	pop	{r0, r3}
 8015f32:	6819      	ldr	r1, [r3, #0]
 8015f34:	6808      	ldr	r0, [r1, #0]
 8015f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3a:	f01e 0f10 	tst.w	lr, #16
 8015f3e:	bf08      	it	eq
 8015f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015f44:	f380 8809 	msr	PSP, r0
 8015f48:	f3bf 8f6f 	isb	sy
 8015f4c:	4770      	bx	lr
 8015f4e:	bf00      	nop

08015f50 <pxCurrentTCBConst>:
 8015f50:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015f54:	bf00      	nop
 8015f56:	bf00      	nop

08015f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8015f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f62:	b672      	cpsid	i
 8015f64:	f383 8811 	msr	BASEPRI, r3
 8015f68:	f3bf 8f6f 	isb	sy
 8015f6c:	f3bf 8f4f 	dsb	sy
 8015f70:	b662      	cpsie	i
 8015f72:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015f74:	f7ff f922 	bl	80151bc <xTaskIncrementTick>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d003      	beq.n	8015f86 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015f7e:	4b06      	ldr	r3, [pc, #24]	; (8015f98 <xPortSysTickHandler+0x40>)
 8015f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f84:	601a      	str	r2, [r3, #0]
 8015f86:	2300      	movs	r3, #0
 8015f88:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015f90:	bf00      	nop
 8015f92:	3708      	adds	r7, #8
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}
 8015f98:	e000ed04 	.word	0xe000ed04

08015f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015fa0:	4b0b      	ldr	r3, [pc, #44]	; (8015fd0 <vPortSetupTimerInterrupt+0x34>)
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015fa6:	4b0b      	ldr	r3, [pc, #44]	; (8015fd4 <vPortSetupTimerInterrupt+0x38>)
 8015fa8:	2200      	movs	r2, #0
 8015faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015fac:	4b0a      	ldr	r3, [pc, #40]	; (8015fd8 <vPortSetupTimerInterrupt+0x3c>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	4a0a      	ldr	r2, [pc, #40]	; (8015fdc <vPortSetupTimerInterrupt+0x40>)
 8015fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8015fb6:	099b      	lsrs	r3, r3, #6
 8015fb8:	4a09      	ldr	r2, [pc, #36]	; (8015fe0 <vPortSetupTimerInterrupt+0x44>)
 8015fba:	3b01      	subs	r3, #1
 8015fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015fbe:	4b04      	ldr	r3, [pc, #16]	; (8015fd0 <vPortSetupTimerInterrupt+0x34>)
 8015fc0:	2207      	movs	r2, #7
 8015fc2:	601a      	str	r2, [r3, #0]
}
 8015fc4:	bf00      	nop
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	e000e010 	.word	0xe000e010
 8015fd4:	e000e018 	.word	0xe000e018
 8015fd8:	20000014 	.word	0x20000014
 8015fdc:	10624dd3 	.word	0x10624dd3
 8015fe0:	e000e014 	.word	0xe000e014

08015fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015ff4 <vPortEnableVFP+0x10>
 8015fe8:	6801      	ldr	r1, [r0, #0]
 8015fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015fee:	6001      	str	r1, [r0, #0]
 8015ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015ff2:	bf00      	nop
 8015ff4:	e000ed88 	.word	0xe000ed88

08015ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015ffe:	f3ef 8305 	mrs	r3, IPSR
 8016002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2b0f      	cmp	r3, #15
 8016008:	d915      	bls.n	8016036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801600a:	4a18      	ldr	r2, [pc, #96]	; (801606c <vPortValidateInterruptPriority+0x74>)
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	4413      	add	r3, r2
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016014:	4b16      	ldr	r3, [pc, #88]	; (8016070 <vPortValidateInterruptPriority+0x78>)
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	7afa      	ldrb	r2, [r7, #11]
 801601a:	429a      	cmp	r2, r3
 801601c:	d20b      	bcs.n	8016036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016022:	b672      	cpsid	i
 8016024:	f383 8811 	msr	BASEPRI, r3
 8016028:	f3bf 8f6f 	isb	sy
 801602c:	f3bf 8f4f 	dsb	sy
 8016030:	b662      	cpsie	i
 8016032:	607b      	str	r3, [r7, #4]
 8016034:	e7fe      	b.n	8016034 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016036:	4b0f      	ldr	r3, [pc, #60]	; (8016074 <vPortValidateInterruptPriority+0x7c>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801603e:	4b0e      	ldr	r3, [pc, #56]	; (8016078 <vPortValidateInterruptPriority+0x80>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	429a      	cmp	r2, r3
 8016044:	d90b      	bls.n	801605e <vPortValidateInterruptPriority+0x66>
 8016046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801604a:	b672      	cpsid	i
 801604c:	f383 8811 	msr	BASEPRI, r3
 8016050:	f3bf 8f6f 	isb	sy
 8016054:	f3bf 8f4f 	dsb	sy
 8016058:	b662      	cpsie	i
 801605a:	603b      	str	r3, [r7, #0]
 801605c:	e7fe      	b.n	801605c <vPortValidateInterruptPriority+0x64>
	}
 801605e:	bf00      	nop
 8016060:	3714      	adds	r7, #20
 8016062:	46bd      	mov	sp, r7
 8016064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop
 801606c:	e000e3f0 	.word	0xe000e3f0
 8016070:	20000468 	.word	0x20000468
 8016074:	e000ed0c 	.word	0xe000ed0c
 8016078:	2000046c 	.word	0x2000046c

0801607c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b08a      	sub	sp, #40	; 0x28
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016084:	2300      	movs	r3, #0
 8016086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016088:	f7fe ffec 	bl	8015064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801608c:	4b5a      	ldr	r3, [pc, #360]	; (80161f8 <pvPortMalloc+0x17c>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d101      	bne.n	8016098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016094:	f000 f916 	bl	80162c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016098:	4b58      	ldr	r3, [pc, #352]	; (80161fc <pvPortMalloc+0x180>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	4013      	ands	r3, r2
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	f040 8090 	bne.w	80161c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d01e      	beq.n	80160ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80160ac:	2208      	movs	r2, #8
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	4413      	add	r3, r2
 80160b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f003 0307 	and.w	r3, r3, #7
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d015      	beq.n	80160ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f023 0307 	bic.w	r3, r3, #7
 80160c4:	3308      	adds	r3, #8
 80160c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f003 0307 	and.w	r3, r3, #7
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d00b      	beq.n	80160ea <pvPortMalloc+0x6e>
 80160d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160d6:	b672      	cpsid	i
 80160d8:	f383 8811 	msr	BASEPRI, r3
 80160dc:	f3bf 8f6f 	isb	sy
 80160e0:	f3bf 8f4f 	dsb	sy
 80160e4:	b662      	cpsie	i
 80160e6:	617b      	str	r3, [r7, #20]
 80160e8:	e7fe      	b.n	80160e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d06a      	beq.n	80161c6 <pvPortMalloc+0x14a>
 80160f0:	4b43      	ldr	r3, [pc, #268]	; (8016200 <pvPortMalloc+0x184>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d865      	bhi.n	80161c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80160fa:	4b42      	ldr	r3, [pc, #264]	; (8016204 <pvPortMalloc+0x188>)
 80160fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80160fe:	4b41      	ldr	r3, [pc, #260]	; (8016204 <pvPortMalloc+0x188>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016104:	e004      	b.n	8016110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	687a      	ldr	r2, [r7, #4]
 8016116:	429a      	cmp	r2, r3
 8016118:	d903      	bls.n	8016122 <pvPortMalloc+0xa6>
 801611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d1f1      	bne.n	8016106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016122:	4b35      	ldr	r3, [pc, #212]	; (80161f8 <pvPortMalloc+0x17c>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016128:	429a      	cmp	r2, r3
 801612a:	d04c      	beq.n	80161c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801612c:	6a3b      	ldr	r3, [r7, #32]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2208      	movs	r2, #8
 8016132:	4413      	add	r3, r2
 8016134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	6a3b      	ldr	r3, [r7, #32]
 801613c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016140:	685a      	ldr	r2, [r3, #4]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	1ad2      	subs	r2, r2, r3
 8016146:	2308      	movs	r3, #8
 8016148:	005b      	lsls	r3, r3, #1
 801614a:	429a      	cmp	r2, r3
 801614c:	d920      	bls.n	8016190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	4413      	add	r3, r2
 8016154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016156:	69bb      	ldr	r3, [r7, #24]
 8016158:	f003 0307 	and.w	r3, r3, #7
 801615c:	2b00      	cmp	r3, #0
 801615e:	d00b      	beq.n	8016178 <pvPortMalloc+0xfc>
 8016160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016164:	b672      	cpsid	i
 8016166:	f383 8811 	msr	BASEPRI, r3
 801616a:	f3bf 8f6f 	isb	sy
 801616e:	f3bf 8f4f 	dsb	sy
 8016172:	b662      	cpsie	i
 8016174:	613b      	str	r3, [r7, #16]
 8016176:	e7fe      	b.n	8016176 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617a:	685a      	ldr	r2, [r3, #4]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	1ad2      	subs	r2, r2, r3
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801618a:	69b8      	ldr	r0, [r7, #24]
 801618c:	f000 f8fc 	bl	8016388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016190:	4b1b      	ldr	r3, [pc, #108]	; (8016200 <pvPortMalloc+0x184>)
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	4a19      	ldr	r2, [pc, #100]	; (8016200 <pvPortMalloc+0x184>)
 801619c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801619e:	4b18      	ldr	r3, [pc, #96]	; (8016200 <pvPortMalloc+0x184>)
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	4b19      	ldr	r3, [pc, #100]	; (8016208 <pvPortMalloc+0x18c>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d203      	bcs.n	80161b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80161aa:	4b15      	ldr	r3, [pc, #84]	; (8016200 <pvPortMalloc+0x184>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	4a16      	ldr	r2, [pc, #88]	; (8016208 <pvPortMalloc+0x18c>)
 80161b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80161b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b4:	685a      	ldr	r2, [r3, #4]
 80161b6:	4b11      	ldr	r3, [pc, #68]	; (80161fc <pvPortMalloc+0x180>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	431a      	orrs	r2, r3
 80161bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80161c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c2:	2200      	movs	r2, #0
 80161c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80161c6:	f7fe ff5b 	bl	8015080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	f003 0307 	and.w	r3, r3, #7
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00b      	beq.n	80161ec <pvPortMalloc+0x170>
 80161d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d8:	b672      	cpsid	i
 80161da:	f383 8811 	msr	BASEPRI, r3
 80161de:	f3bf 8f6f 	isb	sy
 80161e2:	f3bf 8f4f 	dsb	sy
 80161e6:	b662      	cpsie	i
 80161e8:	60fb      	str	r3, [r7, #12]
 80161ea:	e7fe      	b.n	80161ea <pvPortMalloc+0x16e>
	return pvReturn;
 80161ec:	69fb      	ldr	r3, [r7, #28]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3728      	adds	r7, #40	; 0x28
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	20004078 	.word	0x20004078
 80161fc:	20004084 	.word	0x20004084
 8016200:	2000407c 	.word	0x2000407c
 8016204:	20004070 	.word	0x20004070
 8016208:	20004080 	.word	0x20004080

0801620c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b086      	sub	sp, #24
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d04a      	beq.n	80162b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801621e:	2308      	movs	r3, #8
 8016220:	425b      	negs	r3, r3
 8016222:	697a      	ldr	r2, [r7, #20]
 8016224:	4413      	add	r3, r2
 8016226:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	685a      	ldr	r2, [r3, #4]
 8016230:	4b22      	ldr	r3, [pc, #136]	; (80162bc <vPortFree+0xb0>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4013      	ands	r3, r2
 8016236:	2b00      	cmp	r3, #0
 8016238:	d10b      	bne.n	8016252 <vPortFree+0x46>
 801623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623e:	b672      	cpsid	i
 8016240:	f383 8811 	msr	BASEPRI, r3
 8016244:	f3bf 8f6f 	isb	sy
 8016248:	f3bf 8f4f 	dsb	sy
 801624c:	b662      	cpsie	i
 801624e:	60fb      	str	r3, [r7, #12]
 8016250:	e7fe      	b.n	8016250 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00b      	beq.n	8016272 <vPortFree+0x66>
 801625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801625e:	b672      	cpsid	i
 8016260:	f383 8811 	msr	BASEPRI, r3
 8016264:	f3bf 8f6f 	isb	sy
 8016268:	f3bf 8f4f 	dsb	sy
 801626c:	b662      	cpsie	i
 801626e:	60bb      	str	r3, [r7, #8]
 8016270:	e7fe      	b.n	8016270 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	685a      	ldr	r2, [r3, #4]
 8016276:	4b11      	ldr	r3, [pc, #68]	; (80162bc <vPortFree+0xb0>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	4013      	ands	r3, r2
 801627c:	2b00      	cmp	r3, #0
 801627e:	d019      	beq.n	80162b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016280:	693b      	ldr	r3, [r7, #16]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d115      	bne.n	80162b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	685a      	ldr	r2, [r3, #4]
 801628c:	4b0b      	ldr	r3, [pc, #44]	; (80162bc <vPortFree+0xb0>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	43db      	mvns	r3, r3
 8016292:	401a      	ands	r2, r3
 8016294:	693b      	ldr	r3, [r7, #16]
 8016296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016298:	f7fe fee4 	bl	8015064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	685a      	ldr	r2, [r3, #4]
 80162a0:	4b07      	ldr	r3, [pc, #28]	; (80162c0 <vPortFree+0xb4>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	4413      	add	r3, r2
 80162a6:	4a06      	ldr	r2, [pc, #24]	; (80162c0 <vPortFree+0xb4>)
 80162a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80162aa:	6938      	ldr	r0, [r7, #16]
 80162ac:	f000 f86c 	bl	8016388 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80162b0:	f7fe fee6 	bl	8015080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80162b4:	bf00      	nop
 80162b6:	3718      	adds	r7, #24
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	20004084 	.word	0x20004084
 80162c0:	2000407c 	.word	0x2000407c

080162c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80162c4:	b480      	push	{r7}
 80162c6:	b085      	sub	sp, #20
 80162c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80162ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80162ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80162d0:	4b27      	ldr	r3, [pc, #156]	; (8016370 <prvHeapInit+0xac>)
 80162d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f003 0307 	and.w	r3, r3, #7
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d00c      	beq.n	80162f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	3307      	adds	r3, #7
 80162e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f023 0307 	bic.w	r3, r3, #7
 80162ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80162ec:	68ba      	ldr	r2, [r7, #8]
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	4a1f      	ldr	r2, [pc, #124]	; (8016370 <prvHeapInit+0xac>)
 80162f4:	4413      	add	r3, r2
 80162f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80162fc:	4a1d      	ldr	r2, [pc, #116]	; (8016374 <prvHeapInit+0xb0>)
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016302:	4b1c      	ldr	r3, [pc, #112]	; (8016374 <prvHeapInit+0xb0>)
 8016304:	2200      	movs	r2, #0
 8016306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	68ba      	ldr	r2, [r7, #8]
 801630c:	4413      	add	r3, r2
 801630e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016310:	2208      	movs	r2, #8
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	1a9b      	subs	r3, r3, r2
 8016316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	f023 0307 	bic.w	r3, r3, #7
 801631e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	4a15      	ldr	r2, [pc, #84]	; (8016378 <prvHeapInit+0xb4>)
 8016324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016326:	4b14      	ldr	r3, [pc, #80]	; (8016378 <prvHeapInit+0xb4>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	2200      	movs	r2, #0
 801632c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801632e:	4b12      	ldr	r3, [pc, #72]	; (8016378 <prvHeapInit+0xb4>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	2200      	movs	r2, #0
 8016334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	1ad2      	subs	r2, r2, r3
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016344:	4b0c      	ldr	r3, [pc, #48]	; (8016378 <prvHeapInit+0xb4>)
 8016346:	681a      	ldr	r2, [r3, #0]
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	4a0a      	ldr	r2, [pc, #40]	; (801637c <prvHeapInit+0xb8>)
 8016352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	685b      	ldr	r3, [r3, #4]
 8016358:	4a09      	ldr	r2, [pc, #36]	; (8016380 <prvHeapInit+0xbc>)
 801635a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801635c:	4b09      	ldr	r3, [pc, #36]	; (8016384 <prvHeapInit+0xc0>)
 801635e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016362:	601a      	str	r2, [r3, #0]
}
 8016364:	bf00      	nop
 8016366:	3714      	adds	r7, #20
 8016368:	46bd      	mov	sp, r7
 801636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636e:	4770      	bx	lr
 8016370:	20000470 	.word	0x20000470
 8016374:	20004070 	.word	0x20004070
 8016378:	20004078 	.word	0x20004078
 801637c:	20004080 	.word	0x20004080
 8016380:	2000407c 	.word	0x2000407c
 8016384:	20004084 	.word	0x20004084

08016388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016388:	b480      	push	{r7}
 801638a:	b085      	sub	sp, #20
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016390:	4b28      	ldr	r3, [pc, #160]	; (8016434 <prvInsertBlockIntoFreeList+0xac>)
 8016392:	60fb      	str	r3, [r7, #12]
 8016394:	e002      	b.n	801639c <prvInsertBlockIntoFreeList+0x14>
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	60fb      	str	r3, [r7, #12]
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	687a      	ldr	r2, [r7, #4]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d8f7      	bhi.n	8016396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	685b      	ldr	r3, [r3, #4]
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	4413      	add	r3, r2
 80163b2:	687a      	ldr	r2, [r7, #4]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d108      	bne.n	80163ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	685a      	ldr	r2, [r3, #4]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	685b      	ldr	r3, [r3, #4]
 80163c0:	441a      	add	r2, r3
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	68ba      	ldr	r2, [r7, #8]
 80163d4:	441a      	add	r2, r3
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	429a      	cmp	r2, r3
 80163dc:	d118      	bne.n	8016410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	681a      	ldr	r2, [r3, #0]
 80163e2:	4b15      	ldr	r3, [pc, #84]	; (8016438 <prvInsertBlockIntoFreeList+0xb0>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d00d      	beq.n	8016406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	685a      	ldr	r2, [r3, #4]
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	685b      	ldr	r3, [r3, #4]
 80163f4:	441a      	add	r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	601a      	str	r2, [r3, #0]
 8016404:	e008      	b.n	8016418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016406:	4b0c      	ldr	r3, [pc, #48]	; (8016438 <prvInsertBlockIntoFreeList+0xb0>)
 8016408:	681a      	ldr	r2, [r3, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	601a      	str	r2, [r3, #0]
 801640e:	e003      	b.n	8016418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016418:	68fa      	ldr	r2, [r7, #12]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	429a      	cmp	r2, r3
 801641e:	d002      	beq.n	8016426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016426:	bf00      	nop
 8016428:	3714      	adds	r7, #20
 801642a:	46bd      	mov	sp, r7
 801642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016430:	4770      	bx	lr
 8016432:	bf00      	nop
 8016434:	20004070 	.word	0x20004070
 8016438:	20004078 	.word	0x20004078

0801643c <__errno>:
 801643c:	4b01      	ldr	r3, [pc, #4]	; (8016444 <__errno+0x8>)
 801643e:	6818      	ldr	r0, [r3, #0]
 8016440:	4770      	bx	lr
 8016442:	bf00      	nop
 8016444:	20000024 	.word	0x20000024

08016448 <__libc_init_array>:
 8016448:	b570      	push	{r4, r5, r6, lr}
 801644a:	4e0d      	ldr	r6, [pc, #52]	; (8016480 <__libc_init_array+0x38>)
 801644c:	4c0d      	ldr	r4, [pc, #52]	; (8016484 <__libc_init_array+0x3c>)
 801644e:	1ba4      	subs	r4, r4, r6
 8016450:	10a4      	asrs	r4, r4, #2
 8016452:	2500      	movs	r5, #0
 8016454:	42a5      	cmp	r5, r4
 8016456:	d109      	bne.n	801646c <__libc_init_array+0x24>
 8016458:	4e0b      	ldr	r6, [pc, #44]	; (8016488 <__libc_init_array+0x40>)
 801645a:	4c0c      	ldr	r4, [pc, #48]	; (801648c <__libc_init_array+0x44>)
 801645c:	f000 f8fc 	bl	8016658 <_init>
 8016460:	1ba4      	subs	r4, r4, r6
 8016462:	10a4      	asrs	r4, r4, #2
 8016464:	2500      	movs	r5, #0
 8016466:	42a5      	cmp	r5, r4
 8016468:	d105      	bne.n	8016476 <__libc_init_array+0x2e>
 801646a:	bd70      	pop	{r4, r5, r6, pc}
 801646c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016470:	4798      	blx	r3
 8016472:	3501      	adds	r5, #1
 8016474:	e7ee      	b.n	8016454 <__libc_init_array+0xc>
 8016476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801647a:	4798      	blx	r3
 801647c:	3501      	adds	r5, #1
 801647e:	e7f2      	b.n	8016466 <__libc_init_array+0x1e>
 8016480:	08020804 	.word	0x08020804
 8016484:	08020804 	.word	0x08020804
 8016488:	08020804 	.word	0x08020804
 801648c:	08020808 	.word	0x08020808

08016490 <memcpy>:
 8016490:	b510      	push	{r4, lr}
 8016492:	1e43      	subs	r3, r0, #1
 8016494:	440a      	add	r2, r1
 8016496:	4291      	cmp	r1, r2
 8016498:	d100      	bne.n	801649c <memcpy+0xc>
 801649a:	bd10      	pop	{r4, pc}
 801649c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164a4:	e7f7      	b.n	8016496 <memcpy+0x6>

080164a6 <memset>:
 80164a6:	4402      	add	r2, r0
 80164a8:	4603      	mov	r3, r0
 80164aa:	4293      	cmp	r3, r2
 80164ac:	d100      	bne.n	80164b0 <memset+0xa>
 80164ae:	4770      	bx	lr
 80164b0:	f803 1b01 	strb.w	r1, [r3], #1
 80164b4:	e7f9      	b.n	80164aa <memset+0x4>

080164b6 <strncmp>:
 80164b6:	b510      	push	{r4, lr}
 80164b8:	b16a      	cbz	r2, 80164d6 <strncmp+0x20>
 80164ba:	3901      	subs	r1, #1
 80164bc:	1884      	adds	r4, r0, r2
 80164be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80164c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80164c6:	4293      	cmp	r3, r2
 80164c8:	d103      	bne.n	80164d2 <strncmp+0x1c>
 80164ca:	42a0      	cmp	r0, r4
 80164cc:	d001      	beq.n	80164d2 <strncmp+0x1c>
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d1f5      	bne.n	80164be <strncmp+0x8>
 80164d2:	1a98      	subs	r0, r3, r2
 80164d4:	bd10      	pop	{r4, pc}
 80164d6:	4610      	mov	r0, r2
 80164d8:	e7fc      	b.n	80164d4 <strncmp+0x1e>

080164da <strstr>:
 80164da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164dc:	7803      	ldrb	r3, [r0, #0]
 80164de:	b17b      	cbz	r3, 8016500 <strstr+0x26>
 80164e0:	4604      	mov	r4, r0
 80164e2:	7823      	ldrb	r3, [r4, #0]
 80164e4:	4620      	mov	r0, r4
 80164e6:	1c66      	adds	r6, r4, #1
 80164e8:	b17b      	cbz	r3, 801650a <strstr+0x30>
 80164ea:	1e4a      	subs	r2, r1, #1
 80164ec:	1e63      	subs	r3, r4, #1
 80164ee:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80164f2:	b14d      	cbz	r5, 8016508 <strstr+0x2e>
 80164f4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80164f8:	42af      	cmp	r7, r5
 80164fa:	4634      	mov	r4, r6
 80164fc:	d0f7      	beq.n	80164ee <strstr+0x14>
 80164fe:	e7f0      	b.n	80164e2 <strstr+0x8>
 8016500:	780b      	ldrb	r3, [r1, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	bf18      	it	ne
 8016506:	2000      	movne	r0, #0
 8016508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650a:	4618      	mov	r0, r3
 801650c:	e7fc      	b.n	8016508 <strstr+0x2e>
	...

08016510 <sqrt>:
 8016510:	b500      	push	{lr}
 8016512:	ed2d 8b02 	vpush	{d8}
 8016516:	eeb0 8b40 	vmov.f64	d8, d0
 801651a:	b08b      	sub	sp, #44	; 0x2c
 801651c:	f000 f894 	bl	8016648 <__ieee754_sqrt>
 8016520:	4b1f      	ldr	r3, [pc, #124]	; (80165a0 <sqrt+0x90>)
 8016522:	f993 3000 	ldrsb.w	r3, [r3]
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	d024      	beq.n	8016574 <sqrt+0x64>
 801652a:	eeb4 8b48 	vcmp.f64	d8, d8
 801652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016532:	d61f      	bvs.n	8016574 <sqrt+0x64>
 8016534:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8016598 <sqrt+0x88>
 8016538:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016540:	d518      	bpl.n	8016574 <sqrt+0x64>
 8016542:	2201      	movs	r2, #1
 8016544:	9200      	str	r2, [sp, #0]
 8016546:	4a17      	ldr	r2, [pc, #92]	; (80165a4 <sqrt+0x94>)
 8016548:	9201      	str	r2, [sp, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	9208      	str	r2, [sp, #32]
 801654e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016552:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016556:	b993      	cbnz	r3, 801657e <sqrt+0x6e>
 8016558:	ed8d 7b06 	vstr	d7, [sp, #24]
 801655c:	4668      	mov	r0, sp
 801655e:	f000 f879 	bl	8016654 <matherr>
 8016562:	b190      	cbz	r0, 801658a <sqrt+0x7a>
 8016564:	9b08      	ldr	r3, [sp, #32]
 8016566:	b11b      	cbz	r3, 8016570 <sqrt+0x60>
 8016568:	f7ff ff68 	bl	801643c <__errno>
 801656c:	9b08      	ldr	r3, [sp, #32]
 801656e:	6003      	str	r3, [r0, #0]
 8016570:	ed9d 0b06 	vldr	d0, [sp, #24]
 8016574:	b00b      	add	sp, #44	; 0x2c
 8016576:	ecbd 8b02 	vpop	{d8}
 801657a:	f85d fb04 	ldr.w	pc, [sp], #4
 801657e:	2b02      	cmp	r3, #2
 8016580:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8016584:	ed8d 6b06 	vstr	d6, [sp, #24]
 8016588:	d1e8      	bne.n	801655c <sqrt+0x4c>
 801658a:	f7ff ff57 	bl	801643c <__errno>
 801658e:	2321      	movs	r3, #33	; 0x21
 8016590:	6003      	str	r3, [r0, #0]
 8016592:	e7e7      	b.n	8016564 <sqrt+0x54>
 8016594:	f3af 8000 	nop.w
	...
 80165a0:	20000088 	.word	0x20000088
 80165a4:	080207f0 	.word	0x080207f0

080165a8 <sqrtf>:
 80165a8:	b500      	push	{lr}
 80165aa:	ed2d 8b02 	vpush	{d8}
 80165ae:	b08b      	sub	sp, #44	; 0x2c
 80165b0:	eeb0 8a40 	vmov.f32	s16, s0
 80165b4:	f000 f84b 	bl	801664e <__ieee754_sqrtf>
 80165b8:	4b21      	ldr	r3, [pc, #132]	; (8016640 <sqrtf+0x98>)
 80165ba:	f993 3000 	ldrsb.w	r3, [r3]
 80165be:	1c5a      	adds	r2, r3, #1
 80165c0:	d028      	beq.n	8016614 <sqrtf+0x6c>
 80165c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80165c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ca:	d623      	bvs.n	8016614 <sqrtf+0x6c>
 80165cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80165d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165d4:	d51e      	bpl.n	8016614 <sqrtf+0x6c>
 80165d6:	2201      	movs	r2, #1
 80165d8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80165dc:	9200      	str	r2, [sp, #0]
 80165de:	4a19      	ldr	r2, [pc, #100]	; (8016644 <sqrtf+0x9c>)
 80165e0:	9201      	str	r2, [sp, #4]
 80165e2:	2200      	movs	r2, #0
 80165e4:	9208      	str	r2, [sp, #32]
 80165e6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80165ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80165ee:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8016638 <sqrtf+0x90>
 80165f2:	b9a3      	cbnz	r3, 801661e <sqrtf+0x76>
 80165f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80165f8:	4668      	mov	r0, sp
 80165fa:	f000 f82b 	bl	8016654 <matherr>
 80165fe:	b1a0      	cbz	r0, 801662a <sqrtf+0x82>
 8016600:	9b08      	ldr	r3, [sp, #32]
 8016602:	b11b      	cbz	r3, 801660c <sqrtf+0x64>
 8016604:	f7ff ff1a 	bl	801643c <__errno>
 8016608:	9b08      	ldr	r3, [sp, #32]
 801660a:	6003      	str	r3, [r0, #0]
 801660c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8016610:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016614:	b00b      	add	sp, #44	; 0x2c
 8016616:	ecbd 8b02 	vpop	{d8}
 801661a:	f85d fb04 	ldr.w	pc, [sp], #4
 801661e:	2b02      	cmp	r3, #2
 8016620:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8016624:	ed8d 6b06 	vstr	d6, [sp, #24]
 8016628:	d1e6      	bne.n	80165f8 <sqrtf+0x50>
 801662a:	f7ff ff07 	bl	801643c <__errno>
 801662e:	2321      	movs	r3, #33	; 0x21
 8016630:	6003      	str	r3, [r0, #0]
 8016632:	e7e5      	b.n	8016600 <sqrtf+0x58>
 8016634:	f3af 8000 	nop.w
	...
 8016640:	20000088 	.word	0x20000088
 8016644:	080207f5 	.word	0x080207f5

08016648 <__ieee754_sqrt>:
 8016648:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801664c:	4770      	bx	lr

0801664e <__ieee754_sqrtf>:
 801664e:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016652:	4770      	bx	lr

08016654 <matherr>:
 8016654:	2000      	movs	r0, #0
 8016656:	4770      	bx	lr

08016658 <_init>:
 8016658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801665a:	bf00      	nop
 801665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801665e:	bc08      	pop	{r3}
 8016660:	469e      	mov	lr, r3
 8016662:	4770      	bx	lr

08016664 <_fini>:
 8016664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016666:	bf00      	nop
 8016668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801666a:	bc08      	pop	{r3}
 801666c:	469e      	mov	lr, r3
 801666e:	4770      	bx	lr
