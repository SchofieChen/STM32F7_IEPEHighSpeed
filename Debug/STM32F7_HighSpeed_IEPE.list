
STM32F7_HighSpeed_IEPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a8  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a174  080165a8  080165a8  000165a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802071c  0802071c  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  0802071c  0802071c  0002071c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020724  08020724  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020724  08020724  00020724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020728  08020728  00020728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0802072c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c820  200000a0  080207b8  000300a0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2001c8c0  080207b8  0003c8c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f50  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fe1  00000000  00000000  0005500a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  00059ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00029dad  00000000  00000000  0005b668  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00017053  00000000  00000000  00085415  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00100059  00000000  00000000  0009c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0019c4c1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013d0  00000000  00000000  0019c540  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005a54  00000000  00000000  0019d910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000a0 	.word	0x200000a0
 800821c:	00000000 	.word	0x00000000
 8008220:	08016590 	.word	0x08016590

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000a4 	.word	0x200000a4
 800823c:	08016590 	.word	0x08016590

08008240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8008240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8008242:	2b01      	cmp	r3, #1
	IT       LS
 8008244:	bf98      	it	ls
	BXLS     lr
 8008246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8008248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800824c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800824e:	089b      	lsrs	r3, r3, #2

08008250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8008250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8008254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8008258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800825a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800825e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8008260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8008262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8008264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8008266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800826a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800826e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8008270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8008274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8008278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800827c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8008280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8008282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8008286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800828a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800828c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8008290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8008294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8008298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800829c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800829e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80082a2:	d1d5      	bne.n	8008250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80082a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082a8:	4770      	bx	lr

080082aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80082aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80082ac:	2b01      	cmp	r3, #1
	IT       LS
 80082ae:	bf98      	it	ls
	BXLS     lr
 80082b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80082b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80082b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80082b8:	089b      	lsrs	r3, r3, #2

080082ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80082ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80082be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80082c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80082c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80082c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80082cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80082d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80082d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80082d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80082dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80082e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80082e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80082e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80082ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80082ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80082f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80082f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80082f8:	d1df      	bne.n	80082ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80082fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082fe:	4770      	bx	lr

08008300 <strlen>:
 8008300:	4603      	mov	r3, r0
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1fb      	bne.n	8008302 <strlen+0x2>
 800830a:	1a18      	subs	r0, r3, r0
 800830c:	3801      	subs	r0, #1
 800830e:	4770      	bx	lr

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295
 8008320:	f04f 30ff 	movne.w	r0, #4294967295
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	ed87 0a01 	vstr	s0, [r7, #4]
 800861a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800861c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008628:	db0a      	blt.n	8008640 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800862a:	ed97 0a01 	vldr	s0, [r7, #4]
 800862e:	f00d ff57 	bl	80164e0 <sqrtf>
 8008632:	eef0 7a40 	vmov.f32	s15, s0
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800863c:	2300      	movs	r3, #0
 800863e:	e005      	b.n	800864c <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	089b      	lsrs	r3, r3, #2
 8008664:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008666:	e082      	b.n	800876e <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	60fa      	str	r2, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	60fa      	str	r2, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800867c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008680:	edd7 7a06 	vldr	s15, [r7, #24]
 8008684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008688:	edd7 6a05 	vldr	s13, [r7, #20]
 800868c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	1d1a      	adds	r2, r3, #4
 800869c:	60ba      	str	r2, [r7, #8]
 800869e:	4618      	mov	r0, r3
 80086a0:	eeb0 0a67 	vmov.f32	s0, s15
 80086a4:	f7ff ffb4 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	60fa      	str	r2, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1d1a      	adds	r2, r3, #4
 80086b6:	60fa      	str	r2, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80086bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80086c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80086c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80086cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80086d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	60ba      	str	r2, [r7, #8]
 80086de:	4618      	mov	r0, r3
 80086e0:	eeb0 0a67 	vmov.f32	s0, s15
 80086e4:	f7ff ff94 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	1d1a      	adds	r2, r3, #4
 80086ec:	60fa      	str	r2, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1d1a      	adds	r2, r3, #4
 80086f6:	60fa      	str	r2, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80086fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8008700:	edd7 7a06 	vldr	s15, [r7, #24]
 8008704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008708:	edd7 6a05 	vldr	s13, [r7, #20]
 800870c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	60ba      	str	r2, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	eeb0 0a67 	vmov.f32	s0, s15
 8008724:	f7ff ff74 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	1d1a      	adds	r2, r3, #4
 800872c:	60fa      	str	r2, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	60fa      	str	r2, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800873c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008740:	edd7 7a06 	vldr	s15, [r7, #24]
 8008744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008748:	edd7 6a05 	vldr	s13, [r7, #20]
 800874c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	60ba      	str	r2, [r7, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	eeb0 0a67 	vmov.f32	s0, s15
 8008764:	f7ff ff54 	bl	8008610 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	3b01      	subs	r3, #1
 800876c:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f af79 	bne.w	8008668 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 800877e:	e022      	b.n	80087c6 <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	60fa      	str	r2, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1d1a      	adds	r2, r3, #4
 800878e:	60fa      	str	r2, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008794:	ed97 7a06 	vldr	s14, [r7, #24]
 8008798:	edd7 7a06 	vldr	s15, [r7, #24]
 800879c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80087a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80087a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	60ba      	str	r2, [r7, #8]
 80087b6:	4618      	mov	r0, r3
 80087b8:	eeb0 0a67 	vmov.f32	s0, s15
 80087bc:	f7ff ff28 	bl	8008610 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1d9      	bne.n	8008780 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80087cc:	bf00      	nop
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	60fa      	str	r2, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	089b      	lsrs	r3, r3, #2
 80087fa:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80087fc:	e051      	b.n	80088a2 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1d1a      	adds	r2, r3, #4
 8008802:	60fa      	str	r2, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	60fa      	str	r2, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008812:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008816:	edd7 7a05 	vldr	s15, [r7, #20]
 800881a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008822:	d504      	bpl.n	800882e <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	60fa      	str	r2, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8008838:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800883c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	d504      	bpl.n	8008854 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	3302      	adds	r3, #2
 8008852:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	60fa      	str	r2, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800885e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008862:	edd7 7a05 	vldr	s15, [r7, #20]
 8008866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d504      	bpl.n	800887a <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	3303      	adds	r3, #3
 8008878:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800887a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800887e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888a:	d504      	bpl.n	8008896 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	3304      	adds	r3, #4
 8008894:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	3304      	adds	r3, #4
 800889a:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	3b01      	subs	r3, #1
 80088a0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1aa      	bne.n	80087fe <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80088b2:	e016      	b.n	80088e2 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	60fa      	str	r2, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80088be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80088c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80088c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ce:	d505      	bpl.n	80088dc <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	3b01      	subs	r3, #1
 80088e0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ec:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	601a      	str	r2, [r3, #0]
}
 80088f4:	bf00      	nop
 80088f6:	372c      	adds	r7, #44	; 0x2c
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008900:	b480      	push	{r7}
 8008902:	b08b      	sub	sp, #44	; 0x2c
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	089b      	lsrs	r3, r3, #2
 8008916:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008918:	e036      	b.n	8008988 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	60fa      	str	r2, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	60fa      	str	r2, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	60fa      	str	r2, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	60fa      	str	r2, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	613b      	str	r3, [r7, #16]

    sum += in1;
 8008942:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008946:	edd7 7a07 	vldr	s15, [r7, #28]
 800894a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800894e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 8008952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008956:	edd7 7a06 	vldr	s15, [r7, #24]
 800895a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800895e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 8008962:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008966:	edd7 7a05 	vldr	s15, [r7, #20]
 800896a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800896e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 8008972:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008976:	edd7 7a04 	vldr	s15, [r7, #16]
 800897a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800897e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	3b01      	subs	r3, #1
 8008986:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1c5      	bne.n	800891a <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008996:	e00d      	b.n	80089b4 <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	60fa      	str	r2, [r7, #12]
 800899e:	edd3 7a00 	vldr	s15, [r3]
 80089a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80089a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1ee      	bne.n	8008998 <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	ee07 3a90 	vmov	s15, r3
 80089c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80089c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	edc3 7a00 	vstr	s15, [r3]
}
 80089d2:	bf00      	nop
 80089d4:	372c      	adds	r7, #44	; 0x2c
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80089de:	b480      	push	{r7}
 80089e0:	b08b      	sub	sp, #44	; 0x2c
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1d1a      	adds	r2, r3, #4
 80089f8:	60fa      	str	r2, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	089b      	lsrs	r3, r3, #2
 8008a04:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8008a06:	e051      	b.n	8008aac <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	60fa      	str	r2, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	60fa      	str	r2, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008a1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	dd04      	ble.n	8008a38 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	3301      	adds	r3, #1
 8008a36:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	60fa      	str	r2, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 8008a42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a52:	dd04      	ble.n	8008a5e <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	3302      	adds	r3, #2
 8008a5c:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	60fa      	str	r2, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a78:	dd04      	ble.n	8008a84 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3303      	adds	r3, #3
 8008a82:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8008a84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a94:	dd04      	ble.n	8008aa0 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1aa      	bne.n	8008a08 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8008abc:	e016      	b.n	8008aec <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	60fa      	str	r2, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8008ac8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	dd05      	ble.n	8008ae6 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af6:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	372c      	adds	r7, #44	; 0x2c
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <arm_sqrt_f32>:
  {
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	ed87 0a01 	vstr	s0, [r7, #4]
 8008b14:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	db0a      	blt.n	8008b3a <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008b24:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b28:	f00d fcda 	bl	80164e0 <sqrtf>
 8008b2c:	eef0 7a40 	vmov.f32	s15, s0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008b36:	2300      	movs	r3, #0
 8008b38:	e005      	b.n	8008b46 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008b42:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b088      	sub	sp, #32
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	089b      	lsrs	r3, r3, #2
 8008b64:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008b66:	e046      	b.n	8008bf6 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1d1a      	adds	r2, r3, #4
 8008b6c:	60fa      	str	r2, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008b72:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	60fa      	str	r2, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba8:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	60fa      	str	r2, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be4:	ed97 7a07 	vldr	s14, [r7, #28]
 8008be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bec:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1b5      	bne.n	8008b68 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008c04:	e013      	b.n	8008c2e <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	60fa      	str	r2, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008c10:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c24:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e8      	bne.n	8008c06 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	eeb0 0a66 	vmov.f32	s0, s13
 8008c4c:	f7ff ff5d 	bl	8008b0a <arm_sqrt_f32>
}
 8008c50:	bf00      	nop
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <arm_sqrt_f32>:
  {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008c62:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c70:	db0a      	blt.n	8008c88 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008c72:	ed97 0a01 	vldr	s0, [r7, #4]
 8008c76:	f00d fc33 	bl	80164e0 <sqrtf>
 8008c7a:	eef0 7a40 	vmov.f32	s15, s0
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008c84:	2300      	movs	r3, #0
 8008c86:	e005      	b.n	8008c94 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d104      	bne.n	8008cc4 <arm_std_f32+0x28>
	{
		*pResult = 0;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
		return;
 8008cc2:	e0d0      	b.n	8008e66 <arm_std_f32+0x1ca>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008cca:	e066      	b.n	8008d9a <arm_std_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	60fa      	str	r2, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
    sum += in;
 8008cd6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1d1a      	adds	r2, r3, #4
 8008d02:	60fa      	str	r2, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d08:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d2c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	60fa      	str	r2, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d3a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	60fa      	str	r2, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d6c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	3b01      	subs	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d195      	bne.n	8008ccc <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8008da8:	e01b      	b.n	8008de2 <arm_std_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	60fa      	str	r2, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	617b      	str	r3, [r7, #20]
    sum += in;
 8008db4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008dc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8008dc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	3b01      	subs	r3, #1
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e0      	bne.n	8008daa <arm_std_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008dfa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e02:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e40:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008e44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8008e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8008e50:	ed97 7a08 	vldr	s14, [r7, #32]
 8008e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008e62:	f7ff fef9 	bl	8008c58 <arm_sqrt_f32>
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8008e66:	3730      	adds	r7, #48	; 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <arm_var_f32>:

void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b08d      	sub	sp, #52	; 0x34
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]

  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d104      	bne.n	8008e94 <arm_var_f32+0x28>
	{
		*pResult = 0;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
		return;
 8008e92:	e0ce      	b.n	8009032 <arm_var_f32+0x1c6>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	089b      	lsrs	r3, r3, #2
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008e9a:	e066      	b.n	8008f6a <arm_var_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	617b      	str	r3, [r7, #20]
    sum += in;
 8008ea6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8008eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eb2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008eb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	60fa      	str	r2, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	617b      	str	r3, [r7, #20]
    sum += in;
 8008ed8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008ee8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008eec:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008efc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	60fa      	str	r2, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f0a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f16:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1d1a      	adds	r2, r3, #4
 8008f36:	60fa      	str	r2, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	3b01      	subs	r3, #1
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d195      	bne.n	8008e9c <arm_var_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8008f78:	e01b      	b.n	8008fb2 <arm_var_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	60fa      	str	r2, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fa8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e0      	bne.n	8008f7a <arm_var_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008fca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd2:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fe0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe8:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008fec:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ff0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009010:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009014:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 8009020:	ed97 7a08 	vldr	s14, [r7, #32]
 8009024:	edd7 7a06 	vldr	s15, [r7, #24]
 8009028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	edc3 7a00 	vstr	s15, [r3]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8009032:	3734      	adds	r7, #52	; 0x34
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b0a0      	sub	sp, #128	; 0x80
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800904c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4413      	add	r3, r2
 8009054:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8009060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009062:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8009064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800906a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4413      	add	r3, r2
 8009072:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8009074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800907a:	4413      	add	r3, r2
 800907c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800907e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009080:	089b      	lsrs	r3, r3, #2
 8009082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009084:	e1b6      	b.n	80093f4 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800909e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80090a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80090aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80090b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80090b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80090bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80090c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80090c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80090ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80090d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80090da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80090e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80090e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80090ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	603a      	str	r2, [r7, #0]
 80090f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80090fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009100:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	603a      	str	r2, [r7, #0]
 800910a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800910e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8009112:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009116:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	603a      	str	r2, [r7, #0]
 8009120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009124:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8009128:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800912c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	603a      	str	r2, [r7, #0]
 8009136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913a:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800913e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800914a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800914e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009152:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800915a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800915e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009162:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800916a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800916e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800917a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800917e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009182:	edd7 7a02 	vldr	s15, [r7, #8]
 8009186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800918c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009190:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8009194:	ed97 7a07 	vldr	s14, [r7, #28]
 8009198:	edd7 7a03 	vldr	s15, [r7, #12]
 800919c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a6:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80091aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80091ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80091b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091bc:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80091c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80091c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80091c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d2:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80091d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80091da:	edd7 7a06 	vldr	s15, [r7, #24]
 80091de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091e2:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80091e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80091ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80091ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091f2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80091f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80091fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80091fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009202:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8009206:	ed97 7a05 	vldr	s14, [r7, #20]
 800920a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800920e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009212:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8009216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	673a      	str	r2, [r7, #112]	; 0x70
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8009220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	673a      	str	r2, [r7, #112]	; 0x70
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800922a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800922e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800923a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800923e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800924a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800924e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009256:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800925a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800925e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009266:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800926a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	677a      	str	r2, [r7, #116]	; 0x74
 8009270:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009274:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800927c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8009280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009282:	1d1a      	adds	r2, r3, #4
 8009284:	677a      	str	r2, [r7, #116]	; 0x74
 8009286:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800928a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800928e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009292:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8009296:	edd7 7a02 	vldr	s15, [r7, #8]
 800929a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80092a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80092b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80092be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80092c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80092ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80092d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d8:	1d1a      	adds	r2, r3, #4
 80092da:	67ba      	str	r2, [r7, #120]	; 0x78
 80092dc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80092e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80092ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80092f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80092f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80092fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fe:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8009302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	673a      	str	r2, [r7, #112]	; 0x70
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800930c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	673a      	str	r2, [r7, #112]	; 0x70
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8009316:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800931a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800931e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009322:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8009326:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800932a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800932e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009332:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8009336:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800933a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8009346:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800934a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800934e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009352:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	677a      	str	r2, [r7, #116]	; 0x74
 800935c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009368:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800936c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936e:	1d1a      	adds	r2, r3, #4
 8009370:	677a      	str	r2, [r7, #116]	; 0x74
 8009372:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009376:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800937a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800937e:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8009382:	edd7 7a04 	vldr	s15, [r7, #16]
 8009386:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8009392:	edd7 7a05 	vldr	s15, [r7, #20]
 8009396:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80093a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80093a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80093b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80093b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80093c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80093c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80093cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80093d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d4:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80093d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093da:	1d1a      	adds	r2, r3, #4
 80093dc:	67ba      	str	r2, [r7, #120]	; 0x78
 80093de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80093e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80093e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ea:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	3b01      	subs	r3, #1
 80093f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f47f ae45 	bne.w	8009086 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80093fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093fe:	b299      	uxth	r1, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	2302      	movs	r3, #2
 8009406:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009408:	f000 feda 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800940c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800940e:	b299      	uxth	r1, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	2302      	movs	r3, #2
 8009416:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009418:	f000 fed2 	bl	800a1c0 <arm_radix8_butterfly_f32>
}
 800941c:	bf00      	nop
 800941e:	3780      	adds	r7, #128	; 0x80
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b0ac      	sub	sp, #176	; 0xb0
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	b29b      	uxth	r3, r3
 8009436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800943a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4413      	add	r3, r2
 8009444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8009448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009452:	4413      	add	r3, r2
 8009454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8009458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009462:	4413      	add	r3, r2
 8009464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800946c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009470:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8009472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009476:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8009478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800947c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800947e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009482:	3b04      	subs	r3, #4
 8009484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8009488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800948c:	3b04      	subs	r3, #4
 800948e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8009492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009496:	3b04      	subs	r3, #4
 8009498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800949c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094a6:	4413      	add	r3, r2
 80094a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80094c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80094ce:	2302      	movs	r3, #2
 80094d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80094d2:	2304      	movs	r3, #4
 80094d4:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80094d6:	2306      	movs	r3, #6
 80094d8:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	ed93 7a00 	vldr	s14, [r3]
 80094e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094ec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	ed93 7a00 	vldr	s14, [r3]
 80094f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094fa:	edd3 7a00 	vldr	s15, [r3]
 80094fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009502:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3304      	adds	r3, #4
 800950a:	ed93 7a00 	vldr	s14, [r3]
 800950e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009512:	3304      	adds	r3, #4
 8009514:	edd3 7a00 	vldr	s15, [r3]
 8009518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800951c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	3304      	adds	r3, #4
 8009524:	ed93 7a00 	vldr	s14, [r3]
 8009528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800952c:	3304      	adds	r3, #4
 800952e:	edd3 7a00 	vldr	s15, [r3]
 8009532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800953a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800953e:	3304      	adds	r3, #4
 8009540:	ed93 7a00 	vldr	s14, [r3]
 8009544:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009550:	3304      	adds	r3, #4
 8009552:	edd3 7a00 	vldr	s15, [r3]
 8009556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800955a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800955e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800956a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800956e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009572:	edd3 7a00 	vldr	s15, [r3]
 8009576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800957e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009582:	edd3 7a00 	vldr	s15, [r3]
 8009586:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800958a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800958e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009592:	edd3 7a00 	vldr	s15, [r3]
 8009596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800959a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800959e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095a2:	3304      	adds	r3, #4
 80095a4:	edd3 7a00 	vldr	s15, [r3]
 80095a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80095ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095b4:	3304      	adds	r3, #4
 80095b6:	edd3 7a00 	vldr	s15, [r3]
 80095ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095be:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80095c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095c6:	3304      	adds	r3, #4
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80095d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095d8:	3304      	adds	r3, #4
 80095da:	edd3 7a00 	vldr	s15, [r3]
 80095de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095e2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80095e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095ea:	ed93 7a00 	vldr	s14, [r3]
 80095ee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80095f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095fa:	edd3 7a00 	vldr	s15, [r3]
 80095fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009602:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800960a:	ed93 7a00 	vldr	s14, [r3]
 800960e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800961a:	edd3 7a00 	vldr	s15, [r3]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	603a      	str	r2, [r7, #0]
 8009624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009628:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800962c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009630:	3304      	adds	r3, #4
 8009632:	ed93 7a00 	vldr	s14, [r3]
 8009636:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800963a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800963e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009642:	3304      	adds	r3, #4
 8009644:	edd3 7a00 	vldr	s15, [r3]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	603a      	str	r2, [r7, #0]
 800964e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009652:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8009656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009662:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800966e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009670:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8009680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800968e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800969c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80096aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80096b2:	4413      	add	r3, r2
 80096b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80096b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80096c0:	4413      	add	r3, r2
 80096c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80096c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ce:	4413      	add	r3, r2
 80096d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80096d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096d8:	3b02      	subs	r3, #2
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096e0:	e31a      	b.n	8009d18 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	ed93 7a00 	vldr	s14, [r3]
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ec:	edd3 7a00 	vldr	s15, [r3]
 80096f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	ed93 7a00 	vldr	s14, [r3]
 80096fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009702:	edd3 7a00 	vldr	s15, [r3]
 8009706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800970a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	ed93 7a00 	vldr	s14, [r3]
 8009716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800971a:	3304      	adds	r3, #4
 800971c:	edd3 7a00 	vldr	s15, [r3]
 8009720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009724:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	ed93 7a00 	vldr	s14, [r3]
 8009730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009734:	3304      	adds	r3, #4
 8009736:	edd3 7a00 	vldr	s15, [r3]
 800973a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800973e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009746:	3304      	adds	r3, #4
 8009748:	ed93 7a00 	vldr	s14, [r3]
 800974c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009758:	3304      	adds	r3, #4
 800975a:	edd3 7a00 	vldr	s15, [r3]
 800975e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009762:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800976a:	edd3 7a00 	vldr	s15, [r3]
 800976e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009782:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800978a:	edd3 7a00 	vldr	s15, [r3]
 800978e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800979a:	edd3 7a00 	vldr	s15, [r3]
 800979e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80097a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097aa:	3304      	adds	r3, #4
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80097b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097bc:	3304      	adds	r3, #4
 80097be:	edd3 7a00 	vldr	s15, [r3]
 80097c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097c6:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80097ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ce:	3304      	adds	r3, #4
 80097d0:	edd3 7a00 	vldr	s15, [r3]
 80097d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097e0:	3304      	adds	r3, #4
 80097e2:	edd3 7a00 	vldr	s15, [r3]
 80097e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ea:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80097ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097f2:	ed93 7a00 	vldr	s14, [r3]
 80097f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80097fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009802:	edd3 7a00 	vldr	s15, [r3]
 8009806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800980a:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 800980e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009812:	ed93 7a00 	vldr	s14, [r3]
 8009816:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800981a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800981e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009822:	edd3 7a00 	vldr	s15, [r3]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	603a      	str	r2, [r7, #0]
 800982c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009830:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009838:	3304      	adds	r3, #4
 800983a:	ed93 7a00 	vldr	s14, [r3]
 800983e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800984a:	3304      	adds	r3, #4
 800984c:	edd3 7a00 	vldr	s15, [r3]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	603a      	str	r2, [r7, #0]
 8009856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800985e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009862:	3b04      	subs	r3, #4
 8009864:	ed93 7a00 	vldr	s14, [r3]
 8009868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800986c:	3b04      	subs	r3, #4
 800986e:	edd3 7a00 	vldr	s15, [r3]
 8009872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009876:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800987a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800987e:	3b04      	subs	r3, #4
 8009880:	ed93 7a00 	vldr	s14, [r3]
 8009884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009888:	3b04      	subs	r3, #4
 800988a:	edd3 7a00 	vldr	s15, [r3]
 800988e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009892:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8009896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800989a:	ed93 7a00 	vldr	s14, [r3]
 800989e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098a2:	edd3 7a00 	vldr	s15, [r3]
 80098a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80098ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b2:	ed93 7a00 	vldr	s14, [r3]
 80098b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ba:	edd3 7a00 	vldr	s15, [r3]
 80098be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80098c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098ca:	ed93 7a00 	vldr	s14, [r3]
 80098ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098d2:	edd3 7a00 	vldr	s15, [r3]
 80098d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80098de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80098e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ea:	ed93 7a00 	vldr	s14, [r3]
 80098ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098f2:	edd3 7a00 	vldr	s15, [r3]
 80098f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098fe:	3b04      	subs	r3, #4
 8009900:	edd3 7a00 	vldr	s15, [r3]
 8009904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800990c:	3b04      	subs	r3, #4
 800990e:	edd3 7a00 	vldr	s15, [r3]
 8009912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009916:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800991a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800991e:	3b04      	subs	r3, #4
 8009920:	edd3 7a00 	vldr	s15, [r3]
 8009924:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800992c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009930:	3b04      	subs	r3, #4
 8009932:	edd3 7a00 	vldr	s15, [r3]
 8009936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800993a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800993e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009942:	edd3 7a00 	vldr	s15, [r3]
 8009946:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800994a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800994e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009952:	edd3 7a00 	vldr	s15, [r3]
 8009956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800995e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009962:	ed93 7a00 	vldr	s14, [r3]
 8009966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800996a:	edd3 7a00 	vldr	s15, [r3]
 800996e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009972:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800997a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800997e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009982:	3b04      	subs	r3, #4
 8009984:	ed93 7a00 	vldr	s14, [r3]
 8009988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800998c:	3b04      	subs	r3, #4
 800998e:	edd3 7a00 	vldr	s15, [r3]
 8009992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009996:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800999a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800999e:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80099a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099a6:	ed93 7a00 	vldr	s14, [r3]
 80099aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80099ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099b6:	edd3 7a00 	vldr	s15, [r3]
 80099ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099be:	1f1a      	subs	r2, r3, #4
 80099c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099c8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80099cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099d0:	3b04      	subs	r3, #4
 80099d2:	ed93 7a00 	vldr	s14, [r3]
 80099d6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80099da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099e2:	3b04      	subs	r3, #4
 80099e4:	edd3 7a00 	vldr	s15, [r3]
 80099e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ec:	1f1a      	subs	r2, r3, #4
 80099ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f6:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80099fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099fe:	1d1a      	adds	r2, r3, #4
 8009a00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8009a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a0c:	1d1a      	adds	r2, r3, #4
 8009a0e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8009a16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8009a26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a2a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8009a36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a3a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8009a46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8009a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a5a:	1d1a      	adds	r2, r3, #4
 8009a5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a60:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a6c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8009a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009a7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a86:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8009a8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009a8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a96:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8009a9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009a9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8009aaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009aae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8009aba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009abe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8009aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ace:	1f1a      	subs	r2, r3, #4
 8009ad0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ad4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ae0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8009ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ae8:	1f1a      	subs	r2, r3, #4
 8009aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009aee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009af2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009afa:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8009afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8009b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8009b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009b16:	4413      	add	r3, r2
 8009b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8009b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b28:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8009b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b38:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8009b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b48:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8009b4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8009b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b66:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b72:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8009b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b80:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009b84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b8c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8009b90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b94:	eef1 7a67 	vneg.f32	s15, s15
 8009b98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8009ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8009bb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009bb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8009bc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009bc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8009bd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bd8:	1f1a      	subs	r2, r3, #4
 8009bda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bde:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009be2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bea:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8009bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bf2:	1f1a      	subs	r2, r3, #4
 8009bf4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bf8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009bfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c04:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8009c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8009c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8009c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c20:	4413      	add	r3, r2
 8009c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8009c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8009c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c3a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8009c46:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8009c56:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009c70:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009c74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8009c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009c8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c96:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8009c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8009caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8009cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cbe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8009cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8009cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cde:	1f1a      	subs	r2, r3, #4
 8009ce0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009ce4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ce8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cf0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8009cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf8:	1f1a      	subs	r2, r3, #4
 8009cfa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009cfe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d0a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8009d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d12:	3b01      	subs	r3, #1
 8009d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f47f ace0 	bne.w	80096e2 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	ed93 7a00 	vldr	s14, [r3]
 8009d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d2c:	edd3 7a00 	vldr	s15, [r3]
 8009d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d34:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	ed93 7a00 	vldr	s14, [r3]
 8009d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d42:	edd3 7a00 	vldr	s15, [r3]
 8009d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d4a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	3304      	adds	r3, #4
 8009d52:	ed93 7a00 	vldr	s14, [r3]
 8009d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	edd3 7a00 	vldr	s15, [r3]
 8009d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d64:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	ed93 7a00 	vldr	s14, [r3]
 8009d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d74:	3304      	adds	r3, #4
 8009d76:	edd3 7a00 	vldr	s15, [r3]
 8009d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d86:	3304      	adds	r3, #4
 8009d88:	ed93 7a00 	vldr	s14, [r3]
 8009d8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d98:	3304      	adds	r3, #4
 8009d9a:	edd3 7a00 	vldr	s15, [r3]
 8009d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009daa:	edd3 7a00 	vldr	s15, [r3]
 8009dae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dba:	edd3 7a00 	vldr	s15, [r3]
 8009dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dca:	edd3 7a00 	vldr	s15, [r3]
 8009dce:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dda:	edd3 7a00 	vldr	s15, [r3]
 8009dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dea:	3304      	adds	r3, #4
 8009dec:	edd3 7a00 	vldr	s15, [r3]
 8009df0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	edd3 7a00 	vldr	s15, [r3]
 8009e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e06:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e0e:	3304      	adds	r3, #4
 8009e10:	edd3 7a00 	vldr	s15, [r3]
 8009e14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e20:	3304      	adds	r3, #4
 8009e22:	edd3 7a00 	vldr	s15, [r3]
 8009e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e2a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e32:	ed93 7a00 	vldr	s14, [r3]
 8009e36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e4a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e52:	ed93 7a00 	vldr	s14, [r3]
 8009e56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e62:	edd3 7a00 	vldr	s15, [r3]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	1d1a      	adds	r2, r3, #4
 8009e6a:	603a      	str	r2, [r7, #0]
 8009e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e70:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e78:	3304      	adds	r3, #4
 8009e7a:	ed93 7a00 	vldr	s14, [r3]
 8009e7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	edd3 7a00 	vldr	s15, [r3]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	603a      	str	r2, [r7, #0]
 8009e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9a:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8009e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009eae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009eb2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009ebe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ec2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009ece:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ed2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eda:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009ede:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009ee2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ef2:	1d1a      	adds	r2, r3, #4
 8009ef4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009ef8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009efc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f04:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f0c:	1d1a      	adds	r2, r3, #4
 8009f0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009f12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f1e:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8009f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8009f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8009f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8009f42:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8009f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8009f62:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8009f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f76:	1d1a      	adds	r2, r3, #4
 8009f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f7c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f88:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8009f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f90:	1d1a      	adds	r2, r3, #4
 8009f92:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fa2:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8009fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009fc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fda:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a000:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a004:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a00c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800a010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a01a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a01e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a022:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a026:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800a02a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a02e:	b299      	uxth	r1, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	2304      	movs	r3, #4
 800a036:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a038:	f000 f8c2 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800a03c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a040:	b299      	uxth	r1, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	2304      	movs	r3, #4
 800a048:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a04a:	f000 f8b9 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800a04e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a052:	b299      	uxth	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	2304      	movs	r3, #4
 800a05a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a05c:	f000 f8b0 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800a060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a064:	b299      	uxth	r1, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	2304      	movs	r3, #4
 800a06c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a06e:	f000 f8a7 	bl	800a1c0 <arm_radix8_butterfly_f32>
}
 800a072:	bf00      	nop
 800a074:	37b0      	adds	r7, #176	; 0xb0
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	460b      	mov	r3, r1
 800a08a:	71fb      	strb	r3, [r7, #7]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d117      	bne.n	800a0cc <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	e00d      	b.n	800a0c4 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	edd3 7a00 	vldr	s15, [r3]
 800a0ae:	eef1 7a67 	vneg.f32	s15, s15
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d3ed      	bcc.n	800a0a8 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d2:	d024      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d80b      	bhi.n	800a0f2 <arm_cfft_f32+0x78>
 800a0da:	2b20      	cmp	r3, #32
 800a0dc:	d01f      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d802      	bhi.n	800a0e8 <arm_cfft_f32+0x6e>
 800a0e2:	2b10      	cmp	r3, #16
 800a0e4:	d016      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0e6:	e028      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d01d      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a0ec:	2b80      	cmp	r3, #128	; 0x80
 800a0ee:	d011      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0f0:	e023      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f6:	d00d      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0fc:	d803      	bhi.n	800a106 <arm_cfft_f32+0x8c>
 800a0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a102:	d011      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a104:	e019      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10a:	d008      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a110:	d00a      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a112:	e012      	b.n	800a13a <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7fe ff90 	bl	800903c <arm_cfft_radix8by2_f32>
        break;
 800a11c:	e00d      	b.n	800a13a <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff f97f 	bl	8009424 <arm_cfft_radix8by4_f32>
        break;
 800a126:	e008      	b.n	800a13a <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	b299      	uxth	r1, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	2301      	movs	r3, #1
 800a132:	68b8      	ldr	r0, [r7, #8]
 800a134:	f000 f844 	bl	800a1c0 <arm_radix8_butterfly_f32>
        break;
 800a138:	bf00      	nop
    }  

    if( bitReverseFlag )
 800a13a:	79bb      	ldrb	r3, [r7, #6]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d007      	beq.n	800a150 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8999      	ldrh	r1, [r3, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	461a      	mov	r2, r3
 800a14a:	68b8      	ldr	r0, [r7, #8]
 800a14c:	f7fe f878 	bl	8008240 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d130      	bne.n	800a1b8 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a168:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a170:	2300      	movs	r3, #0
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e01c      	b.n	800a1b0 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	1d1a      	adds	r2, r3, #4
 800a17a:	61ba      	str	r2, [r7, #24]
 800a17c:	ed93 7a00 	vldr	s14, [r3]
 800a180:	edd7 7a04 	vldr	s15, [r7, #16]
 800a184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a188:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	edd3 7a00 	vldr	s15, [r3]
 800a192:	eeb1 7a67 	vneg.f32	s14, s15
 800a196:	edd7 7a04 	vldr	s15, [r7, #16]
 800a19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	61fb      	str	r3, [r7, #28]
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d3de      	bcc.n	800a176 <arm_cfft_f32+0xfc>
        }
    }
}
 800a1b8:	bf00      	nop
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b0bd      	sub	sp, #244	; 0xf4
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	817b      	strh	r3, [r7, #10]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a1d4:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <arm_radix8_butterfly_f32+0x3c>)
 800a1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a1da:	897b      	ldrh	r3, [r7, #10]
 800a1dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800a1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ec:	08db      	lsrs	r3, r3, #3
 800a1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1f8:	e002      	b.n	800a200 <arm_radix8_butterfly_f32+0x40>
 800a1fa:	bf00      	nop
 800a1fc:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800a200:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a208:	4413      	add	r3, r2
 800a20a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a20e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	4413      	add	r3, r2
 800a218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a21c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a224:	4413      	add	r3, r2
 800a226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a22a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a232:	4413      	add	r3, r2
 800a234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a238:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a240:	4413      	add	r3, r2
 800a242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24e:	4413      	add	r3, r2
 800a250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a25c:	4413      	add	r3, r2
 800a25e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	ed93 7a00 	vldr	s14, [r3]
 800a270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4413      	add	r3, r2
 800a27a:	edd3 7a00 	vldr	s15, [r3]
 800a27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a282:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	ed93 7a00 	vldr	s14, [r3]
 800a294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	edd3 7a00 	vldr	s15, [r3]
 800a2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	ed93 7a00 	vldr	s14, [r3]
 800a2b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	edd3 7a00 	vldr	s15, [r3]
 800a2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a2ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	ed93 7a00 	vldr	s14, [r3]
 800a2dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	edd3 7a00 	vldr	s15, [r3]
 800a2ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2ee:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a2f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	ed93 7a00 	vldr	s14, [r3]
 800a300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	edd3 7a00 	vldr	s15, [r3]
 800a30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a312:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	ed93 7a00 	vldr	s14, [r3]
 800a324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	edd3 7a00 	vldr	s15, [r3]
 800a332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a336:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a33a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4413      	add	r3, r2
 800a344:	ed93 7a00 	vldr	s14, [r3]
 800a348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	edd3 7a00 	vldr	s15, [r3]
 800a356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a35a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a35e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	ed93 7a00 	vldr	s14, [r3]
 800a36c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4413      	add	r3, r2
 800a376:	edd3 7a00 	vldr	s15, [r3]
 800a37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a37e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a382:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a386:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a38a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a38e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a392:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a396:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a39e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a3a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a3a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a3b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a3b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800a3c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a3d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a3d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a3dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a3ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3f2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a3f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4413      	add	r3, r2
 800a402:	ed93 7a00 	vldr	s14, [r3]
 800a406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	3304      	adds	r3, #4
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	edd3 7a00 	vldr	s15, [r3]
 800a416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a41a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a41e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	ed93 7a00 	vldr	s14, [r3]
 800a42e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	3304      	adds	r3, #4
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	edd3 7a00 	vldr	s15, [r3]
 800a43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a442:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	ed93 7a00 	vldr	s14, [r3]
 800a456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	3304      	adds	r3, #4
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	4413      	add	r3, r2
 800a462:	edd3 7a00 	vldr	s15, [r3]
 800a466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a46a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	3304      	adds	r3, #4
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	ed93 7a00 	vldr	s14, [r3]
 800a47e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	3304      	adds	r3, #4
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	edd3 7a00 	vldr	s15, [r3]
 800a48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a492:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	3304      	adds	r3, #4
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	ed93 7a00 	vldr	s14, [r3]
 800a4a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	edd3 7a00 	vldr	s15, [r3]
 800a4b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a4be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	ed93 7a00 	vldr	s14, [r3]
 800a4ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	edd3 7a00 	vldr	s15, [r3]
 800a4de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	ed93 7a00 	vldr	s14, [r3]
 800a4f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	edd3 7a00 	vldr	s15, [r3]
 800a506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a50a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a50e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	3304      	adds	r3, #4
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	ed93 7a00 	vldr	s14, [r3]
 800a51e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	3304      	adds	r3, #4
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	edd3 7a00 	vldr	s15, [r3]
 800a52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a532:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a536:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a53a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a542:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a546:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a54a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a54e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a552:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a556:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a55a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a55e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a562:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a566:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a56a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a56e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a572:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a586:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a58e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	3304      	adds	r3, #4
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a5a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a5ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a5bc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5c4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800a5c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a5d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800a5e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a5f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a5f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800a5fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	3304      	adds	r3, #4
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a60e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a612:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a616:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800a61a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a61e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a622:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a626:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800a632:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a636:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a63e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800a64a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a64e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a656:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800a662:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a666:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a66a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a66e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a676:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800a67a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a67e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a682:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a686:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800a68a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a68e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a696:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800a69a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a69e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800a6aa:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a6ae:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800a6ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a6be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800a6ca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a6ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800a6da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a6de:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6e6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800a6ea:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a6ee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6f6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800a6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a708:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a710:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800a714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a722:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a72a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800a72e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a73c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a740:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a744:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800a748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a756:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800a762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	3304      	adds	r3, #4
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a772:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800a77e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3304      	adds	r3, #4
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a78e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a792:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a796:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800a79a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a7aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a7ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800a7b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	3304      	adds	r3, #4
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a7c6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a7ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ce:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800a7d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a7d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7da:	4413      	add	r3, r2
 800a7dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800a7e0:	897b      	ldrh	r3, [r7, #10]
 800a7e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	f4ff ad0a 	bcc.w	800a200 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f0:	2b07      	cmp	r3, #7
 800a7f2:	f240 84e3 	bls.w	800b1bc <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800a802:	893b      	ldrh	r3, [r7, #8]
 800a804:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a808:	4413      	add	r3, r2
 800a80a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800a80c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a80e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800a812:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a818:	4413      	add	r3, r2
 800a81a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800a81c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a81e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a820:	4413      	add	r3, r2
 800a822:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800a824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a828:	4413      	add	r3, r2
 800a82a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800a82c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a82e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a830:	4413      	add	r3, r2
 800a832:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800a834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a838:	4413      	add	r3, r2
 800a83a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800a83c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a83e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a840:	4413      	add	r3, r2
 800a842:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800a844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800a852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800a85e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	4413      	add	r3, r2
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800a86a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800a876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800a882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800a88e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4413      	add	r3, r2
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800a89a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800a8aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800a8b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	3304      	adds	r3, #4
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800a8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	3304      	adds	r3, #4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800a8e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800a8f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800a8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800a906:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90e:	4413      	add	r3, r2
 800a910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800a914:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91c:	4413      	add	r3, r2
 800a91e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800a922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a92a:	4413      	add	r3, r2
 800a92c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800a930:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a938:	4413      	add	r3, r2
 800a93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800a93e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a946:	4413      	add	r3, r2
 800a948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800a94c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a954:	4413      	add	r3, r2
 800a956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800a95a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	4413      	add	r3, r2
 800a964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	ed93 7a00 	vldr	s14, [r3]
 800a976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	edd3 7a00 	vldr	s15, [r3]
 800a984:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a988:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a98c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	ed93 7a00 	vldr	s14, [r3]
 800a99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a99e:	00db      	lsls	r3, r3, #3
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	edd3 7a00 	vldr	s15, [r3]
 800a9a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ac:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a9b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	ed93 7a00 	vldr	s14, [r3]
 800a9be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	edd3 7a00 	vldr	s15, [r3]
 800a9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9d0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a9d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	ed93 7a00 	vldr	s14, [r3]
 800a9e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	edd3 7a00 	vldr	s15, [r3]
 800a9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9f4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a9f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	ed93 7a00 	vldr	s14, [r3]
 800aa06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	edd3 7a00 	vldr	s15, [r3]
 800aa14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa18:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800aa1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	ed93 7a00 	vldr	s14, [r3]
 800aa2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa3c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800aa40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	ed93 7a00 	vldr	s14, [r3]
 800aa4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	edd3 7a00 	vldr	s15, [r3]
 800aa5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa60:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	ed93 7a00 	vldr	s14, [r3]
 800aa72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa84:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800aa88:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa94:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800aa98:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa9c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aaa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaa4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800aaa8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aaac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aab4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800aab8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aabc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800aac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aad6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800aada:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aade:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800aae2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aae6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800aaea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800aaf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	3304      	adds	r3, #4
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	ed93 7a00 	vldr	s14, [r3]
 800ab02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	3304      	adds	r3, #4
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	edd3 7a00 	vldr	s15, [r3]
 800ab12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800ab1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	3304      	adds	r3, #4
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	ed93 7a00 	vldr	s14, [r3]
 800ab2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	3304      	adds	r3, #4
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	edd3 7a00 	vldr	s15, [r3]
 800ab3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800ab42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	3304      	adds	r3, #4
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	ed93 7a00 	vldr	s14, [r3]
 800ab52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	3304      	adds	r3, #4
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	edd3 7a00 	vldr	s15, [r3]
 800ab62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800ab6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	3304      	adds	r3, #4
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	ed93 7a00 	vldr	s14, [r3]
 800ab7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	3304      	adds	r3, #4
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	edd3 7a00 	vldr	s15, [r3]
 800ab8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab8e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ab92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	3304      	adds	r3, #4
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	ed93 7a00 	vldr	s14, [r3]
 800aba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	3304      	adds	r3, #4
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	edd3 7a00 	vldr	s15, [r3]
 800abb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abb6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800abba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	3304      	adds	r3, #4
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	ed93 7a00 	vldr	s14, [r3]
 800abca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	3304      	adds	r3, #4
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	edd3 7a00 	vldr	s15, [r3]
 800abda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abde:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800abe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	3304      	adds	r3, #4
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4413      	add	r3, r2
 800abee:	ed93 7a00 	vldr	s14, [r3]
 800abf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	3304      	adds	r3, #4
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	edd3 7a00 	vldr	s15, [r3]
 800ac02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac06:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ac0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3304      	adds	r3, #4
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	ed93 7a00 	vldr	s14, [r3]
 800ac1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	3304      	adds	r3, #4
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	edd3 7a00 	vldr	s15, [r3]
 800ac2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800ac32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac3e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800ac42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ac52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac56:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800ac62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac66:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800ac72:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ac76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac7e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ac82:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ac86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac8e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ac92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	3304      	adds	r3, #4
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acaa:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800acae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800acbe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800acc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800acc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800acce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800acd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800acd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800acde:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ace2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ace6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acea:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800acee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800acf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800acfe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ad02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800ad0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ad12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ad16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800ad1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad2c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad34:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800ad38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	3304      	adds	r3, #4
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad48:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad50:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800ad54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ad58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ad5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad60:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800ad64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad70:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800ad74:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ad78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad80:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800ad84:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800ad94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ada2:	edd7 7a06 	vldr	s15, [r7, #24]
 800ada6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adaa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800adae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	3304      	adds	r3, #4
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	ed97 7a05 	vldr	s14, [r7, #20]
 800adbe:	edd7 7a04 	vldr	s15, [r7, #16]
 800adc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adc6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800adca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800adce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800add2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800adda:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800adde:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800adea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800adee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800adfa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800adfe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800ae0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae18:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae20:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800ae24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae34:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae3c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800ae40:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ae44:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae4c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae54:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800ae58:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ae5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae64:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800ae70:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ae74:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ae78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae7c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800ae88:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ae8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ae90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae94:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800aea0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aea4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800aeb0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aeb4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aeb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aebc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800aec0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aec4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aecc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800aed0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aed4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aedc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800aee0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aee4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800aef0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aefc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800af00:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af04:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af0c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800af10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af14:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af1c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800af20:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af24:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800af28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af2c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800af30:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af34:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800af38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af3c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800af40:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800af44:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af4c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800af50:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800af54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af5c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800af60:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af64:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800af68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800af70:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800af78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af7c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800af80:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800af84:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af8c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800af90:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800af94:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af9c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800afa0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800afa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800afb0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800afb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800afc0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800afc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afcc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800afd0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800afd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afdc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800afe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4413      	add	r3, r2
 800afea:	ed97 7a07 	vldr	s14, [r7, #28]
 800afee:	edd7 7a06 	vldr	s15, [r7, #24]
 800aff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800affa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	3304      	adds	r3, #4
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4413      	add	r3, r2
 800b006:	ed97 7a05 	vldr	s14, [r7, #20]
 800b00a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b012:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b016:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b01a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b026:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b02a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b032:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b036:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b03a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b046:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b04a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b052:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	ed97 7a07 	vldr	s14, [r7, #28]
 800b064:	edd7 7a06 	vldr	s15, [r7, #24]
 800b068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b06c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	3304      	adds	r3, #4
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4413      	add	r3, r2
 800b07c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b080:	edd7 7a04 	vldr	s15, [r7, #16]
 800b084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b088:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b08c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b090:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b098:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b09c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b0ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b0b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b0bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b0cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b0da:	edd7 7a06 	vldr	s15, [r7, #24]
 800b0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b0e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b0f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fe:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b102:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b106:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b112:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b116:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b122:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b126:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b132:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b136:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	4413      	add	r3, r2
 800b14c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b150:	edd7 7a06 	vldr	s15, [r7, #24]
 800b154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b158:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b15c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	3304      	adds	r3, #4
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	ed97 7a05 	vldr	s14, [r7, #20]
 800b16c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b174:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800b178:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b17c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b180:	4413      	add	r3, r2
 800b182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800b186:	897b      	ldrh	r3, [r7, #10]
 800b188:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b18c:	429a      	cmp	r2, r3
 800b18e:	f4ff abba 	bcc.w	800a906 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800b192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b196:	3301      	adds	r3, #1
 800b198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800b19c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	f4ff ab2c 	bcc.w	800a802 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800b1aa:	893b      	ldrh	r3, [r7, #8]
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800b1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b4:	2b07      	cmp	r3, #7
 800b1b6:	f63f a813 	bhi.w	800a1e0 <arm_radix8_butterfly_f32+0x20>
}
 800b1ba:	e000      	b.n	800b1be <arm_radix8_butterfly_f32+0xffe>
         break;
 800b1bc:	bf00      	nop
}
 800b1be:	bf00      	nop
 800b1c0:	37f4      	adds	r7, #244	; 0xf4
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	460a      	mov	r2, r1
 800b1d6:	71fb      	strb	r3, [r7, #7]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	b25a      	sxtb	r2, r3
 800b1e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	b25b      	sxtb	r3, r3
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	f000 f832 	bl	800b258 <writeByteToReg>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	733b      	strb	r3, [r7, #12]
	CS_0();
 800b20a:	2200      	movs	r2, #0
 800b20c:	2110      	movs	r1, #16
 800b20e:	4809      	ldr	r0, [pc, #36]	; (800b234 <writeCMD+0x38>)
 800b210:	f004 f8d4 	bl	800f3bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800b214:	f107 010c 	add.w	r1, r7, #12
 800b218:	2332      	movs	r3, #50	; 0x32
 800b21a:	2201      	movs	r2, #1
 800b21c:	4806      	ldr	r0, [pc, #24]	; (800b238 <writeCMD+0x3c>)
 800b21e:	f006 fc15 	bl	8011a4c <HAL_SPI_Transmit>
	CS_1();
 800b222:	2201      	movs	r2, #1
 800b224:	2110      	movs	r1, #16
 800b226:	4803      	ldr	r0, [pc, #12]	; (800b234 <writeCMD+0x38>)
 800b228:	f004 f8c8 	bl	800f3bc <HAL_GPIO_WritePin>
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	40020000 	.word	0x40020000
 800b238:	2001878c 	.word	0x2001878c

0800b23c <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 800b246:	79fb      	ldrb	r3, [r7, #7]
 800b248:	4619      	mov	r1, r3
 800b24a:	2003      	movs	r0, #3
 800b24c:	f000 f804 	bl	800b258 <writeByteToReg>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	460a      	mov	r2, r1
 800b262:	71fb      	strb	r3, [r7, #7]
 800b264:	4613      	mov	r3, r2
 800b266:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800b272:	2300      	movs	r3, #0
 800b274:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800b276:	79bb      	ldrb	r3, [r7, #6]
 800b278:	73bb      	strb	r3, [r7, #14]
	CS_0();
 800b27a:	2200      	movs	r2, #0
 800b27c:	2110      	movs	r1, #16
 800b27e:	4809      	ldr	r0, [pc, #36]	; (800b2a4 <writeByteToReg+0x4c>)
 800b280:	f004 f89c 	bl	800f3bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800b284:	f107 010c 	add.w	r1, r7, #12
 800b288:	2364      	movs	r3, #100	; 0x64
 800b28a:	2203      	movs	r2, #3
 800b28c:	4806      	ldr	r0, [pc, #24]	; (800b2a8 <writeByteToReg+0x50>)
 800b28e:	f006 fbdd 	bl	8011a4c <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800b292:	2201      	movs	r2, #1
 800b294:	2110      	movs	r1, #16
 800b296:	4803      	ldr	r0, [pc, #12]	; (800b2a4 <writeByteToReg+0x4c>)
 800b298:	f004 f890 	bl	800f3bc <HAL_GPIO_WritePin>

}
 800b29c:	bf00      	nop
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	40020000 	.word	0x40020000
 800b2a8:	2001878c 	.word	0x2001878c

0800b2ac <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2002      	movs	r0, #2
 800b2bc:	f7ff ffcc 	bl	800b258 <writeByteToReg>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	e009      	b.n	800b2e8 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 800b2d4:	2108      	movs	r1, #8
 800b2d6:	4809      	ldr	r0, [pc, #36]	; (800b2fc <waitDRDY+0x34>)
 800b2d8:	f004 f858 	bl	800f38c <HAL_GPIO_ReadPin>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a05      	ldr	r2, [pc, #20]	; (800b300 <waitDRDY+0x38>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d9f1      	bls.n	800b2d4 <waitDRDY+0xc>
				break;
			}
		}
}
 800b2f0:	e000      	b.n	800b2f4 <waitDRDY+0x2c>
				break;
 800b2f2:	bf00      	nop
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	40020000 	.word	0x40020000
 800b300:	026259ff 	.word	0x026259ff

0800b304 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
	waitDRDY();
 800b30a:	f7ff ffdd 	bl	800b2c8 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 800b30e:	2000      	movs	r0, #0
 800b310:	f000 f820 	bl	800b354 <readByteFromReg>
 800b314:	4603      	mov	r3, r0
 800b316:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	b2db      	uxtb	r3, r3
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800b32e:	23ff      	movs	r3, #255	; 0xff
 800b330:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 800b336:	1dba      	adds	r2, r7, #6
 800b338:	1df9      	adds	r1, r7, #7
 800b33a:	2332      	movs	r3, #50	; 0x32
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	2301      	movs	r3, #1
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <receive8bit+0x28>)
 800b342:	f006 fce9 	bl	8011d18 <HAL_SPI_TransmitReceive>
	return read;
 800b346:	79bb      	ldrb	r3, [r7, #6]



}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	2001878c 	.word	0x2001878c

0800b354 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	f043 0310 	orr.w	r3, r3, #16
 800b364:	b2db      	uxtb	r3, r3
 800b366:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 800b368:	2300      	movs	r3, #0
 800b36a:	737b      	strb	r3, [r7, #13]
	CS_0();
 800b36c:	2200      	movs	r2, #0
 800b36e:	2110      	movs	r1, #16
 800b370:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <readByteFromReg+0x54>)
 800b372:	f004 f823 	bl	800f3bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800b376:	f107 010c 	add.w	r1, r7, #12
 800b37a:	2332      	movs	r3, #50	; 0x32
 800b37c:	2202      	movs	r2, #2
 800b37e:	480b      	ldr	r0, [pc, #44]	; (800b3ac <readByteFromReg+0x58>)
 800b380:	f006 fb64 	bl	8011a4c <HAL_SPI_Transmit>
	delay_us(10);
 800b384:	200a      	movs	r0, #10
 800b386:	f000 fad5 	bl	800b934 <delay_us>
	uint8_t read = receive8bit();
 800b38a:	f7ff ffcd 	bl	800b328 <receive8bit>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800b392:	2201      	movs	r2, #1
 800b394:	2110      	movs	r1, #16
 800b396:	4804      	ldr	r0, [pc, #16]	; (800b3a8 <readByteFromReg+0x54>)
 800b398:	f004 f810 	bl	800f3bc <HAL_GPIO_WritePin>

	return read;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	40020000 	.word	0x40020000
 800b3ac:	2001878c 	.word	0x2001878c

0800b3b0 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800b3ba:	2350      	movs	r3, #80	; 0x50
 800b3bc:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	b25b      	sxtb	r3, r3
 800b3c4:	f043 0304 	orr.w	r3, r3, #4
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	717b      	strb	r3, [r7, #5]

	CS_0();
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2110      	movs	r1, #16
 800b3d2:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <setBuffer+0x48>)
 800b3d4:	f003 fff2 	bl	800f3bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800b3d8:	1d39      	adds	r1, r7, #4
 800b3da:	2332      	movs	r3, #50	; 0x32
 800b3dc:	2202      	movs	r2, #2
 800b3de:	4807      	ldr	r0, [pc, #28]	; (800b3fc <setBuffer+0x4c>)
 800b3e0:	f006 fb34 	bl	8011a4c <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	2110      	movs	r1, #16
 800b3e8:	4803      	ldr	r0, [pc, #12]	; (800b3f8 <setBuffer+0x48>)
 800b3ea:	f003 ffe7 	bl	800f3bc <HAL_GPIO_WritePin>
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	40020000 	.word	0x40020000
 800b3fc:	2001878c 	.word	0x2001878c

0800b400 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b404:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b408:	4b05      	ldr	r3, [pc, #20]	; (800b420 <__NVIC_SystemReset+0x20>)
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b410:	4903      	ldr	r1, [pc, #12]	; (800b420 <__NVIC_SystemReset+0x20>)
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <__NVIC_SystemReset+0x24>)
 800b414:	4313      	orrs	r3, r2
 800b416:	60cb      	str	r3, [r1, #12]
 800b418:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b41c:	bf00      	nop
 800b41e:	e7fd      	b.n	800b41c <__NVIC_SystemReset+0x1c>
 800b420:	e000ed00 	.word	0xe000ed00
 800b424:	05fa0004 	.word	0x05fa0004

0800b428 <BLE_USART>:

/* Private variables ---------------------------------------------------------*/

void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData);
void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b090      	sub	sp, #64	; 0x40
 800b42c:	af0e      	add	r7, sp, #56	; 0x38
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]

	if( USARTBLE.IAPflag == 1)
 800b432:	4b41      	ldr	r3, [pc, #260]	; (800b538 <BLE_USART+0x110>)
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d008      	beq.n	800b44c <BLE_USART+0x24>
	{
		USARTBLE.sendflag =0;
 800b43a:	4b3f      	ldr	r3, [pc, #252]	; (800b538 <BLE_USART+0x110>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 800b440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b444:	f000 face 	bl	800b9e4 <TM_DelayMillis>
		NVIC_SystemReset();
 800b448:	f7ff ffda 	bl	800b400 <__NVIC_SystemReset>
		{
			HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 10);
		}
		*/
	}
	if(USARTBLE.sendflag ==1)
 800b44c:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <BLE_USART+0x110>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d06d      	beq.n	800b530 <BLE_USART+0x108>
	{

		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b45a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b53c <BLE_USART+0x114>
 800b45e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b462:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					sendpData->Statistic_max*1000,sendpData->Statistic_var*1000,sendpData->Statistic_crestFactor*1000,
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	edd3 6a00 	vldr	s13, [r3]
 800b46c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800b53c <BLE_USART+0x114>
 800b470:	ee66 6a86 	vmul.f32	s13, s13, s12
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b474:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					sendpData->Statistic_max*1000,sendpData->Statistic_var*1000,sendpData->Statistic_crestFactor*1000,
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	edd3 5a02 	vldr	s11, [r3, #8]
 800b47e:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 800b53c <BLE_USART+0x114>
 800b482:	ee65 5a85 	vmul.f32	s11, s11, s10
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b486:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					sendpData->Statistic_max*1000,sendpData->Statistic_var*1000,sendpData->Statistic_crestFactor*1000,
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	edd3 4a06 	vldr	s9, [r3, #24]
 800b490:	ed9f 4a2a 	vldr	s8, [pc, #168]	; 800b53c <BLE_USART+0x114>
 800b494:	ee64 4a84 	vmul.f32	s9, s9, s8
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b498:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*10000,
 800b49c:	4b28      	ldr	r3, [pc, #160]	; (800b540 <BLE_USART+0x118>)
 800b49e:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
 800b4a2:	ed9f 3a26 	vldr	s6, [pc, #152]	; 800b53c <BLE_USART+0x114>
 800b4a6:	ee63 3a83 	vmul.f32	s7, s7, s6
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b4aa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*10000,
 800b4ae:	4b24      	ldr	r3, [pc, #144]	; (800b540 <BLE_USART+0x118>)
 800b4b0:	edd3 2a0c 	vldr	s5, [r3, #48]	; 0x30
 800b4b4:	ed9f 2a23 	vldr	s4, [pc, #140]	; 800b544 <BLE_USART+0x11c>
 800b4b8:	ee62 2a82 	vmul.f32	s5, s5, s4
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b4bc:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
					statistic_value.Statistic_FreqPeak[2]*10000);
 800b4c0:	4b1f      	ldr	r3, [pc, #124]	; (800b540 <BLE_USART+0x118>)
 800b4c2:	edd3 1a0d 	vldr	s3, [r3, #52]	; 0x34
 800b4c6:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800b544 <BLE_USART+0x11c>
 800b4ca:	ee61 1a81 	vmul.f32	s3, s3, s2
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,
 800b4ce:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 800b4d2:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800b4d6:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800b4da:	ed8d 3b08 	vstr	d3, [sp, #32]
 800b4de:	ed8d 4b06 	vstr	d4, [sp, #24]
 800b4e2:	ed8d 5b04 	vstr	d5, [sp, #16]
 800b4e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b4ea:	ed8d 7b00 	vstr	d7, [sp]
 800b4ee:	4a16      	ldr	r2, [pc, #88]	; (800b548 <BLE_USART+0x120>)
 800b4f0:	2180      	movs	r1, #128	; 0x80
 800b4f2:	4816      	ldr	r0, [pc, #88]	; (800b54c <BLE_USART+0x124>)
 800b4f4:	f002 fdc6 	bl	800e084 <snprintf_>

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800b4f8:	4814      	ldr	r0, [pc, #80]	; (800b54c <BLE_USART+0x124>)
 800b4fa:	f7fc ff01 	bl	8008300 <strlen>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b80      	cmp	r3, #128	; 0x80
 800b502:	d804      	bhi.n	800b50e <BLE_USART+0xe6>
 800b504:	4811      	ldr	r0, [pc, #68]	; (800b54c <BLE_USART+0x124>)
 800b506:	f7fc fefb 	bl	8008300 <strlen>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e000      	b.n	800b510 <BLE_USART+0xe8>
 800b50e:	2380      	movs	r3, #128	; 0x80
 800b510:	4a09      	ldr	r2, [pc, #36]	; (800b538 <BLE_USART+0x110>)
 800b512:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		//USARTBLE.sendTimeout = 100 ;
		if(HAL_UART_Transmit_DMA(huart, (uint8_t *)USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 800b516:	4b08      	ldr	r3, [pc, #32]	; (800b538 <BLE_USART+0x110>)
 800b518:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	490a      	ldr	r1, [pc, #40]	; (800b54c <BLE_USART+0x124>)
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f007 faf8 	bl	8012b18 <HAL_UART_Transmit_DMA>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d100      	bne.n	800b530 <BLE_USART+0x108>
		{
			__NOP();
 800b52e:	bf00      	nop
		 char C[20];
		 strcpy(C,  USARTBLE.Rbuffer );
		 */
		 //0x1;
	}
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20010540 	.word	0x20010540
 800b53c:	447a0000 	.word	0x447a0000
 800b540:	200080e4 	.word	0x200080e4
 800b544:	461c4000 	.word	0x461c4000
 800b548:	080165a8 	.word	0x080165a8
 800b54c:	200105e0 	.word	0x200105e0

0800b550 <Calculate_FreqMax>:


		return max;
}
void Calculate_FreqMax(float *x,  FreqMaxMin * FreqMaxMin , int8_t freq_index)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08c      	sub	sp, #48	; 0x30
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	71fb      	strb	r3, [r7, #7]
	if(FreqMaxMin->Max != 0)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d071      	beq.n	800b64a <Calculate_FreqMax+0xfa>
	{

		int DATARE = 15000;
 800b566:	f643 2398 	movw	r3, #15000	; 0x3a98
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
		float frequencyResolution = 15000/(float)fftSize;
 800b56c:	4b3c      	ldr	r3, [pc, #240]	; (800b660 <Calculate_FreqMax+0x110>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	ee07 3a90 	vmov	s15, r3
 800b574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b578:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b664 <Calculate_FreqMax+0x114>
 800b57c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b580:	edc7 7a08 	vstr	s15, [r7, #32]
		float ans = 0;
 800b584:	f04f 0300 	mov.w	r3, #0
 800b588:	61fb      	str	r3, [r7, #28]
		//DRATE_15000 = 15000
		float parseRangeMax = FreqMaxMin->Max / frequencyResolution;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	ee07 3a90 	vmov	s15, r3
 800b592:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b596:	ed97 7a08 	vldr	s14, [r7, #32]
 800b59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59e:	edc7 7a06 	vstr	s15, [r7, #24]
		float parseRangeMin = FreqMaxMin->Min / frequencyResolution;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b5ae:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b6:	edc7 7a05 	vstr	s15, [r7, #20]
		float ParsevalFftPower = 0;
 800b5ba:	f04f 0300 	mov.w	r3, #0
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c

		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b5c0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5c8:	ee17 3a90 	vmov	r3, s15
 800b5cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5ce:	e016      	b.n	800b5fe <Calculate_FreqMax+0xae>
		{
			//FFTRMSArray[i] = (testOutput[i]*2)/4096;
			ParsevalFftPower += x[i] * x[i];
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	ed93 7a00 	vldr	s14, [r3]
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	edd3 7a00 	vldr	s15, [r3]
 800b5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800b602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b606:	ee17 2a90 	vmov	r2, s15
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	4293      	cmp	r3, r2
 800b60e:	dbdf      	blt.n	800b5d0 <Calculate_FreqMax+0x80>
		}

		ans = sqrt(ParsevalFftPower * 2)/4096;
 800b610:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b614:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b618:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b61c:	eeb0 0b47 	vmov.f64	d0, d7
 800b620:	f00a ff12 	bl	8016448 <sqrt>
 800b624:	eeb0 5b40 	vmov.f64	d5, d0
 800b628:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 800b658 <Calculate_FreqMax+0x108>
 800b62c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b630:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b634:	edc7 7a07 	vstr	s15, [r7, #28]

		statistic_value.Statistic_FreqPeak[freq_index] = ans;
 800b638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b63c:	4a0a      	ldr	r2, [pc, #40]	; (800b668 <Calculate_FreqMax+0x118>)
 800b63e:	330a      	adds	r3, #10
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	3304      	adds	r3, #4
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	601a      	str	r2, [r3, #0]
		}
}
 800b64a:	bf00      	nop
 800b64c:	3730      	adds	r7, #48	; 0x30
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	f3af 8000 	nop.w
 800b658:	00000000 	.word	0x00000000
 800b65c:	40b00000 	.word	0x40b00000
 800b660:	20000008 	.word	0x20000008
 800b664:	466a6000 	.word	0x466a6000
 800b668:	200080e4 	.word	0x200080e4
 800b66c:	00000000 	.word	0x00000000

0800b670 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08c      	sub	sp, #48	; 0x30
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 800b67a:	f04f 0300 	mov.w	r3, #0
 800b67e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ans = 0;
 800b680:	f04f 0300 	mov.w	r3, #0
 800b684:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i<n; i++)
 800b686:	2300      	movs	r3, #0
 800b688:	62bb      	str	r3, [r7, #40]	; 0x28
 800b68a:	e016      	b.n	800b6ba <Calculate_FreqOverAll+0x4a>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	4413      	add	r3, r2
 800b694:	ed93 7a00 	vldr	s14, [r3]
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4413      	add	r3, r2
 800b6a0:	edd3 7a00 	vldr	s15, [r3]
 800b6a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b6ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i<n; i++)
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	dbe4      	blt.n	800b68c <Calculate_FreqOverAll+0x1c>
	}

	int fftSize = 4096;
 800b6c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c6:	61bb      	str	r3, [r7, #24]
	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 4096;
 800b6c8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800b6cc:	617b      	str	r3, [r7, #20]
	float32_t samplingRate = 15000;
 800b6ce:	4b68      	ldr	r3, [pc, #416]	; (800b870 <Calculate_FreqOverAll+0x200>)
 800b6d0:	613b      	str	r3, [r7, #16]
	float32_t frequencyScale = samplingRate/sampleCount;
 800b6d2:	edd7 6a04 	vldr	s13, [r7, #16]
 800b6d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6de:	edc7 7a03 	vstr	s15, [r7, #12]
	float SpeedparsevalFftPower = 0;
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	627b      	str	r3, [r7, #36]	; 0x24

	for(uint16_t i = 1; i < fftSize; i++)
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	847b      	strh	r3, [r7, #34]	; 0x22
 800b6ec:	e084      	b.n	800b7f8 <Calculate_FreqOverAll+0x188>
	{
		if(i < fftSize/2)
 800b6ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da00      	bge.n	800b6f8 <Calculate_FreqOverAll+0x88>
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	105b      	asrs	r3, r3, #1
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	da33      	bge.n	800b766 <Calculate_FreqOverAll+0xf6>
		{
			if(i ==0)
 800b6fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10a      	bne.n	800b71a <Calculate_FreqOverAll+0xaa>
			{
				x[i] = x[i];
 800b704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	441a      	add	r2, r3
 800b70c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	6879      	ldr	r1, [r7, #4]
 800b712:	440b      	add	r3, r1
 800b714:	6812      	ldr	r2, [r2, #0]
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	e057      	b.n	800b7ca <Calculate_FreqOverAll+0x15a>
			}
			else
			{
				x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800b71a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	4413      	add	r3, r2
 800b722:	edd3 7a00 	vldr	s15, [r3]
 800b726:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800b874 <Calculate_FreqOverAll+0x204>
 800b72a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b72e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b732:	edd7 7a03 	vldr	s15, [r7, #12]
 800b736:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b73a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800b868 <Calculate_FreqOverAll+0x1f8>
 800b73e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b742:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b744:	ee07 3a90 	vmov	s15, r3
 800b748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b74c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b750:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	4413      	add	r3, r2
 800b75c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b760:	edc3 7a00 	vstr	s15, [r3]
 800b764:	e031      	b.n	800b7ca <Calculate_FreqOverAll+0x15a>
			}

		}
		else if(i > fftSize/2)
 800b766:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da00      	bge.n	800b770 <Calculate_FreqOverAll+0x100>
 800b76e:	3301      	adds	r3, #1
 800b770:	105b      	asrs	r3, r3, #1
 800b772:	429a      	cmp	r2, r3
 800b774:	dd29      	ble.n	800b7ca <Calculate_FreqOverAll+0x15a>
		{
			x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * abs(fftSize-i));
 800b776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	4413      	add	r3, r2
 800b77e:	edd3 7a00 	vldr	s15, [r3]
 800b782:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800b874 <Calculate_FreqOverAll+0x204>
 800b786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b78a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b78e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b792:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b796:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800b868 <Calculate_FreqOverAll+0x1f8>
 800b79a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b79e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	bfb8      	it	lt
 800b7a8:	425b      	neglt	r3, r3
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b7b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b7b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b7ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b7c6:	edc3 7a00 	vstr	s15, [r3]
		}
		SpeedparsevalFftPower += x[i] * x[i];
 800b7ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	ed93 7a00 	vldr	s14, [r3]
 800b7d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	edd3 7a00 	vldr	s15, [r3]
 800b7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b7ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint16_t i = 1; i < fftSize; i++)
 800b7f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800b7f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	f73f af76 	bgt.w	800b6ee <Calculate_FreqOverAll+0x7e>
	}



	ans = sqrt(ParsevalFftPower)/n;
 800b802:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b806:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b80a:	eeb0 0b47 	vmov.f64	d0, d7
 800b80e:	f00a fe1b 	bl	8016448 <sqrt>
 800b812:	eeb0 5b40 	vmov.f64	d5, d0
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b820:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b828:	edc7 7a07 	vstr	s15, [r7, #28]
	statistic_value.Statistic_SpeedOvall = sqrt(SpeedparsevalFftPower)/n;
 800b82c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b830:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b834:	eeb0 0b47 	vmov.f64	d0, d7
 800b838:	f00a fe06 	bl	8016448 <sqrt>
 800b83c:	eeb0 5b40 	vmov.f64	d5, d0
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b84a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b84e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b852:	4b09      	ldr	r3, [pc, #36]	; (800b878 <Calculate_FreqOverAll+0x208>)
 800b854:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	return ans;
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	ee07 3a90 	vmov	s15, r3
}
 800b85e:	eeb0 0a67 	vmov.f32	s0, s15
 800b862:	3730      	adds	r7, #48	; 0x30
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	4d12d84a 	.word	0x4d12d84a
 800b86c:	401921fb 	.word	0x401921fb
 800b870:	466a6000 	.word	0x466a6000
 800b874:	46193c00 	.word	0x46193c00
 800b878:	200080e4 	.word	0x200080e4

0800b87c <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800b886:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <delay_init+0x44>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <delay_init+0x44>)
 800b88c:	f023 0304 	bic.w	r3, r3, #4
 800b890:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	08db      	lsrs	r3, r3, #3
 800b896:	b2da      	uxtb	r2, r3
 800b898:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <delay_init+0x48>)
 800b89a:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800b89c:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <delay_init+0x48>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	0152      	lsls	r2, r2, #5
 800b8a6:	1ad2      	subs	r2, r2, r3
 800b8a8:	0092      	lsls	r2, r2, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <delay_init+0x4c>)
 800b8b2:	801a      	strh	r2, [r3, #0]
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	e000e010 	.word	0xe000e010
 800b8c4:	200000bc 	.word	0x200000bc
 800b8c8:	200000be 	.word	0x200000be

0800b8cc <delay_ms>:

void delay_ms(uint16_t nms)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800b8d6:	88fb      	ldrh	r3, [r7, #6]
 800b8d8:	4a14      	ldr	r2, [pc, #80]	; (800b92c <delay_ms+0x60>)
 800b8da:	8812      	ldrh	r2, [r2, #0]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4a14      	ldr	r2, [pc, #80]	; (800b930 <delay_ms+0x64>)
 800b8e0:	fb01 f303 	mul.w	r3, r1, r3
 800b8e4:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 800b8e6:	4b12      	ldr	r3, [pc, #72]	; (800b930 <delay_ms+0x64>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 800b8ec:	4b10      	ldr	r3, [pc, #64]	; (800b930 <delay_ms+0x64>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a0f      	ldr	r2, [pc, #60]	; (800b930 <delay_ms+0x64>)
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800b8f8:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <delay_ms+0x64>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <delay_ms+0x46>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0f2      	beq.n	800b8f8 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 800b912:	4b07      	ldr	r3, [pc, #28]	; (800b930 <delay_ms+0x64>)
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800b918:	4b05      	ldr	r3, [pc, #20]	; (800b930 <delay_ms+0x64>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	609a      	str	r2, [r3, #8]
}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	200000be 	.word	0x200000be
 800b930:	e000e010 	.word	0xe000e010

0800b934 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800b93c:	4b14      	ldr	r3, [pc, #80]	; (800b990 <delay_us+0x5c>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	4619      	mov	r1, r3
 800b942:	4a14      	ldr	r2, [pc, #80]	; (800b994 <delay_us+0x60>)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	fb03 f301 	mul.w	r3, r3, r1
 800b94a:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800b94c:	4b11      	ldr	r3, [pc, #68]	; (800b994 <delay_us+0x60>)
 800b94e:	2200      	movs	r2, #0
 800b950:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 800b952:	4b10      	ldr	r3, [pc, #64]	; (800b994 <delay_us+0x60>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a0f      	ldr	r2, [pc, #60]	; (800b994 <delay_us+0x60>)
 800b958:	f043 0301 	orr.w	r3, r3, #1
 800b95c:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800b95e:	4b0d      	ldr	r3, [pc, #52]	; (800b994 <delay_us+0x60>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <delay_us+0x44>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0f2      	beq.n	800b95e <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800b978:	4b06      	ldr	r3, [pc, #24]	; (800b994 <delay_us+0x60>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800b97e:	4b05      	ldr	r3, [pc, #20]	; (800b994 <delay_us+0x60>)
 800b980:	2200      	movs	r2, #0
 800b982:	609a      	str	r2, [r3, #8]
}
 800b984:	bf00      	nop
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	200000bc 	.word	0x200000bc
 800b994:	e000e010 	.word	0xe000e010

0800b998 <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 800b998:	b480      	push	{r7}
 800b99a:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 800b99c:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <TM_Delay_Init+0x14>)
 800b99e:	221e      	movs	r2, #30
 800b9a0:	601a      	str	r2, [r3, #0]
}
 800b9a2:	bf00      	nop
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	2000818c 	.word	0x2000818c

0800b9b0 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 800b9b8:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <TM_DelayMicros+0x30>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	fb02 f303 	mul.w	r3, r2, r3
 800b9c2:	3b0a      	subs	r3, #10
 800b9c4:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 800b9c6:	bf00      	nop
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	1e5a      	subs	r2, r3, #1
 800b9cc:	607a      	str	r2, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1fa      	bne.n	800b9c8 <TM_DelayMicros+0x18>
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	2000818c 	.word	0x2000818c

0800b9e4 <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 800b9ec:	4b0b      	ldr	r3, [pc, #44]	; (800ba1c <TM_DelayMillis+0x38>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9fa:	fb02 f303 	mul.w	r3, r2, r3
 800b9fe:	3b0a      	subs	r3, #10
 800ba00:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 800ba02:	bf00      	nop
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	1e5a      	subs	r2, r3, #1
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1fa      	bne.n	800ba04 <TM_DelayMillis+0x20>
}
 800ba0e:	bf00      	nop
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	2000818c 	.word	0x2000818c

0800ba20 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4a07      	ldr	r2, [pc, #28]	; (800ba4c <vApplicationGetIdleTaskMemory+0x2c>)
 800ba30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	4a06      	ldr	r2, [pc, #24]	; (800ba50 <vApplicationGetIdleTaskMemory+0x30>)
 800ba36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2280      	movs	r2, #128	; 0x80
 800ba3c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ba3e:	bf00      	nop
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	200000c0 	.word	0x200000c0
 800ba50:	20000114 	.word	0x20000114

0800ba54 <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 800ba5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba5e:	9302      	str	r3, [sp, #8]
 800ba60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <readIICEEPROM_2402C+0x28>)
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	21a1      	movs	r1, #161	; 0xa1
 800ba70:	4803      	ldr	r0, [pc, #12]	; (800ba80 <readIICEEPROM_2402C+0x2c>)
 800ba72:	f003 fd7f 	bl	800f574 <HAL_I2C_Mem_Read>
}
 800ba76:	bf00      	nop
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	200083b8 	.word	0x200083b8
 800ba80:	2000836c 	.word	0x2000836c

0800ba84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ba84:	b5b0      	push	{r4, r5, r7, lr}
 800ba86:	b0a6      	sub	sp, #152	; 0x98
 800ba88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ba8a:	f002 fdce 	bl	800e62a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ba8e:	f000 f93d 	bl	800bd0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ba92:	f000 fb21 	bl	800c0d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800ba96:	f000 fadd 	bl	800c054 <MX_DMA_Init>
  MX_SPI1_Init();
 800ba9a:	f000 fa6d 	bl	800bf78 <MX_SPI1_Init>
  MX_I2C1_Init();
 800ba9e:	f000 f9cd 	bl	800be3c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800baa2:	f000 faa7 	bl	800bff4 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800baa6:	f000 fa09 	bl	800bebc <MX_I2C2_Init>
  MX_IWDG_Init();
 800baaa:	f000 fa47 	bl	800bf3c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 10);
 800baae:	220a      	movs	r2, #10
 800bab0:	497d      	ldr	r1, [pc, #500]	; (800bca8 <main+0x224>)
 800bab2:	487e      	ldr	r0, [pc, #504]	; (800bcac <main+0x228>)
 800bab4:	f006 ff8e 	bl	80129d4 <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800bab8:	b662      	cpsie	i
  __enable_irq();

  statisticDataSet = rawData;
 800baba:	4b7d      	ldr	r3, [pc, #500]	; (800bcb0 <main+0x22c>)
 800babc:	4a7d      	ldr	r2, [pc, #500]	; (800bcb4 <main+0x230>)
 800babe:	601a      	str	r2, [r3, #0]
   dataLength = sizeof(dataRecive)/sizeof(float);
 800bac0:	4b7d      	ldr	r3, [pc, #500]	; (800bcb8 <main+0x234>)
 800bac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bac6:	601a      	str	r2, [r3, #0]

   //TODO: Initialize ADS1256 data buffer size
   ADS1256.data_index = 0;
 800bac8:	4b7c      	ldr	r3, [pc, #496]	; (800bcbc <main+0x238>)
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
   ADS1256.data_length = dataLength;
 800bace:	4b7a      	ldr	r3, [pc, #488]	; (800bcb8 <main+0x234>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a7a      	ldr	r2, [pc, #488]	; (800bcbc <main+0x238>)
 800bad4:	6053      	str	r3, [r2, #4]

  //TODO: Set freq band
	freqSettingValueList.range1.Max = 1650;
 800bad6:	4b7a      	ldr	r3, [pc, #488]	; (800bcc0 <main+0x23c>)
 800bad8:	f240 6272 	movw	r2, #1650	; 0x672
 800badc:	601a      	str	r2, [r3, #0]
	freqSettingValueList.range1.Min = 20;
 800bade:	4b78      	ldr	r3, [pc, #480]	; (800bcc0 <main+0x23c>)
 800bae0:	2214      	movs	r2, #20
 800bae2:	605a      	str	r2, [r3, #4]
	freqSettingValueList.range2.Max = 2600;
 800bae4:	4b76      	ldr	r3, [pc, #472]	; (800bcc0 <main+0x23c>)
 800bae6:	f640 2228 	movw	r2, #2600	; 0xa28
 800baea:	609a      	str	r2, [r3, #8]
	freqSettingValueList.range2.Min = 2300;
 800baec:	4b74      	ldr	r3, [pc, #464]	; (800bcc0 <main+0x23c>)
 800baee:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800baf2:	60da      	str	r2, [r3, #12]
	freqSettingValueList.range3.Max = 3000;
 800baf4:	4b72      	ldr	r3, [pc, #456]	; (800bcc0 <main+0x23c>)
 800baf6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bafa:	611a      	str	r2, [r3, #16]
	freqSettingValueList.range3.Min = 1650;
 800bafc:	4b70      	ldr	r3, [pc, #448]	; (800bcc0 <main+0x23c>)
 800bafe:	f240 6272 	movw	r2, #1650	; 0x672
 800bb02:	615a      	str	r2, [r3, #20]

   //TODO: Initialize Frequency range to collection to feature
   //F2B.f = 1.4567;

   //TODO: Initialize delay systick
   delay_init(216);
 800bb04:	20d8      	movs	r0, #216	; 0xd8
 800bb06:	f7ff feb9 	bl	800b87c <delay_init>
   TM_Delay_Init();
 800bb0a:	f7ff ff45 	bl	800b998 <TM_Delay_Init>

   readIICEEPROM_2402C();
 800bb0e:	f7ff ffa1 	bl	800ba54 <readIICEEPROM_2402C>
   //TODO: Reset ADS1256
   writeCMD(CMD_RESET);
 800bb12:	20fe      	movs	r0, #254	; 0xfe
 800bb14:	f7ff fb72 	bl	800b1fc <writeCMD>
   delay_ms(10);
 800bb18:	200a      	movs	r0, #10
 800bb1a:	f7ff fed7 	bl	800b8cc <delay_ms>
//   writeCMD(CMD_SDATAC);
//   delay_ms(10);
//   TM_DelayMicros(1);

   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
   setBuffer();
 800bb1e:	f7ff fc47 	bl	800b3b0 <setBuffer>
   setPGA(PGA_GAIN1);
 800bb22:	2000      	movs	r0, #0
 800bb24:	f7ff fbc2 	bl	800b2ac <setPGA>
   setDataRate(DRATE_15000);
 800bb28:	20e0      	movs	r0, #224	; 0xe0
 800bb2a:	f7ff fb87 	bl	800b23c <setDataRate>

   //TODO: Read chip id
   id = readChipID();
 800bb2e:	f7ff fbe9 	bl	800b304 <readChipID>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	4b63      	ldr	r3, [pc, #396]	; (800bcc4 <main+0x240>)
 800bb38:	701a      	strb	r2, [r3, #0]

   delay_ms(500);// wait for initialization
 800bb3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bb3e:	f7ff fec5 	bl	800b8cc <delay_ms>

   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 800bb42:	4b61      	ldr	r3, [pc, #388]	; (800bcc8 <main+0x244>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 800bb4a:	4b60      	ldr	r3, [pc, #384]	; (800bccc <main+0x248>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

   //TODO: Set differential analog input channel.
   setDIFFChannel(posChannels[0], negChannels[0]);
 800bb52:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800bb56:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fb35 	bl	800b1cc <setDIFFChannel>
   delay_us(15);
 800bb62:	200f      	movs	r0, #15
 800bb64:	f7ff fee6 	bl	800b934 <delay_us>
   writeCMD(CMD_SYNC);    // SYNC command
 800bb68:	20fc      	movs	r0, #252	; 0xfc
 800bb6a:	f7ff fb47 	bl	800b1fc <writeCMD>
   delay_us(10);
 800bb6e:	200a      	movs	r0, #10
 800bb70:	f7ff fee0 	bl	800b934 <delay_us>
   writeCMD(CMD_WAKEUP);  // WAKEUP command
 800bb74:	2000      	movs	r0, #0
 800bb76:	f7ff fb41 	bl	800b1fc <writeCMD>
   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 800bb7a:	200f      	movs	r0, #15
 800bb7c:	f7ff feda 	bl	800b934 <delay_us>



   //TODO: Set continuous mode.

	waitDRDY();
 800bb80:	f7ff fba2 	bl	800b2c8 <waitDRDY>
	CS_0();
 800bb84:	2200      	movs	r2, #0
 800bb86:	2110      	movs	r1, #16
 800bb88:	4851      	ldr	r0, [pc, #324]	; (800bcd0 <main+0x24c>)
 800bb8a:	f003 fc17 	bl	800f3bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 800bb8e:	2332      	movs	r3, #50	; 0x32
 800bb90:	2201      	movs	r2, #1
 800bb92:	4950      	ldr	r1, [pc, #320]	; (800bcd4 <main+0x250>)
 800bb94:	4850      	ldr	r0, [pc, #320]	; (800bcd8 <main+0x254>)
 800bb96:	f005 ff59 	bl	8011a4c <HAL_SPI_Transmit>
	delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 800bb9a:	2019      	movs	r0, #25
 800bb9c:	f7ff fe96 	bl	800b8cc <delay_ms>
	ADS1256.data_startFlag = 1;
 800bba0:	4a46      	ldr	r2, [pc, #280]	; (800bcbc <main+0x238>)
 800bba2:	f244 0308 	movw	r3, #16392	; 0x4008
 800bba6:	4413      	add	r3, r2
 800bba8:	2201      	movs	r2, #1
 800bbaa:	701a      	strb	r2, [r3, #0]
	delay_us(1);
 800bbac:	2001      	movs	r0, #1
 800bbae:	f7ff fec1 	bl	800b934 <delay_us>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 800bbbe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f007 ff98 	bl	8013afa <osSemaphoreCreate>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	4b43      	ldr	r3, [pc, #268]	; (800bcdc <main+0x258>)
 800bbce:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800bbdc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f007 ff89 	bl	8013afa <osSemaphoreCreate>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	4b3d      	ldr	r3, [pc, #244]	; (800bce0 <main+0x25c>)
 800bbec:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 800bbee:	4b3d      	ldr	r3, [pc, #244]	; (800bce4 <main+0x260>)
 800bbf0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800bbf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800bbfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bbfe:	2100      	movs	r1, #0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f007 ffad 	bl	8013b60 <osMessageCreate>
 800bc06:	4602      	mov	r2, r0
 800bc08:	4b37      	ldr	r3, [pc, #220]	; (800bce8 <main+0x264>)
 800bc0a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 800bc0c:	4b37      	ldr	r3, [pc, #220]	; (800bcec <main+0x268>)
 800bc0e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800bc12:	461d      	mov	r5, r3
 800bc14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800bc20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bc24:	2100      	movs	r1, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f007 ff07 	bl	8013a3a <osThreadCreate>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	4b30      	ldr	r3, [pc, #192]	; (800bcf0 <main+0x26c>)
 800bc30:	601a      	str	r2, [r3, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 400);
 800bc32:	4b30      	ldr	r3, [pc, #192]	; (800bcf4 <main+0x270>)
 800bc34:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800bc38:	461d      	mov	r5, r3
 800bc3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 800bc46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f007 fef4 	bl	8013a3a <osThreadCreate>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4b28      	ldr	r3, [pc, #160]	; (800bcf8 <main+0x274>)
 800bc56:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, LED_Thread, osPriorityAboveNormal, 0, 200);
 800bc58:	4b28      	ldr	r3, [pc, #160]	; (800bcfc <main+0x278>)
 800bc5a:	f107 041c 	add.w	r4, r7, #28
 800bc5e:	461d      	mov	r5, r3
 800bc60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 800bc6c:	f107 031c 	add.w	r3, r7, #28
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f007 fee1 	bl	8013a3a <osThreadCreate>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	4b21      	ldr	r3, [pc, #132]	; (800bd00 <main+0x27c>)
 800bc7c:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, I2C_Thread, osPriorityRealtime, 0, 200);
 800bc7e:	4b21      	ldr	r3, [pc, #132]	; (800bd04 <main+0x280>)
 800bc80:	463c      	mov	r4, r7
 800bc82:	461d      	mov	r5, r3
 800bc84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 800bc90:	463b      	mov	r3, r7
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f007 fed0 	bl	8013a3a <osThreadCreate>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <main+0x284>)
 800bc9e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800bca0:	f007 fec4 	bl	8013a2c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800bca4:	e7fe      	b.n	800bca4 <main+0x220>
 800bca6:	bf00      	nop
 800bca8:	20018780 	.word	0x20018780
 800bcac:	20018700 	.word	0x20018700
 800bcb0:	200081a0 	.word	0x200081a0
 800bcb4:	2000c538 	.word	0x2000c538
 800bcb8:	20000334 	.word	0x20000334
 800bcbc:	20004088 	.word	0x20004088
 800bcc0:	200080cc 	.word	0x200080cc
 800bcc4:	20000314 	.word	0x20000314
 800bcc8:	080165d4 	.word	0x080165d4
 800bccc:	080165d8 	.word	0x080165d8
 800bcd0:	40020000 	.word	0x40020000
 800bcd4:	20000004 	.word	0x20000004
 800bcd8:	2001878c 	.word	0x2001878c
 800bcdc:	200084bc 	.word	0x200084bc
 800bce0:	2001c8b8 	.word	0x2001c8b8
 800bce4:	080165dc 	.word	0x080165dc
 800bce8:	2000c530 	.word	0x2000c530
 800bcec:	080165f8 	.word	0x080165f8
 800bcf0:	200084c8 	.word	0x200084c8
 800bcf4:	08016620 	.word	0x08016620
 800bcf8:	200084b8 	.word	0x200084b8
 800bcfc:	08016648 	.word	0x08016648
 800bd00:	200084c4 	.word	0x200084c4
 800bd04:	08016670 	.word	0x08016670
 800bd08:	2000c52c 	.word	0x2000c52c

0800bd0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b0b8      	sub	sp, #224	; 0xe0
 800bd10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bd12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800bd16:	2234      	movs	r2, #52	; 0x34
 800bd18:	2100      	movs	r1, #0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f00a fb8b 	bl	8016436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bd20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	605a      	str	r2, [r3, #4]
 800bd2a:	609a      	str	r2, [r3, #8]
 800bd2c:	60da      	str	r2, [r3, #12]
 800bd2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bd30:	f107 0308 	add.w	r3, r7, #8
 800bd34:	2290      	movs	r2, #144	; 0x90
 800bd36:	2100      	movs	r1, #0
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f00a fb7c 	bl	8016436 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd3e:	4b3d      	ldr	r3, [pc, #244]	; (800be34 <SystemClock_Config+0x128>)
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	4a3c      	ldr	r2, [pc, #240]	; (800be34 <SystemClock_Config+0x128>)
 800bd44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd48:	6413      	str	r3, [r2, #64]	; 0x40
 800bd4a:	4b3a      	ldr	r3, [pc, #232]	; (800be34 <SystemClock_Config+0x128>)
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd52:	607b      	str	r3, [r7, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bd56:	4b38      	ldr	r3, [pc, #224]	; (800be38 <SystemClock_Config+0x12c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a37      	ldr	r2, [pc, #220]	; (800be38 <SystemClock_Config+0x12c>)
 800bd5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	4b35      	ldr	r3, [pc, #212]	; (800be38 <SystemClock_Config+0x12c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800bd6e:	230a      	movs	r3, #10
 800bd70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bd74:	2301      	movs	r3, #1
 800bd76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bd7a:	2310      	movs	r3, #16
 800bd7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800bd80:	2301      	movs	r3, #1
 800bd82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bd86:	2302      	movs	r3, #2
 800bd88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800bd92:	2308      	movs	r3, #8
 800bd94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800bd98:	23d8      	movs	r3, #216	; 0xd8
 800bd9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bd9e:	2302      	movs	r3, #2
 800bda0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800bda4:	2302      	movs	r3, #2
 800bda6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bdaa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f004 fcf0 	bl	8010794 <HAL_RCC_OscConfig>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800bdba:	f000 fdd3 	bl	800c964 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800bdbe:	f004 fc99 	bl	80106f4 <HAL_PWREx_EnableOverDrive>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800bdc8:	f000 fdcc 	bl	800c964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bdcc:	230f      	movs	r3, #15
 800bdce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bdde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bde2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bde6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800bdee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bdf2:	2107      	movs	r1, #7
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f004 ff7b 	bl	8010cf0 <HAL_RCC_ClockConfig>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800be00:	f000 fdb0 	bl	800c964 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C1
 800be04:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800be08:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800be0a:	2300      	movs	r3, #0
 800be0c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800be0e:	2300      	movs	r3, #0
 800be10:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800be12:	2300      	movs	r3, #0
 800be14:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800be16:	f107 0308 	add.w	r3, r7, #8
 800be1a:	4618      	mov	r0, r3
 800be1c:	f005 f95e 	bl	80110dc <HAL_RCCEx_PeriphCLKConfig>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800be26:	f000 fd9d 	bl	800c964 <Error_Handler>
  }
}
 800be2a:	bf00      	nop
 800be2c:	37e0      	adds	r7, #224	; 0xe0
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	40023800 	.word	0x40023800
 800be38:	40007000 	.word	0x40007000

0800be3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800be40:	4b1b      	ldr	r3, [pc, #108]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be42:	4a1c      	ldr	r2, [pc, #112]	; (800beb4 <MX_I2C1_Init+0x78>)
 800be44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800be46:	4b1a      	ldr	r3, [pc, #104]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be48:	4a1b      	ldr	r2, [pc, #108]	; (800beb8 <MX_I2C1_Init+0x7c>)
 800be4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 800be4c:	4b18      	ldr	r3, [pc, #96]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be4e:	2204      	movs	r2, #4
 800be50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800be52:	4b17      	ldr	r3, [pc, #92]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be54:	2201      	movs	r2, #1
 800be56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800be58:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800be5e:	4b14      	ldr	r3, [pc, #80]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be60:	2200      	movs	r2, #0
 800be62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800be64:	4b12      	ldr	r3, [pc, #72]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be66:	2200      	movs	r2, #0
 800be68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800be6a:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800be70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800be72:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be74:	2200      	movs	r2, #0
 800be76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800be78:	480d      	ldr	r0, [pc, #52]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be7a:	f003 faeb 	bl	800f454 <HAL_I2C_Init>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800be84:	f000 fd6e 	bl	800c964 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800be88:	2100      	movs	r1, #0
 800be8a:	4809      	ldr	r0, [pc, #36]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be8c:	f004 fb45 	bl	801051a <HAL_I2CEx_ConfigAnalogFilter>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800be96:	f000 fd65 	bl	800c964 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800be9a:	2100      	movs	r1, #0
 800be9c:	4804      	ldr	r0, [pc, #16]	; (800beb0 <MX_I2C1_Init+0x74>)
 800be9e:	f004 fb87 	bl	80105b0 <HAL_I2CEx_ConfigDigitalFilter>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800bea8:	f000 fd5c 	bl	800c964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800beac:	bf00      	nop
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20008310 	.word	0x20008310
 800beb4:	40005400 	.word	0x40005400
 800beb8:	20404768 	.word	0x20404768

0800bebc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bec0:	4b1b      	ldr	r3, [pc, #108]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bec2:	4a1c      	ldr	r2, [pc, #112]	; (800bf34 <MX_I2C2_Init+0x78>)
 800bec4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800bec6:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bec8:	4a1b      	ldr	r2, [pc, #108]	; (800bf38 <MX_I2C2_Init+0x7c>)
 800beca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 800becc:	4b18      	ldr	r3, [pc, #96]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bece:	2208      	movs	r2, #8
 800bed0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bed2:	4b17      	ldr	r3, [pc, #92]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <MX_I2C2_Init+0x74>)
 800beda:	2200      	movs	r2, #0
 800bedc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bede:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bee4:	4b12      	ldr	r3, [pc, #72]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800beea:	4b11      	ldr	r3, [pc, #68]	; (800bf30 <MX_I2C2_Init+0x74>)
 800beec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bef0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bef8:	480d      	ldr	r0, [pc, #52]	; (800bf30 <MX_I2C2_Init+0x74>)
 800befa:	f003 faab 	bl	800f454 <HAL_I2C_Init>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800bf04:	f000 fd2e 	bl	800c964 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4809      	ldr	r0, [pc, #36]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bf0c:	f004 fb05 	bl	801051a <HAL_I2CEx_ConfigAnalogFilter>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800bf16:	f000 fd25 	bl	800c964 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	4804      	ldr	r0, [pc, #16]	; (800bf30 <MX_I2C2_Init+0x74>)
 800bf1e:	f004 fb47 	bl	80105b0 <HAL_I2CEx_ConfigDigitalFilter>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800bf28:	f000 fd1c 	bl	800c964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bf2c:	bf00      	nop
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	2000836c 	.word	0x2000836c
 800bf34:	40005800 	.word	0x40005800
 800bf38:	20404768 	.word	0x20404768

0800bf3c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800bf40:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <MX_IWDG_Init+0x34>)
 800bf42:	4a0c      	ldr	r2, [pc, #48]	; (800bf74 <MX_IWDG_Init+0x38>)
 800bf44:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800bf46:	4b0a      	ldr	r3, [pc, #40]	; (800bf70 <MX_IWDG_Init+0x34>)
 800bf48:	2203      	movs	r2, #3
 800bf4a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800bf4c:	4b08      	ldr	r3, [pc, #32]	; (800bf70 <MX_IWDG_Init+0x34>)
 800bf4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800bf52:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3096;
 800bf54:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <MX_IWDG_Init+0x34>)
 800bf56:	f640 4218 	movw	r2, #3096	; 0xc18
 800bf5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800bf5c:	4804      	ldr	r0, [pc, #16]	; (800bf70 <MX_IWDG_Init+0x34>)
 800bf5e:	f004 fb73 	bl	8010648 <HAL_IWDG_Init>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800bf68:	f000 fcfc 	bl	800c964 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800bf6c:	bf00      	nop
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	2000835c 	.word	0x2000835c
 800bf74:	40003000 	.word	0x40003000

0800bf78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800bf7c:	4b1b      	ldr	r3, [pc, #108]	; (800bfec <MX_SPI1_Init+0x74>)
 800bf7e:	4a1c      	ldr	r2, [pc, #112]	; (800bff0 <MX_SPI1_Init+0x78>)
 800bf80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bf82:	4b1a      	ldr	r3, [pc, #104]	; (800bfec <MX_SPI1_Init+0x74>)
 800bf84:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bf88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800bf8a:	4b18      	ldr	r3, [pc, #96]	; (800bfec <MX_SPI1_Init+0x74>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800bf90:	4b16      	ldr	r3, [pc, #88]	; (800bfec <MX_SPI1_Init+0x74>)
 800bf92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800bf96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf98:	4b14      	ldr	r3, [pc, #80]	; (800bfec <MX_SPI1_Init+0x74>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800bfa4:	4b11      	ldr	r3, [pc, #68]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfaa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800bfac:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfae:	2228      	movs	r2, #40	; 0x28
 800bfb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bfb2:	4b0e      	ldr	r3, [pc, #56]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bfbe:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800bfc4:	4b09      	ldr	r3, [pc, #36]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfc6:	2207      	movs	r2, #7
 800bfc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bfca:	4b08      	ldr	r3, [pc, #32]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800bfd0:	4b06      	ldr	r3, [pc, #24]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800bfd6:	4805      	ldr	r0, [pc, #20]	; (800bfec <MX_SPI1_Init+0x74>)
 800bfd8:	f005 fca6 	bl	8011928 <HAL_SPI_Init>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800bfe2:	f000 fcbf 	bl	800c964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800bfe6:	bf00      	nop
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	2001878c 	.word	0x2001878c
 800bff0:	40013000 	.word	0x40013000

0800bff4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800bff8:	4b14      	ldr	r3, [pc, #80]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800bffa:	4a15      	ldr	r2, [pc, #84]	; (800c050 <MX_USART6_UART_Init+0x5c>)
 800bffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c006:	4b11      	ldr	r3, [pc, #68]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c008:	2200      	movs	r2, #0
 800c00a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c00c:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c00e:	2200      	movs	r2, #0
 800c010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c012:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c014:	2200      	movs	r2, #0
 800c016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c018:	4b0c      	ldr	r3, [pc, #48]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c01a:	220c      	movs	r2, #12
 800c01c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c01e:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c020:	2200      	movs	r2, #0
 800c022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c024:	4b09      	ldr	r3, [pc, #36]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c026:	2200      	movs	r2, #0
 800c028:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c02a:	4b08      	ldr	r3, [pc, #32]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c030:	4b06      	ldr	r3, [pc, #24]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c032:	2200      	movs	r2, #0
 800c034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c036:	4805      	ldr	r0, [pc, #20]	; (800c04c <MX_USART6_UART_Init+0x58>)
 800c038:	f006 fc7d 	bl	8012936 <HAL_UART_Init>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800c042:	f000 fc8f 	bl	800c964 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c046:	bf00      	nop
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20018700 	.word	0x20018700
 800c050:	40011400 	.word	0x40011400

0800c054 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c05a:	4b1e      	ldr	r3, [pc, #120]	; (800c0d4 <MX_DMA_Init+0x80>)
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <MX_DMA_Init+0x80>)
 800c060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c064:	6313      	str	r3, [r2, #48]	; 0x30
 800c066:	4b1b      	ldr	r3, [pc, #108]	; (800c0d4 <MX_DMA_Init+0x80>)
 800c068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c06e:	607b      	str	r3, [r7, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c072:	4b18      	ldr	r3, [pc, #96]	; (800c0d4 <MX_DMA_Init+0x80>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	4a17      	ldr	r2, [pc, #92]	; (800c0d4 <MX_DMA_Init+0x80>)
 800c078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c07c:	6313      	str	r3, [r2, #48]	; 0x30
 800c07e:	4b15      	ldr	r3, [pc, #84]	; (800c0d4 <MX_DMA_Init+0x80>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800c08a:	2200      	movs	r2, #0
 800c08c:	2105      	movs	r1, #5
 800c08e:	2011      	movs	r0, #17
 800c090:	f002 fc03 	bl	800e89a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800c094:	2011      	movs	r0, #17
 800c096:	f002 fc1c 	bl	800e8d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800c09a:	2200      	movs	r2, #0
 800c09c:	2105      	movs	r1, #5
 800c09e:	2038      	movs	r0, #56	; 0x38
 800c0a0:	f002 fbfb 	bl	800e89a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c0a4:	2038      	movs	r0, #56	; 0x38
 800c0a6:	f002 fc14 	bl	800e8d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	2105      	movs	r1, #5
 800c0ae:	203b      	movs	r0, #59	; 0x3b
 800c0b0:	f002 fbf3 	bl	800e89a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c0b4:	203b      	movs	r0, #59	; 0x3b
 800c0b6:	f002 fc0c 	bl	800e8d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	2105      	movs	r1, #5
 800c0be:	2045      	movs	r0, #69	; 0x45
 800c0c0:	f002 fbeb 	bl	800e89a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800c0c4:	2045      	movs	r0, #69	; 0x45
 800c0c6:	f002 fc04 	bl	800e8d2 <HAL_NVIC_EnableIRQ>

}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	40023800 	.word	0x40023800

0800c0d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08a      	sub	sp, #40	; 0x28
 800c0dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0de:	f107 0314 	add.w	r3, r7, #20
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	605a      	str	r2, [r3, #4]
 800c0e8:	609a      	str	r2, [r3, #8]
 800c0ea:	60da      	str	r2, [r3, #12]
 800c0ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0ee:	4b38      	ldr	r3, [pc, #224]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f2:	4a37      	ldr	r2, [pc, #220]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c0f4:	f043 0301 	orr.w	r3, r3, #1
 800c0f8:	6313      	str	r3, [r2, #48]	; 0x30
 800c0fa:	4b35      	ldr	r3, [pc, #212]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	613b      	str	r3, [r7, #16]
 800c104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c106:	4b32      	ldr	r3, [pc, #200]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c10a:	4a31      	ldr	r2, [pc, #196]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c10c:	f043 0302 	orr.w	r3, r3, #2
 800c110:	6313      	str	r3, [r2, #48]	; 0x30
 800c112:	4b2f      	ldr	r3, [pc, #188]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c11e:	4b2c      	ldr	r3, [pc, #176]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	4a2b      	ldr	r2, [pc, #172]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c124:	f043 0308 	orr.w	r3, r3, #8
 800c128:	6313      	str	r3, [r2, #48]	; 0x30
 800c12a:	4b29      	ldr	r3, [pc, #164]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12e:	f003 0308 	and.w	r3, r3, #8
 800c132:	60bb      	str	r3, [r7, #8]
 800c134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c136:	4b26      	ldr	r3, [pc, #152]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13a:	4a25      	ldr	r2, [pc, #148]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c13c:	f043 0304 	orr.w	r3, r3, #4
 800c140:	6313      	str	r3, [r2, #48]	; 0x30
 800c142:	4b23      	ldr	r3, [pc, #140]	; (800c1d0 <MX_GPIO_Init+0xf8>)
 800c144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	607b      	str	r3, [r7, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800c14e:	2200      	movs	r2, #0
 800c150:	2110      	movs	r1, #16
 800c152:	4820      	ldr	r0, [pc, #128]	; (800c1d4 <MX_GPIO_Init+0xfc>)
 800c154:	f003 f932 	bl	800f3bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800c158:	2200      	movs	r2, #0
 800c15a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800c15e:	481e      	ldr	r0, [pc, #120]	; (800c1d8 <MX_GPIO_Init+0x100>)
 800c160:	f003 f92c 	bl	800f3bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c164:	2308      	movs	r3, #8
 800c166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c168:	4b1c      	ldr	r3, [pc, #112]	; (800c1dc <MX_GPIO_Init+0x104>)
 800c16a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c16c:	2300      	movs	r3, #0
 800c16e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c170:	f107 0314 	add.w	r3, r7, #20
 800c174:	4619      	mov	r1, r3
 800c176:	4817      	ldr	r0, [pc, #92]	; (800c1d4 <MX_GPIO_Init+0xfc>)
 800c178:	f002 ff5e 	bl	800f038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c17c:	2310      	movs	r3, #16
 800c17e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c180:	2301      	movs	r3, #1
 800c182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c184:	2301      	movs	r3, #1
 800c186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c188:	2303      	movs	r3, #3
 800c18a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c18c:	f107 0314 	add.w	r3, r7, #20
 800c190:	4619      	mov	r1, r3
 800c192:	4810      	ldr	r0, [pc, #64]	; (800c1d4 <MX_GPIO_Init+0xfc>)
 800c194:	f002 ff50 	bl	800f038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800c198:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c19c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c1aa:	f107 0314 	add.w	r3, r7, #20
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4809      	ldr	r0, [pc, #36]	; (800c1d8 <MX_GPIO_Init+0x100>)
 800c1b2:	f002 ff41 	bl	800f038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2105      	movs	r1, #5
 800c1ba:	2009      	movs	r0, #9
 800c1bc:	f002 fb6d 	bl	800e89a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c1c0:	2009      	movs	r0, #9
 800c1c2:	f002 fb86 	bl	800e8d2 <HAL_NVIC_EnableIRQ>

}
 800c1c6:	bf00      	nop
 800c1c8:	3728      	adds	r7, #40	; 0x28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	40023800 	.word	0x40023800
 800c1d4:	40020000 	.word	0x40020000
 800c1d8:	40020c00 	.word	0x40020c00
 800c1dc:	10210000 	.word	0x10210000

0800c1e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0)
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	d126      	bne.n	800c23e <HAL_GPIO_EXTI_Callback+0x5e>
 800c1f0:	4b15      	ldr	r3, [pc, #84]	; (800c248 <HAL_GPIO_EXTI_Callback+0x68>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d122      	bne.n	800c23e <HAL_GPIO_EXTI_Callback+0x5e>
 800c1f8:	4a14      	ldr	r2, [pc, #80]	; (800c24c <HAL_GPIO_EXTI_Callback+0x6c>)
 800c1fa:	f244 0308 	movw	r3, #16392	; 0x4008
 800c1fe:	4413      	add	r3, r2
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d11b      	bne.n	800c23e <HAL_GPIO_EXTI_Callback+0x5e>
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <HAL_GPIO_EXTI_Callback+0x70>)
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d117      	bne.n	800c23e <HAL_GPIO_EXTI_Callback+0x5e>


		    /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken);
 800c212:	4b10      	ldr	r3, [pc, #64]	; (800c254 <HAL_GPIO_EXTI_Callback+0x74>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f107 020c 	add.w	r2, r7, #12
 800c21a:	4611      	mov	r1, r2
 800c21c:	4618      	mov	r0, r3
 800c21e:	f007 ffc7 	bl	80141b0 <xQueueGiveFromISR>

		if(xHigherPriorityTaskWoken == pdTRUE)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d10a      	bne.n	800c23e <HAL_GPIO_EXTI_Callback+0x5e>
		{
			portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <HAL_GPIO_EXTI_Callback+0x5e>
 800c22e:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <HAL_GPIO_EXTI_Callback+0x78>)
 800c230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	f3bf 8f6f 	isb	sy
		}

	}
}
 800c23e:	bf00      	nop
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	20000314 	.word	0x20000314
 800c24c:	20004088 	.word	0x20004088
 800c250:	200187f0 	.word	0x200187f0
 800c254:	200084bc 	.word	0x200084bc
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  //if(aRxBuffer[5] == '2' & aRxBuffer[6]=='4' & aRxBuffer[7]=='4')
  //{
  USARTBLE.IAPflag =1;
 800c264:	4b09      	ldr	r3, [pc, #36]	; (800c28c <HAL_UART_RxCpltCallback+0x30>)
 800c266:	2201      	movs	r2, #1
 800c268:	705a      	strb	r2, [r3, #1]
  USARTBLE.sendflag = 0;
 800c26a:	4b08      	ldr	r3, [pc, #32]	; (800c28c <HAL_UART_RxCpltCallback+0x30>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	701a      	strb	r2, [r3, #0]
  BLE_USART(huart, &statistic_value);
 800c270:	4907      	ldr	r1, [pc, #28]	; (800c290 <HAL_UART_RxCpltCallback+0x34>)
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff f8d8 	bl	800b428 <BLE_USART>
  HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 10);
 800c278:	220a      	movs	r2, #10
 800c27a:	4906      	ldr	r1, [pc, #24]	; (800c294 <HAL_UART_RxCpltCallback+0x38>)
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f006 fba9 	bl	80129d4 <HAL_UART_Receive_IT>
}
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20010540 	.word	0x20010540
 800c290:	200080e4 	.word	0x200080e4
 800c294:	20018780 	.word	0x20018780

0800c298 <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 800c2a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c2a4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c2a6:	4b41      	ldr	r3, [pc, #260]	; (800c3ac <ADC_Thread+0x114>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f008 f8f3 	bl	8014498 <xQueueSemaphoreTake>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d1f6      	bne.n	800c2a6 <ADC_Thread+0xe>
 800c2b8:	4b3d      	ldr	r3, [pc, #244]	; (800c3b0 <ADC_Thread+0x118>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1f2      	bne.n	800c2a6 <ADC_Thread+0xe>
				HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	4a3c      	ldr	r2, [pc, #240]	; (800c3b4 <ADC_Thread+0x11c>)
 800c2c4:	493c      	ldr	r1, [pc, #240]	; (800c3b8 <ADC_Thread+0x120>)
 800c2c6:	483d      	ldr	r0, [pc, #244]	; (800c3bc <ADC_Thread+0x124>)
 800c2c8:	f005 ff3a 	bl	8012140 <HAL_SPI_TransmitReceive_DMA>

						// construct 24 bit value
				read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 800c2cc:	4b39      	ldr	r3, [pc, #228]	; (800c3b4 <ADC_Thread+0x11c>)
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	041b      	lsls	r3, r3, #16
 800c2d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2d6:	4a3a      	ldr	r2, [pc, #232]	; (800c3c0 <ADC_Thread+0x128>)
 800c2d8:	6013      	str	r3, [r2, #0]
				read |= ((int32_t)Databuffer[1] << 8);
 800c2da:	4b36      	ldr	r3, [pc, #216]	; (800c3b4 <ADC_Thread+0x11c>)
 800c2dc:	785b      	ldrb	r3, [r3, #1]
 800c2de:	021a      	lsls	r2, r3, #8
 800c2e0:	4b37      	ldr	r3, [pc, #220]	; (800c3c0 <ADC_Thread+0x128>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	4a36      	ldr	r2, [pc, #216]	; (800c3c0 <ADC_Thread+0x128>)
 800c2e8:	6013      	str	r3, [r2, #0]
				read |= Databuffer[2];
 800c2ea:	4b32      	ldr	r3, [pc, #200]	; (800c3b4 <ADC_Thread+0x11c>)
 800c2ec:	789b      	ldrb	r3, [r3, #2]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4b33      	ldr	r3, [pc, #204]	; (800c3c0 <ADC_Thread+0x128>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	4a32      	ldr	r2, [pc, #200]	; (800c3c0 <ADC_Thread+0x128>)
 800c2f8:	6013      	str	r3, [r2, #0]
				if (read & 0x800000){
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <ADC_Thread+0x128>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d006      	beq.n	800c314 <ADC_Thread+0x7c>
					read |= 0xFF000000;
 800c306:	4b2e      	ldr	r3, [pc, #184]	; (800c3c0 <ADC_Thread+0x128>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c30e:	461a      	mov	r2, r3
 800c310:	4b2b      	ldr	r3, [pc, #172]	; (800c3c0 <ADC_Thread+0x128>)
 800c312:	601a      	str	r2, [r3, #0]

				}

				data = read;
 800c314:	4b2a      	ldr	r3, [pc, #168]	; (800c3c0 <ADC_Thread+0x128>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	ee07 3a90 	vmov	s15, r3
 800c31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c320:	4b28      	ldr	r3, [pc, #160]	; (800c3c4 <ADC_Thread+0x12c>)
 800c322:	edc3 7a00 	vstr	s15, [r3]
				data = data / 1670000;
 800c326:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <ADC_Thread+0x12c>)
 800c328:	ed93 7a00 	vldr	s14, [r3]
 800c32c:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c3c8 <ADC_Thread+0x130>
 800c330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c334:	4b23      	ldr	r3, [pc, #140]	; (800c3c4 <ADC_Thread+0x12c>)
 800c336:	edc3 7a00 	vstr	s15, [r3]
				ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 800c33a:	4b24      	ldr	r3, [pc, #144]	; (800c3cc <ADC_Thread+0x134>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a21      	ldr	r2, [pc, #132]	; (800c3c4 <ADC_Thread+0x12c>)
 800c340:	6812      	ldr	r2, [r2, #0]
 800c342:	4922      	ldr	r1, [pc, #136]	; (800c3cc <ADC_Thread+0x134>)
 800c344:	3302      	adds	r3, #2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	440b      	add	r3, r1
 800c34a:	601a      	str	r2, [r3, #0]
				ADS1256.data_index++;
 800c34c:	4b1f      	ldr	r3, [pc, #124]	; (800c3cc <ADC_Thread+0x134>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3301      	adds	r3, #1
 800c352:	4a1e      	ldr	r2, [pc, #120]	; (800c3cc <ADC_Thread+0x134>)
 800c354:	6013      	str	r3, [r2, #0]
				if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 800c356:	4b1d      	ldr	r3, [pc, #116]	; (800c3cc <ADC_Thread+0x134>)
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <ADC_Thread+0x134>)
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d11f      	bne.n	800c3a2 <ADC_Thread+0x10a>
				{

					/*TODO: send data to buffer*/
					BaseType_t xStatus;
					xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 800c362:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <ADC_Thread+0x138>)
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	2300      	movs	r3, #0
 800c368:	2200      	movs	r2, #0
 800c36a:	491a      	ldr	r1, [pc, #104]	; (800c3d4 <ADC_Thread+0x13c>)
 800c36c:	f007 fe1e 	bl	8013fac <xQueueGenericSend>
 800c370:	60b8      	str	r0, [r7, #8]
					queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c372:	4b17      	ldr	r3, [pc, #92]	; (800c3d0 <ADC_Thread+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f008 f99e 	bl	80146b8 <uxQueueMessagesWaiting>
 800c37c:	4602      	mov	r2, r0
 800c37e:	4b16      	ldr	r3, [pc, #88]	; (800c3d8 <ADC_Thread+0x140>)
 800c380:	601a      	str	r2, [r3, #0]

					if(xStatus == pdPASS)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b01      	cmp	r3, #1
 800c386:	d104      	bne.n	800c392 <ADC_Thread+0xfa>
					{
						vTaskResume(FFT_TaskHandle);
 800c388:	4b14      	ldr	r3, [pc, #80]	; (800c3dc <ADC_Thread+0x144>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f008 fd6d 	bl	8014e6c <vTaskResume>
					};


				  	ADS1256.data_index = 0;
 800c392:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <ADC_Thread+0x134>)
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800c398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c39c:	4810      	ldr	r0, [pc, #64]	; (800c3e0 <ADC_Thread+0x148>)
 800c39e:	f003 f826 	bl	800f3ee <HAL_GPIO_TogglePin>
				}

				TM_DelayMicros(8);
 800c3a2:	2008      	movs	r0, #8
 800c3a4:	f7ff fb04 	bl	800b9b0 <TM_DelayMicros>
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c3a8:	e77d      	b.n	800c2a6 <ADC_Thread+0xe>
 800c3aa:	bf00      	nop
 800c3ac:	200084bc 	.word	0x200084bc
 800c3b0:	200187f0 	.word	0x200187f0
 800c3b4:	20000320 	.word	0x20000320
 800c3b8:	20000000 	.word	0x20000000
 800c3bc:	2001878c 	.word	0x2001878c
 800c3c0:	20000318 	.word	0x20000318
 800c3c4:	2000c534 	.word	0x2000c534
 800c3c8:	49cbdb80 	.word	0x49cbdb80
 800c3cc:	20004088 	.word	0x20004088
 800c3d0:	2000c530 	.word	0x2000c530
 800c3d4:	20000010 	.word	0x20000010
 800c3d8:	200082ac 	.word	0x200082ac
 800c3dc:	200084b8 	.word	0x200084b8
 800c3e0:	40020c00 	.word	0x40020c00

0800c3e4 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT_Thread */
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	 	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c3ec:	4b68      	ldr	r3, [pc, #416]	; (800c590 <FFT_Thread+0x1ac>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f008 f961 	bl	80146b8 <uxQueueMessagesWaiting>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	4b66      	ldr	r3, [pc, #408]	; (800c594 <FFT_Thread+0x1b0>)
 800c3fa:	601a      	str	r2, [r3, #0]
	 	  if(queueCount!=0){
 800c3fc:	4b65      	ldr	r3, [pc, #404]	; (800c594 <FFT_Thread+0x1b0>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 8291 	beq.w	800c928 <FFT_Thread+0x544>
	 			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 800c406:	4b62      	ldr	r3, [pc, #392]	; (800c590 <FFT_Thread+0x1ac>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2264      	movs	r2, #100	; 0x64
 800c40c:	4962      	ldr	r1, [pc, #392]	; (800c598 <FFT_Thread+0x1b4>)
 800c40e:	4618      	mov	r0, r3
 800c410:	f007 ff60 	bl	80142d4 <xQueueReceive>
 800c414:	60f8      	str	r0, [r7, #12]
	 			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c416:	4b5e      	ldr	r3, [pc, #376]	; (800c590 <FFT_Thread+0x1ac>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f008 f94c 	bl	80146b8 <uxQueueMessagesWaiting>
 800c420:	4602      	mov	r2, r0
 800c422:	4b5c      	ldr	r3, [pc, #368]	; (800c594 <FFT_Thread+0x1b0>)
 800c424:	601a      	str	r2, [r3, #0]

	 			HAL_IWDG_Refresh(&hiwdg);
 800c426:	485d      	ldr	r0, [pc, #372]	; (800c59c <FFT_Thread+0x1b8>)
 800c428:	f004 f954 	bl	80106d4 <HAL_IWDG_Refresh>
	 			for(uint32_t i = 0; i<dataLength; i++)
 800c42c:	2300      	movs	r3, #0
 800c42e:	617b      	str	r3, [r7, #20]
 800c430:	e022      	b.n	800c478 <FFT_Thread+0x94>
	 			{
	 				//recivedata5 = *(dataRecive[0]+i);
	 				rawData[i]=*(dataRecive[0]+i);
 800c432:	4b59      	ldr	r3, [pc, #356]	; (800c598 <FFT_Thread+0x1b4>)
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4958      	ldr	r1, [pc, #352]	; (800c5a0 <FFT_Thread+0x1bc>)
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	440b      	add	r3, r1
 800c446:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2] = *(dataRecive[0]+i);
 800c448:	4b53      	ldr	r3, [pc, #332]	; (800c598 <FFT_Thread+0x1b4>)
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	441a      	add	r2, r3
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	6812      	ldr	r2, [r2, #0]
 800c458:	4952      	ldr	r1, [pc, #328]	; (800c5a4 <FFT_Thread+0x1c0>)
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	440b      	add	r3, r1
 800c45e:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2+1] = 0;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	3301      	adds	r3, #1
 800c466:	4a4f      	ldr	r2, [pc, #316]	; (800c5a4 <FFT_Thread+0x1c0>)
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	601a      	str	r2, [r3, #0]
	 			for(uint32_t i = 0; i<dataLength; i++)
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	3301      	adds	r3, #1
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	4b4b      	ldr	r3, [pc, #300]	; (800c5a8 <FFT_Thread+0x1c4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d3d7      	bcc.n	800c432 <FFT_Thread+0x4e>
	 			}

	 			if(xStatus == pdPASS)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d1b1      	bne.n	800c3ec <FFT_Thread+0x8>
	 			{

	 				/*TODO: Process the data through the CFFT/CIFFT module */
	 				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 800c488:	4b48      	ldr	r3, [pc, #288]	; (800c5ac <FFT_Thread+0x1c8>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	4b48      	ldr	r3, [pc, #288]	; (800c5b0 <FFT_Thread+0x1cc>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	4943      	ldr	r1, [pc, #268]	; (800c5a4 <FFT_Thread+0x1c0>)
 800c496:	4847      	ldr	r0, [pc, #284]	; (800c5b4 <FFT_Thread+0x1d0>)
 800c498:	f7fd fdef 	bl	800a07a <arm_cfft_f32>

	 				/*TODO: Process the data through the Complex Magnitude Module for
	 				calculating the magnitude at each bin */
	 				arm_cmplx_mag_f32(FFTdata, testOutput, fftSize);
 800c49c:	4b46      	ldr	r3, [pc, #280]	; (800c5b8 <FFT_Thread+0x1d4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	4946      	ldr	r1, [pc, #280]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4a4:	483f      	ldr	r0, [pc, #252]	; (800c5a4 <FFT_Thread+0x1c0>)
 800c4a6:	f7fc f8d5 	bl	8008654 <arm_cmplx_mag_f32>

	 				/*TODO: Calculates maxValue and returns corresponding BIN value */
	 				arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 800c4aa:	4b43      	ldr	r3, [pc, #268]	; (800c5b8 <FFT_Thread+0x1d4>)
 800c4ac:	6819      	ldr	r1, [r3, #0]
 800c4ae:	4b44      	ldr	r3, [pc, #272]	; (800c5c0 <FFT_Thread+0x1dc>)
 800c4b0:	4a44      	ldr	r2, [pc, #272]	; (800c5c4 <FFT_Thread+0x1e0>)
 800c4b2:	4842      	ldr	r0, [pc, #264]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4b4:	f7fc f98e 	bl	80087d4 <arm_max_f32>
	 				 * It kindly would be
	 				 *  testOutput[] = 2/N * testOutput[0:N/2]
	 				 *
	 				 * */

	 				maxValue = maxValue*2 / dataLength;
 800c4b8:	4b42      	ldr	r3, [pc, #264]	; (800c5c4 <FFT_Thread+0x1e0>)
 800c4ba:	edd3 7a00 	vldr	s15, [r3]
 800c4be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c4c2:	4b39      	ldr	r3, [pc, #228]	; (800c5a8 <FFT_Thread+0x1c4>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4d2:	4b3c      	ldr	r3, [pc, #240]	; (800c5c4 <FFT_Thread+0x1e0>)
 800c4d4:	edc3 7a00 	vstr	s15, [r3]

	 				/*TODO: Remove DC component*/
	 				testOutput[1] = 0;
 800c4d8:	4b38      	ldr	r3, [pc, #224]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4da:	f04f 0200 	mov.w	r2, #0
 800c4de:	605a      	str	r2, [r3, #4]
	 				testOutput[2] = 0;
 800c4e0:	4b36      	ldr	r3, [pc, #216]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4e2:	f04f 0200 	mov.w	r2, #0
 800c4e6:	609a      	str	r2, [r3, #8]
	 				testOutput[3] = 0;
 800c4e8:	4b34      	ldr	r3, [pc, #208]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4ea:	f04f 0200 	mov.w	r2, #0
 800c4ee:	60da      	str	r2, [r3, #12]
	 				testOutput[4] = 0;
 800c4f0:	4b32      	ldr	r3, [pc, #200]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4f2:	f04f 0200 	mov.w	r2, #0
 800c4f6:	611a      	str	r2, [r3, #16]
	 				testOutput[5] = 0;
 800c4f8:	4b30      	ldr	r3, [pc, #192]	; (800c5bc <FFT_Thread+0x1d8>)
 800c4fa:	f04f 0200 	mov.w	r2, #0
 800c4fe:	615a      	str	r2, [r3, #20]
	 				testOutput[6] = 0;
 800c500:	4b2e      	ldr	r3, [pc, #184]	; (800c5bc <FFT_Thread+0x1d8>)
 800c502:	f04f 0200 	mov.w	r2, #0
 800c506:	619a      	str	r2, [r3, #24]
	 				testOutput[7] = 0;
 800c508:	4b2c      	ldr	r3, [pc, #176]	; (800c5bc <FFT_Thread+0x1d8>)
 800c50a:	f04f 0200 	mov.w	r2, #0
 800c50e:	61da      	str	r2, [r3, #28]
	 				testOutput[8] = 0;
 800c510:	4b2a      	ldr	r3, [pc, #168]	; (800c5bc <FFT_Thread+0x1d8>)
 800c512:	f04f 0200 	mov.w	r2, #0
 800c516:	621a      	str	r2, [r3, #32]
	 				testOutput[4088] = 0;
 800c518:	4a28      	ldr	r2, [pc, #160]	; (800c5bc <FFT_Thread+0x1d8>)
 800c51a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c51e:	4413      	add	r3, r2
 800c520:	f04f 0200 	mov.w	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
	 				testOutput[4089] = 0;
 800c526:	4a25      	ldr	r2, [pc, #148]	; (800c5bc <FFT_Thread+0x1d8>)
 800c528:	f643 73e4 	movw	r3, #16356	; 0x3fe4
 800c52c:	4413      	add	r3, r2
 800c52e:	f04f 0200 	mov.w	r2, #0
 800c532:	601a      	str	r2, [r3, #0]
	 				testOutput[4090] = 0;
 800c534:	4a21      	ldr	r2, [pc, #132]	; (800c5bc <FFT_Thread+0x1d8>)
 800c536:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800c53a:	4413      	add	r3, r2
 800c53c:	f04f 0200 	mov.w	r2, #0
 800c540:	601a      	str	r2, [r3, #0]
	 				testOutput[4091] = 0;
 800c542:	4a1e      	ldr	r2, [pc, #120]	; (800c5bc <FFT_Thread+0x1d8>)
 800c544:	f643 73ec 	movw	r3, #16364	; 0x3fec
 800c548:	4413      	add	r3, r2
 800c54a:	f04f 0200 	mov.w	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
	 				testOutput[4092] = 0;
 800c550:	4a1a      	ldr	r2, [pc, #104]	; (800c5bc <FFT_Thread+0x1d8>)
 800c552:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800c556:	4413      	add	r3, r2
 800c558:	f04f 0200 	mov.w	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
	 				testOutput[4093] = 0;
 800c55e:	4a17      	ldr	r2, [pc, #92]	; (800c5bc <FFT_Thread+0x1d8>)
 800c560:	f643 73f4 	movw	r3, #16372	; 0x3ff4
 800c564:	4413      	add	r3, r2
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	601a      	str	r2, [r3, #0]
	 				testOutput[4094] = 0;
 800c56c:	4a13      	ldr	r2, [pc, #76]	; (800c5bc <FFT_Thread+0x1d8>)
 800c56e:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800c572:	4413      	add	r3, r2
 800c574:	f04f 0200 	mov.w	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
	 				testOutput[4095] = 0;
 800c57a:	4a10      	ldr	r2, [pc, #64]	; (800c5bc <FFT_Thread+0x1d8>)
 800c57c:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 800c580:	4413      	add	r3, r2
 800c582:	f04f 0200 	mov.w	r2, #0
 800c586:	601a      	str	r2, [r3, #0]
	 					Calculate_FreqMax(testOutput,*((&freq_settingValue.freq1)+i), i);
	 				}
	 				 */

					/* focus broad band functionality */
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	e02d      	b.n	800c5ea <FFT_Thread+0x206>
 800c58e:	bf00      	nop
 800c590:	2000c530 	.word	0x2000c530
 800c594:	200082ac 	.word	0x200082ac
 800c598:	20018854 	.word	0x20018854
 800c59c:	2000835c 	.word	0x2000835c
 800c5a0:	2000c538 	.word	0x2000c538
 800c5a4:	20010700 	.word	0x20010700
 800c5a8:	20000334 	.word	0x20000334
 800c5ac:	20000324 	.word	0x20000324
 800c5b0:	2000000c 	.word	0x2000000c
 800c5b4:	0802062c 	.word	0x0802062c
 800c5b8:	20000008 	.word	0x20000008
 800c5bc:	2000852c 	.word	0x2000852c
 800c5c0:	20000328 	.word	0x20000328
 800c5c4:	200084c0 	.word	0x200084c0
					{
						settingValue = (&freqSettingValueList.range1+i);
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	4ab7      	ldr	r2, [pc, #732]	; (800c8ac <FFT_Thread+0x4c8>)
 800c5ce:	4413      	add	r3, r2
 800c5d0:	4ab7      	ldr	r2, [pc, #732]	; (800c8b0 <FFT_Thread+0x4cc>)
 800c5d2:	6013      	str	r3, [r2, #0]
						Calculate_FreqMax(testOutput, settingValue, i);
 800c5d4:	4bb6      	ldr	r3, [pc, #728]	; (800c8b0 <FFT_Thread+0x4cc>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	b252      	sxtb	r2, r2
 800c5dc:	4619      	mov	r1, r3
 800c5de:	48b5      	ldr	r0, [pc, #724]	; (800c8b4 <FFT_Thread+0x4d0>)
 800c5e0:	f7fe ffb6 	bl	800b550 <Calculate_FreqMax>
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	613b      	str	r3, [r7, #16]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d9eb      	bls.n	800c5c8 <FFT_Thread+0x1e4>
					}
	 				/*TODO: Calculate math function*/
	 				statistic_value.Statistic_FreqOvall = Calculate_FreqOverAll(testOutput, dataLength);
 800c5f0:	4bb1      	ldr	r3, [pc, #708]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	48af      	ldr	r0, [pc, #700]	; (800c8b4 <FFT_Thread+0x4d0>)
 800c5f8:	f7ff f83a 	bl	800b670 <Calculate_FreqOverAll>
 800c5fc:	eef0 7a40 	vmov.f32	s15, s0
 800c600:	4bae      	ldr	r3, [pc, #696]	; (800c8bc <FFT_Thread+0x4d8>)
 800c602:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	 				arm_max_f32(statisticDataSet, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 800c606:	4bae      	ldr	r3, [pc, #696]	; (800c8c0 <FFT_Thread+0x4dc>)
 800c608:	6818      	ldr	r0, [r3, #0]
 800c60a:	4bab      	ldr	r3, [pc, #684]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c60c:	6819      	ldr	r1, [r3, #0]
 800c60e:	4bad      	ldr	r3, [pc, #692]	; (800c8c4 <FFT_Thread+0x4e0>)
 800c610:	4aaa      	ldr	r2, [pc, #680]	; (800c8bc <FFT_Thread+0x4d8>)
 800c612:	f7fc f8df 	bl	80087d4 <arm_max_f32>
	 				arm_min_f32(statisticDataSet, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 800c616:	4baa      	ldr	r3, [pc, #680]	; (800c8c0 <FFT_Thread+0x4dc>)
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	4ba7      	ldr	r3, [pc, #668]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c61c:	6819      	ldr	r1, [r3, #0]
 800c61e:	4baa      	ldr	r3, [pc, #680]	; (800c8c8 <FFT_Thread+0x4e4>)
 800c620:	4aaa      	ldr	r2, [pc, #680]	; (800c8cc <FFT_Thread+0x4e8>)
 800c622:	f7fc f9dc 	bl	80089de <arm_min_f32>
	 				arm_var_f32(statisticDataSet, dataLength, &statistic_value.Statistic_var);
 800c626:	4ba6      	ldr	r3, [pc, #664]	; (800c8c0 <FFT_Thread+0x4dc>)
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	4ba3      	ldr	r3, [pc, #652]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4aa8      	ldr	r2, [pc, #672]	; (800c8d0 <FFT_Thread+0x4ec>)
 800c630:	4619      	mov	r1, r3
 800c632:	f7fc fc1b 	bl	8008e6c <arm_var_f32>
	 				arm_rms_f32(statisticDataSet, dataLength, &statistic_value.Statistic_rms);
 800c636:	4ba2      	ldr	r3, [pc, #648]	; (800c8c0 <FFT_Thread+0x4dc>)
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	4b9f      	ldr	r3, [pc, #636]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4aa5      	ldr	r2, [pc, #660]	; (800c8d4 <FFT_Thread+0x4f0>)
 800c640:	4619      	mov	r1, r3
 800c642:	f7fc fa84 	bl	8008b4e <arm_rms_f32>
	 				arm_mean_f32(statisticDataSet, dataLength, &statistic_value.Statistic_mean);
 800c646:	4b9e      	ldr	r3, [pc, #632]	; (800c8c0 <FFT_Thread+0x4dc>)
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	4b9b      	ldr	r3, [pc, #620]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4aa2      	ldr	r2, [pc, #648]	; (800c8d8 <FFT_Thread+0x4f4>)
 800c650:	4619      	mov	r1, r3
 800c652:	f7fc f955 	bl	8008900 <arm_mean_f32>
	 				arm_std_f32(statisticDataSet, dataLength, &statistic_value.Statistic_std);
 800c656:	4b9a      	ldr	r3, [pc, #616]	; (800c8c0 <FFT_Thread+0x4dc>)
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	4b97      	ldr	r3, [pc, #604]	; (800c8b8 <FFT_Thread+0x4d4>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a9f      	ldr	r2, [pc, #636]	; (800c8dc <FFT_Thread+0x4f8>)
 800c660:	4619      	mov	r1, r3
 800c662:	f7fc fb1b 	bl	8008c9c <arm_std_f32>
	 				statistic_value.Statistic_crestFactor = statistic_value.Statistic_max/statistic_value.Statistic_rms;
 800c666:	4b95      	ldr	r3, [pc, #596]	; (800c8bc <FFT_Thread+0x4d8>)
 800c668:	edd3 6a00 	vldr	s13, [r3]
 800c66c:	4b93      	ldr	r3, [pc, #588]	; (800c8bc <FFT_Thread+0x4d8>)
 800c66e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c676:	4b91      	ldr	r3, [pc, #580]	; (800c8bc <FFT_Thread+0x4d8>)
 800c678:	edc3 7a06 	vstr	s15, [r3, #24]
	 				/*TODO: Calculate skewness and kurtosis will cause delay*/
	 				//statistic_value.Statistic_kurtosis = Calculate_kurtosis(statisticDataSet, dataLength);
	 				//statistic_value.Statistic_skewness = Calculate_skewness(statisticDataSet, dataLength);

	 				/*TODO: to calculate 3 times moving average*/
	 				averageTimes++;
 800c67c:	4b98      	ldr	r3, [pc, #608]	; (800c8e0 <FFT_Thread+0x4fc>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	3301      	adds	r3, #1
 800c682:	b2da      	uxtb	r2, r3
 800c684:	4b96      	ldr	r3, [pc, #600]	; (800c8e0 <FFT_Thread+0x4fc>)
 800c686:	701a      	strb	r2, [r3, #0]
	 				if(averageTimes == 1)
 800c688:	4b95      	ldr	r3, [pc, #596]	; (800c8e0 <FFT_Thread+0x4fc>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d12b      	bne.n	800c6e8 <FFT_Thread+0x304>
	 				{
	 					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 800c690:	4b8a      	ldr	r3, [pc, #552]	; (800c8bc <FFT_Thread+0x4d8>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a89      	ldr	r2, [pc, #548]	; (800c8bc <FFT_Thread+0x4d8>)
 800c696:	67d3      	str	r3, [r2, #124]	; 0x7c
	 					statistic_value.Statistic_min_Temp = statistic_value.Statistic_min;
 800c698:	4b88      	ldr	r3, [pc, #544]	; (800c8bc <FFT_Thread+0x4d8>)
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	4a87      	ldr	r2, [pc, #540]	; (800c8bc <FFT_Thread+0x4d8>)
 800c69e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	 					statistic_value.Statistic_var_Temp = statistic_value.Statistic_var;
 800c6a2:	4b86      	ldr	r3, [pc, #536]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	4a85      	ldr	r2, [pc, #532]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	 					statistic_value.Statistic_rms_Temp = statistic_value.Statistic_rms;
 800c6ac:	4b83      	ldr	r3, [pc, #524]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	4a82      	ldr	r2, [pc, #520]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 					statistic_value.Statistic_mean_Temp = statistic_value.Statistic_mean;
 800c6b6:	4b81      	ldr	r3, [pc, #516]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	4a80      	ldr	r2, [pc, #512]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	 					statistic_value.Statistic_std_Temp = statistic_value.Statistic_std;
 800c6c0:	4b7e      	ldr	r3, [pc, #504]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6c2:	695b      	ldr	r3, [r3, #20]
 800c6c4:	4a7d      	ldr	r2, [pc, #500]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	 					statistic_value.Statistic_FreqOvall_Temp = statistic_value.Statistic_FreqOvall;
 800c6ca:	4b7c      	ldr	r3, [pc, #496]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ce:	4a7b      	ldr	r2, [pc, #492]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	 					statistic_value.Statistic_crestFactor_Temp = statistic_value.Statistic_crestFactor;
 800c6d4:	4b79      	ldr	r3, [pc, #484]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	4a78      	ldr	r2, [pc, #480]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	 					statistic_value.Statistic_SpeedOvall_Temp = statistic_value.Statistic_SpeedOvall;
 800c6de:	4b77      	ldr	r3, [pc, #476]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e2:	4a76      	ldr	r2, [pc, #472]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6e4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	 				}
	 				if(averageTimes == 2)
 800c6e8:	4b7d      	ldr	r3, [pc, #500]	; (800c8e0 <FFT_Thread+0x4fc>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d162      	bne.n	800c7b6 <FFT_Thread+0x3d2>
	 				{
	 					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 800c6f0:	4b72      	ldr	r3, [pc, #456]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6f2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800c6f6:	4b71      	ldr	r3, [pc, #452]	; (800c8bc <FFT_Thread+0x4d8>)
 800c6f8:	edd3 7a00 	vldr	s15, [r3]
 800c6fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c700:	4b6e      	ldr	r3, [pc, #440]	; (800c8bc <FFT_Thread+0x4d8>)
 800c702:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	 					statistic_value.Statistic_min_Temp += statistic_value.Statistic_min;
 800c706:	4b6d      	ldr	r3, [pc, #436]	; (800c8bc <FFT_Thread+0x4d8>)
 800c708:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800c70c:	4b6b      	ldr	r3, [pc, #428]	; (800c8bc <FFT_Thread+0x4d8>)
 800c70e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c712:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c716:	4b69      	ldr	r3, [pc, #420]	; (800c8bc <FFT_Thread+0x4d8>)
 800c718:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	 					statistic_value.Statistic_var_Temp += statistic_value.Statistic_var;
 800c71c:	4b67      	ldr	r3, [pc, #412]	; (800c8bc <FFT_Thread+0x4d8>)
 800c71e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800c722:	4b66      	ldr	r3, [pc, #408]	; (800c8bc <FFT_Thread+0x4d8>)
 800c724:	edd3 7a02 	vldr	s15, [r3, #8]
 800c728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c72c:	4b63      	ldr	r3, [pc, #396]	; (800c8bc <FFT_Thread+0x4d8>)
 800c72e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	 					statistic_value.Statistic_rms_Temp += statistic_value.Statistic_rms;
 800c732:	4b62      	ldr	r3, [pc, #392]	; (800c8bc <FFT_Thread+0x4d8>)
 800c734:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800c738:	4b60      	ldr	r3, [pc, #384]	; (800c8bc <FFT_Thread+0x4d8>)
 800c73a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c73e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c742:	4b5e      	ldr	r3, [pc, #376]	; (800c8bc <FFT_Thread+0x4d8>)
 800c744:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	 					statistic_value.Statistic_mean_Temp += statistic_value.Statistic_mean;
 800c748:	4b5c      	ldr	r3, [pc, #368]	; (800c8bc <FFT_Thread+0x4d8>)
 800c74a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800c74e:	4b5b      	ldr	r3, [pc, #364]	; (800c8bc <FFT_Thread+0x4d8>)
 800c750:	edd3 7a04 	vldr	s15, [r3, #16]
 800c754:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c758:	4b58      	ldr	r3, [pc, #352]	; (800c8bc <FFT_Thread+0x4d8>)
 800c75a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	 					statistic_value.Statistic_std_Temp += statistic_value.Statistic_std;
 800c75e:	4b57      	ldr	r3, [pc, #348]	; (800c8bc <FFT_Thread+0x4d8>)
 800c760:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c764:	4b55      	ldr	r3, [pc, #340]	; (800c8bc <FFT_Thread+0x4d8>)
 800c766:	edd3 7a05 	vldr	s15, [r3, #20]
 800c76a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c76e:	4b53      	ldr	r3, [pc, #332]	; (800c8bc <FFT_Thread+0x4d8>)
 800c770:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	 					statistic_value.Statistic_FreqOvall_Temp += statistic_value.Statistic_FreqOvall;
 800c774:	4b51      	ldr	r3, [pc, #324]	; (800c8bc <FFT_Thread+0x4d8>)
 800c776:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c77a:	4b50      	ldr	r3, [pc, #320]	; (800c8bc <FFT_Thread+0x4d8>)
 800c77c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c780:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c784:	4b4d      	ldr	r3, [pc, #308]	; (800c8bc <FFT_Thread+0x4d8>)
 800c786:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	 					statistic_value.Statistic_crestFactor_Temp += statistic_value.Statistic_crestFactor;
 800c78a:	4b4c      	ldr	r3, [pc, #304]	; (800c8bc <FFT_Thread+0x4d8>)
 800c78c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c790:	4b4a      	ldr	r3, [pc, #296]	; (800c8bc <FFT_Thread+0x4d8>)
 800c792:	edd3 7a06 	vldr	s15, [r3, #24]
 800c796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c79a:	4b48      	ldr	r3, [pc, #288]	; (800c8bc <FFT_Thread+0x4d8>)
 800c79c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	 					statistic_value.Statistic_SpeedOvall_Temp += statistic_value.Statistic_SpeedOvall;
 800c7a0:	4b46      	ldr	r3, [pc, #280]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7a2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800c7a6:	4b45      	ldr	r3, [pc, #276]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7b0:	4b42      	ldr	r3, [pc, #264]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7b2:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	 				}
	 				if(averageTimes == 3)
 800c7b6:	4b4a      	ldr	r3, [pc, #296]	; (800c8e0 <FFT_Thread+0x4fc>)
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	f040 80ae 	bne.w	800c91c <FFT_Thread+0x538>
	 				{
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c7c0:	4b3e      	ldr	r3, [pc, #248]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7c2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
	 							statistic_value.Statistic_max) / 3;
 800c7c6:	4b3d      	ldr	r3, [pc, #244]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7c8:	edd3 7a00 	vldr	s15, [r3]
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c7cc:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_max) / 3;
 800c7d0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c7d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c7d8:	4b38      	ldr	r3, [pc, #224]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7da:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c7de:	4b37      	ldr	r3, [pc, #220]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7e0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
	 							statistic_value.Statistic_min) / 3;
 800c7e4:	4b35      	ldr	r3, [pc, #212]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7e6:	edd3 7a01 	vldr	s15, [r3, #4]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c7ea:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_min) / 3;
 800c7ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c7f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c7f6:	4b31      	ldr	r3, [pc, #196]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7f8:	edc3 7a01 	vstr	s15, [r3, #4]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c7fc:	4b2f      	ldr	r3, [pc, #188]	; (800c8bc <FFT_Thread+0x4d8>)
 800c7fe:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
	 							statistic_value.Statistic_var) / 3;
 800c802:	4b2e      	ldr	r3, [pc, #184]	; (800c8bc <FFT_Thread+0x4d8>)
 800c804:	edd3 7a02 	vldr	s15, [r3, #8]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c808:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_var) / 3;
 800c80c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c810:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c814:	4b29      	ldr	r3, [pc, #164]	; (800c8bc <FFT_Thread+0x4d8>)
 800c816:	edc3 7a02 	vstr	s15, [r3, #8]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c81a:	4b28      	ldr	r3, [pc, #160]	; (800c8bc <FFT_Thread+0x4d8>)
 800c81c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
	 							statistic_value.Statistic_rms) / 3;
 800c820:	4b26      	ldr	r3, [pc, #152]	; (800c8bc <FFT_Thread+0x4d8>)
 800c822:	edd3 7a03 	vldr	s15, [r3, #12]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c826:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_rms) / 3;
 800c82a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c82e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c832:	4b22      	ldr	r3, [pc, #136]	; (800c8bc <FFT_Thread+0x4d8>)
 800c834:	edc3 7a03 	vstr	s15, [r3, #12]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c838:	4b20      	ldr	r3, [pc, #128]	; (800c8bc <FFT_Thread+0x4d8>)
 800c83a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
	 							statistic_value.Statistic_mean) / 3;
 800c83e:	4b1f      	ldr	r3, [pc, #124]	; (800c8bc <FFT_Thread+0x4d8>)
 800c840:	edd3 7a04 	vldr	s15, [r3, #16]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c844:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_mean) / 3;
 800c848:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c84c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c850:	4b1a      	ldr	r3, [pc, #104]	; (800c8bc <FFT_Thread+0x4d8>)
 800c852:	edc3 7a04 	vstr	s15, [r3, #16]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c856:	4b19      	ldr	r3, [pc, #100]	; (800c8bc <FFT_Thread+0x4d8>)
 800c858:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
	 							statistic_value.Statistic_std) / 3;
 800c85c:	4b17      	ldr	r3, [pc, #92]	; (800c8bc <FFT_Thread+0x4d8>)
 800c85e:	edd3 7a05 	vldr	s15, [r3, #20]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c862:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_std) / 3;
 800c866:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c86a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c86e:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <FFT_Thread+0x4d8>)
 800c870:	edc3 7a05 	vstr	s15, [r3, #20]
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c874:	4b11      	ldr	r3, [pc, #68]	; (800c8bc <FFT_Thread+0x4d8>)
 800c876:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
	 							statistic_value.Statistic_FreqOvall) / 3;
 800c87a:	4b10      	ldr	r3, [pc, #64]	; (800c8bc <FFT_Thread+0x4d8>)
 800c87c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c880:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_FreqOvall) / 3;
 800c884:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c888:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c88c:	4b0b      	ldr	r3, [pc, #44]	; (800c8bc <FFT_Thread+0x4d8>)
 800c88e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c892:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <FFT_Thread+0x4d8>)
 800c894:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
	 							statistic_value.Statistic_crestFactor) / 3;
 800c898:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <FFT_Thread+0x4d8>)
 800c89a:	edd3 7a06 	vldr	s15, [r3, #24]
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c89e:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_crestFactor) / 3;
 800c8a2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8aa:	e01b      	b.n	800c8e4 <FFT_Thread+0x500>
 800c8ac:	200080cc 	.word	0x200080cc
 800c8b0:	20000338 	.word	0x20000338
 800c8b4:	2000852c 	.word	0x2000852c
 800c8b8:	20000334 	.word	0x20000334
 800c8bc:	200080e4 	.word	0x200080e4
 800c8c0:	200081a0 	.word	0x200081a0
 800c8c4:	2000032c 	.word	0x2000032c
 800c8c8:	20000330 	.word	0x20000330
 800c8cc:	200080e8 	.word	0x200080e8
 800c8d0:	200080ec 	.word	0x200080ec
 800c8d4:	200080f0 	.word	0x200080f0
 800c8d8:	200080f4 	.word	0x200080f4
 800c8dc:	200080f8 	.word	0x200080f8
 800c8e0:	2000031c 	.word	0x2000031c
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c8e4:	4b12      	ldr	r3, [pc, #72]	; (800c930 <FFT_Thread+0x54c>)
 800c8e6:	edc3 7a06 	vstr	s15, [r3, #24]
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800c8ea:	4b11      	ldr	r3, [pc, #68]	; (800c930 <FFT_Thread+0x54c>)
 800c8ec:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800c8f0:	4b0f      	ldr	r3, [pc, #60]	; (800c930 <FFT_Thread+0x54c>)
 800c8f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800c8f6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800c8fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800c902:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <FFT_Thread+0x54c>)
 800c904:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28



	 					USARTBLE.sendflag = 1;
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <FFT_Thread+0x550>)
 800c90a:	2201      	movs	r2, #1
 800c90c:	701a      	strb	r2, [r3, #0]
	 					averageTimes = 0;
 800c90e:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <FFT_Thread+0x554>)
 800c910:	2200      	movs	r2, #0
 800c912:	701a      	strb	r2, [r3, #0]

	 					/*TODO: BLE send data*/
	 					BLE_USART(&huart6, &statistic_value);
 800c914:	4906      	ldr	r1, [pc, #24]	; (800c930 <FFT_Thread+0x54c>)
 800c916:	4809      	ldr	r0, [pc, #36]	; (800c93c <FFT_Thread+0x558>)
 800c918:	f7fe fd86 	bl	800b428 <BLE_USART>

	 				//snprintf_(bb,20, "%.3f Pa", statistic_value.Statistic_max);



	 				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800c91c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c920:	4807      	ldr	r0, [pc, #28]	; (800c940 <FFT_Thread+0x55c>)
 800c922:	f002 fd64 	bl	800f3ee <HAL_GPIO_TogglePin>
 800c926:	e561      	b.n	800c3ec <FFT_Thread+0x8>
	 			}
	 */
	 	  }

	 	  else{
	 		 vTaskSuspend(NULL);
 800c928:	2000      	movs	r0, #0
 800c92a:	f008 f9d9 	bl	8014ce0 <vTaskSuspend>
  {
 800c92e:	e55d      	b.n	800c3ec <FFT_Thread+0x8>
 800c930:	200080e4 	.word	0x200080e4
 800c934:	20010540 	.word	0x20010540
 800c938:	2000031c 	.word	0x2000031c
 800c93c:	20018700 	.word	0x20018700
 800c940:	40020c00 	.word	0x40020c00

0800c944 <LED_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread */
void LED_Thread(void const * argument)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Thread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c94c:	2001      	movs	r0, #1
 800c94e:	f007 f8c0 	bl	8013ad2 <osDelay>
 800c952:	e7fb      	b.n	800c94c <LED_Thread+0x8>

0800c954 <I2C_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_I2C_Thread */
void I2C_Thread(void const * argument)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C_Thread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c95c:	2001      	movs	r0, #1
 800c95e:	f007 f8b8 	bl	8013ad2 <osDelay>
 800c962:	e7fb      	b.n	800c95c <I2C_Thread+0x8>

0800c964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c964:	b480      	push	{r7}
 800c966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c968:	bf00      	nop
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800c972:	b480      	push	{r7}
 800c974:	b085      	sub	sp, #20
 800c976:	af00      	add	r7, sp, #0
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
 800c97c:	603b      	str	r3, [r7, #0]
 800c97e:	4603      	mov	r3, r0
 800c980:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d204      	bcs.n	800c994 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4413      	add	r3, r2
 800c990:	7bfa      	ldrb	r2, [r7, #15]
 800c992:	701a      	strb	r2, [r3, #0]
  }
}
 800c994:	bf00      	nop
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	607a      	str	r2, [r7, #4]
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800c9b0:	bf00      	nop
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	60fb      	str	r3, [r7, #12]
 800c9ca:	e002      	b.n	800c9d2 <_strnlen_s+0x16>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	60fb      	str	r3, [r7, #12]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <_strnlen_s+0x28>
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	1e5a      	subs	r2, r3, #1
 800c9de:	603a      	str	r2, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1f3      	bne.n	800c9cc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	1ad3      	subs	r3, r2, r3
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	2b2f      	cmp	r3, #47	; 0x2f
 800ca04:	d904      	bls.n	800ca10 <_is_digit+0x1a>
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	2b39      	cmp	r3, #57	; 0x39
 800ca0a:	d801      	bhi.n	800ca10 <_is_digit+0x1a>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e000      	b.n	800ca12 <_is_digit+0x1c>
 800ca10:	2300      	movs	r3, #0
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	b2db      	uxtb	r3, r3
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ca30:	e00e      	b.n	800ca50 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	1c59      	adds	r1, r3, #1
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	6011      	str	r1, [r2, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	4403      	add	r3, r0
 800ca4c:	3b30      	subs	r3, #48	; 0x30
 800ca4e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff ffcd 	bl	800c9f6 <_is_digit>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1e7      	bne.n	800ca32 <_atoi+0xe>
  }
  return i;
 800ca62:	68fb      	ldr	r3, [r7, #12]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800ca7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca80:	f003 0302 	and.w	r3, r3, #2
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d125      	bne.n	800cad4 <_out_rev+0x68>
 800ca88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d120      	bne.n	800cad4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e00a      	b.n	800caae <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	1c53      	adds	r3, r2, #1
 800ca9c:	607b      	str	r3, [r7, #4]
 800ca9e:	68fc      	ldr	r4, [r7, #12]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68b9      	ldr	r1, [r7, #8]
 800caa4:	2020      	movs	r0, #32
 800caa6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	3301      	adds	r3, #1
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d3f0      	bcc.n	800ca98 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800cab6:	e00d      	b.n	800cad4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	3b01      	subs	r3, #1
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cabe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	4413      	add	r3, r2
 800cac4:	7818      	ldrb	r0, [r3, #0]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	1c53      	adds	r3, r2, #1
 800caca:	607b      	str	r3, [r7, #4]
 800cacc:	68fc      	ldr	r4, [r7, #12]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	47a0      	blx	r4
  while (len) {
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1ee      	bne.n	800cab8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	f003 0302 	and.w	r3, r3, #2
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00e      	beq.n	800cb02 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800cae4:	e007      	b.n	800caf6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	1c53      	adds	r3, r2, #1
 800caea:	607b      	str	r3, [r7, #4]
 800caec:	68fc      	ldr	r4, [r7, #12]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	2020      	movs	r0, #32
 800caf4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d8f1      	bhi.n	800cae6 <_out_rev+0x7a>
    }
  }

  return idx;
 800cb02:	687b      	ldr	r3, [r7, #4]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	371c      	adds	r7, #28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd90      	pop	{r4, r7, pc}

0800cb0c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af04      	add	r7, sp, #16
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d136      	bne.n	800cb92 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d018      	beq.n	800cb5c <_ntoa_format+0x50>
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d013      	beq.n	800cb5c <_ntoa_format+0x50>
 800cb34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d104      	bne.n	800cb46 <_ntoa_format+0x3a>
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	f003 030c 	and.w	r3, r3, #12
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00a      	beq.n	800cb5c <_ntoa_format+0x50>
      width--;
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cb4c:	e006      	b.n	800cb5c <_ntoa_format+0x50>
      buf[len++] = '0';
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	61fa      	str	r2, [r7, #28]
 800cb54:	69ba      	ldr	r2, [r7, #24]
 800cb56:	4413      	add	r3, r2
 800cb58:	2230      	movs	r2, #48	; 0x30
 800cb5a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d20a      	bcs.n	800cb7a <_ntoa_format+0x6e>
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	2b1f      	cmp	r3, #31
 800cb68:	d9f1      	bls.n	800cb4e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cb6a:	e006      	b.n	800cb7a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	61fa      	str	r2, [r7, #28]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	4413      	add	r3, r2
 800cb76:	2230      	movs	r2, #48	; 0x30
 800cb78:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7c:	f003 0301 	and.w	r3, r3, #1
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d006      	beq.n	800cb92 <_ntoa_format+0x86>
 800cb84:	69fa      	ldr	r2, [r7, #28]
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d202      	bcs.n	800cb92 <_ntoa_format+0x86>
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	2b1f      	cmp	r3, #31
 800cb90:	d9ec      	bls.n	800cb6c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	f003 0310 	and.w	r3, r3, #16
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d058      	beq.n	800cc4e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d116      	bne.n	800cbd4 <_ntoa_format+0xc8>
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d013      	beq.n	800cbd4 <_ntoa_format+0xc8>
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d003      	beq.n	800cbbc <_ntoa_format+0xb0>
 800cbb4:	69fa      	ldr	r2, [r7, #28]
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d10b      	bne.n	800cbd4 <_ntoa_format+0xc8>
      len--;
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d005      	beq.n	800cbd4 <_ntoa_format+0xc8>
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	2b10      	cmp	r3, #16
 800cbcc:	d102      	bne.n	800cbd4 <_ntoa_format+0xc8>
        len--;
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	2b10      	cmp	r3, #16
 800cbd8:	d10f      	bne.n	800cbfa <_ntoa_format+0xee>
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	f003 0320 	and.w	r3, r3, #32
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <_ntoa_format+0xee>
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2b1f      	cmp	r3, #31
 800cbe8:	d807      	bhi.n	800cbfa <_ntoa_format+0xee>
      buf[len++] = 'x';
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	61fa      	str	r2, [r7, #28]
 800cbf0:	69ba      	ldr	r2, [r7, #24]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	2278      	movs	r2, #120	; 0x78
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	e01f      	b.n	800cc3a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	2b10      	cmp	r3, #16
 800cbfe:	d10f      	bne.n	800cc20 <_ntoa_format+0x114>
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	f003 0320 	and.w	r3, r3, #32
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <_ntoa_format+0x114>
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	2b1f      	cmp	r3, #31
 800cc0e:	d807      	bhi.n	800cc20 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	61fa      	str	r2, [r7, #28]
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	4413      	add	r3, r2
 800cc1a:	2258      	movs	r2, #88	; 0x58
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	e00c      	b.n	800cc3a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d109      	bne.n	800cc3a <_ntoa_format+0x12e>
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	2b1f      	cmp	r3, #31
 800cc2a:	d806      	bhi.n	800cc3a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	1c5a      	adds	r2, r3, #1
 800cc30:	61fa      	str	r2, [r7, #28]
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	4413      	add	r3, r2
 800cc36:	2262      	movs	r2, #98	; 0x62
 800cc38:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	2b1f      	cmp	r3, #31
 800cc3e:	d806      	bhi.n	800cc4e <_ntoa_format+0x142>
      buf[len++] = '0';
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	61fa      	str	r2, [r7, #28]
 800cc46:	69ba      	ldr	r2, [r7, #24]
 800cc48:	4413      	add	r3, r2
 800cc4a:	2230      	movs	r2, #48	; 0x30
 800cc4c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	2b1f      	cmp	r3, #31
 800cc52:	d824      	bhi.n	800cc9e <_ntoa_format+0x192>
    if (negative) {
 800cc54:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <_ntoa_format+0x160>
      buf[len++] = '-';
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	61fa      	str	r2, [r7, #28]
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	4413      	add	r3, r2
 800cc66:	222d      	movs	r2, #45	; 0x2d
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	e018      	b.n	800cc9e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	f003 0304 	and.w	r3, r3, #4
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	61fa      	str	r2, [r7, #28]
 800cc7c:	69ba      	ldr	r2, [r7, #24]
 800cc7e:	4413      	add	r3, r2
 800cc80:	222b      	movs	r2, #43	; 0x2b
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	e00b      	b.n	800cc9e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	f003 0308 	and.w	r3, r3, #8
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d006      	beq.n	800cc9e <_ntoa_format+0x192>
      buf[len++] = ' ';
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	61fa      	str	r2, [r7, #28]
 800cc96:	69ba      	ldr	r2, [r7, #24]
 800cc98:	4413      	add	r3, r2
 800cc9a:	2220      	movs	r2, #32
 800cc9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	9303      	str	r3, [sp, #12]
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	9302      	str	r3, [sp, #8]
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7ff fed9 	bl	800ca6c <_out_rev>
 800ccba:	4603      	mov	r3, r0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b096      	sub	sp, #88	; 0x58
 800ccc8:	af08      	add	r7, sp, #32
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ccd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d103      	bne.n	800cce4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800ccdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccde:	f023 0310 	bic.w	r3, r3, #16
 800cce2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800cce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <_ntoa_long+0x30>
 800ccee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d033      	beq.n	800cd5c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800ccf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccf8:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccfc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccfe:	fb01 f202 	mul.w	r2, r1, r2
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800cd08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd0c:	2b09      	cmp	r3, #9
 800cd0e:	d804      	bhi.n	800cd1a <_ntoa_long+0x56>
 800cd10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd14:	3330      	adds	r3, #48	; 0x30
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	e00d      	b.n	800cd36 <_ntoa_long+0x72>
 800cd1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd1c:	f003 0320 	and.w	r3, r3, #32
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <_ntoa_long+0x64>
 800cd24:	2241      	movs	r2, #65	; 0x41
 800cd26:	e000      	b.n	800cd2a <_ntoa_long+0x66>
 800cd28:	2261      	movs	r2, #97	; 0x61
 800cd2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd2e:	4413      	add	r3, r2
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	3b0a      	subs	r3, #10
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd38:	1c59      	adds	r1, r3, #1
 800cd3a:	6379      	str	r1, [r7, #52]	; 0x34
 800cd3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800cd40:	440b      	add	r3, r1
 800cd42:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800cd46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800cd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <_ntoa_long+0x98>
 800cd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd58:	2b1f      	cmp	r3, #31
 800cd5a:	d9cb      	bls.n	800ccf4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800cd5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd5e:	9306      	str	r3, [sp, #24]
 800cd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd62:	9305      	str	r3, [sp, #20]
 800cd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd66:	9304      	str	r3, [sp, #16]
 800cd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd6a:	9303      	str	r3, [sp, #12]
 800cd6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cd70:	9302      	str	r3, [sp, #8]
 800cd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	f107 0310 	add.w	r3, r7, #16
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	68b9      	ldr	r1, [r7, #8]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fec2 	bl	800cb0c <_ntoa_format>
 800cd88:	4603      	mov	r3, r0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3738      	adds	r7, #56	; 0x38
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cd92:	b590      	push	{r4, r7, lr}
 800cd94:	b097      	sub	sp, #92	; 0x5c
 800cd96:	af08      	add	r7, sp, #32
 800cd98:	60f8      	str	r0, [r7, #12]
 800cd9a:	60b9      	str	r1, [r7, #8]
 800cd9c:	607a      	str	r2, [r7, #4]
 800cd9e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800cda0:	2300      	movs	r3, #0
 800cda2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800cda4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800cda8:	4323      	orrs	r3, r4
 800cdaa:	d103      	bne.n	800cdb4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800cdac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdae:	f023 0310 	bic.w	r3, r3, #16
 800cdb2:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800cdb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <_ntoa_long_long+0x34>
 800cdbe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800cdc2:	4323      	orrs	r3, r4
 800cdc4:	d039      	beq.n	800ce3a <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800cdc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cdca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cdce:	f7fb fa9f 	bl	8008310 <__aeabi_uldivmod>
 800cdd2:	461c      	mov	r4, r3
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800cdda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdde:	2b09      	cmp	r3, #9
 800cde0:	d804      	bhi.n	800cdec <_ntoa_long_long+0x5a>
 800cde2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cde6:	3330      	adds	r3, #48	; 0x30
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	e00d      	b.n	800ce08 <_ntoa_long_long+0x76>
 800cdec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdee:	f003 0320 	and.w	r3, r3, #32
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <_ntoa_long_long+0x68>
 800cdf6:	2241      	movs	r2, #65	; 0x41
 800cdf8:	e000      	b.n	800cdfc <_ntoa_long_long+0x6a>
 800cdfa:	2261      	movs	r2, #97	; 0x61
 800cdfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce00:	4413      	add	r3, r2
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	3b0a      	subs	r3, #10
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0a:	1c59      	adds	r1, r3, #1
 800ce0c:	6379      	str	r1, [r7, #52]	; 0x34
 800ce0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ce12:	440b      	add	r3, r1
 800ce14:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ce18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce1c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ce20:	f7fb fa76 	bl	8008310 <__aeabi_uldivmod>
 800ce24:	4603      	mov	r3, r0
 800ce26:	460c      	mov	r4, r1
 800ce28:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ce2c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ce30:	4323      	orrs	r3, r4
 800ce32:	d002      	beq.n	800ce3a <_ntoa_long_long+0xa8>
 800ce34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce36:	2b1f      	cmp	r3, #31
 800ce38:	d9c5      	bls.n	800cdc6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ce3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce3e:	9206      	str	r2, [sp, #24]
 800ce40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce42:	9205      	str	r2, [sp, #20]
 800ce44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce46:	9204      	str	r2, [sp, #16]
 800ce48:	9303      	str	r3, [sp, #12]
 800ce4a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ce4e:	9302      	str	r3, [sp, #8]
 800ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	f107 0310 	add.w	r3, r7, #16
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7ff fe53 	bl	800cb0c <_ntoa_format>
 800ce66:	4603      	mov	r3, r0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	373c      	adds	r7, #60	; 0x3c
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd90      	pop	{r4, r7, pc}

0800ce70 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b09d      	sub	sp, #116	; 0x74
 800ce74:	af04      	add	r7, sp, #16
 800ce76:	6178      	str	r0, [r7, #20]
 800ce78:	6139      	str	r1, [r7, #16]
 800ce7a:	60fa      	str	r2, [r7, #12]
 800ce7c:	60bb      	str	r3, [r7, #8]
 800ce7e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800ce82:	2300      	movs	r3, #0
 800ce84:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800ce86:	f04f 0300 	mov.w	r3, #0
 800ce8a:	f04f 0400 	mov.w	r4, #0
 800ce8e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800ce92:	ed97 6b00 	vldr	d6, [r7]
 800ce96:	ed97 7b00 	vldr	d7, [r7]
 800ce9a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ce9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea2:	d00f      	beq.n	800cec4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800cea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cea6:	9303      	str	r3, [sp, #12]
 800cea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ceaa:	9302      	str	r3, [sp, #8]
 800ceac:	2303      	movs	r3, #3
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	4bb7      	ldr	r3, [pc, #732]	; (800d190 <_ftoa+0x320>)
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	6939      	ldr	r1, [r7, #16]
 800ceba:	6978      	ldr	r0, [r7, #20]
 800cebc:	f7ff fdd6 	bl	800ca6c <_out_rev>
 800cec0:	4603      	mov	r3, r0
 800cec2:	e21e      	b.n	800d302 <_ftoa+0x492>
  if (value < -DBL_MAX)
 800cec4:	ed97 7b00 	vldr	d7, [r7]
 800cec8:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800d168 <_ftoa+0x2f8>
 800cecc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ced0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced4:	d50f      	bpl.n	800cef6 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800ced6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ced8:	9303      	str	r3, [sp, #12]
 800ceda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cedc:	9302      	str	r3, [sp, #8]
 800cede:	2304      	movs	r3, #4
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	4bac      	ldr	r3, [pc, #688]	; (800d194 <_ftoa+0x324>)
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	6939      	ldr	r1, [r7, #16]
 800ceec:	6978      	ldr	r0, [r7, #20]
 800ceee:	f7ff fdbd 	bl	800ca6c <_out_rev>
 800cef2:	4603      	mov	r3, r0
 800cef4:	e205      	b.n	800d302 <_ftoa+0x492>
  if (value > DBL_MAX)
 800cef6:	ed97 7b00 	vldr	d7, [r7]
 800cefa:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800d170 <_ftoa+0x300>
 800cefe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf06:	dd1d      	ble.n	800cf44 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800cf08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf0a:	f003 0304 	and.w	r3, r3, #4
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <_ftoa+0xa6>
 800cf12:	4ba1      	ldr	r3, [pc, #644]	; (800d198 <_ftoa+0x328>)
 800cf14:	e000      	b.n	800cf18 <_ftoa+0xa8>
 800cf16:	4ba1      	ldr	r3, [pc, #644]	; (800d19c <_ftoa+0x32c>)
 800cf18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf1a:	f002 0204 	and.w	r2, r2, #4
 800cf1e:	2a00      	cmp	r2, #0
 800cf20:	d001      	beq.n	800cf26 <_ftoa+0xb6>
 800cf22:	2204      	movs	r2, #4
 800cf24:	e000      	b.n	800cf28 <_ftoa+0xb8>
 800cf26:	2203      	movs	r2, #3
 800cf28:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cf2a:	9103      	str	r1, [sp, #12]
 800cf2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf2e:	9102      	str	r1, [sp, #8]
 800cf30:	9201      	str	r2, [sp, #4]
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	6939      	ldr	r1, [r7, #16]
 800cf3a:	6978      	ldr	r0, [r7, #20]
 800cf3c:	f7ff fd96 	bl	800ca6c <_out_rev>
 800cf40:	4603      	mov	r3, r0
 800cf42:	e1de      	b.n	800d302 <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800cf44:	ed97 7b00 	vldr	d7, [r7]
 800cf48:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800d178 <_ftoa+0x308>
 800cf4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf54:	dc08      	bgt.n	800cf68 <_ftoa+0xf8>
 800cf56:	ed97 7b00 	vldr	d7, [r7]
 800cf5a:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800d180 <_ftoa+0x310>
 800cf5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf66:	d50f      	bpl.n	800cf88 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800cf68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf6a:	9302      	str	r3, [sp, #8]
 800cf6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	ed97 0b00 	vldr	d0, [r7]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	6939      	ldr	r1, [r7, #16]
 800cf7e:	6978      	ldr	r0, [r7, #20]
 800cf80:	f000 f9c6 	bl	800d310 <_etoa>
 800cf84:	4603      	mov	r3, r0
 800cf86:	e1bc      	b.n	800d302 <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800cf8e:	ed97 7b00 	vldr	d7, [r7]
 800cf92:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9a:	d50a      	bpl.n	800cfb2 <_ftoa+0x142>
    negative = true;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800cfa2:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d188 <_ftoa+0x318>
 800cfa6:	ed97 7b00 	vldr	d7, [r7]
 800cfaa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cfae:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800cfb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10e      	bne.n	800cfda <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800cfbc:	2306      	movs	r3, #6
 800cfbe:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800cfc0:	e00b      	b.n	800cfda <_ftoa+0x16a>
    buf[len++] = '0';
 800cfc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cfc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cfcc:	4413      	add	r3, r2
 800cfce:	2230      	movs	r2, #48	; 0x30
 800cfd0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800cfd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800cfda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfdc:	2b1f      	cmp	r3, #31
 800cfde:	d802      	bhi.n	800cfe6 <_ftoa+0x176>
 800cfe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	d8ed      	bhi.n	800cfc2 <_ftoa+0x152>
  }

  int whole = (int)value;
 800cfe6:	ed97 7b00 	vldr	d7, [r7]
 800cfea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cfee:	ee17 3a90 	vmov	r3, s15
 800cff2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800cff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cffe:	ed97 6b00 	vldr	d6, [r7]
 800d002:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d006:	4a66      	ldr	r2, [pc, #408]	; (800d1a0 <_ftoa+0x330>)
 800d008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4413      	add	r3, r2
 800d00e:	ed93 7b00 	vldr	d7, [r3]
 800d012:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d016:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800d01a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800d01e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d022:	ee17 3a90 	vmov	r3, s15
 800d026:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800d028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d02a:	ee07 3a90 	vmov	s15, r3
 800d02e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d032:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800d036:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d03a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800d03e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d042:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d046:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	dd18      	ble.n	800d082 <_ftoa+0x212>
    ++frac;
 800d050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d052:	3301      	adds	r3, #1
 800d054:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800d056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d058:	ee07 3a90 	vmov	s15, r3
 800d05c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800d060:	4a4f      	ldr	r2, [pc, #316]	; (800d1a0 <_ftoa+0x330>)
 800d062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	4413      	add	r3, r2
 800d068:	ed93 7b00 	vldr	d7, [r3]
 800d06c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d074:	db19      	blt.n	800d0aa <_ftoa+0x23a>
      frac = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800d07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d07c:	3301      	adds	r3, #1
 800d07e:	657b      	str	r3, [r7, #84]	; 0x54
 800d080:	e013      	b.n	800d0aa <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 800d082:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d086:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d08a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d092:	d40a      	bmi.n	800d0aa <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800d094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d096:	2b00      	cmp	r3, #0
 800d098:	d004      	beq.n	800d0a4 <_ftoa+0x234>
 800d09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800d0aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d12e      	bne.n	800d10e <_ftoa+0x29e>
    diff = value - (double)whole;
 800d0b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0b2:	ee07 3a90 	vmov	s15, r3
 800d0b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d0ba:	ed97 6b00 	vldr	d6, [r7]
 800d0be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d0c2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800d0c6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d0ca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d0ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d6:	bf4c      	ite	mi
 800d0d8:	2301      	movmi	r3, #1
 800d0da:	2300      	movpl	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f083 0301 	eor.w	r3, r3, #1
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d108      	bne.n	800d0fa <_ftoa+0x28a>
 800d0e8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d0ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d0f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f8:	dd73      	ble.n	800d1e2 <_ftoa+0x372>
 800d0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	f000 8091 	beq.w	800d228 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800d106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d108:	3301      	adds	r3, #1
 800d10a:	657b      	str	r3, [r7, #84]	; 0x54
 800d10c:	e08c      	b.n	800d228 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 800d10e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d110:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d112:	e020      	b.n	800d156 <_ftoa+0x2e6>
      --count;
 800d114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d116:	3b01      	subs	r3, #1
 800d118:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800d11a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d11c:	4b21      	ldr	r3, [pc, #132]	; (800d1a4 <_ftoa+0x334>)
 800d11e:	fba3 2301 	umull	r2, r3, r3, r1
 800d122:	08da      	lsrs	r2, r3, #3
 800d124:	4613      	mov	r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4413      	add	r3, r2
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	1aca      	subs	r2, r1, r3
 800d12e:	b2d2      	uxtb	r2, r2
 800d130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d132:	1c59      	adds	r1, r3, #1
 800d134:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d136:	3230      	adds	r2, #48	; 0x30
 800d138:	b2d2      	uxtb	r2, r2
 800d13a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d13e:	440b      	add	r3, r1
 800d140:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800d144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d146:	4a17      	ldr	r2, [pc, #92]	; (800d1a4 <_ftoa+0x334>)
 800d148:	fba2 2303 	umull	r2, r3, r2, r3
 800d14c:	08db      	lsrs	r3, r3, #3
 800d14e:	653b      	str	r3, [r7, #80]	; 0x50
 800d150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d158:	2b1f      	cmp	r3, #31
 800d15a:	d9db      	bls.n	800d114 <_ftoa+0x2a4>
 800d15c:	e02d      	b.n	800d1ba <_ftoa+0x34a>
        break;
 800d15e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d160:	e02b      	b.n	800d1ba <_ftoa+0x34a>
 800d162:	bf00      	nop
 800d164:	f3af 8000 	nop.w
 800d168:	ffffffff 	.word	0xffffffff
 800d16c:	ffefffff 	.word	0xffefffff
 800d170:	ffffffff 	.word	0xffffffff
 800d174:	7fefffff 	.word	0x7fefffff
 800d178:	00000000 	.word	0x00000000
 800d17c:	41cdcd65 	.word	0x41cdcd65
 800d180:	00000000 	.word	0x00000000
 800d184:	c1cdcd65 	.word	0xc1cdcd65
	...
 800d190:	0801668c 	.word	0x0801668c
 800d194:	08016690 	.word	0x08016690
 800d198:	08016698 	.word	0x08016698
 800d19c:	080166a0 	.word	0x080166a0
 800d1a0:	08020640 	.word	0x08020640
 800d1a4:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 800d1a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d1ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d1b2:	4413      	add	r3, r2
 800d1b4:	2230      	movs	r2, #48	; 0x30
 800d1b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1bc:	2b1f      	cmp	r3, #31
 800d1be:	d804      	bhi.n	800d1ca <_ftoa+0x35a>
 800d1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c2:	1e5a      	subs	r2, r3, #1
 800d1c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1ee      	bne.n	800d1a8 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d1ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1cc:	2b1f      	cmp	r3, #31
 800d1ce:	d82b      	bhi.n	800d228 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 800d1d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1d2:	1c5a      	adds	r2, r3, #1
 800d1d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d1d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d1da:	4413      	add	r3, r2
 800d1dc:	222e      	movs	r2, #46	; 0x2e
 800d1de:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d1e2:	e021      	b.n	800d228 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 800d1e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1e6:	4b49      	ldr	r3, [pc, #292]	; (800d30c <_ftoa+0x49c>)
 800d1e8:	fb83 1302 	smull	r1, r3, r3, r2
 800d1ec:	1099      	asrs	r1, r3, #2
 800d1ee:	17d3      	asrs	r3, r2, #31
 800d1f0:	1ac9      	subs	r1, r1, r3
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	1ad1      	subs	r1, r2, r3
 800d1fc:	b2ca      	uxtb	r2, r1
 800d1fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d200:	1c59      	adds	r1, r3, #1
 800d202:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d204:	3230      	adds	r2, #48	; 0x30
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d20c:	440b      	add	r3, r1
 800d20e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800d212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d214:	4a3d      	ldr	r2, [pc, #244]	; (800d30c <_ftoa+0x49c>)
 800d216:	fb82 1203 	smull	r1, r2, r2, r3
 800d21a:	1092      	asrs	r2, r2, #2
 800d21c:	17db      	asrs	r3, r3, #31
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	657b      	str	r3, [r7, #84]	; 0x54
 800d222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d22a:	2b1f      	cmp	r3, #31
 800d22c:	d9da      	bls.n	800d1e4 <_ftoa+0x374>
 800d22e:	e000      	b.n	800d232 <_ftoa+0x3c2>
      break;
 800d230:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800d232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d234:	f003 0302 	and.w	r3, r3, #2
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d124      	bne.n	800d286 <_ftoa+0x416>
 800d23c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01f      	beq.n	800d286 <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d015      	beq.n	800d278 <_ftoa+0x408>
 800d24c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d250:	2b00      	cmp	r3, #0
 800d252:	d104      	bne.n	800d25e <_ftoa+0x3ee>
 800d254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d256:	f003 030c 	and.w	r3, r3, #12
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00c      	beq.n	800d278 <_ftoa+0x408>
      width--;
 800d25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d260:	3b01      	subs	r3, #1
 800d262:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d264:	e008      	b.n	800d278 <_ftoa+0x408>
      buf[len++] = '0';
 800d266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d268:	1c5a      	adds	r2, r3, #1
 800d26a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d26c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d270:	4413      	add	r3, r2
 800d272:	2230      	movs	r2, #48	; 0x30
 800d274:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d27a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d202      	bcs.n	800d286 <_ftoa+0x416>
 800d280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d282:	2b1f      	cmp	r3, #31
 800d284:	d9ef      	bls.n	800d266 <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d288:	2b1f      	cmp	r3, #31
 800d28a:	d82a      	bhi.n	800d2e2 <_ftoa+0x472>
    if (negative) {
 800d28c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d290:	2b00      	cmp	r3, #0
 800d292:	d009      	beq.n	800d2a8 <_ftoa+0x438>
      buf[len++] = '-';
 800d294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d29a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d29e:	4413      	add	r3, r2
 800d2a0:	222d      	movs	r2, #45	; 0x2d
 800d2a2:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d2a6:	e01c      	b.n	800d2e2 <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 800d2a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2aa:	f003 0304 	and.w	r3, r3, #4
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d009      	beq.n	800d2c6 <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d2b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d2bc:	4413      	add	r3, r2
 800d2be:	222b      	movs	r2, #43	; 0x2b
 800d2c0:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d2c4:	e00d      	b.n	800d2e2 <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 800d2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2c8:	f003 0308 	and.w	r3, r3, #8
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d008      	beq.n	800d2e2 <_ftoa+0x472>
      buf[len++] = ' ';
 800d2d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2d2:	1c5a      	adds	r2, r3, #1
 800d2d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d2d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d2da:	4413      	add	r3, r2
 800d2dc:	2220      	movs	r2, #32
 800d2de:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d2e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2e4:	9303      	str	r3, [sp, #12]
 800d2e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2e8:	9302      	str	r3, [sp, #8]
 800d2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	f107 0318 	add.w	r3, r7, #24
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	6939      	ldr	r1, [r7, #16]
 800d2fa:	6978      	ldr	r0, [r7, #20]
 800d2fc:	f7ff fbb6 	bl	800ca6c <_out_rev>
 800d300:	4603      	mov	r3, r0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3764      	adds	r7, #100	; 0x64
 800d306:	46bd      	mov	sp, r7
 800d308:	bd90      	pop	{r4, r7, pc}
 800d30a:	bf00      	nop
 800d30c:	66666667 	.word	0x66666667

0800d310 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d310:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d314:	b09a      	sub	sp, #104	; 0x68
 800d316:	af06      	add	r7, sp, #24
 800d318:	6178      	str	r0, [r7, #20]
 800d31a:	6139      	str	r1, [r7, #16]
 800d31c:	60fa      	str	r2, [r7, #12]
 800d31e:	60bb      	str	r3, [r7, #8]
 800d320:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800d324:	ed97 6b00 	vldr	d6, [r7]
 800d328:	ed97 7b00 	vldr	d7, [r7]
 800d32c:	eeb4 6b47 	vcmp.f64	d6, d7
 800d330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d334:	d111      	bne.n	800d35a <_etoa+0x4a>
 800d336:	ed97 7b00 	vldr	d7, [r7]
 800d33a:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800d650 <_etoa+0x340>
 800d33e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d346:	dc08      	bgt.n	800d35a <_etoa+0x4a>
 800d348:	ed97 7b00 	vldr	d7, [r7]
 800d34c:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800d658 <_etoa+0x348>
 800d350:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d358:	d50f      	bpl.n	800d37a <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d35a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d35c:	9302      	str	r3, [sp, #8]
 800d35e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	ed97 0b00 	vldr	d0, [r7]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	6939      	ldr	r1, [r7, #16]
 800d370:	6978      	ldr	r0, [r7, #20]
 800d372:	f7ff fd7d 	bl	800ce70 <_ftoa>
 800d376:	4603      	mov	r3, r0
 800d378:	e1cd      	b.n	800d716 <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 800d37a:	ed97 7b00 	vldr	d7, [r7]
 800d37e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	bf4c      	ite	mi
 800d388:	2301      	movmi	r3, #1
 800d38a:	2300      	movpl	r3, #0
 800d38c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800d390:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d394:	2b00      	cmp	r3, #0
 800d396:	d005      	beq.n	800d3a4 <_etoa+0x94>
    value = -value;
 800d398:	ed97 7b00 	vldr	d7, [r7]
 800d39c:	eeb1 7b47 	vneg.f64	d7, d7
 800d3a0:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800d3a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d3ae:	2306      	movs	r3, #6
 800d3b0:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800d3b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d3b6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800d3ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d3be:	f04f 0300 	mov.w	r3, #0
 800d3c2:	f04f 0400 	mov.w	r4, #0
 800d3c6:	0d13      	lsrs	r3, r2, #20
 800d3c8:	2400      	movs	r4, #0
 800d3ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800d3d4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d3d8:	f04f 31ff 	mov.w	r1, #4294967295
 800d3dc:	4ab0      	ldr	r2, [pc, #704]	; (800d6a0 <_etoa+0x390>)
 800d3de:	ea03 0b01 	and.w	fp, r3, r1
 800d3e2:	ea04 0c02 	and.w	ip, r4, r2
 800d3e6:	f04f 0100 	mov.w	r1, #0
 800d3ea:	4aae      	ldr	r2, [pc, #696]	; (800d6a4 <_etoa+0x394>)
 800d3ec:	ea4b 0301 	orr.w	r3, fp, r1
 800d3f0:	ea4c 0402 	orr.w	r4, ip, r2
 800d3f4:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fa:	ee07 3a90 	vmov	s15, r3
 800d3fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d402:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d660 <_etoa+0x350>
 800d406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d40a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d668 <_etoa+0x358>
 800d40e:	ee37 6b06 	vadd.f64	d6, d7, d6
 800d412:	ed97 7b06 	vldr	d7, [r7, #24]
 800d416:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800d41a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d41e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800d670 <_etoa+0x360>
 800d422:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d42a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d42e:	ee17 3a90 	vmov	r3, s15
 800d432:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800d434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d43e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800d678 <_etoa+0x368>
 800d442:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d446:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d44a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d44e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d452:	ee17 3a90 	vmov	r3, s15
 800d456:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800d458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d462:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800d680 <_etoa+0x370>
 800d466:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d46c:	ee07 3a90 	vmov	s15, r3
 800d470:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d474:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800d688 <_etoa+0x378>
 800d478:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d47c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d480:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800d484:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800d488:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800d48c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d490:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800d494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d496:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d49a:	4619      	mov	r1, r3
 800d49c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	f04f 0400 	mov.w	r4, #0
 800d4a8:	050c      	lsls	r4, r1, #20
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800d4b0:	ed97 6b06 	vldr	d6, [r7, #24]
 800d4b4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800d4b8:	ee37 4b07 	vadd.f64	d4, d7, d7
 800d4bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4c0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800d4c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d4c8:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800d4cc:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800d4d0:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800d4d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d4d8:	ee37 3b03 	vadd.f64	d3, d7, d3
 800d4dc:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800d4e0:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800d4e4:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800d4e8:	ee37 3b03 	vadd.f64	d3, d7, d3
 800d4ec:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800d4f0:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800d4f4:	ee35 5b07 	vadd.f64	d5, d5, d7
 800d4f8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800d4fc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800d500:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d504:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d508:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800d50c:	ed97 7b06 	vldr	d7, [r7, #24]
 800d510:	ed97 6b00 	vldr	d6, [r7]
 800d514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	d50a      	bpl.n	800d534 <_etoa+0x224>
    expval--;
 800d51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d520:	3b01      	subs	r3, #1
 800d522:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800d524:	ed97 6b06 	vldr	d6, [r7, #24]
 800d528:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800d52c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d530:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800d534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d536:	2b63      	cmp	r3, #99	; 0x63
 800d538:	dc05      	bgt.n	800d546 <_etoa+0x236>
 800d53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d53c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d540:	db01      	blt.n	800d546 <_etoa+0x236>
 800d542:	2304      	movs	r3, #4
 800d544:	e000      	b.n	800d548 <_etoa+0x238>
 800d546:	2305      	movs	r3, #5
 800d548:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800d54a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d54c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d550:	2b00      	cmp	r3, #0
 800d552:	d031      	beq.n	800d5b8 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800d554:	ed97 7b00 	vldr	d7, [r7]
 800d558:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800d690 <_etoa+0x380>
 800d55c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d564:	db1d      	blt.n	800d5a2 <_etoa+0x292>
 800d566:	ed97 7b00 	vldr	d7, [r7]
 800d56a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800d698 <_etoa+0x388>
 800d56e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d576:	d514      	bpl.n	800d5a2 <_etoa+0x292>
      if ((int)prec > expval) {
 800d578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d57a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d57c:	429a      	cmp	r2, r3
 800d57e:	da05      	bge.n	800d58c <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 800d580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d584:	1ad3      	subs	r3, r2, r3
 800d586:	3b01      	subs	r3, #1
 800d588:	663b      	str	r3, [r7, #96]	; 0x60
 800d58a:	e001      	b.n	800d590 <_etoa+0x280>
      }
      else {
        prec = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800d590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d596:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 800d598:	2300      	movs	r3, #0
 800d59a:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5a0:	e00a      	b.n	800d5b8 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800d5a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d007      	beq.n	800d5b8 <_etoa+0x2a8>
 800d5a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d002      	beq.n	800d5b8 <_etoa+0x2a8>
        --prec;
 800d5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800d5b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800d5bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d904      	bls.n	800d5ce <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800d5c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d5cc:	e001      	b.n	800d5d2 <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800d5d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <_etoa+0x2d6>
 800d5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800d5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d007      	beq.n	800d5fc <_etoa+0x2ec>
    value /= conv.F;
 800d5ec:	ed97 6b06 	vldr	d6, [r7, #24]
 800d5f0:	ed97 5b00 	vldr	d5, [r7]
 800d5f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d5f8:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800d600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d604:	2b00      	cmp	r3, #0
 800d606:	d004      	beq.n	800d612 <_etoa+0x302>
 800d608:	ed97 7b00 	vldr	d7, [r7]
 800d60c:	eeb1 7b47 	vneg.f64	d7, d7
 800d610:	e001      	b.n	800d616 <_etoa+0x306>
 800d612:	ed97 7b00 	vldr	d7, [r7]
 800d616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d61c:	9302      	str	r3, [sp, #8]
 800d61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d620:	9301      	str	r3, [sp, #4]
 800d622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	eeb0 0b47 	vmov.f64	d0, d7
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	6939      	ldr	r1, [r7, #16]
 800d630:	6978      	ldr	r0, [r7, #20]
 800d632:	f7ff fc1d 	bl	800ce70 <_ftoa>
 800d636:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800d638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d06a      	beq.n	800d714 <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800d63e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d640:	f003 0320 	and.w	r3, r3, #32
 800d644:	2b00      	cmp	r3, #0
 800d646:	d02f      	beq.n	800d6a8 <_etoa+0x398>
 800d648:	2045      	movs	r0, #69	; 0x45
 800d64a:	e02e      	b.n	800d6aa <_etoa+0x39a>
 800d64c:	f3af 8000 	nop.w
 800d650:	ffffffff 	.word	0xffffffff
 800d654:	7fefffff 	.word	0x7fefffff
 800d658:	ffffffff 	.word	0xffffffff
 800d65c:	ffefffff 	.word	0xffefffff
 800d660:	509f79fb 	.word	0x509f79fb
 800d664:	3fd34413 	.word	0x3fd34413
 800d668:	8b60c8b3 	.word	0x8b60c8b3
 800d66c:	3fc68a28 	.word	0x3fc68a28
 800d670:	636f4361 	.word	0x636f4361
 800d674:	3fd287a7 	.word	0x3fd287a7
 800d678:	0979a371 	.word	0x0979a371
 800d67c:	400a934f 	.word	0x400a934f
 800d680:	bbb55516 	.word	0xbbb55516
 800d684:	40026bb1 	.word	0x40026bb1
 800d688:	fefa39ef 	.word	0xfefa39ef
 800d68c:	3fe62e42 	.word	0x3fe62e42
 800d690:	eb1c432d 	.word	0xeb1c432d
 800d694:	3f1a36e2 	.word	0x3f1a36e2
 800d698:	00000000 	.word	0x00000000
 800d69c:	412e8480 	.word	0x412e8480
 800d6a0:	000fffff 	.word	0x000fffff
 800d6a4:	3ff00000 	.word	0x3ff00000
 800d6a8:	2065      	movs	r0, #101	; 0x65
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	1c53      	adds	r3, r2, #1
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	697c      	ldr	r4, [r7, #20]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	6939      	ldr	r1, [r7, #16]
 800d6b6:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800d6b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	bfb8      	it	lt
 800d6be:	425b      	neglt	r3, r3
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6c4:	0fdb      	lsrs	r3, r3, #31
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6ca:	3a01      	subs	r2, #1
 800d6cc:	2105      	movs	r1, #5
 800d6ce:	9105      	str	r1, [sp, #20]
 800d6d0:	9204      	str	r2, [sp, #16]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	9203      	str	r2, [sp, #12]
 800d6d6:	220a      	movs	r2, #10
 800d6d8:	9202      	str	r2, [sp, #8]
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	9000      	str	r0, [sp, #0]
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	6939      	ldr	r1, [r7, #16]
 800d6e4:	6978      	ldr	r0, [r7, #20]
 800d6e6:	f7ff faed 	bl	800ccc4 <_ntoa_long>
 800d6ea:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800d6ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6ee:	f003 0302 	and.w	r3, r3, #2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00e      	beq.n	800d714 <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800d6f6:	e007      	b.n	800d708 <_etoa+0x3f8>
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	1c53      	adds	r3, r2, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	697c      	ldr	r4, [r7, #20]
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	6939      	ldr	r1, [r7, #16]
 800d704:	2020      	movs	r0, #32
 800d706:	47a0      	blx	r4
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d710:	429a      	cmp	r2, r3
 800d712:	d8f1      	bhi.n	800d6f8 <_etoa+0x3e8>
    }
  }
  return idx;
 800d714:	68fb      	ldr	r3, [r7, #12]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3750      	adds	r7, #80	; 0x50
 800d71a:	46bd      	mov	sp, r7
 800d71c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800d720 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800d720:	b5b0      	push	{r4, r5, r7, lr}
 800d722:	b0a0      	sub	sp, #128	; 0x80
 800d724:	af0a      	add	r7, sp, #40	; 0x28
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800d72e:	2300      	movs	r3, #0
 800d730:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f040 848e 	bne.w	800e056 <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 800d73a:	4ba0      	ldr	r3, [pc, #640]	; (800d9bc <_vsnprintf+0x29c>)
 800d73c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800d73e:	f000 bc8a 	b.w	800e056 <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	2b25      	cmp	r3, #37	; 0x25
 800d748:	d00d      	beq.n	800d766 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	7818      	ldrb	r0, [r3, #0]
 800d74e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d750:	1c53      	adds	r3, r2, #1
 800d752:	647b      	str	r3, [r7, #68]	; 0x44
 800d754:	68fc      	ldr	r4, [r7, #12]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	47a0      	blx	r4
      format++;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	3301      	adds	r3, #1
 800d760:	603b      	str	r3, [r7, #0]
      continue;
 800d762:	f000 bc78 	b.w	800e056 <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	3301      	adds	r3, #1
 800d76a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800d76c:	2300      	movs	r3, #0
 800d76e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	3b20      	subs	r3, #32
 800d776:	2b10      	cmp	r3, #16
 800d778:	d856      	bhi.n	800d828 <_vsnprintf+0x108>
 800d77a:	a201      	add	r2, pc, #4	; (adr r2, 800d780 <_vsnprintf+0x60>)
 800d77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d780:	0800d801 	.word	0x0800d801
 800d784:	0800d829 	.word	0x0800d829
 800d788:	0800d829 	.word	0x0800d829
 800d78c:	0800d815 	.word	0x0800d815
 800d790:	0800d829 	.word	0x0800d829
 800d794:	0800d829 	.word	0x0800d829
 800d798:	0800d829 	.word	0x0800d829
 800d79c:	0800d829 	.word	0x0800d829
 800d7a0:	0800d829 	.word	0x0800d829
 800d7a4:	0800d829 	.word	0x0800d829
 800d7a8:	0800d829 	.word	0x0800d829
 800d7ac:	0800d7ed 	.word	0x0800d7ed
 800d7b0:	0800d829 	.word	0x0800d829
 800d7b4:	0800d7d9 	.word	0x0800d7d9
 800d7b8:	0800d829 	.word	0x0800d829
 800d7bc:	0800d829 	.word	0x0800d829
 800d7c0:	0800d7c5 	.word	0x0800d7c5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800d7c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7c6:	f043 0301 	orr.w	r3, r3, #1
 800d7ca:	657b      	str	r3, [r7, #84]	; 0x54
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	603b      	str	r3, [r7, #0]
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7d6:	e02a      	b.n	800d82e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800d7d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7da:	f043 0302 	orr.w	r3, r3, #2
 800d7de:	657b      	str	r3, [r7, #84]	; 0x54
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	603b      	str	r3, [r7, #0]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7ea:	e020      	b.n	800d82e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800d7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ee:	f043 0304 	orr.w	r3, r3, #4
 800d7f2:	657b      	str	r3, [r7, #84]	; 0x54
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	603b      	str	r3, [r7, #0]
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7fe:	e016      	b.n	800d82e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800d800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d802:	f043 0308 	orr.w	r3, r3, #8
 800d806:	657b      	str	r3, [r7, #84]	; 0x54
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	3301      	adds	r3, #1
 800d80c:	603b      	str	r3, [r7, #0]
 800d80e:	2301      	movs	r3, #1
 800d810:	64bb      	str	r3, [r7, #72]	; 0x48
 800d812:	e00c      	b.n	800d82e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800d814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d816:	f043 0310 	orr.w	r3, r3, #16
 800d81a:	657b      	str	r3, [r7, #84]	; 0x54
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	3301      	adds	r3, #1
 800d820:	603b      	str	r3, [r7, #0]
 800d822:	2301      	movs	r3, #1
 800d824:	64bb      	str	r3, [r7, #72]	; 0x48
 800d826:	e002      	b.n	800d82e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800d828:	2300      	movs	r3, #0
 800d82a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d82c:	bf00      	nop
      }
    } while (n);
 800d82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d830:	2b00      	cmp	r3, #0
 800d832:	d19d      	bne.n	800d770 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff f8da 	bl	800c9f6 <_is_digit>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d005      	beq.n	800d854 <_vsnprintf+0x134>
      width = _atoi(&format);
 800d848:	463b      	mov	r3, r7
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff f8ea 	bl	800ca24 <_atoi>
 800d850:	6538      	str	r0, [r7, #80]	; 0x50
 800d852:	e018      	b.n	800d886 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2b2a      	cmp	r3, #42	; 0x2a
 800d85a:	d114      	bne.n	800d886 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800d85c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d85e:	1d1a      	adds	r2, r3, #4
 800d860:	66ba      	str	r2, [r7, #104]	; 0x68
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d868:	2b00      	cmp	r3, #0
 800d86a:	da07      	bge.n	800d87c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800d86c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d86e:	f043 0302 	orr.w	r3, r3, #2
 800d872:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	425b      	negs	r3, r3
 800d878:	653b      	str	r3, [r7, #80]	; 0x50
 800d87a:	e001      	b.n	800d880 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	3301      	adds	r3, #1
 800d884:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800d886:	2300      	movs	r3, #0
 800d888:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2b2e      	cmp	r3, #46	; 0x2e
 800d890:	d124      	bne.n	800d8dc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800d892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d898:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	3301      	adds	r3, #1
 800d89e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff f8a6 	bl	800c9f6 <_is_digit>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800d8b0:	463b      	mov	r3, r7
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff f8b6 	bl	800ca24 <_atoi>
 800d8b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d8ba:	e00f      	b.n	800d8dc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8c2:	d10b      	bne.n	800d8dc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800d8c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8c6:	1d1a      	adds	r2, r3, #4
 800d8c8:	66ba      	str	r2, [r7, #104]	; 0x68
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	3b68      	subs	r3, #104	; 0x68
 800d8e2:	2b12      	cmp	r3, #18
 800d8e4:	d866      	bhi.n	800d9b4 <_vsnprintf+0x294>
 800d8e6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <_vsnprintf+0x1cc>)
 800d8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ec:	0800d95f 	.word	0x0800d95f
 800d8f0:	0800d9b5 	.word	0x0800d9b5
 800d8f4:	0800d995 	.word	0x0800d995
 800d8f8:	0800d9b5 	.word	0x0800d9b5
 800d8fc:	0800d939 	.word	0x0800d939
 800d900:	0800d9b5 	.word	0x0800d9b5
 800d904:	0800d9b5 	.word	0x0800d9b5
 800d908:	0800d9b5 	.word	0x0800d9b5
 800d90c:	0800d9b5 	.word	0x0800d9b5
 800d910:	0800d9b5 	.word	0x0800d9b5
 800d914:	0800d9b5 	.word	0x0800d9b5
 800d918:	0800d9b5 	.word	0x0800d9b5
 800d91c:	0800d985 	.word	0x0800d985
 800d920:	0800d9b5 	.word	0x0800d9b5
 800d924:	0800d9b5 	.word	0x0800d9b5
 800d928:	0800d9b5 	.word	0x0800d9b5
 800d92c:	0800d9b5 	.word	0x0800d9b5
 800d930:	0800d9b5 	.word	0x0800d9b5
 800d934:	0800d9a5 	.word	0x0800d9a5
      case 'l' :
        flags |= FLAGS_LONG;
 800d938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d93a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d93e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	3301      	adds	r3, #1
 800d944:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	2b6c      	cmp	r3, #108	; 0x6c
 800d94c:	d134      	bne.n	800d9b8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800d94e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d954:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	603b      	str	r3, [r7, #0]
        }
        break;
 800d95c:	e02c      	b.n	800d9b8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800d95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d964:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	3301      	adds	r3, #1
 800d96a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2b68      	cmp	r3, #104	; 0x68
 800d972:	d125      	bne.n	800d9c0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800d974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d97a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	3301      	adds	r3, #1
 800d980:	603b      	str	r3, [r7, #0]
        }
        break;
 800d982:	e01d      	b.n	800d9c0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d98a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	603b      	str	r3, [r7, #0]
        break;
 800d992:	e016      	b.n	800d9c2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d99a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	603b      	str	r3, [r7, #0]
        break;
 800d9a2:	e00e      	b.n	800d9c2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	603b      	str	r3, [r7, #0]
        break;
 800d9b2:	e006      	b.n	800d9c2 <_vsnprintf+0x2a2>
      default :
        break;
 800d9b4:	bf00      	nop
 800d9b6:	e004      	b.n	800d9c2 <_vsnprintf+0x2a2>
        break;
 800d9b8:	bf00      	nop
 800d9ba:	e002      	b.n	800d9c2 <_vsnprintf+0x2a2>
 800d9bc:	0800c9a1 	.word	0x0800c9a1
        break;
 800d9c0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	3b25      	subs	r3, #37	; 0x25
 800d9c8:	2b53      	cmp	r3, #83	; 0x53
 800d9ca:	f200 8337 	bhi.w	800e03c <_vsnprintf+0x91c>
 800d9ce:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <_vsnprintf+0x2b4>)
 800d9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d4:	0800e025 	.word	0x0800e025
 800d9d8:	0800e03d 	.word	0x0800e03d
 800d9dc:	0800e03d 	.word	0x0800e03d
 800d9e0:	0800e03d 	.word	0x0800e03d
 800d9e4:	0800e03d 	.word	0x0800e03d
 800d9e8:	0800e03d 	.word	0x0800e03d
 800d9ec:	0800e03d 	.word	0x0800e03d
 800d9f0:	0800e03d 	.word	0x0800e03d
 800d9f4:	0800e03d 	.word	0x0800e03d
 800d9f8:	0800e03d 	.word	0x0800e03d
 800d9fc:	0800e03d 	.word	0x0800e03d
 800da00:	0800e03d 	.word	0x0800e03d
 800da04:	0800e03d 	.word	0x0800e03d
 800da08:	0800e03d 	.word	0x0800e03d
 800da0c:	0800e03d 	.word	0x0800e03d
 800da10:	0800e03d 	.word	0x0800e03d
 800da14:	0800e03d 	.word	0x0800e03d
 800da18:	0800e03d 	.word	0x0800e03d
 800da1c:	0800e03d 	.word	0x0800e03d
 800da20:	0800e03d 	.word	0x0800e03d
 800da24:	0800e03d 	.word	0x0800e03d
 800da28:	0800e03d 	.word	0x0800e03d
 800da2c:	0800e03d 	.word	0x0800e03d
 800da30:	0800e03d 	.word	0x0800e03d
 800da34:	0800e03d 	.word	0x0800e03d
 800da38:	0800e03d 	.word	0x0800e03d
 800da3c:	0800e03d 	.word	0x0800e03d
 800da40:	0800e03d 	.word	0x0800e03d
 800da44:	0800e03d 	.word	0x0800e03d
 800da48:	0800e03d 	.word	0x0800e03d
 800da4c:	0800e03d 	.word	0x0800e03d
 800da50:	0800e03d 	.word	0x0800e03d
 800da54:	0800ddf9 	.word	0x0800ddf9
 800da58:	0800ddb1 	.word	0x0800ddb1
 800da5c:	0800ddf9 	.word	0x0800ddf9
 800da60:	0800e03d 	.word	0x0800e03d
 800da64:	0800e03d 	.word	0x0800e03d
 800da68:	0800e03d 	.word	0x0800e03d
 800da6c:	0800e03d 	.word	0x0800e03d
 800da70:	0800e03d 	.word	0x0800e03d
 800da74:	0800e03d 	.word	0x0800e03d
 800da78:	0800e03d 	.word	0x0800e03d
 800da7c:	0800e03d 	.word	0x0800e03d
 800da80:	0800e03d 	.word	0x0800e03d
 800da84:	0800e03d 	.word	0x0800e03d
 800da88:	0800e03d 	.word	0x0800e03d
 800da8c:	0800e03d 	.word	0x0800e03d
 800da90:	0800e03d 	.word	0x0800e03d
 800da94:	0800e03d 	.word	0x0800e03d
 800da98:	0800e03d 	.word	0x0800e03d
 800da9c:	0800e03d 	.word	0x0800e03d
 800daa0:	0800db25 	.word	0x0800db25
 800daa4:	0800e03d 	.word	0x0800e03d
 800daa8:	0800e03d 	.word	0x0800e03d
 800daac:	0800e03d 	.word	0x0800e03d
 800dab0:	0800e03d 	.word	0x0800e03d
 800dab4:	0800e03d 	.word	0x0800e03d
 800dab8:	0800e03d 	.word	0x0800e03d
 800dabc:	0800e03d 	.word	0x0800e03d
 800dac0:	0800e03d 	.word	0x0800e03d
 800dac4:	0800e03d 	.word	0x0800e03d
 800dac8:	0800db25 	.word	0x0800db25
 800dacc:	0800de61 	.word	0x0800de61
 800dad0:	0800db25 	.word	0x0800db25
 800dad4:	0800ddf9 	.word	0x0800ddf9
 800dad8:	0800ddb1 	.word	0x0800ddb1
 800dadc:	0800ddf9 	.word	0x0800ddf9
 800dae0:	0800e03d 	.word	0x0800e03d
 800dae4:	0800db25 	.word	0x0800db25
 800dae8:	0800e03d 	.word	0x0800e03d
 800daec:	0800e03d 	.word	0x0800e03d
 800daf0:	0800e03d 	.word	0x0800e03d
 800daf4:	0800e03d 	.word	0x0800e03d
 800daf8:	0800e03d 	.word	0x0800e03d
 800dafc:	0800db25 	.word	0x0800db25
 800db00:	0800df99 	.word	0x0800df99
 800db04:	0800e03d 	.word	0x0800e03d
 800db08:	0800e03d 	.word	0x0800e03d
 800db0c:	0800ded5 	.word	0x0800ded5
 800db10:	0800e03d 	.word	0x0800e03d
 800db14:	0800db25 	.word	0x0800db25
 800db18:	0800e03d 	.word	0x0800e03d
 800db1c:	0800e03d 	.word	0x0800e03d
 800db20:	0800db25 	.word	0x0800db25
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b78      	cmp	r3, #120	; 0x78
 800db2a:	d003      	beq.n	800db34 <_vsnprintf+0x414>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b58      	cmp	r3, #88	; 0x58
 800db32:	d102      	bne.n	800db3a <_vsnprintf+0x41a>
          base = 16U;
 800db34:	2310      	movs	r3, #16
 800db36:	643b      	str	r3, [r7, #64]	; 0x40
 800db38:	e013      	b.n	800db62 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b6f      	cmp	r3, #111	; 0x6f
 800db40:	d102      	bne.n	800db48 <_vsnprintf+0x428>
          base =  8U;
 800db42:	2308      	movs	r3, #8
 800db44:	643b      	str	r3, [r7, #64]	; 0x40
 800db46:	e00c      	b.n	800db62 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b62      	cmp	r3, #98	; 0x62
 800db4e:	d102      	bne.n	800db56 <_vsnprintf+0x436>
          base =  2U;
 800db50:	2302      	movs	r3, #2
 800db52:	643b      	str	r3, [r7, #64]	; 0x40
 800db54:	e005      	b.n	800db62 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800db56:	230a      	movs	r3, #10
 800db58:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800db5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5c:	f023 0310 	bic.w	r3, r3, #16
 800db60:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	2b58      	cmp	r3, #88	; 0x58
 800db68:	d103      	bne.n	800db72 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800db6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db6c:	f043 0320 	orr.w	r3, r3, #32
 800db70:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	2b69      	cmp	r3, #105	; 0x69
 800db78:	d007      	beq.n	800db8a <_vsnprintf+0x46a>
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	2b64      	cmp	r3, #100	; 0x64
 800db80:	d003      	beq.n	800db8a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800db82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db84:	f023 030c 	bic.w	r3, r3, #12
 800db88:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800db8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800db94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db96:	f023 0301 	bic.w	r3, r3, #1
 800db9a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b69      	cmp	r3, #105	; 0x69
 800dba2:	d004      	beq.n	800dbae <_vsnprintf+0x48e>
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	2b64      	cmp	r3, #100	; 0x64
 800dbaa:	f040 808d 	bne.w	800dcc8 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800dbae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d02e      	beq.n	800dc16 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800dbb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbba:	3307      	adds	r3, #7
 800dbbc:	f023 0307 	bic.w	r3, r3, #7
 800dbc0:	f103 0208 	add.w	r2, r3, #8
 800dbc4:	66ba      	str	r2, [r7, #104]	; 0x68
 800dbc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dbca:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dbce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f174 0200 	sbcs.w	r2, r4, #0
 800dbd8:	da02      	bge.n	800dbe0 <_vsnprintf+0x4c0>
 800dbda:	425b      	negs	r3, r3
 800dbdc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4622      	mov	r2, r4
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	0fdb      	lsrs	r3, r3, #31
 800dbe8:	b2d8      	uxtb	r0, r3
 800dbea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbec:	f04f 0400 	mov.w	r4, #0
 800dbf0:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800dbf2:	9508      	str	r5, [sp, #32]
 800dbf4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800dbf6:	9507      	str	r5, [sp, #28]
 800dbf8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800dbfa:	9506      	str	r5, [sp, #24]
 800dbfc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dc00:	9002      	str	r0, [sp, #8]
 800dc02:	e9cd 1200 	strd	r1, r2, [sp]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc0a:	68b9      	ldr	r1, [r7, #8]
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f7ff f8c0 	bl	800cd92 <_ntoa_long_long>
 800dc12:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800dc14:	e0c8      	b.n	800dda8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800dc16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d01e      	beq.n	800dc5e <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800dc20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc22:	1d1a      	adds	r2, r3, #4
 800dc24:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	bfb8      	it	lt
 800dc30:	425b      	neglt	r3, r3
 800dc32:	4619      	mov	r1, r3
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	0fdb      	lsrs	r3, r3, #31
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc3c:	9205      	str	r2, [sp, #20]
 800dc3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc40:	9204      	str	r2, [sp, #16]
 800dc42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc44:	9203      	str	r2, [sp, #12]
 800dc46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc48:	9202      	str	r2, [sp, #8]
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	9100      	str	r1, [sp, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7ff f835 	bl	800ccc4 <_ntoa_long>
 800dc5a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800dc5c:	e0a4      	b.n	800dda8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800dc5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d005      	beq.n	800dc74 <_vsnprintf+0x554>
 800dc68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc6a:	1d1a      	adds	r2, r3, #4
 800dc6c:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	e00e      	b.n	800dc92 <_vsnprintf+0x572>
 800dc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d005      	beq.n	800dc8a <_vsnprintf+0x56a>
 800dc7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc80:	1d1a      	adds	r2, r3, #4
 800dc82:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	b21b      	sxth	r3, r3
 800dc88:	e003      	b.n	800dc92 <_vsnprintf+0x572>
 800dc8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc8c:	1d1a      	adds	r2, r3, #4
 800dc8e:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dc94:	6a3b      	ldr	r3, [r7, #32]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfb8      	it	lt
 800dc9a:	425b      	neglt	r3, r3
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6a3b      	ldr	r3, [r7, #32]
 800dca0:	0fdb      	lsrs	r3, r3, #31
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dca6:	9205      	str	r2, [sp, #20]
 800dca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcaa:	9204      	str	r2, [sp, #16]
 800dcac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcae:	9203      	str	r2, [sp, #12]
 800dcb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcb2:	9202      	str	r2, [sp, #8]
 800dcb4:	9301      	str	r3, [sp, #4]
 800dcb6:	9100      	str	r1, [sp, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcbc:	68b9      	ldr	r1, [r7, #8]
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7ff f800 	bl	800ccc4 <_ntoa_long>
 800dcc4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800dcc6:	e06f      	b.n	800dda8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800dcc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d020      	beq.n	800dd14 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800dcd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcd4:	3307      	adds	r3, #7
 800dcd6:	f023 0307 	bic.w	r3, r3, #7
 800dcda:	f103 0208 	add.w	r2, r3, #8
 800dcde:	66ba      	str	r2, [r7, #104]	; 0x68
 800dce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dce6:	4611      	mov	r1, r2
 800dce8:	f04f 0200 	mov.w	r2, #0
 800dcec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dcee:	9008      	str	r0, [sp, #32]
 800dcf0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dcf2:	9007      	str	r0, [sp, #28]
 800dcf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcf6:	9006      	str	r0, [sp, #24]
 800dcf8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	9202      	str	r2, [sp, #8]
 800dd00:	e9cd 3400 	strd	r3, r4, [sp]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd08:	68b9      	ldr	r1, [r7, #8]
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff f841 	bl	800cd92 <_ntoa_long_long>
 800dd10:	6478      	str	r0, [r7, #68]	; 0x44
 800dd12:	e049      	b.n	800dda8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800dd14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d016      	beq.n	800dd4c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800dd1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd20:	1d1a      	adds	r2, r3, #4
 800dd22:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd28:	9205      	str	r2, [sp, #20]
 800dd2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd2c:	9204      	str	r2, [sp, #16]
 800dd2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd30:	9203      	str	r2, [sp, #12]
 800dd32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd34:	9202      	str	r2, [sp, #8]
 800dd36:	2200      	movs	r2, #0
 800dd38:	9201      	str	r2, [sp, #4]
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd40:	68b9      	ldr	r1, [r7, #8]
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f7fe ffbe 	bl	800ccc4 <_ntoa_long>
 800dd48:	6478      	str	r0, [r7, #68]	; 0x44
 800dd4a:	e02d      	b.n	800dda8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800dd4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d005      	beq.n	800dd62 <_vsnprintf+0x642>
 800dd56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd58:	1d1a      	adds	r2, r3, #4
 800dd5a:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	e00e      	b.n	800dd80 <_vsnprintf+0x660>
 800dd62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <_vsnprintf+0x658>
 800dd6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd6e:	1d1a      	adds	r2, r3, #4
 800dd70:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	e003      	b.n	800dd80 <_vsnprintf+0x660>
 800dd78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd7a:	1d1a      	adds	r2, r3, #4
 800dd7c:	66ba      	str	r2, [r7, #104]	; 0x68
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800dd82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd88:	9304      	str	r3, [sp, #16]
 800dd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd8c:	9303      	str	r3, [sp, #12]
 800dd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd90:	9302      	str	r3, [sp, #8]
 800dd92:	2300      	movs	r3, #0
 800dd94:	9301      	str	r3, [sp, #4]
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd9e:	68b9      	ldr	r1, [r7, #8]
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f7fe ff8f 	bl	800ccc4 <_ntoa_long>
 800dda6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	603b      	str	r3, [r7, #0]
        break;
 800ddae:	e152      	b.n	800e056 <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	2b46      	cmp	r3, #70	; 0x46
 800ddb6:	d103      	bne.n	800ddc0 <_vsnprintf+0x6a0>
 800ddb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddba:	f043 0320 	orr.w	r3, r3, #32
 800ddbe:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ddc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddc2:	3307      	adds	r3, #7
 800ddc4:	f023 0307 	bic.w	r3, r3, #7
 800ddc8:	f103 0208 	add.w	r2, r3, #8
 800ddcc:	66ba      	str	r2, [r7, #104]	; 0x68
 800ddce:	ed93 7b00 	vldr	d7, [r3]
 800ddd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	eeb0 0b47 	vmov.f64	d0, d7
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff f841 	bl	800ce70 <_ftoa>
 800ddee:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	603b      	str	r3, [r7, #0]
        break;
 800ddf6:	e12e      	b.n	800e056 <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b67      	cmp	r3, #103	; 0x67
 800ddfe:	d003      	beq.n	800de08 <_vsnprintf+0x6e8>
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b47      	cmp	r3, #71	; 0x47
 800de06:	d103      	bne.n	800de10 <_vsnprintf+0x6f0>
 800de08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de0e:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2b45      	cmp	r3, #69	; 0x45
 800de16:	d003      	beq.n	800de20 <_vsnprintf+0x700>
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b47      	cmp	r3, #71	; 0x47
 800de1e:	d103      	bne.n	800de28 <_vsnprintf+0x708>
 800de20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de22:	f043 0320 	orr.w	r3, r3, #32
 800de26:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800de28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de2a:	3307      	adds	r3, #7
 800de2c:	f023 0307 	bic.w	r3, r3, #7
 800de30:	f103 0208 	add.w	r2, r3, #8
 800de34:	66ba      	str	r2, [r7, #104]	; 0x68
 800de36:	ed93 7b00 	vldr	d7, [r3]
 800de3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de3c:	9302      	str	r3, [sp, #8]
 800de3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	eeb0 0b47 	vmov.f64	d0, d7
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de4e:	68b9      	ldr	r1, [r7, #8]
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7ff fa5d 	bl	800d310 <_etoa>
 800de56:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	3301      	adds	r3, #1
 800de5c:	603b      	str	r3, [r7, #0]
        break;
 800de5e:	e0fa      	b.n	800e056 <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800de60:	2301      	movs	r3, #1
 800de62:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800de64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de66:	f003 0302 	and.w	r3, r3, #2
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10e      	bne.n	800de8c <_vsnprintf+0x76c>
          while (l++ < width) {
 800de6e:	e007      	b.n	800de80 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 800de70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de72:	1c53      	adds	r3, r2, #1
 800de74:	647b      	str	r3, [r7, #68]	; 0x44
 800de76:	68fc      	ldr	r4, [r7, #12]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	2020      	movs	r0, #32
 800de7e:	47a0      	blx	r4
          while (l++ < width) {
 800de80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de82:	1c5a      	adds	r2, r3, #1
 800de84:	63fa      	str	r2, [r7, #60]	; 0x3c
 800de86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de88:	429a      	cmp	r2, r3
 800de8a:	d8f1      	bhi.n	800de70 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800de8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de8e:	1d1a      	adds	r2, r3, #4
 800de90:	66ba      	str	r2, [r7, #104]	; 0x68
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	b2d8      	uxtb	r0, r3
 800de96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de98:	1c53      	adds	r3, r2, #1
 800de9a:	647b      	str	r3, [r7, #68]	; 0x44
 800de9c:	68fc      	ldr	r4, [r7, #12]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800dea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea6:	f003 0302 	and.w	r3, r3, #2
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00e      	beq.n	800decc <_vsnprintf+0x7ac>
          while (l++ < width) {
 800deae:	e007      	b.n	800dec0 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 800deb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800deb2:	1c53      	adds	r3, r2, #1
 800deb4:	647b      	str	r3, [r7, #68]	; 0x44
 800deb6:	68fc      	ldr	r4, [r7, #12]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	68b9      	ldr	r1, [r7, #8]
 800debc:	2020      	movs	r0, #32
 800debe:	47a0      	blx	r4
          while (l++ < width) {
 800dec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec2:	1c5a      	adds	r2, r3, #1
 800dec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dec8:	429a      	cmp	r2, r3
 800deca:	d8f1      	bhi.n	800deb0 <_vsnprintf+0x790>
          }
        }
        format++;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	3301      	adds	r3, #1
 800ded0:	603b      	str	r3, [r7, #0]
        break;
 800ded2:	e0c0      	b.n	800e056 <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800ded4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ded6:	1d1a      	adds	r2, r3, #4
 800ded8:	66ba      	str	r2, [r7, #104]	; 0x68
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800dede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <_vsnprintf+0x7c8>
 800dee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee6:	e001      	b.n	800deec <_vsnprintf+0x7cc>
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295
 800deec:	4619      	mov	r1, r3
 800deee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800def0:	f7fe fd64 	bl	800c9bc <_strnlen_s>
 800def4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800def6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 800df00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df04:	4293      	cmp	r3, r2
 800df06:	bf28      	it	cs
 800df08:	4613      	movcs	r3, r2
 800df0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800df0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df0e:	f003 0302 	and.w	r3, r3, #2
 800df12:	2b00      	cmp	r3, #0
 800df14:	d11a      	bne.n	800df4c <_vsnprintf+0x82c>
          while (l++ < width) {
 800df16:	e007      	b.n	800df28 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 800df18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df1a:	1c53      	adds	r3, r2, #1
 800df1c:	647b      	str	r3, [r7, #68]	; 0x44
 800df1e:	68fc      	ldr	r4, [r7, #12]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	2020      	movs	r0, #32
 800df26:	47a0      	blx	r4
          while (l++ < width) {
 800df28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	637a      	str	r2, [r7, #52]	; 0x34
 800df2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df30:	429a      	cmp	r2, r3
 800df32:	d8f1      	bhi.n	800df18 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800df34:	e00a      	b.n	800df4c <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	63ba      	str	r2, [r7, #56]	; 0x38
 800df3c:	7818      	ldrb	r0, [r3, #0]
 800df3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df40:	1c53      	adds	r3, r2, #1
 800df42:	647b      	str	r3, [r7, #68]	; 0x44
 800df44:	68fc      	ldr	r4, [r7, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68b9      	ldr	r1, [r7, #8]
 800df4a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d009      	beq.n	800df68 <_vsnprintf+0x848>
 800df54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0eb      	beq.n	800df36 <_vsnprintf+0x816>
 800df5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df60:	1e5a      	subs	r2, r3, #1
 800df62:	64fa      	str	r2, [r7, #76]	; 0x4c
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1e6      	bne.n	800df36 <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800df68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df6a:	f003 0302 	and.w	r3, r3, #2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <_vsnprintf+0x870>
          while (l++ < width) {
 800df72:	e007      	b.n	800df84 <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 800df74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df76:	1c53      	adds	r3, r2, #1
 800df78:	647b      	str	r3, [r7, #68]	; 0x44
 800df7a:	68fc      	ldr	r4, [r7, #12]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68b9      	ldr	r1, [r7, #8]
 800df80:	2020      	movs	r0, #32
 800df82:	47a0      	blx	r4
          while (l++ < width) {
 800df84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df86:	1c5a      	adds	r2, r3, #1
 800df88:	637a      	str	r2, [r7, #52]	; 0x34
 800df8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d8f1      	bhi.n	800df74 <_vsnprintf+0x854>
          }
        }
        format++;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	3301      	adds	r3, #1
 800df94:	603b      	str	r3, [r7, #0]
        break;
 800df96:	e05e      	b.n	800e056 <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800df98:	2308      	movs	r3, #8
 800df9a:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800df9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df9e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800dfa2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800dfaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d01d      	beq.n	800dfee <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800dfb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfb4:	1d1a      	adds	r2, r3, #4
 800dfb6:	66ba      	str	r2, [r7, #104]	; 0x68
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f04f 0400 	mov.w	r4, #0
 800dfbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfc0:	9208      	str	r2, [sp, #32]
 800dfc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfc4:	9207      	str	r2, [sp, #28]
 800dfc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfc8:	9206      	str	r2, [sp, #24]
 800dfca:	f04f 0110 	mov.w	r1, #16
 800dfce:	f04f 0200 	mov.w	r2, #0
 800dfd2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	9202      	str	r2, [sp, #8]
 800dfda:	e9cd 3400 	strd	r3, r4, [sp]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f7fe fed4 	bl	800cd92 <_ntoa_long_long>
 800dfea:	6478      	str	r0, [r7, #68]	; 0x44
 800dfec:	e016      	b.n	800e01c <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800dfee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dff0:	1d1a      	adds	r2, r3, #4
 800dff2:	66ba      	str	r2, [r7, #104]	; 0x68
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	461a      	mov	r2, r3
 800dff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dffa:	9305      	str	r3, [sp, #20]
 800dffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e002:	9303      	str	r3, [sp, #12]
 800e004:	2310      	movs	r3, #16
 800e006:	9302      	str	r3, [sp, #8]
 800e008:	2300      	movs	r3, #0
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	9200      	str	r2, [sp, #0]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e012:	68b9      	ldr	r1, [r7, #8]
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7fe fe55 	bl	800ccc4 <_ntoa_long>
 800e01a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	3301      	adds	r3, #1
 800e020:	603b      	str	r3, [r7, #0]
        break;
 800e022:	e018      	b.n	800e056 <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800e024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e026:	1c53      	adds	r3, r2, #1
 800e028:	647b      	str	r3, [r7, #68]	; 0x44
 800e02a:	68fc      	ldr	r4, [r7, #12]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	2025      	movs	r0, #37	; 0x25
 800e032:	47a0      	blx	r4
        format++;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	3301      	adds	r3, #1
 800e038:	603b      	str	r3, [r7, #0]
        break;
 800e03a:	e00c      	b.n	800e056 <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	7818      	ldrb	r0, [r3, #0]
 800e040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e042:	1c53      	adds	r3, r2, #1
 800e044:	647b      	str	r3, [r7, #68]	; 0x44
 800e046:	68fc      	ldr	r4, [r7, #12]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	68b9      	ldr	r1, [r7, #8]
 800e04c:	47a0      	blx	r4
        format++;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	603b      	str	r3, [r7, #0]
        break;
 800e054:	bf00      	nop
  while (*format)
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f47f ab71 	bne.w	800d742 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800e060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	429a      	cmp	r2, r3
 800e066:	d302      	bcc.n	800e06e <_vsnprintf+0x94e>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	1e5a      	subs	r2, r3, #1
 800e06c:	e000      	b.n	800e070 <_vsnprintf+0x950>
 800e06e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e070:	68fc      	ldr	r4, [r7, #12]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	68b9      	ldr	r1, [r7, #8]
 800e076:	2000      	movs	r0, #0
 800e078:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800e07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3758      	adds	r7, #88	; 0x58
 800e080:	46bd      	mov	sp, r7
 800e082:	bdb0      	pop	{r4, r5, r7, pc}

0800e084 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800e084:	b40c      	push	{r2, r3}
 800e086:	b580      	push	{r7, lr}
 800e088:	b086      	sub	sp, #24
 800e08a:	af02      	add	r7, sp, #8
 800e08c:	6078      	str	r0, [r7, #4]
 800e08e:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800e090:	f107 031c 	add.w	r3, r7, #28
 800e094:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	4805      	ldr	r0, [pc, #20]	; (800e0b8 <snprintf_+0x34>)
 800e0a2:	f7ff fb3d 	bl	800d720 <_vsnprintf>
 800e0a6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0b4:	b002      	add	sp, #8
 800e0b6:	4770      	bx	lr
 800e0b8:	0800c973 	.word	0x0800c973

0800e0bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e0c2:	4b11      	ldr	r3, [pc, #68]	; (800e108 <HAL_MspInit+0x4c>)
 800e0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c6:	4a10      	ldr	r2, [pc, #64]	; (800e108 <HAL_MspInit+0x4c>)
 800e0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0cc:	6413      	str	r3, [r2, #64]	; 0x40
 800e0ce:	4b0e      	ldr	r3, [pc, #56]	; (800e108 <HAL_MspInit+0x4c>)
 800e0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0d6:	607b      	str	r3, [r7, #4]
 800e0d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e0da:	4b0b      	ldr	r3, [pc, #44]	; (800e108 <HAL_MspInit+0x4c>)
 800e0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0de:	4a0a      	ldr	r2, [pc, #40]	; (800e108 <HAL_MspInit+0x4c>)
 800e0e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0e4:	6453      	str	r3, [r2, #68]	; 0x44
 800e0e6:	4b08      	ldr	r3, [pc, #32]	; (800e108 <HAL_MspInit+0x4c>)
 800e0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	210f      	movs	r1, #15
 800e0f6:	f06f 0001 	mvn.w	r0, #1
 800e0fa:	f000 fbce 	bl	800e89a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	40023800 	.word	0x40023800

0800e10c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b08c      	sub	sp, #48	; 0x30
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e114:	f107 031c 	add.w	r3, r7, #28
 800e118:	2200      	movs	r2, #0
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	605a      	str	r2, [r3, #4]
 800e11e:	609a      	str	r2, [r3, #8]
 800e120:	60da      	str	r2, [r3, #12]
 800e122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a4d      	ldr	r2, [pc, #308]	; (800e260 <HAL_I2C_MspInit+0x154>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d166      	bne.n	800e1fc <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e12e:	4b4d      	ldr	r3, [pc, #308]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e132:	4a4c      	ldr	r2, [pc, #304]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e134:	f043 0302 	orr.w	r3, r3, #2
 800e138:	6313      	str	r3, [r2, #48]	; 0x30
 800e13a:	4b4a      	ldr	r3, [pc, #296]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e13e:	f003 0302 	and.w	r3, r3, #2
 800e142:	61bb      	str	r3, [r7, #24]
 800e144:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e146:	23c0      	movs	r3, #192	; 0xc0
 800e148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e14a:	2312      	movs	r3, #18
 800e14c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e14e:	2301      	movs	r3, #1
 800e150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e152:	2303      	movs	r3, #3
 800e154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e156:	2304      	movs	r3, #4
 800e158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e15a:	f107 031c 	add.w	r3, r7, #28
 800e15e:	4619      	mov	r1, r3
 800e160:	4841      	ldr	r0, [pc, #260]	; (800e268 <HAL_I2C_MspInit+0x15c>)
 800e162:	f000 ff69 	bl	800f038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e166:	4b3f      	ldr	r3, [pc, #252]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e16a:	4a3e      	ldr	r2, [pc, #248]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e16c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e170:	6413      	str	r3, [r2, #64]	; 0x40
 800e172:	4b3c      	ldr	r3, [pc, #240]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800e17e:	4b3b      	ldr	r3, [pc, #236]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e180:	4a3b      	ldr	r2, [pc, #236]	; (800e270 <HAL_I2C_MspInit+0x164>)
 800e182:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800e184:	4b39      	ldr	r3, [pc, #228]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e18a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e18c:	4b37      	ldr	r3, [pc, #220]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e18e:	2240      	movs	r2, #64	; 0x40
 800e190:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e192:	4b36      	ldr	r3, [pc, #216]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e194:	2200      	movs	r2, #0
 800e196:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e198:	4b34      	ldr	r3, [pc, #208]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e19a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e19e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e1a0:	4b32      	ldr	r3, [pc, #200]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e1a6:	4b31      	ldr	r3, [pc, #196]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800e1ac:	4b2f      	ldr	r3, [pc, #188]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e1b2:	4b2e      	ldr	r3, [pc, #184]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e1b8:	4b2c      	ldr	r3, [pc, #176]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800e1be:	482b      	ldr	r0, [pc, #172]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1c0:	f000 fba2 	bl	800e908 <HAL_DMA_Init>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 800e1ca:	f7fe fbcb 	bl	800c964 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a26      	ldr	r2, [pc, #152]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1d2:	639a      	str	r2, [r3, #56]	; 0x38
 800e1d4:	4a25      	ldr	r2, [pc, #148]	; (800e26c <HAL_I2C_MspInit+0x160>)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800e1da:	2200      	movs	r2, #0
 800e1dc:	2105      	movs	r1, #5
 800e1de:	201f      	movs	r0, #31
 800e1e0:	f000 fb5b 	bl	800e89a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e1e4:	201f      	movs	r0, #31
 800e1e6:	f000 fb74 	bl	800e8d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	2105      	movs	r1, #5
 800e1ee:	2020      	movs	r0, #32
 800e1f0:	f000 fb53 	bl	800e89a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e1f4:	2020      	movs	r0, #32
 800e1f6:	f000 fb6c 	bl	800e8d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800e1fa:	e02d      	b.n	800e258 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a1c      	ldr	r2, [pc, #112]	; (800e274 <HAL_I2C_MspInit+0x168>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d128      	bne.n	800e258 <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e206:	4b17      	ldr	r3, [pc, #92]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e20a:	4a16      	ldr	r2, [pc, #88]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e20c:	f043 0302 	orr.w	r3, r3, #2
 800e210:	6313      	str	r3, [r2, #48]	; 0x30
 800e212:	4b14      	ldr	r3, [pc, #80]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e216:	f003 0302 	and.w	r3, r3, #2
 800e21a:	613b      	str	r3, [r7, #16]
 800e21c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e21e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e224:	2312      	movs	r3, #18
 800e226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e228:	2301      	movs	r3, #1
 800e22a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e22c:	2303      	movs	r3, #3
 800e22e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e230:	2304      	movs	r3, #4
 800e232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e234:	f107 031c 	add.w	r3, r7, #28
 800e238:	4619      	mov	r1, r3
 800e23a:	480b      	ldr	r0, [pc, #44]	; (800e268 <HAL_I2C_MspInit+0x15c>)
 800e23c:	f000 fefc 	bl	800f038 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e240:	4b08      	ldr	r3, [pc, #32]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e244:	4a07      	ldr	r2, [pc, #28]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e24a:	6413      	str	r3, [r2, #64]	; 0x40
 800e24c:	4b05      	ldr	r3, [pc, #20]	; (800e264 <HAL_I2C_MspInit+0x158>)
 800e24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e254:	60fb      	str	r3, [r7, #12]
 800e256:	68fb      	ldr	r3, [r7, #12]
}
 800e258:	bf00      	nop
 800e25a:	3730      	adds	r7, #48	; 0x30
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	40005400 	.word	0x40005400
 800e264:	40023800 	.word	0x40023800
 800e268:	40020400 	.word	0x40020400
 800e26c:	200082b0 	.word	0x200082b0
 800e270:	400260a0 	.word	0x400260a0
 800e274:	40005800 	.word	0x40005800

0800e278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b08a      	sub	sp, #40	; 0x28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e280:	f107 0314 	add.w	r3, r7, #20
 800e284:	2200      	movs	r2, #0
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	605a      	str	r2, [r3, #4]
 800e28a:	609a      	str	r2, [r3, #8]
 800e28c:	60da      	str	r2, [r3, #12]
 800e28e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a45      	ldr	r2, [pc, #276]	; (800e3ac <HAL_SPI_MspInit+0x134>)
 800e296:	4293      	cmp	r3, r2
 800e298:	f040 8084 	bne.w	800e3a4 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e29c:	4b44      	ldr	r3, [pc, #272]	; (800e3b0 <HAL_SPI_MspInit+0x138>)
 800e29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a0:	4a43      	ldr	r2, [pc, #268]	; (800e3b0 <HAL_SPI_MspInit+0x138>)
 800e2a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e2a6:	6453      	str	r3, [r2, #68]	; 0x44
 800e2a8:	4b41      	ldr	r3, [pc, #260]	; (800e3b0 <HAL_SPI_MspInit+0x138>)
 800e2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e2b0:	613b      	str	r3, [r7, #16]
 800e2b2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2b4:	4b3e      	ldr	r3, [pc, #248]	; (800e3b0 <HAL_SPI_MspInit+0x138>)
 800e2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b8:	4a3d      	ldr	r2, [pc, #244]	; (800e3b0 <HAL_SPI_MspInit+0x138>)
 800e2ba:	f043 0301 	orr.w	r3, r3, #1
 800e2be:	6313      	str	r3, [r2, #48]	; 0x30
 800e2c0:	4b3b      	ldr	r3, [pc, #236]	; (800e3b0 <HAL_SPI_MspInit+0x138>)
 800e2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e2cc:	23e0      	movs	r3, #224	; 0xe0
 800e2ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e2dc:	2305      	movs	r3, #5
 800e2de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e0:	f107 0314 	add.w	r3, r7, #20
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4833      	ldr	r0, [pc, #204]	; (800e3b4 <HAL_SPI_MspInit+0x13c>)
 800e2e8:	f000 fea6 	bl	800f038 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800e2ec:	4b32      	ldr	r3, [pc, #200]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e2ee:	4a33      	ldr	r2, [pc, #204]	; (800e3bc <HAL_SPI_MspInit+0x144>)
 800e2f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800e2f2:	4b31      	ldr	r3, [pc, #196]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e2f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e2f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e2fa:	4b2f      	ldr	r3, [pc, #188]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e300:	4b2d      	ldr	r3, [pc, #180]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e302:	2200      	movs	r2, #0
 800e304:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e306:	4b2c      	ldr	r3, [pc, #176]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e30c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e30e:	4b2a      	ldr	r3, [pc, #168]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e310:	2200      	movs	r2, #0
 800e312:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e314:	4b28      	ldr	r3, [pc, #160]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e316:	2200      	movs	r2, #0
 800e318:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800e31a:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e320:	4b25      	ldr	r3, [pc, #148]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e322:	2200      	movs	r2, #0
 800e324:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e326:	4b24      	ldr	r3, [pc, #144]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e328:	2200      	movs	r2, #0
 800e32a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800e32c:	4822      	ldr	r0, [pc, #136]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e32e:	f000 faeb 	bl	800e908 <HAL_DMA_Init>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800e338:	f7fe fb14 	bl	800c964 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a1e      	ldr	r2, [pc, #120]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e340:	659a      	str	r2, [r3, #88]	; 0x58
 800e342:	4a1d      	ldr	r2, [pc, #116]	; (800e3b8 <HAL_SPI_MspInit+0x140>)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800e348:	4b1d      	ldr	r3, [pc, #116]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e34a:	4a1e      	ldr	r2, [pc, #120]	; (800e3c4 <HAL_SPI_MspInit+0x14c>)
 800e34c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800e34e:	4b1c      	ldr	r3, [pc, #112]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e350:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e354:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e356:	4b1a      	ldr	r3, [pc, #104]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e358:	2240      	movs	r2, #64	; 0x40
 800e35a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e35c:	4b18      	ldr	r3, [pc, #96]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e35e:	2200      	movs	r2, #0
 800e360:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e362:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e368:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e36a:	4b15      	ldr	r3, [pc, #84]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e370:	4b13      	ldr	r3, [pc, #76]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e372:	2200      	movs	r2, #0
 800e374:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800e376:	4b12      	ldr	r3, [pc, #72]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e378:	2200      	movs	r2, #0
 800e37a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e37c:	4b10      	ldr	r3, [pc, #64]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e37e:	2200      	movs	r2, #0
 800e380:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e382:	4b0f      	ldr	r3, [pc, #60]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e384:	2200      	movs	r2, #0
 800e386:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800e388:	480d      	ldr	r0, [pc, #52]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e38a:	f000 fabd 	bl	800e908 <HAL_DMA_Init>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800e394:	f7fe fae6 	bl	800c964 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e39c:	655a      	str	r2, [r3, #84]	; 0x54
 800e39e:	4a08      	ldr	r2, [pc, #32]	; (800e3c0 <HAL_SPI_MspInit+0x148>)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e3a4:	bf00      	nop
 800e3a6:	3728      	adds	r7, #40	; 0x28
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	40013000 	.word	0x40013000
 800e3b0:	40023800 	.word	0x40023800
 800e3b4:	40020000 	.word	0x40020000
 800e3b8:	200187f4 	.word	0x200187f4
 800e3bc:	40026410 	.word	0x40026410
 800e3c0:	2001c854 	.word	0x2001c854
 800e3c4:	40026458 	.word	0x40026458

0800e3c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08a      	sub	sp, #40	; 0x28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3d0:	f107 0314 	add.w	r3, r7, #20
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
 800e3d8:	605a      	str	r2, [r3, #4]
 800e3da:	609a      	str	r2, [r3, #8]
 800e3dc:	60da      	str	r2, [r3, #12]
 800e3de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a32      	ldr	r2, [pc, #200]	; (800e4b0 <HAL_UART_MspInit+0xe8>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d15d      	bne.n	800e4a6 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800e3ea:	4b32      	ldr	r3, [pc, #200]	; (800e4b4 <HAL_UART_MspInit+0xec>)
 800e3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ee:	4a31      	ldr	r2, [pc, #196]	; (800e4b4 <HAL_UART_MspInit+0xec>)
 800e3f0:	f043 0320 	orr.w	r3, r3, #32
 800e3f4:	6453      	str	r3, [r2, #68]	; 0x44
 800e3f6:	4b2f      	ldr	r3, [pc, #188]	; (800e4b4 <HAL_UART_MspInit+0xec>)
 800e3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3fa:	f003 0320 	and.w	r3, r3, #32
 800e3fe:	613b      	str	r3, [r7, #16]
 800e400:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e402:	4b2c      	ldr	r3, [pc, #176]	; (800e4b4 <HAL_UART_MspInit+0xec>)
 800e404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e406:	4a2b      	ldr	r2, [pc, #172]	; (800e4b4 <HAL_UART_MspInit+0xec>)
 800e408:	f043 0304 	orr.w	r3, r3, #4
 800e40c:	6313      	str	r3, [r2, #48]	; 0x30
 800e40e:	4b29      	ldr	r3, [pc, #164]	; (800e4b4 <HAL_UART_MspInit+0xec>)
 800e410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e412:	f003 0304 	and.w	r3, r3, #4
 800e416:	60fb      	str	r3, [r7, #12]
 800e418:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e41a:	23c0      	movs	r3, #192	; 0xc0
 800e41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e41e:	2302      	movs	r3, #2
 800e420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e422:	2300      	movs	r3, #0
 800e424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e426:	2303      	movs	r3, #3
 800e428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e42a:	2308      	movs	r3, #8
 800e42c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e42e:	f107 0314 	add.w	r3, r7, #20
 800e432:	4619      	mov	r1, r3
 800e434:	4820      	ldr	r0, [pc, #128]	; (800e4b8 <HAL_UART_MspInit+0xf0>)
 800e436:	f000 fdff 	bl	800f038 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800e43a:	4b20      	ldr	r3, [pc, #128]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e43c:	4a20      	ldr	r2, [pc, #128]	; (800e4c0 <HAL_UART_MspInit+0xf8>)
 800e43e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800e440:	4b1e      	ldr	r3, [pc, #120]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e442:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800e446:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e448:	4b1c      	ldr	r3, [pc, #112]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e44a:	2240      	movs	r2, #64	; 0x40
 800e44c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e44e:	4b1b      	ldr	r3, [pc, #108]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e450:	2200      	movs	r2, #0
 800e452:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e454:	4b19      	ldr	r3, [pc, #100]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e45a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e45c:	4b17      	ldr	r3, [pc, #92]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e45e:	2200      	movs	r2, #0
 800e460:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e462:	4b16      	ldr	r3, [pc, #88]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e464:	2200      	movs	r2, #0
 800e466:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800e468:	4b14      	ldr	r3, [pc, #80]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e46e:	4b13      	ldr	r3, [pc, #76]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e470:	2200      	movs	r2, #0
 800e472:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e474:	4b11      	ldr	r3, [pc, #68]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e476:	2200      	movs	r2, #0
 800e478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800e47a:	4810      	ldr	r0, [pc, #64]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e47c:	f000 fa44 	bl	800e908 <HAL_DMA_Init>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800e486:	f7fe fa6d 	bl	800c964 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a0b      	ldr	r2, [pc, #44]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e48e:	669a      	str	r2, [r3, #104]	; 0x68
 800e490:	4a0a      	ldr	r2, [pc, #40]	; (800e4bc <HAL_UART_MspInit+0xf4>)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800e496:	2200      	movs	r2, #0
 800e498:	2105      	movs	r1, #5
 800e49a:	2047      	movs	r0, #71	; 0x47
 800e49c:	f000 f9fd 	bl	800e89a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800e4a0:	2047      	movs	r0, #71	; 0x47
 800e4a2:	f000 fa16 	bl	800e8d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e4a6:	bf00      	nop
 800e4a8:	3728      	adds	r7, #40	; 0x28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	40011400 	.word	0x40011400
 800e4b4:	40023800 	.word	0x40023800
 800e4b8:	40020800 	.word	0x40020800
 800e4bc:	200084cc 	.word	0x200084cc
 800e4c0:	400264a0 	.word	0x400264a0

0800e4c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e4c8:	bf00      	nop
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e4d6:	e7fe      	b.n	800e4d6 <HardFault_Handler+0x4>

0800e4d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e4dc:	e7fe      	b.n	800e4dc <MemManage_Handler+0x4>

0800e4de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e4de:	b480      	push	{r7}
 800e4e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e4e2:	e7fe      	b.n	800e4e2 <BusFault_Handler+0x4>

0800e4e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e4e8:	e7fe      	b.n	800e4e8 <UsageFault_Handler+0x4>

0800e4ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e4ea:	b480      	push	{r7}
 800e4ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e4ee:	bf00      	nop
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e4fc:	f000 f8d2 	bl	800e6a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e500:	f007 f91a 	bl	8015738 <xTaskGetSchedulerState>
 800e504:	4603      	mov	r3, r0
 800e506:	2b01      	cmp	r3, #1
 800e508:	d001      	beq.n	800e50e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800e50a:	f007 fced 	bl	8015ee8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e50e:	bf00      	nop
 800e510:	bd80      	pop	{r7, pc}

0800e512 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800e516:	2008      	movs	r0, #8
 800e518:	f000 ff84 	bl	800f424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800e51c:	bf00      	nop
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800e524:	4802      	ldr	r0, [pc, #8]	; (800e530 <DMA1_Stream6_IRQHandler+0x10>)
 800e526:	f000 fb1f 	bl	800eb68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800e52a:	bf00      	nop
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	200082b0 	.word	0x200082b0

0800e534 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800e538:	4802      	ldr	r0, [pc, #8]	; (800e544 <I2C1_EV_IRQHandler+0x10>)
 800e53a:	f001 f935 	bl	800f7a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800e53e:	bf00      	nop
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20008310 	.word	0x20008310

0800e548 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800e54c:	4802      	ldr	r0, [pc, #8]	; (800e558 <I2C1_ER_IRQHandler+0x10>)
 800e54e:	f001 f945 	bl	800f7dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800e552:	bf00      	nop
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20008310 	.word	0x20008310

0800e55c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800e560:	4802      	ldr	r0, [pc, #8]	; (800e56c <DMA2_Stream0_IRQHandler+0x10>)
 800e562:	f000 fb01 	bl	800eb68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e566:	bf00      	nop
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	200187f4 	.word	0x200187f4

0800e570 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800e574:	4802      	ldr	r0, [pc, #8]	; (800e580 <DMA2_Stream3_IRQHandler+0x10>)
 800e576:	f000 faf7 	bl	800eb68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800e57a:	bf00      	nop
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	2001c854 	.word	0x2001c854

0800e584 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800e588:	4802      	ldr	r0, [pc, #8]	; (800e594 <DMA2_Stream6_IRQHandler+0x10>)
 800e58a:	f000 faed 	bl	800eb68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800e58e:	bf00      	nop
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	200084cc 	.word	0x200084cc

0800e598 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800e59c:	4802      	ldr	r0, [pc, #8]	; (800e5a8 <USART6_IRQHandler+0x10>)
 800e59e:	f004 fb37 	bl	8012c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800e5a2:	bf00      	nop
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20018700 	.word	0x20018700

0800e5ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e5b0:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <SystemInit+0x24>)
 800e5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5b6:	4a06      	ldr	r2, [pc, #24]	; (800e5d0 <SystemInit+0x24>)
 800e5b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800e5c0:	4b03      	ldr	r3, [pc, #12]	; (800e5d0 <SystemInit+0x24>)
 800e5c2:	4a04      	ldr	r2, [pc, #16]	; (800e5d4 <SystemInit+0x28>)
 800e5c4:	609a      	str	r2, [r3, #8]
#endif
}
 800e5c6:	bf00      	nop
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	e000ed00 	.word	0xe000ed00
 800e5d4:	08008000 	.word	0x08008000

0800e5d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e5d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e5dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e5de:	e003      	b.n	800e5e8 <LoopCopyDataInit>

0800e5e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e5e0:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e5e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e5e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e5e6:	3104      	adds	r1, #4

0800e5e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e5e8:	480b      	ldr	r0, [pc, #44]	; (800e618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e5ea:	4b0c      	ldr	r3, [pc, #48]	; (800e61c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e5ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e5ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e5f0:	d3f6      	bcc.n	800e5e0 <CopyDataInit>
  ldr  r2, =_sbss
 800e5f2:	4a0b      	ldr	r2, [pc, #44]	; (800e620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e5f4:	e002      	b.n	800e5fc <LoopFillZerobss>

0800e5f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e5f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e5f8:	f842 3b04 	str.w	r3, [r2], #4

0800e5fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e5fc:	4b09      	ldr	r3, [pc, #36]	; (800e624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e5fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e600:	d3f9      	bcc.n	800e5f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e602:	f7ff ffd3 	bl	800e5ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e606:	f007 fee7 	bl	80163d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e60a:	f7fd fa3b 	bl	800ba84 <main>
  bx  lr    
 800e60e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e610:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e614:	0802072c 	.word	0x0802072c
  ldr  r0, =_sdata
 800e618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e61c:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 800e620:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800e624:	2001c8c0 	.word	0x2001c8c0

0800e628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e628:	e7fe      	b.n	800e628 <ADC_IRQHandler>

0800e62a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e62e:	2003      	movs	r0, #3
 800e630:	f000 f928 	bl	800e884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e634:	200f      	movs	r0, #15
 800e636:	f000 f805 	bl	800e644 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800e63a:	f7ff fd3f 	bl	800e0bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	bd80      	pop	{r7, pc}

0800e644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e64c:	4b12      	ldr	r3, [pc, #72]	; (800e698 <HAL_InitTick+0x54>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	4b12      	ldr	r3, [pc, #72]	; (800e69c <HAL_InitTick+0x58>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	4619      	mov	r1, r3
 800e656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e65a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e662:	4618      	mov	r0, r3
 800e664:	f000 f943 	bl	800e8ee <HAL_SYSTICK_Config>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	e00e      	b.n	800e690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b0f      	cmp	r3, #15
 800e676:	d80a      	bhi.n	800e68e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e678:	2200      	movs	r2, #0
 800e67a:	6879      	ldr	r1, [r7, #4]
 800e67c:	f04f 30ff 	mov.w	r0, #4294967295
 800e680:	f000 f90b 	bl	800e89a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e684:	4a06      	ldr	r2, [pc, #24]	; (800e6a0 <HAL_InitTick+0x5c>)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e68a:	2300      	movs	r3, #0
 800e68c:	e000      	b.n	800e690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
}
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	20000014 	.word	0x20000014
 800e69c:	2000001c 	.word	0x2000001c
 800e6a0:	20000018 	.word	0x20000018

0800e6a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e6a8:	4b06      	ldr	r3, [pc, #24]	; (800e6c4 <HAL_IncTick+0x20>)
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	4b06      	ldr	r3, [pc, #24]	; (800e6c8 <HAL_IncTick+0x24>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	4a04      	ldr	r2, [pc, #16]	; (800e6c8 <HAL_IncTick+0x24>)
 800e6b6:	6013      	str	r3, [r2, #0]
}
 800e6b8:	bf00      	nop
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	2000001c 	.word	0x2000001c
 800e6c8:	2001c8bc 	.word	0x2001c8bc

0800e6cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	af00      	add	r7, sp, #0
  return uwTick;
 800e6d0:	4b03      	ldr	r3, [pc, #12]	; (800e6e0 <HAL_GetTick+0x14>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	2001c8bc 	.word	0x2001c8bc

0800e6e4 <__NVIC_SetPriorityGrouping>:
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f003 0307 	and.w	r3, r3, #7
 800e6f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e6f4:	4b0b      	ldr	r3, [pc, #44]	; (800e724 <__NVIC_SetPriorityGrouping+0x40>)
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e700:	4013      	ands	r3, r2
 800e702:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800e70c:	4b06      	ldr	r3, [pc, #24]	; (800e728 <__NVIC_SetPriorityGrouping+0x44>)
 800e70e:	4313      	orrs	r3, r2
 800e710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e712:	4a04      	ldr	r2, [pc, #16]	; (800e724 <__NVIC_SetPriorityGrouping+0x40>)
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	60d3      	str	r3, [r2, #12]
}
 800e718:	bf00      	nop
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	e000ed00 	.word	0xe000ed00
 800e728:	05fa0000 	.word	0x05fa0000

0800e72c <__NVIC_GetPriorityGrouping>:
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e730:	4b04      	ldr	r3, [pc, #16]	; (800e744 <__NVIC_GetPriorityGrouping+0x18>)
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	0a1b      	lsrs	r3, r3, #8
 800e736:	f003 0307 	and.w	r3, r3, #7
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	e000ed00 	.word	0xe000ed00

0800e748 <__NVIC_EnableIRQ>:
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	4603      	mov	r3, r0
 800e750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e756:	2b00      	cmp	r3, #0
 800e758:	db0b      	blt.n	800e772 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	f003 021f 	and.w	r2, r3, #31
 800e760:	4907      	ldr	r1, [pc, #28]	; (800e780 <__NVIC_EnableIRQ+0x38>)
 800e762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e766:	095b      	lsrs	r3, r3, #5
 800e768:	2001      	movs	r0, #1
 800e76a:	fa00 f202 	lsl.w	r2, r0, r2
 800e76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e772:	bf00      	nop
 800e774:	370c      	adds	r7, #12
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	e000e100 	.word	0xe000e100

0800e784 <__NVIC_SetPriority>:
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	6039      	str	r1, [r7, #0]
 800e78e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e794:	2b00      	cmp	r3, #0
 800e796:	db0a      	blt.n	800e7ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	490c      	ldr	r1, [pc, #48]	; (800e7d0 <__NVIC_SetPriority+0x4c>)
 800e79e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7a2:	0112      	lsls	r2, r2, #4
 800e7a4:	b2d2      	uxtb	r2, r2
 800e7a6:	440b      	add	r3, r1
 800e7a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7ac:	e00a      	b.n	800e7c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	4908      	ldr	r1, [pc, #32]	; (800e7d4 <__NVIC_SetPriority+0x50>)
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	f003 030f 	and.w	r3, r3, #15
 800e7ba:	3b04      	subs	r3, #4
 800e7bc:	0112      	lsls	r2, r2, #4
 800e7be:	b2d2      	uxtb	r2, r2
 800e7c0:	440b      	add	r3, r1
 800e7c2:	761a      	strb	r2, [r3, #24]
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	e000e100 	.word	0xe000e100
 800e7d4:	e000ed00 	.word	0xe000ed00

0800e7d8 <NVIC_EncodePriority>:
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b089      	sub	sp, #36	; 0x24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	f1c3 0307 	rsb	r3, r3, #7
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	bf28      	it	cs
 800e7f6:	2304      	movcs	r3, #4
 800e7f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	2b06      	cmp	r3, #6
 800e800:	d902      	bls.n	800e808 <NVIC_EncodePriority+0x30>
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	3b03      	subs	r3, #3
 800e806:	e000      	b.n	800e80a <NVIC_EncodePriority+0x32>
 800e808:	2300      	movs	r3, #0
 800e80a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e80c:	f04f 32ff 	mov.w	r2, #4294967295
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	fa02 f303 	lsl.w	r3, r2, r3
 800e816:	43da      	mvns	r2, r3
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	401a      	ands	r2, r3
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e820:	f04f 31ff 	mov.w	r1, #4294967295
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	fa01 f303 	lsl.w	r3, r1, r3
 800e82a:	43d9      	mvns	r1, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e830:	4313      	orrs	r3, r2
}
 800e832:	4618      	mov	r0, r3
 800e834:	3724      	adds	r7, #36	; 0x24
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
	...

0800e840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e850:	d301      	bcc.n	800e856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e852:	2301      	movs	r3, #1
 800e854:	e00f      	b.n	800e876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e856:	4a0a      	ldr	r2, [pc, #40]	; (800e880 <SysTick_Config+0x40>)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e85e:	210f      	movs	r1, #15
 800e860:	f04f 30ff 	mov.w	r0, #4294967295
 800e864:	f7ff ff8e 	bl	800e784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <SysTick_Config+0x40>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e86e:	4b04      	ldr	r3, [pc, #16]	; (800e880 <SysTick_Config+0x40>)
 800e870:	2207      	movs	r2, #7
 800e872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e874:	2300      	movs	r3, #0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	e000e010 	.word	0xe000e010

0800e884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7ff ff29 	bl	800e6e4 <__NVIC_SetPriorityGrouping>
}
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b086      	sub	sp, #24
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	60b9      	str	r1, [r7, #8]
 800e8a4:	607a      	str	r2, [r7, #4]
 800e8a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e8ac:	f7ff ff3e 	bl	800e72c <__NVIC_GetPriorityGrouping>
 800e8b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	68b9      	ldr	r1, [r7, #8]
 800e8b6:	6978      	ldr	r0, [r7, #20]
 800e8b8:	f7ff ff8e 	bl	800e7d8 <NVIC_EncodePriority>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7ff ff5d 	bl	800e784 <__NVIC_SetPriority>
}
 800e8ca:	bf00      	nop
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b082      	sub	sp, #8
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	4603      	mov	r3, r0
 800e8da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e8dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff ff31 	bl	800e748 <__NVIC_EnableIRQ>
}
 800e8e6:	bf00      	nop
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff ffa2 	bl	800e840 <SysTick_Config>
 800e8fc:	4603      	mov	r3, r0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
	...

0800e908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e910:	2300      	movs	r3, #0
 800e912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e914:	f7ff feda 	bl	800e6cc <HAL_GetTick>
 800e918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e920:	2301      	movs	r3, #1
 800e922:	e099      	b.n	800ea58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f022 0201 	bic.w	r2, r2, #1
 800e942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e944:	e00f      	b.n	800e966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e946:	f7ff fec1 	bl	800e6cc <HAL_GetTick>
 800e94a:	4602      	mov	r2, r0
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	2b05      	cmp	r3, #5
 800e952:	d908      	bls.n	800e966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2220      	movs	r2, #32
 800e958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2203      	movs	r2, #3
 800e95e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e078      	b.n	800ea58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0301 	and.w	r3, r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1e8      	bne.n	800e946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	4b38      	ldr	r3, [pc, #224]	; (800ea60 <HAL_DMA_Init+0x158>)
 800e980:	4013      	ands	r3, r2
 800e982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e99e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e9aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a1b      	ldr	r3, [r3, #32]
 800e9b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e9b2:	697a      	ldr	r2, [r7, #20]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	d107      	bne.n	800e9d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	697a      	ldr	r2, [r7, #20]
 800e9d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	695b      	ldr	r3, [r3, #20]
 800e9de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f023 0307 	bic.w	r3, r3, #7
 800e9e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f6:	2b04      	cmp	r3, #4
 800e9f8:	d117      	bne.n	800ea2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00e      	beq.n	800ea2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fa99 	bl	800ef44 <DMA_CheckFifoParam>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d008      	beq.n	800ea2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2240      	movs	r2, #64	; 0x40
 800ea1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ea26:	2301      	movs	r3, #1
 800ea28:	e016      	b.n	800ea58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 fa50 	bl	800eed8 <DMA_CalcBaseAndBitshift>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea40:	223f      	movs	r2, #63	; 0x3f
 800ea42:	409a      	lsls	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	e010803f 	.word	0xe010803f

0800ea64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea72:	2300      	movs	r3, #0
 800ea74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d101      	bne.n	800ea8a <HAL_DMA_Start_IT+0x26>
 800ea86:	2302      	movs	r3, #2
 800ea88:	e048      	b.n	800eb1c <HAL_DMA_Start_IT+0xb8>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d137      	bne.n	800eb0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	68b9      	ldr	r1, [r7, #8]
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f000 f9e2 	bl	800ee7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eabc:	223f      	movs	r2, #63	; 0x3f
 800eabe:	409a      	lsls	r2, r3
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f042 0216 	orr.w	r2, r2, #22
 800ead2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	695a      	ldr	r2, [r3, #20]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eae2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d007      	beq.n	800eafc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f042 0208 	orr.w	r2, r2, #8
 800eafa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f042 0201 	orr.w	r2, r2, #1
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	e005      	b.n	800eb1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800eb16:	2302      	movs	r3, #2
 800eb18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	2b02      	cmp	r3, #2
 800eb36:	d004      	beq.n	800eb42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2280      	movs	r2, #128	; 0x80
 800eb3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e00c      	b.n	800eb5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2205      	movs	r2, #5
 800eb46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f022 0201 	bic.w	r2, r2, #1
 800eb58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800eb70:	2300      	movs	r3, #0
 800eb72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800eb74:	4b92      	ldr	r3, [pc, #584]	; (800edc0 <HAL_DMA_IRQHandler+0x258>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a92      	ldr	r2, [pc, #584]	; (800edc4 <HAL_DMA_IRQHandler+0x25c>)
 800eb7a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb7e:	0a9b      	lsrs	r3, r3, #10
 800eb80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb92:	2208      	movs	r2, #8
 800eb94:	409a      	lsls	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	4013      	ands	r3, r2
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d01a      	beq.n	800ebd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d013      	beq.n	800ebd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f022 0204 	bic.w	r2, r2, #4
 800ebba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebc0:	2208      	movs	r2, #8
 800ebc2:	409a      	lsls	r2, r3
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebcc:	f043 0201 	orr.w	r2, r3, #1
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebd8:	2201      	movs	r2, #1
 800ebda:	409a      	lsls	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	4013      	ands	r3, r2
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d012      	beq.n	800ec0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	695b      	ldr	r3, [r3, #20]
 800ebea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00b      	beq.n	800ec0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	409a      	lsls	r2, r3
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec02:	f043 0202 	orr.w	r2, r3, #2
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec0e:	2204      	movs	r2, #4
 800ec10:	409a      	lsls	r2, r3
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4013      	ands	r3, r2
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d012      	beq.n	800ec40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f003 0302 	and.w	r3, r3, #2
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00b      	beq.n	800ec40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec2c:	2204      	movs	r2, #4
 800ec2e:	409a      	lsls	r2, r3
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec38:	f043 0204 	orr.w	r2, r3, #4
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec44:	2210      	movs	r2, #16
 800ec46:	409a      	lsls	r2, r3
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d043      	beq.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f003 0308 	and.w	r3, r3, #8
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d03c      	beq.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec62:	2210      	movs	r2, #16
 800ec64:	409a      	lsls	r2, r3
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d018      	beq.n	800ecaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d108      	bne.n	800ec98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d024      	beq.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	4798      	blx	r3
 800ec96:	e01f      	b.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01b      	beq.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	4798      	blx	r3
 800eca8:	e016      	b.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d107      	bne.n	800ecc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f022 0208 	bic.w	r2, r2, #8
 800ecc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d003      	beq.n	800ecd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecdc:	2220      	movs	r2, #32
 800ecde:	409a      	lsls	r2, r3
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	4013      	ands	r3, r2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 808e 	beq.w	800ee06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f003 0310 	and.w	r3, r3, #16
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f000 8086 	beq.w	800ee06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfe:	2220      	movs	r2, #32
 800ed00:	409a      	lsls	r2, r3
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b05      	cmp	r3, #5
 800ed10:	d136      	bne.n	800ed80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f022 0216 	bic.w	r2, r2, #22
 800ed20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	695a      	ldr	r2, [r3, #20]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d103      	bne.n	800ed42 <HAL_DMA_IRQHandler+0x1da>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d007      	beq.n	800ed52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f022 0208 	bic.w	r2, r2, #8
 800ed50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed56:	223f      	movs	r2, #63	; 0x3f
 800ed58:	409a      	lsls	r2, r3
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d07d      	beq.n	800ee72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	4798      	blx	r3
        }
        return;
 800ed7e:	e078      	b.n	800ee72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d01c      	beq.n	800edc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d108      	bne.n	800edae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d030      	beq.n	800ee06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	4798      	blx	r3
 800edac:	e02b      	b.n	800ee06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d027      	beq.n	800ee06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	4798      	blx	r3
 800edbe:	e022      	b.n	800ee06 <HAL_DMA_IRQHandler+0x29e>
 800edc0:	20000014 	.word	0x20000014
 800edc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10f      	bne.n	800edf6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f022 0210 	bic.w	r2, r2, #16
 800ede4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2200      	movs	r2, #0
 800edea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2201      	movs	r2, #1
 800edf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d003      	beq.n	800ee06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d032      	beq.n	800ee74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee12:	f003 0301 	and.w	r3, r3, #1
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d022      	beq.n	800ee60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2205      	movs	r2, #5
 800ee1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f022 0201 	bic.w	r2, r2, #1
 800ee30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	3301      	adds	r3, #1
 800ee36:	60bb      	str	r3, [r7, #8]
 800ee38:	697a      	ldr	r2, [r7, #20]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d307      	bcc.n	800ee4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1f2      	bne.n	800ee32 <HAL_DMA_IRQHandler+0x2ca>
 800ee4c:	e000      	b.n	800ee50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ee4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d005      	beq.n	800ee74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	4798      	blx	r3
 800ee70:	e000      	b.n	800ee74 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ee72:	bf00      	nop
    }
  }
}
 800ee74:	3718      	adds	r7, #24
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop

0800ee7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b085      	sub	sp, #20
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ee98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	683a      	ldr	r2, [r7, #0]
 800eea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	2b40      	cmp	r3, #64	; 0x40
 800eea8:	d108      	bne.n	800eebc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800eeba:	e007      	b.n	800eecc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	60da      	str	r2, [r3, #12]
}
 800eecc:	bf00      	nop
 800eece:	3714      	adds	r7, #20
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	3b10      	subs	r3, #16
 800eee8:	4a13      	ldr	r2, [pc, #76]	; (800ef38 <DMA_CalcBaseAndBitshift+0x60>)
 800eeea:	fba2 2303 	umull	r2, r3, r2, r3
 800eeee:	091b      	lsrs	r3, r3, #4
 800eef0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800eef2:	4a12      	ldr	r2, [pc, #72]	; (800ef3c <DMA_CalcBaseAndBitshift+0x64>)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b03      	cmp	r3, #3
 800ef04:	d908      	bls.n	800ef18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	4b0c      	ldr	r3, [pc, #48]	; (800ef40 <DMA_CalcBaseAndBitshift+0x68>)
 800ef0e:	4013      	ands	r3, r2
 800ef10:	1d1a      	adds	r2, r3, #4
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	659a      	str	r2, [r3, #88]	; 0x58
 800ef16:	e006      	b.n	800ef26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4b08      	ldr	r3, [pc, #32]	; (800ef40 <DMA_CalcBaseAndBitshift+0x68>)
 800ef20:	4013      	ands	r3, r2
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3714      	adds	r7, #20
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	aaaaaaab 	.word	0xaaaaaaab
 800ef3c:	080206a8 	.word	0x080206a8
 800ef40:	fffffc00 	.word	0xfffffc00

0800ef44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	699b      	ldr	r3, [r3, #24]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d11f      	bne.n	800ef9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	2b03      	cmp	r3, #3
 800ef62:	d855      	bhi.n	800f010 <DMA_CheckFifoParam+0xcc>
 800ef64:	a201      	add	r2, pc, #4	; (adr r2, 800ef6c <DMA_CheckFifoParam+0x28>)
 800ef66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6a:	bf00      	nop
 800ef6c:	0800ef7d 	.word	0x0800ef7d
 800ef70:	0800ef8f 	.word	0x0800ef8f
 800ef74:	0800ef7d 	.word	0x0800ef7d
 800ef78:	0800f011 	.word	0x0800f011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d045      	beq.n	800f014 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ef8c:	e042      	b.n	800f014 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ef96:	d13f      	bne.n	800f018 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ef9c:	e03c      	b.n	800f018 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	699b      	ldr	r3, [r3, #24]
 800efa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efa6:	d121      	bne.n	800efec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2b03      	cmp	r3, #3
 800efac:	d836      	bhi.n	800f01c <DMA_CheckFifoParam+0xd8>
 800efae:	a201      	add	r2, pc, #4	; (adr r2, 800efb4 <DMA_CheckFifoParam+0x70>)
 800efb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb4:	0800efc5 	.word	0x0800efc5
 800efb8:	0800efcb 	.word	0x0800efcb
 800efbc:	0800efc5 	.word	0x0800efc5
 800efc0:	0800efdd 	.word	0x0800efdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800efc4:	2301      	movs	r3, #1
 800efc6:	73fb      	strb	r3, [r7, #15]
      break;
 800efc8:	e02f      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d024      	beq.n	800f020 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800efda:	e021      	b.n	800f020 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800efe4:	d11e      	bne.n	800f024 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800efea:	e01b      	b.n	800f024 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b02      	cmp	r3, #2
 800eff0:	d902      	bls.n	800eff8 <DMA_CheckFifoParam+0xb4>
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d003      	beq.n	800effe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800eff6:	e018      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800eff8:	2301      	movs	r3, #1
 800effa:	73fb      	strb	r3, [r7, #15]
      break;
 800effc:	e015      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00e      	beq.n	800f028 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	73fb      	strb	r3, [r7, #15]
      break;
 800f00e:	e00b      	b.n	800f028 <DMA_CheckFifoParam+0xe4>
      break;
 800f010:	bf00      	nop
 800f012:	e00a      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      break;
 800f014:	bf00      	nop
 800f016:	e008      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      break;
 800f018:	bf00      	nop
 800f01a:	e006      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      break;
 800f01c:	bf00      	nop
 800f01e:	e004      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      break;
 800f020:	bf00      	nop
 800f022:	e002      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      break;   
 800f024:	bf00      	nop
 800f026:	e000      	b.n	800f02a <DMA_CheckFifoParam+0xe6>
      break;
 800f028:	bf00      	nop
    }
  } 
  
  return status; 
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f038:	b480      	push	{r7}
 800f03a:	b089      	sub	sp, #36	; 0x24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800f042:	2300      	movs	r3, #0
 800f044:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800f046:	2300      	movs	r3, #0
 800f048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800f04a:	2300      	movs	r3, #0
 800f04c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800f04e:	2300      	movs	r3, #0
 800f050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800f052:	2300      	movs	r3, #0
 800f054:	61fb      	str	r3, [r7, #28]
 800f056:	e175      	b.n	800f344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800f058:	2201      	movs	r2, #1
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	fa02 f303 	lsl.w	r3, r2, r3
 800f060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	697a      	ldr	r2, [r7, #20]
 800f068:	4013      	ands	r3, r2
 800f06a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	429a      	cmp	r2, r3
 800f072:	f040 8164 	bne.w	800f33e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d00b      	beq.n	800f096 <HAL_GPIO_Init+0x5e>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	2b02      	cmp	r3, #2
 800f084:	d007      	beq.n	800f096 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f08a:	2b11      	cmp	r3, #17
 800f08c:	d003      	beq.n	800f096 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	2b12      	cmp	r3, #18
 800f094:	d130      	bne.n	800f0f8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	2203      	movs	r2, #3
 800f0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f0a6:	43db      	mvns	r3, r3
 800f0a8:	69ba      	ldr	r2, [r7, #24]
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	68da      	ldr	r2, [r3, #12]
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ba:	69ba      	ldr	r2, [r7, #24]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	69ba      	ldr	r2, [r7, #24]
 800f0c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0d4:	43db      	mvns	r3, r3
 800f0d6:	69ba      	ldr	r2, [r7, #24]
 800f0d8:	4013      	ands	r3, r2
 800f0da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	091b      	lsrs	r3, r3, #4
 800f0e2:	f003 0201 	and.w	r2, r3, #1
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ec:	69ba      	ldr	r2, [r7, #24]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	69ba      	ldr	r2, [r7, #24]
 800f0f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	005b      	lsls	r3, r3, #1
 800f102:	2203      	movs	r2, #3
 800f104:	fa02 f303 	lsl.w	r3, r2, r3
 800f108:	43db      	mvns	r3, r3
 800f10a:	69ba      	ldr	r2, [r7, #24]
 800f10c:	4013      	ands	r3, r2
 800f10e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	689a      	ldr	r2, [r3, #8]
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	fa02 f303 	lsl.w	r3, r2, r3
 800f11c:	69ba      	ldr	r2, [r7, #24]
 800f11e:	4313      	orrs	r3, r2
 800f120:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	69ba      	ldr	r2, [r7, #24]
 800f126:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d003      	beq.n	800f138 <HAL_GPIO_Init+0x100>
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	2b12      	cmp	r3, #18
 800f136:	d123      	bne.n	800f180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	08da      	lsrs	r2, r3, #3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	3208      	adds	r2, #8
 800f140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	f003 0307 	and.w	r3, r3, #7
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	220f      	movs	r2, #15
 800f150:	fa02 f303 	lsl.w	r3, r2, r3
 800f154:	43db      	mvns	r3, r3
 800f156:	69ba      	ldr	r2, [r7, #24]
 800f158:	4013      	ands	r3, r2
 800f15a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	691a      	ldr	r2, [r3, #16]
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	f003 0307 	and.w	r3, r3, #7
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	fa02 f303 	lsl.w	r3, r2, r3
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	4313      	orrs	r3, r2
 800f170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	08da      	lsrs	r2, r3, #3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	3208      	adds	r2, #8
 800f17a:	69b9      	ldr	r1, [r7, #24]
 800f17c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	2203      	movs	r2, #3
 800f18c:	fa02 f303 	lsl.w	r3, r2, r3
 800f190:	43db      	mvns	r3, r3
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	4013      	ands	r3, r2
 800f196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	f003 0203 	and.w	r2, r3, #3
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1a8:	69ba      	ldr	r2, [r7, #24]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	69ba      	ldr	r2, [r7, #24]
 800f1b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 80be 	beq.w	800f33e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1c2:	4b65      	ldr	r3, [pc, #404]	; (800f358 <HAL_GPIO_Init+0x320>)
 800f1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1c6:	4a64      	ldr	r2, [pc, #400]	; (800f358 <HAL_GPIO_Init+0x320>)
 800f1c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f1cc:	6453      	str	r3, [r2, #68]	; 0x44
 800f1ce:	4b62      	ldr	r3, [pc, #392]	; (800f358 <HAL_GPIO_Init+0x320>)
 800f1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1d6:	60fb      	str	r3, [r7, #12]
 800f1d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800f1da:	4a60      	ldr	r2, [pc, #384]	; (800f35c <HAL_GPIO_Init+0x324>)
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	089b      	lsrs	r3, r3, #2
 800f1e0:	3302      	adds	r3, #2
 800f1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	f003 0303 	and.w	r3, r3, #3
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	220f      	movs	r2, #15
 800f1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f6:	43db      	mvns	r3, r3
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	4013      	ands	r3, r2
 800f1fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4a57      	ldr	r2, [pc, #348]	; (800f360 <HAL_GPIO_Init+0x328>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d037      	beq.n	800f276 <HAL_GPIO_Init+0x23e>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4a56      	ldr	r2, [pc, #344]	; (800f364 <HAL_GPIO_Init+0x32c>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d031      	beq.n	800f272 <HAL_GPIO_Init+0x23a>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4a55      	ldr	r2, [pc, #340]	; (800f368 <HAL_GPIO_Init+0x330>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d02b      	beq.n	800f26e <HAL_GPIO_Init+0x236>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4a54      	ldr	r2, [pc, #336]	; (800f36c <HAL_GPIO_Init+0x334>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d025      	beq.n	800f26a <HAL_GPIO_Init+0x232>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4a53      	ldr	r2, [pc, #332]	; (800f370 <HAL_GPIO_Init+0x338>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d01f      	beq.n	800f266 <HAL_GPIO_Init+0x22e>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4a52      	ldr	r2, [pc, #328]	; (800f374 <HAL_GPIO_Init+0x33c>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d019      	beq.n	800f262 <HAL_GPIO_Init+0x22a>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4a51      	ldr	r2, [pc, #324]	; (800f378 <HAL_GPIO_Init+0x340>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d013      	beq.n	800f25e <HAL_GPIO_Init+0x226>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4a50      	ldr	r2, [pc, #320]	; (800f37c <HAL_GPIO_Init+0x344>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d00d      	beq.n	800f25a <HAL_GPIO_Init+0x222>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a4f      	ldr	r2, [pc, #316]	; (800f380 <HAL_GPIO_Init+0x348>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d007      	beq.n	800f256 <HAL_GPIO_Init+0x21e>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a4e      	ldr	r2, [pc, #312]	; (800f384 <HAL_GPIO_Init+0x34c>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d101      	bne.n	800f252 <HAL_GPIO_Init+0x21a>
 800f24e:	2309      	movs	r3, #9
 800f250:	e012      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f252:	230a      	movs	r3, #10
 800f254:	e010      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f256:	2308      	movs	r3, #8
 800f258:	e00e      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f25a:	2307      	movs	r3, #7
 800f25c:	e00c      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f25e:	2306      	movs	r3, #6
 800f260:	e00a      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f262:	2305      	movs	r3, #5
 800f264:	e008      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f266:	2304      	movs	r3, #4
 800f268:	e006      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f26a:	2303      	movs	r3, #3
 800f26c:	e004      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f26e:	2302      	movs	r3, #2
 800f270:	e002      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f272:	2301      	movs	r3, #1
 800f274:	e000      	b.n	800f278 <HAL_GPIO_Init+0x240>
 800f276:	2300      	movs	r3, #0
 800f278:	69fa      	ldr	r2, [r7, #28]
 800f27a:	f002 0203 	and.w	r2, r2, #3
 800f27e:	0092      	lsls	r2, r2, #2
 800f280:	4093      	lsls	r3, r2
 800f282:	69ba      	ldr	r2, [r7, #24]
 800f284:	4313      	orrs	r3, r2
 800f286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800f288:	4934      	ldr	r1, [pc, #208]	; (800f35c <HAL_GPIO_Init+0x324>)
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	089b      	lsrs	r3, r3, #2
 800f28e:	3302      	adds	r3, #2
 800f290:	69ba      	ldr	r2, [r7, #24]
 800f292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f296:	4b3c      	ldr	r3, [pc, #240]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	43db      	mvns	r3, r3
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	4013      	ands	r3, r2
 800f2a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d003      	beq.n	800f2ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800f2b2:	69ba      	ldr	r2, [r7, #24]
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f2ba:	4a33      	ldr	r2, [pc, #204]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f2c0:	4b31      	ldr	r3, [pc, #196]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	43db      	mvns	r3, r3
 800f2ca:	69ba      	ldr	r2, [r7, #24]
 800f2cc:	4013      	ands	r3, r2
 800f2ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800f2dc:	69ba      	ldr	r2, [r7, #24]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f2e4:	4a28      	ldr	r2, [pc, #160]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f2ea:	4b27      	ldr	r3, [pc, #156]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f2ec:	689b      	ldr	r3, [r3, #8]
 800f2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	43db      	mvns	r3, r3
 800f2f4:	69ba      	ldr	r2, [r7, #24]
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800f306:	69ba      	ldr	r2, [r7, #24]
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f30e:	4a1e      	ldr	r2, [pc, #120]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f314:	4b1c      	ldr	r3, [pc, #112]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	43db      	mvns	r3, r3
 800f31e:	69ba      	ldr	r2, [r7, #24]
 800f320:	4013      	ands	r3, r2
 800f322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800f330:	69ba      	ldr	r2, [r7, #24]
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	4313      	orrs	r3, r2
 800f336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f338:	4a13      	ldr	r2, [pc, #76]	; (800f388 <HAL_GPIO_Init+0x350>)
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	3301      	adds	r3, #1
 800f342:	61fb      	str	r3, [r7, #28]
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	2b0f      	cmp	r3, #15
 800f348:	f67f ae86 	bls.w	800f058 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800f34c:	bf00      	nop
 800f34e:	3724      	adds	r7, #36	; 0x24
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr
 800f358:	40023800 	.word	0x40023800
 800f35c:	40013800 	.word	0x40013800
 800f360:	40020000 	.word	0x40020000
 800f364:	40020400 	.word	0x40020400
 800f368:	40020800 	.word	0x40020800
 800f36c:	40020c00 	.word	0x40020c00
 800f370:	40021000 	.word	0x40021000
 800f374:	40021400 	.word	0x40021400
 800f378:	40021800 	.word	0x40021800
 800f37c:	40021c00 	.word	0x40021c00
 800f380:	40022000 	.word	0x40022000
 800f384:	40022400 	.word	0x40022400
 800f388:	40013c00 	.word	0x40013c00

0800f38c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	460b      	mov	r3, r1
 800f396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	691a      	ldr	r2, [r3, #16]
 800f39c:	887b      	ldrh	r3, [r7, #2]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	73fb      	strb	r3, [r7, #15]
 800f3a8:	e001      	b.n	800f3ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	807b      	strh	r3, [r7, #2]
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f3cc:	787b      	ldrb	r3, [r7, #1]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f3d2:	887a      	ldrh	r2, [r7, #2]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800f3d8:	e003      	b.n	800f3e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800f3da:	887b      	ldrh	r3, [r7, #2]
 800f3dc:	041a      	lsls	r2, r3, #16
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	619a      	str	r2, [r3, #24]
}
 800f3e2:	bf00      	nop
 800f3e4:	370c      	adds	r7, #12
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	b083      	sub	sp, #12
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	695a      	ldr	r2, [r3, #20]
 800f3fe:	887b      	ldrh	r3, [r7, #2]
 800f400:	4013      	ands	r3, r2
 800f402:	2b00      	cmp	r3, #0
 800f404:	d004      	beq.n	800f410 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f406:	887b      	ldrh	r3, [r7, #2]
 800f408:	041a      	lsls	r2, r3, #16
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800f40e:	e002      	b.n	800f416 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f410:	887a      	ldrh	r2, [r7, #2]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	619a      	str	r2, [r3, #24]
}
 800f416:	bf00      	nop
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
	...

0800f424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	4603      	mov	r3, r0
 800f42c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f42e:	4b08      	ldr	r3, [pc, #32]	; (800f450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f430:	695a      	ldr	r2, [r3, #20]
 800f432:	88fb      	ldrh	r3, [r7, #6]
 800f434:	4013      	ands	r3, r2
 800f436:	2b00      	cmp	r3, #0
 800f438:	d006      	beq.n	800f448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f43a:	4a05      	ldr	r2, [pc, #20]	; (800f450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f43c:	88fb      	ldrh	r3, [r7, #6]
 800f43e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f440:	88fb      	ldrh	r3, [r7, #6]
 800f442:	4618      	mov	r0, r3
 800f444:	f7fc fecc 	bl	800c1e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800f448:	bf00      	nop
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	40013c00 	.word	0x40013c00

0800f454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f462:	2301      	movs	r3, #1
 800f464:	e07f      	b.n	800f566 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d106      	bne.n	800f480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7fe fe46 	bl	800e10c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2224      	movs	r2, #36	; 0x24
 800f484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f022 0201 	bic.w	r2, r2, #1
 800f496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f4a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	689a      	ldr	r2, [r3, #8]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f4b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d107      	bne.n	800f4ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	689a      	ldr	r2, [r3, #8]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f4ca:	609a      	str	r2, [r3, #8]
 800f4cc:	e006      	b.n	800f4dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	689a      	ldr	r2, [r3, #8]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f4da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d104      	bne.n	800f4ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	6859      	ldr	r1, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	4b1d      	ldr	r3, [pc, #116]	; (800f570 <HAL_I2C_Init+0x11c>)
 800f4fa:	430b      	orrs	r3, r1
 800f4fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	68da      	ldr	r2, [r3, #12]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f50c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	691a      	ldr	r2, [r3, #16]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	695b      	ldr	r3, [r3, #20]
 800f516:	ea42 0103 	orr.w	r1, r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	021a      	lsls	r2, r3, #8
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	430a      	orrs	r2, r1
 800f526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	69d9      	ldr	r1, [r3, #28]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6a1a      	ldr	r2, [r3, #32]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	430a      	orrs	r2, r1
 800f536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f042 0201 	orr.w	r2, r2, #1
 800f546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2220      	movs	r2, #32
 800f552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3708      	adds	r7, #8
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	02008000 	.word	0x02008000

0800f574 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af02      	add	r7, sp, #8
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	4608      	mov	r0, r1
 800f57e:	4611      	mov	r1, r2
 800f580:	461a      	mov	r2, r3
 800f582:	4603      	mov	r3, r0
 800f584:	817b      	strh	r3, [r7, #10]
 800f586:	460b      	mov	r3, r1
 800f588:	813b      	strh	r3, [r7, #8]
 800f58a:	4613      	mov	r3, r2
 800f58c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f594:	b2db      	uxtb	r3, r3
 800f596:	2b20      	cmp	r3, #32
 800f598:	f040 80fd 	bne.w	800f796 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <HAL_I2C_Mem_Read+0x34>
 800f5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d105      	bne.n	800f5b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e0f1      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d101      	bne.n	800f5c2 <HAL_I2C_Mem_Read+0x4e>
 800f5be:	2302      	movs	r3, #2
 800f5c0:	e0ea      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f5ca:	f7ff f87f 	bl	800e6cc <HAL_GetTick>
 800f5ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	2319      	movs	r3, #25
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f000 fde7 	bl	80101b0 <I2C_WaitOnFlagUntilTimeout>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d001      	beq.n	800f5ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	e0d5      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2222      	movs	r2, #34	; 0x22
 800f5f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2240      	movs	r2, #64	; 0x40
 800f5f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2200      	movs	r2, #0
 800f600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6a3a      	ldr	r2, [r7, #32]
 800f606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f60c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2200      	movs	r2, #0
 800f612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f614:	88f8      	ldrh	r0, [r7, #6]
 800f616:	893a      	ldrh	r2, [r7, #8]
 800f618:	8979      	ldrh	r1, [r7, #10]
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	4603      	mov	r3, r0
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f000 fa7d 	bl	800fb24 <I2C_RequestMemoryRead>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2200      	movs	r2, #0
 800f634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f638:	2301      	movs	r3, #1
 800f63a:	e0ad      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f640:	b29b      	uxth	r3, r3
 800f642:	2bff      	cmp	r3, #255	; 0xff
 800f644:	d90e      	bls.n	800f664 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	22ff      	movs	r2, #255	; 0xff
 800f64a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f650:	b2da      	uxtb	r2, r3
 800f652:	8979      	ldrh	r1, [r7, #10]
 800f654:	4b52      	ldr	r3, [pc, #328]	; (800f7a0 <HAL_I2C_Mem_Read+0x22c>)
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f000 fec9 	bl	80103f4 <I2C_TransferConfig>
 800f662:	e00f      	b.n	800f684 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f668:	b29a      	uxth	r2, r3
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f672:	b2da      	uxtb	r2, r3
 800f674:	8979      	ldrh	r1, [r7, #10]
 800f676:	4b4a      	ldr	r3, [pc, #296]	; (800f7a0 <HAL_I2C_Mem_Read+0x22c>)
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f000 feb8 	bl	80103f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	9300      	str	r3, [sp, #0]
 800f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68a:	2200      	movs	r2, #0
 800f68c:	2104      	movs	r1, #4
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f000 fd8e 	bl	80101b0 <I2C_WaitOnFlagUntilTimeout>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800f69a:	2301      	movs	r3, #1
 800f69c:	e07c      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	b2d2      	uxtb	r2, r2
 800f6aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d034      	beq.n	800f744 <HAL_I2C_Mem_Read+0x1d0>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d130      	bne.n	800f744 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	2180      	movs	r1, #128	; 0x80
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f000 fd5f 	bl	80101b0 <I2C_WaitOnFlagUntilTimeout>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	e04d      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f700:	b29b      	uxth	r3, r3
 800f702:	2bff      	cmp	r3, #255	; 0xff
 800f704:	d90e      	bls.n	800f724 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	22ff      	movs	r2, #255	; 0xff
 800f70a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f710:	b2da      	uxtb	r2, r3
 800f712:	8979      	ldrh	r1, [r7, #10]
 800f714:	2300      	movs	r3, #0
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	f000 fe69 	bl	80103f4 <I2C_TransferConfig>
 800f722:	e00f      	b.n	800f744 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f728:	b29a      	uxth	r2, r3
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f732:	b2da      	uxtb	r2, r3
 800f734:	8979      	ldrh	r1, [r7, #10]
 800f736:	2300      	movs	r3, #0
 800f738:	9300      	str	r3, [sp, #0]
 800f73a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f000 fe58 	bl	80103f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f748:	b29b      	uxth	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d19a      	bne.n	800f684 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f000 fdac 	bl	80102b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800f75e:	2301      	movs	r3, #1
 800f760:	e01a      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2220      	movs	r2, #32
 800f768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6859      	ldr	r1, [r3, #4]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	4b0b      	ldr	r3, [pc, #44]	; (800f7a4 <HAL_I2C_Mem_Read+0x230>)
 800f776:	400b      	ands	r3, r1
 800f778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2220      	movs	r2, #32
 800f77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f792:	2300      	movs	r3, #0
 800f794:	e000      	b.n	800f798 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800f796:	2302      	movs	r3, #2
  }
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3718      	adds	r7, #24
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	80002400 	.word	0x80002400
 800f7a4:	fe00e800 	.word	0xfe00e800

0800f7a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	699b      	ldr	r3, [r3, #24]
 800f7b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d005      	beq.n	800f7d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7cc:	68ba      	ldr	r2, [r7, #8]
 800f7ce:	68f9      	ldr	r1, [r7, #12]
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	4798      	blx	r3
  }
}
 800f7d4:	bf00      	nop
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	0a1b      	lsrs	r3, r3, #8
 800f7f8:	f003 0301 	and.w	r3, r3, #1
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d010      	beq.n	800f822 <HAL_I2C_ER_IRQHandler+0x46>
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	09db      	lsrs	r3, r3, #7
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00a      	beq.n	800f822 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f810:	f043 0201 	orr.w	r2, r3, #1
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f820:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	0a9b      	lsrs	r3, r3, #10
 800f826:	f003 0301 	and.w	r3, r3, #1
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d010      	beq.n	800f850 <HAL_I2C_ER_IRQHandler+0x74>
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	09db      	lsrs	r3, r3, #7
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f83e:	f043 0208 	orr.w	r2, r3, #8
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f84e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	0a5b      	lsrs	r3, r3, #9
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d010      	beq.n	800f87e <HAL_I2C_ER_IRQHandler+0xa2>
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	09db      	lsrs	r3, r3, #7
 800f860:	f003 0301 	and.w	r3, r3, #1
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00a      	beq.n	800f87e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f86c:	f043 0202 	orr.w	r2, r3, #2
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f87c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f882:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f003 030b 	and.w	r3, r3, #11
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d003      	beq.n	800f896 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800f88e:	68f9      	ldr	r1, [r7, #12]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fb85 	bl	800ffa0 <I2C_ITError>
  }
}
 800f896:	bf00      	nop
 800f898:	3718      	adds	r7, #24
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f89e:	b480      	push	{r7}
 800f8a0:	b083      	sub	sp, #12
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f8a6:	bf00      	nop
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f8b2:	b480      	push	{r7}
 800f8b4:	b083      	sub	sp, #12
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f8ba:	bf00      	nop
 800f8bc:	370c      	adds	r7, #12
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr

0800f8c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f8c6:	b480      	push	{r7}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70fb      	strb	r3, [r7, #3]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f8d6:	bf00      	nop
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f8e2:	b480      	push	{r7}
 800f8e4:	b083      	sub	sp, #12
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f8ea:	bf00      	nop
 800f8ec:	370c      	adds	r7, #12
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f8f6:	b480      	push	{r7}
 800f8f8:	b083      	sub	sp, #12
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f8fe:	bf00      	nop
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f90a:	b480      	push	{r7}
 800f90c:	b083      	sub	sp, #12
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f912:	bf00      	nop
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b086      	sub	sp, #24
 800f922:	af00      	add	r7, sp, #0
 800f924:	60f8      	str	r0, [r7, #12]
 800f926:	60b9      	str	r1, [r7, #8]
 800f928:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d101      	bne.n	800f942 <I2C_Slave_ISR_IT+0x24>
 800f93e:	2302      	movs	r3, #2
 800f940:	e0ec      	b.n	800fb1c <I2C_Slave_ISR_IT+0x1fe>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2201      	movs	r2, #1
 800f946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	095b      	lsrs	r3, r3, #5
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d009      	beq.n	800f96a <I2C_Slave_ISR_IT+0x4c>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	095b      	lsrs	r3, r3, #5
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d003      	beq.n	800f96a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f962:	6939      	ldr	r1, [r7, #16]
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f000 f9f1 	bl	800fd4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	091b      	lsrs	r3, r3, #4
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	2b00      	cmp	r3, #0
 800f974:	d04d      	beq.n	800fa12 <I2C_Slave_ISR_IT+0xf4>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	091b      	lsrs	r3, r3, #4
 800f97a:	f003 0301 	and.w	r3, r3, #1
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d047      	beq.n	800fa12 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f986:	b29b      	uxth	r3, r3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d128      	bne.n	800f9de <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f992:	b2db      	uxtb	r3, r3
 800f994:	2b28      	cmp	r3, #40	; 0x28
 800f996:	d108      	bne.n	800f9aa <I2C_Slave_ISR_IT+0x8c>
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f99e:	d104      	bne.n	800f9aa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f9a0:	6939      	ldr	r1, [r7, #16]
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f000 faa8 	bl	800fef8 <I2C_ITListenCplt>
 800f9a8:	e032      	b.n	800fa10 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b29      	cmp	r3, #41	; 0x29
 800f9b4:	d10e      	bne.n	800f9d4 <I2C_Slave_ISR_IT+0xb6>
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f9bc:	d00a      	beq.n	800f9d4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2210      	movs	r2, #16
 800f9c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f000 fbaa 	bl	8010120 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 f97f 	bl	800fcd0 <I2C_ITSlaveSeqCplt>
 800f9d2:	e01d      	b.n	800fa10 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2210      	movs	r2, #16
 800f9da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f9dc:	e096      	b.n	800fb0c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2210      	movs	r2, #16
 800f9e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ea:	f043 0204 	orr.w	r2, r3, #4
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d004      	beq.n	800fa02 <I2C_Slave_ISR_IT+0xe4>
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9fe:	f040 8085 	bne.w	800fb0c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa06:	4619      	mov	r1, r3
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f000 fac9 	bl	800ffa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fa0e:	e07d      	b.n	800fb0c <I2C_Slave_ISR_IT+0x1ee>
 800fa10:	e07c      	b.n	800fb0c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	089b      	lsrs	r3, r3, #2
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d030      	beq.n	800fa80 <I2C_Slave_ISR_IT+0x162>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	089b      	lsrs	r3, r3, #2
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d02a      	beq.n	800fa80 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d018      	beq.n	800fa66 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	b2d2      	uxtb	r2, r2
 800fa40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa50:	3b01      	subs	r3, #1
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d14f      	bne.n	800fb10 <I2C_Slave_ISR_IT+0x1f2>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fa76:	d04b      	beq.n	800fb10 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f000 f929 	bl	800fcd0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fa7e:	e047      	b.n	800fb10 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	08db      	lsrs	r3, r3, #3
 800fa84:	f003 0301 	and.w	r3, r3, #1
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00a      	beq.n	800faa2 <I2C_Slave_ISR_IT+0x184>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	08db      	lsrs	r3, r3, #3
 800fa90:	f003 0301 	and.w	r3, r3, #1
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d004      	beq.n	800faa2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fa98:	6939      	ldr	r1, [r7, #16]
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f000 f896 	bl	800fbcc <I2C_ITAddrCplt>
 800faa0:	e037      	b.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	085b      	lsrs	r3, r3, #1
 800faa6:	f003 0301 	and.w	r3, r3, #1
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d031      	beq.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	085b      	lsrs	r3, r3, #1
 800fab2:	f003 0301 	and.w	r3, r3, #1
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d02b      	beq.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d018      	beq.n	800faf6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	781a      	ldrb	r2, [r3, #0]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fade:	b29b      	uxth	r3, r3
 800fae0:	3b01      	subs	r3, #1
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faec:	3b01      	subs	r3, #1
 800faee:	b29a      	uxth	r2, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	851a      	strh	r2, [r3, #40]	; 0x28
 800faf4:	e00d      	b.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fafc:	d002      	beq.n	800fb04 <I2C_Slave_ISR_IT+0x1e6>
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d106      	bne.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f000 f8e3 	bl	800fcd0 <I2C_ITSlaveSeqCplt>
 800fb0a:	e002      	b.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fb0c:	bf00      	nop
 800fb0e:	e000      	b.n	800fb12 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fb10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af02      	add	r7, sp, #8
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	4608      	mov	r0, r1
 800fb2e:	4611      	mov	r1, r2
 800fb30:	461a      	mov	r2, r3
 800fb32:	4603      	mov	r3, r0
 800fb34:	817b      	strh	r3, [r7, #10]
 800fb36:	460b      	mov	r3, r1
 800fb38:	813b      	strh	r3, [r7, #8]
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fb3e:	88fb      	ldrh	r3, [r7, #6]
 800fb40:	b2da      	uxtb	r2, r3
 800fb42:	8979      	ldrh	r1, [r7, #10]
 800fb44:	4b20      	ldr	r3, [pc, #128]	; (800fbc8 <I2C_RequestMemoryRead+0xa4>)
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	2300      	movs	r3, #0
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 fc52 	bl	80103f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb50:	69fa      	ldr	r2, [r7, #28]
 800fb52:	69b9      	ldr	r1, [r7, #24]
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f000 fb6b 	bl	8010230 <I2C_WaitOnTXISFlagUntilTimeout>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e02c      	b.n	800fbbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fb64:	88fb      	ldrh	r3, [r7, #6]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d105      	bne.n	800fb76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fb6a:	893b      	ldrh	r3, [r7, #8]
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	629a      	str	r2, [r3, #40]	; 0x28
 800fb74:	e015      	b.n	800fba2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fb76:	893b      	ldrh	r3, [r7, #8]
 800fb78:	0a1b      	lsrs	r3, r3, #8
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	b2da      	uxtb	r2, r3
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb84:	69fa      	ldr	r2, [r7, #28]
 800fb86:	69b9      	ldr	r1, [r7, #24]
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f000 fb51 	bl	8010230 <I2C_WaitOnTXISFlagUntilTimeout>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fb94:	2301      	movs	r3, #1
 800fb96:	e012      	b.n	800fbbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fb98:	893b      	ldrh	r3, [r7, #8]
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2140      	movs	r1, #64	; 0x40
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f000 faff 	bl	80101b0 <I2C_WaitOnFlagUntilTimeout>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	e000      	b.n	800fbbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	80002000 	.word	0x80002000

0800fbcc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fbe2:	2b28      	cmp	r3, #40	; 0x28
 800fbe4:	d168      	bne.n	800fcb8 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	699b      	ldr	r3, [r3, #24]
 800fbec:	0c1b      	lsrs	r3, r3, #16
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	699b      	ldr	r3, [r3, #24]
 800fbfc:	0c1b      	lsrs	r3, r3, #16
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fc04:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc12:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fc20:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d137      	bne.n	800fc9a <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800fc2a:	897b      	ldrh	r3, [r7, #10]
 800fc2c:	09db      	lsrs	r3, r3, #7
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	89bb      	ldrh	r3, [r7, #12]
 800fc32:	4053      	eors	r3, r2
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	f003 0306 	and.w	r3, r3, #6
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d11c      	bne.n	800fc78 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fc3e:	897b      	ldrh	r3, [r7, #10]
 800fc40:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc46:	1c5a      	adds	r2, r3, #1
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d139      	bne.n	800fcc8 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2200      	movs	r2, #0
 800fc58:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2208      	movs	r2, #8
 800fc60:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc6a:	89ba      	ldrh	r2, [r7, #12]
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff fe28 	bl	800f8c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fc76:	e027      	b.n	800fcc8 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800fc78:	893b      	ldrh	r3, [r7, #8]
 800fc7a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc7c:	2104      	movs	r1, #4
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 fbe6 	bl	8010450 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc8c:	89ba      	ldrh	r2, [r7, #12]
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
 800fc90:	4619      	mov	r1, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7ff fe17 	bl	800f8c6 <HAL_I2C_AddrCallback>
}
 800fc98:	e016      	b.n	800fcc8 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc9a:	2104      	movs	r1, #4
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fbd7 	bl	8010450 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fcaa:	89ba      	ldrh	r2, [r7, #12]
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff fe08 	bl	800f8c6 <HAL_I2C_AddrCallback>
}
 800fcb6:	e007      	b.n	800fcc8 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2208      	movs	r2, #8
 800fcbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800fcc8:	bf00      	nop
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	2b29      	cmp	r3, #41	; 0x29
 800fcea:	d112      	bne.n	800fd12 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2228      	movs	r2, #40	; 0x28
 800fcf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2221      	movs	r2, #33	; 0x21
 800fcf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fcfa:	2101      	movs	r1, #1
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fba7 	bl	8010450 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7ff fdc7 	bl	800f89e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fd10:	e017      	b.n	800fd42 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800fd1c:	d111      	bne.n	800fd42 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2228      	movs	r2, #40	; 0x28
 800fd22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2222      	movs	r2, #34	; 0x22
 800fd2a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fd2c:	2102      	movs	r1, #2
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fb8e 	bl	8010450 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff fdb8 	bl	800f8b2 <HAL_I2C_SlaveRxCpltCallback>
}
 800fd42:	bf00      	nop
 800fd44:	3708      	adds	r7, #8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2220      	movs	r2, #32
 800fd68:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800fd6a:	2107      	movs	r1, #7
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fb6f 	bl	8010450 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	685a      	ldr	r2, [r3, #4]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd80:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6859      	ldr	r1, [r3, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	4b58      	ldr	r3, [pc, #352]	; (800fef0 <I2C_ITSlaveCplt+0x1a4>)
 800fd8e:	400b      	ands	r3, r1
 800fd90:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f9c4 	bl	8010120 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	0b9b      	lsrs	r3, r3, #14
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00b      	beq.n	800fdbc <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d018      	beq.n	800fdde <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fdba:	e010      	b.n	800fdde <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	0bdb      	lsrs	r3, r3, #15
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00a      	beq.n	800fdde <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d006      	beq.n	800fdde <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	089b      	lsrs	r3, r3, #2
 800fde2:	f003 0301 	and.w	r3, r3, #1
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d020      	beq.n	800fe2c <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f023 0304 	bic.w	r3, r3, #4
 800fdf0:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	b2d2      	uxtb	r2, r2
 800fdfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00c      	beq.n	800fe2c <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe16:	3b01      	subs	r3, #1
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	3b01      	subs	r3, #1
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d005      	beq.n	800fe42 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe3a:	f043 0204 	orr.w	r2, r3, #4
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d010      	beq.n	800fe80 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f89b 	bl	800ffa0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b28      	cmp	r3, #40	; 0x28
 800fe74:	d138      	bne.n	800fee8 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800fe76:	68f9      	ldr	r1, [r7, #12]
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f83d 	bl	800fef8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fe7e:	e033      	b.n	800fee8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fe88:	d011      	beq.n	800feae <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff ff20 	bl	800fcd0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a18      	ldr	r2, [pc, #96]	; (800fef4 <I2C_ITSlaveCplt+0x1a8>)
 800fe94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2220      	movs	r2, #32
 800fe9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff fd1b 	bl	800f8e2 <HAL_I2C_ListenCpltCallback>
}
 800feac:	e01c      	b.n	800fee8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	2b22      	cmp	r3, #34	; 0x22
 800feb8:	d10b      	bne.n	800fed2 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2220      	movs	r2, #32
 800febe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff fcf1 	bl	800f8b2 <HAL_I2C_SlaveRxCpltCallback>
}
 800fed0:	e00a      	b.n	800fee8 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2220      	movs	r2, #32
 800fed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff fcdb 	bl	800f89e <HAL_I2C_SlaveTxCpltCallback>
}
 800fee8:	bf00      	nop
 800feea:	3710      	adds	r7, #16
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	fe00e800 	.word	0xfe00e800
 800fef4:	ffff0000 	.word	0xffff0000

0800fef8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4a25      	ldr	r2, [pc, #148]	; (800ff9c <I2C_ITListenCplt+0xa4>)
 800ff06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2220      	movs	r2, #32
 800ff12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	089b      	lsrs	r3, r3, #2
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d022      	beq.n	800ff76 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3a:	b2d2      	uxtb	r2, r2
 800ff3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d012      	beq.n	800ff76 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff54:	3b01      	subs	r3, #1
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	3b01      	subs	r3, #1
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6e:	f043 0204 	orr.w	r2, r3, #4
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ff76:	2107      	movs	r1, #7
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 fa69 	bl	8010450 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2210      	movs	r2, #16
 800ff84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff fca7 	bl	800f8e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ff94:	bf00      	nop
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	ffff0000 	.word	0xffff0000

0800ffa0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ffb0:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4a55      	ldr	r2, [pc, #340]	; (8010114 <I2C_ITError+0x174>)
 800ffbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ffd2:	7bfb      	ldrb	r3, [r7, #15]
 800ffd4:	2b28      	cmp	r3, #40	; 0x28
 800ffd6:	d005      	beq.n	800ffe4 <I2C_ITError+0x44>
 800ffd8:	7bfb      	ldrb	r3, [r7, #15]
 800ffda:	2b29      	cmp	r3, #41	; 0x29
 800ffdc:	d002      	beq.n	800ffe4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ffde:	7bfb      	ldrb	r3, [r7, #15]
 800ffe0:	2b2a      	cmp	r3, #42	; 0x2a
 800ffe2:	d10e      	bne.n	8010002 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ffe4:	2103      	movs	r1, #3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fa32 	bl	8010450 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2228      	movs	r2, #40	; 0x28
 800fff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4a46      	ldr	r2, [pc, #280]	; (8010118 <I2C_ITError+0x178>)
 800fffe:	635a      	str	r2, [r3, #52]	; 0x34
 8010000:	e013      	b.n	801002a <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010002:	2107      	movs	r1, #7
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 fa23 	bl	8010450 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010010:	b2db      	uxtb	r3, r3
 8010012:	2b60      	cmp	r3, #96	; 0x60
 8010014:	d003      	beq.n	801001e <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2220      	movs	r2, #32
 801001a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010038:	d123      	bne.n	8010082 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010048:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801004e:	2b00      	cmp	r3, #0
 8010050:	d05c      	beq.n	801010c <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010056:	4a31      	ldr	r2, [pc, #196]	; (801011c <I2C_ITError+0x17c>)
 8010058:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010066:	4618      	mov	r0, r3
 8010068:	f7fe fd5c 	bl	800eb24 <HAL_DMA_Abort_IT>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d04c      	beq.n	801010c <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801007c:	4610      	mov	r0, r2
 801007e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010080:	e044      	b.n	801010c <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801008c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010090:	d123      	bne.n	80100da <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80100a0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d030      	beq.n	801010c <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ae:	4a1b      	ldr	r2, [pc, #108]	; (801011c <I2C_ITError+0x17c>)
 80100b0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe fd30 	bl	800eb24 <HAL_DMA_Abort_IT>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d020      	beq.n	801010c <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80100d4:	4610      	mov	r0, r2
 80100d6:	4798      	blx	r3
}
 80100d8:	e018      	b.n	801010c <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b60      	cmp	r3, #96	; 0x60
 80100e4:	d10b      	bne.n	80100fe <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2220      	movs	r2, #32
 80100ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7ff fc07 	bl	800f90a <HAL_I2C_AbortCpltCallback>
}
 80100fc:	e006      	b.n	801010c <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff fbf5 	bl	800f8f6 <HAL_I2C_ErrorCallback>
}
 801010c:	bf00      	nop
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	ffff0000 	.word	0xffff0000
 8010118:	0800f91f 	.word	0x0800f91f
 801011c:	08010169 	.word	0x08010169

08010120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010120:	b480      	push	{r7}
 8010122:	b083      	sub	sp, #12
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	699b      	ldr	r3, [r3, #24]
 801012e:	f003 0302 	and.w	r3, r3, #2
 8010132:	2b02      	cmp	r3, #2
 8010134:	d103      	bne.n	801013e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2200      	movs	r2, #0
 801013c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	f003 0301 	and.w	r3, r3, #1
 8010148:	2b01      	cmp	r3, #1
 801014a:	d007      	beq.n	801015c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	699a      	ldr	r2, [r3, #24]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f042 0201 	orr.w	r2, r2, #1
 801015a:	619a      	str	r2, [r3, #24]
  }
}
 801015c:	bf00      	nop
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010174:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017a:	2200      	movs	r2, #0
 801017c:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010182:	2200      	movs	r2, #0
 8010184:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801018c:	b2db      	uxtb	r3, r3
 801018e:	2b60      	cmp	r3, #96	; 0x60
 8010190:	d107      	bne.n	80101a2 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2220      	movs	r2, #32
 8010196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fbb5 	bl	800f90a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80101a0:	e002      	b.n	80101a8 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f7ff fba7 	bl	800f8f6 <HAL_I2C_ErrorCallback>
}
 80101a8:	bf00      	nop
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	603b      	str	r3, [r7, #0]
 80101bc:	4613      	mov	r3, r2
 80101be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80101c0:	e022      	b.n	8010208 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c8:	d01e      	beq.n	8010208 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101ca:	f7fe fa7f 	bl	800e6cc <HAL_GetTick>
 80101ce:	4602      	mov	r2, r0
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d302      	bcc.n	80101e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d113      	bne.n	8010208 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101e4:	f043 0220 	orr.w	r2, r3, #32
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2220      	movs	r2, #32
 80101f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2200      	movs	r2, #0
 8010200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8010204:	2301      	movs	r3, #1
 8010206:	e00f      	b.n	8010228 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	699a      	ldr	r2, [r3, #24]
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	4013      	ands	r3, r2
 8010212:	68ba      	ldr	r2, [r7, #8]
 8010214:	429a      	cmp	r2, r3
 8010216:	bf0c      	ite	eq
 8010218:	2301      	moveq	r3, #1
 801021a:	2300      	movne	r3, #0
 801021c:	b2db      	uxtb	r3, r3
 801021e:	461a      	mov	r2, r3
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	429a      	cmp	r2, r3
 8010224:	d0cd      	beq.n	80101c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010226:	2300      	movs	r3, #0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801023c:	e02c      	b.n	8010298 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	68b9      	ldr	r1, [r7, #8]
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f000 f870 	bl	8010328 <I2C_IsAcknowledgeFailed>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d001      	beq.n	8010252 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801024e:	2301      	movs	r3, #1
 8010250:	e02a      	b.n	80102a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010258:	d01e      	beq.n	8010298 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801025a:	f7fe fa37 	bl	800e6cc <HAL_GetTick>
 801025e:	4602      	mov	r2, r0
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	1ad3      	subs	r3, r2, r3
 8010264:	68ba      	ldr	r2, [r7, #8]
 8010266:	429a      	cmp	r2, r3
 8010268:	d302      	bcc.n	8010270 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d113      	bne.n	8010298 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010274:	f043 0220 	orr.w	r2, r3, #32
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2220      	movs	r2, #32
 8010280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2200      	movs	r2, #0
 8010290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010294:	2301      	movs	r3, #1
 8010296:	e007      	b.n	80102a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	699b      	ldr	r3, [r3, #24]
 801029e:	f003 0302 	and.w	r3, r3, #2
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d1cb      	bne.n	801023e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80102a6:	2300      	movs	r3, #0
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80102bc:	e028      	b.n	8010310 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	68b9      	ldr	r1, [r7, #8]
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f000 f830 	bl	8010328 <I2C_IsAcknowledgeFailed>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80102ce:	2301      	movs	r3, #1
 80102d0:	e026      	b.n	8010320 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102d2:	f7fe f9fb 	bl	800e6cc <HAL_GetTick>
 80102d6:	4602      	mov	r2, r0
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	68ba      	ldr	r2, [r7, #8]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d302      	bcc.n	80102e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d113      	bne.n	8010310 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ec:	f043 0220 	orr.w	r2, r3, #32
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2220      	movs	r2, #32
 80102f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801030c:	2301      	movs	r3, #1
 801030e:	e007      	b.n	8010320 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	699b      	ldr	r3, [r3, #24]
 8010316:	f003 0320 	and.w	r3, r3, #32
 801031a:	2b20      	cmp	r3, #32
 801031c:	d1cf      	bne.n	80102be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	699b      	ldr	r3, [r3, #24]
 801033a:	f003 0310 	and.w	r3, r3, #16
 801033e:	2b10      	cmp	r3, #16
 8010340:	d151      	bne.n	80103e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010342:	e022      	b.n	801038a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801034a:	d01e      	beq.n	801038a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801034c:	f7fe f9be 	bl	800e6cc <HAL_GetTick>
 8010350:	4602      	mov	r2, r0
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	429a      	cmp	r2, r3
 801035a:	d302      	bcc.n	8010362 <I2C_IsAcknowledgeFailed+0x3a>
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d113      	bne.n	801038a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010366:	f043 0220 	orr.w	r2, r3, #32
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2220      	movs	r2, #32
 8010372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2200      	movs	r2, #0
 801037a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2200      	movs	r2, #0
 8010382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8010386:	2301      	movs	r3, #1
 8010388:	e02e      	b.n	80103e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	699b      	ldr	r3, [r3, #24]
 8010390:	f003 0320 	and.w	r3, r3, #32
 8010394:	2b20      	cmp	r3, #32
 8010396:	d1d5      	bne.n	8010344 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2210      	movs	r2, #16
 801039e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2220      	movs	r2, #32
 80103a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f7ff feb9 	bl	8010120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	6859      	ldr	r1, [r3, #4]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	4b0d      	ldr	r3, [pc, #52]	; (80103f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80103ba:	400b      	ands	r3, r1
 80103bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103c2:	f043 0204 	orr.w	r2, r3, #4
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2220      	movs	r2, #32
 80103ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2200      	movs	r2, #0
 80103d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80103e2:	2301      	movs	r3, #1
 80103e4:	e000      	b.n	80103e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3710      	adds	r7, #16
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	fe00e800 	.word	0xfe00e800

080103f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	607b      	str	r3, [r7, #4]
 80103fe:	460b      	mov	r3, r1
 8010400:	817b      	strh	r3, [r7, #10]
 8010402:	4613      	mov	r3, r2
 8010404:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	685a      	ldr	r2, [r3, #4]
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	0d5b      	lsrs	r3, r3, #21
 8010410:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <I2C_TransferConfig+0x58>)
 8010416:	430b      	orrs	r3, r1
 8010418:	43db      	mvns	r3, r3
 801041a:	ea02 0103 	and.w	r1, r2, r3
 801041e:	897b      	ldrh	r3, [r7, #10]
 8010420:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8010424:	7a7b      	ldrb	r3, [r7, #9]
 8010426:	041b      	lsls	r3, r3, #16
 8010428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801042c:	431a      	orrs	r2, r3
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	431a      	orrs	r2, r3
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	431a      	orrs	r2, r3
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	430a      	orrs	r2, r1
 801043c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801043e:	bf00      	nop
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	03ff63ff 	.word	0x03ff63ff

08010450 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010450:	b480      	push	{r7}
 8010452:	b085      	sub	sp, #20
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	460b      	mov	r3, r1
 801045a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801045c:	2300      	movs	r3, #0
 801045e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010460:	887b      	ldrh	r3, [r7, #2]
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00f      	beq.n	801048a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8010470:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010478:	b2db      	uxtb	r3, r3
 801047a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801047e:	2b28      	cmp	r3, #40	; 0x28
 8010480:	d003      	beq.n	801048a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010488:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801048a:	887b      	ldrh	r3, [r7, #2]
 801048c:	f003 0302 	and.w	r3, r3, #2
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00f      	beq.n	80104b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801049a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80104a8:	2b28      	cmp	r3, #40	; 0x28
 80104aa:	d003      	beq.n	80104b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80104b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80104b4:	887b      	ldrh	r3, [r7, #2]
 80104b6:	f003 0304 	and.w	r3, r3, #4
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80104c4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80104c6:	887b      	ldrh	r3, [r7, #2]
 80104c8:	f003 0311 	and.w	r3, r3, #17
 80104cc:	2b11      	cmp	r3, #17
 80104ce:	d103      	bne.n	80104d8 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80104d6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80104d8:	887b      	ldrh	r3, [r7, #2]
 80104da:	f003 0312 	and.w	r3, r3, #18
 80104de:	2b12      	cmp	r3, #18
 80104e0:	d103      	bne.n	80104ea <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f043 0320 	orr.w	r3, r3, #32
 80104e8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80104ea:	887b      	ldrh	r3, [r7, #2]
 80104ec:	f003 0312 	and.w	r3, r3, #18
 80104f0:	2b12      	cmp	r3, #18
 80104f2:	d103      	bne.n	80104fc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104fa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6819      	ldr	r1, [r3, #0]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	43da      	mvns	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	400a      	ands	r2, r1
 801050c:	601a      	str	r2, [r3, #0]
}
 801050e:	bf00      	nop
 8010510:	3714      	adds	r7, #20
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr

0801051a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801051a:	b480      	push	{r7}
 801051c:	b083      	sub	sp, #12
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b20      	cmp	r3, #32
 801052e:	d138      	bne.n	80105a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010536:	2b01      	cmp	r3, #1
 8010538:	d101      	bne.n	801053e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801053a:	2302      	movs	r3, #2
 801053c:	e032      	b.n	80105a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2224      	movs	r2, #36	; 0x24
 801054a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f022 0201 	bic.w	r2, r2, #1
 801055c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801056c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6819      	ldr	r1, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	683a      	ldr	r2, [r7, #0]
 801057a:	430a      	orrs	r2, r1
 801057c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f042 0201 	orr.w	r2, r2, #1
 801058c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2220      	movs	r2, #32
 8010592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801059e:	2300      	movs	r3, #0
 80105a0:	e000      	b.n	80105a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80105a2:	2302      	movs	r3, #2
  }
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b085      	sub	sp, #20
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	2b20      	cmp	r3, #32
 80105c4:	d139      	bne.n	801063a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d101      	bne.n	80105d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80105d0:	2302      	movs	r3, #2
 80105d2:	e033      	b.n	801063c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2224      	movs	r2, #36	; 0x24
 80105e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f022 0201 	bic.w	r2, r2, #1
 80105f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010602:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	021b      	lsls	r3, r3, #8
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	4313      	orrs	r3, r2
 801060c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f042 0201 	orr.w	r2, r2, #1
 8010624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2220      	movs	r2, #32
 801062a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2200      	movs	r2, #0
 8010632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010636:	2300      	movs	r3, #0
 8010638:	e000      	b.n	801063c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801063a:	2302      	movs	r3, #2
  }
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d101      	bne.n	801065a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8010656:	2301      	movs	r3, #1
 8010658:	e038      	b.n	80106cc <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8010662:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f245 5255 	movw	r2, #21845	; 0x5555
 801066c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	6852      	ldr	r2, [r2, #4]
 8010676:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	6892      	ldr	r2, [r2, #8]
 8010680:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8010682:	f7fe f823 	bl	800e6cc <HAL_GetTick>
 8010686:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8010688:	e008      	b.n	801069c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801068a:	f7fe f81f 	bl	800e6cc <HAL_GetTick>
 801068e:	4602      	mov	r2, r0
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	1ad3      	subs	r3, r2, r3
 8010694:	2b30      	cmp	r3, #48	; 0x30
 8010696:	d901      	bls.n	801069c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8010698:	2303      	movs	r3, #3
 801069a:	e017      	b.n	80106cc <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d1f1      	bne.n	801068a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	691a      	ldr	r2, [r3, #16]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d005      	beq.n	80106c0 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	68d2      	ldr	r2, [r2, #12]
 80106bc:	611a      	str	r2, [r3, #16]
 80106be:	e004      	b.n	80106ca <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80106c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80106e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80106fe:	4b23      	ldr	r3, [pc, #140]	; (801078c <HAL_PWREx_EnableOverDrive+0x98>)
 8010700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010702:	4a22      	ldr	r2, [pc, #136]	; (801078c <HAL_PWREx_EnableOverDrive+0x98>)
 8010704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010708:	6413      	str	r3, [r2, #64]	; 0x40
 801070a:	4b20      	ldr	r3, [pc, #128]	; (801078c <HAL_PWREx_EnableOverDrive+0x98>)
 801070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010712:	603b      	str	r3, [r7, #0]
 8010714:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8010716:	4b1e      	ldr	r3, [pc, #120]	; (8010790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a1d      	ldr	r2, [pc, #116]	; (8010790 <HAL_PWREx_EnableOverDrive+0x9c>)
 801071c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010720:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010722:	f7fd ffd3 	bl	800e6cc <HAL_GetTick>
 8010726:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010728:	e009      	b.n	801073e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801072a:	f7fd ffcf 	bl	800e6cc <HAL_GetTick>
 801072e:	4602      	mov	r2, r0
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010738:	d901      	bls.n	801073e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 801073a:	2303      	movs	r3, #3
 801073c:	e022      	b.n	8010784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801073e:	4b14      	ldr	r3, [pc, #80]	; (8010790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801074a:	d1ee      	bne.n	801072a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801074c:	4b10      	ldr	r3, [pc, #64]	; (8010790 <HAL_PWREx_EnableOverDrive+0x9c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a0f      	ldr	r2, [pc, #60]	; (8010790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010756:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010758:	f7fd ffb8 	bl	800e6cc <HAL_GetTick>
 801075c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801075e:	e009      	b.n	8010774 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010760:	f7fd ffb4 	bl	800e6cc <HAL_GetTick>
 8010764:	4602      	mov	r2, r0
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	1ad3      	subs	r3, r2, r3
 801076a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801076e:	d901      	bls.n	8010774 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8010770:	2303      	movs	r3, #3
 8010772:	e007      	b.n	8010784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010774:	4b06      	ldr	r3, [pc, #24]	; (8010790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801077c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010780:	d1ee      	bne.n	8010760 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	40023800 	.word	0x40023800
 8010790:	40007000 	.word	0x40007000

08010794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b086      	sub	sp, #24
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801079c:	2300      	movs	r3, #0
 801079e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d101      	bne.n	80107aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80107a6:	2301      	movs	r3, #1
 80107a8:	e29b      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f003 0301 	and.w	r3, r3, #1
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 8087 	beq.w	80108c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80107b8:	4b96      	ldr	r3, [pc, #600]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	f003 030c 	and.w	r3, r3, #12
 80107c0:	2b04      	cmp	r3, #4
 80107c2:	d00c      	beq.n	80107de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80107c4:	4b93      	ldr	r3, [pc, #588]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	f003 030c 	and.w	r3, r3, #12
 80107cc:	2b08      	cmp	r3, #8
 80107ce:	d112      	bne.n	80107f6 <HAL_RCC_OscConfig+0x62>
 80107d0:	4b90      	ldr	r3, [pc, #576]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80107dc:	d10b      	bne.n	80107f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80107de:	4b8d      	ldr	r3, [pc, #564]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d06c      	beq.n	80108c4 <HAL_RCC_OscConfig+0x130>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d168      	bne.n	80108c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	e275      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107fe:	d106      	bne.n	801080e <HAL_RCC_OscConfig+0x7a>
 8010800:	4b84      	ldr	r3, [pc, #528]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a83      	ldr	r2, [pc, #524]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	e02e      	b.n	801086c <HAL_RCC_OscConfig+0xd8>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10c      	bne.n	8010830 <HAL_RCC_OscConfig+0x9c>
 8010816:	4b7f      	ldr	r3, [pc, #508]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4a7e      	ldr	r2, [pc, #504]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801081c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010820:	6013      	str	r3, [r2, #0]
 8010822:	4b7c      	ldr	r3, [pc, #496]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a7b      	ldr	r2, [pc, #492]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801082c:	6013      	str	r3, [r2, #0]
 801082e:	e01d      	b.n	801086c <HAL_RCC_OscConfig+0xd8>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010838:	d10c      	bne.n	8010854 <HAL_RCC_OscConfig+0xc0>
 801083a:	4b76      	ldr	r3, [pc, #472]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4a75      	ldr	r2, [pc, #468]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010844:	6013      	str	r3, [r2, #0]
 8010846:	4b73      	ldr	r3, [pc, #460]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a72      	ldr	r2, [pc, #456]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801084c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010850:	6013      	str	r3, [r2, #0]
 8010852:	e00b      	b.n	801086c <HAL_RCC_OscConfig+0xd8>
 8010854:	4b6f      	ldr	r3, [pc, #444]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4a6e      	ldr	r2, [pc, #440]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801085a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801085e:	6013      	str	r3, [r2, #0]
 8010860:	4b6c      	ldr	r3, [pc, #432]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a6b      	ldr	r2, [pc, #428]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801086a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d013      	beq.n	801089c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010874:	f7fd ff2a 	bl	800e6cc <HAL_GetTick>
 8010878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801087a:	e008      	b.n	801088e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801087c:	f7fd ff26 	bl	800e6cc <HAL_GetTick>
 8010880:	4602      	mov	r2, r0
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	1ad3      	subs	r3, r2, r3
 8010886:	2b64      	cmp	r3, #100	; 0x64
 8010888:	d901      	bls.n	801088e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801088a:	2303      	movs	r3, #3
 801088c:	e229      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801088e:	4b61      	ldr	r3, [pc, #388]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010896:	2b00      	cmp	r3, #0
 8010898:	d0f0      	beq.n	801087c <HAL_RCC_OscConfig+0xe8>
 801089a:	e014      	b.n	80108c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801089c:	f7fd ff16 	bl	800e6cc <HAL_GetTick>
 80108a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80108a2:	e008      	b.n	80108b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80108a4:	f7fd ff12 	bl	800e6cc <HAL_GetTick>
 80108a8:	4602      	mov	r2, r0
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	2b64      	cmp	r3, #100	; 0x64
 80108b0:	d901      	bls.n	80108b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80108b2:	2303      	movs	r3, #3
 80108b4:	e215      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80108b6:	4b57      	ldr	r3, [pc, #348]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d1f0      	bne.n	80108a4 <HAL_RCC_OscConfig+0x110>
 80108c2:	e000      	b.n	80108c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80108c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f003 0302 	and.w	r3, r3, #2
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d069      	beq.n	80109a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80108d2:	4b50      	ldr	r3, [pc, #320]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	f003 030c 	and.w	r3, r3, #12
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00b      	beq.n	80108f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80108de:	4b4d      	ldr	r3, [pc, #308]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	f003 030c 	and.w	r3, r3, #12
 80108e6:	2b08      	cmp	r3, #8
 80108e8:	d11c      	bne.n	8010924 <HAL_RCC_OscConfig+0x190>
 80108ea:	4b4a      	ldr	r3, [pc, #296]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d116      	bne.n	8010924 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80108f6:	4b47      	ldr	r3, [pc, #284]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f003 0302 	and.w	r3, r3, #2
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d005      	beq.n	801090e <HAL_RCC_OscConfig+0x17a>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	2b01      	cmp	r3, #1
 8010908:	d001      	beq.n	801090e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801090a:	2301      	movs	r3, #1
 801090c:	e1e9      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801090e:	4b41      	ldr	r3, [pc, #260]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	493d      	ldr	r1, [pc, #244]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801091e:	4313      	orrs	r3, r2
 8010920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010922:	e040      	b.n	80109a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d023      	beq.n	8010974 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801092c:	4b39      	ldr	r3, [pc, #228]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a38      	ldr	r2, [pc, #224]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010932:	f043 0301 	orr.w	r3, r3, #1
 8010936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010938:	f7fd fec8 	bl	800e6cc <HAL_GetTick>
 801093c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801093e:	e008      	b.n	8010952 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010940:	f7fd fec4 	bl	800e6cc <HAL_GetTick>
 8010944:	4602      	mov	r2, r0
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	2b02      	cmp	r3, #2
 801094c:	d901      	bls.n	8010952 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801094e:	2303      	movs	r3, #3
 8010950:	e1c7      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010952:	4b30      	ldr	r3, [pc, #192]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f003 0302 	and.w	r3, r3, #2
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0f0      	beq.n	8010940 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801095e:	4b2d      	ldr	r3, [pc, #180]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	00db      	lsls	r3, r3, #3
 801096c:	4929      	ldr	r1, [pc, #164]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801096e:	4313      	orrs	r3, r2
 8010970:	600b      	str	r3, [r1, #0]
 8010972:	e018      	b.n	80109a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010974:	4b27      	ldr	r3, [pc, #156]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a26      	ldr	r2, [pc, #152]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801097a:	f023 0301 	bic.w	r3, r3, #1
 801097e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010980:	f7fd fea4 	bl	800e6cc <HAL_GetTick>
 8010984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010986:	e008      	b.n	801099a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010988:	f7fd fea0 	bl	800e6cc <HAL_GetTick>
 801098c:	4602      	mov	r2, r0
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	2b02      	cmp	r3, #2
 8010994:	d901      	bls.n	801099a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8010996:	2303      	movs	r3, #3
 8010998:	e1a3      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801099a:	4b1e      	ldr	r3, [pc, #120]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f003 0302 	and.w	r3, r3, #2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1f0      	bne.n	8010988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f003 0308 	and.w	r3, r3, #8
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d038      	beq.n	8010a24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	695b      	ldr	r3, [r3, #20]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d019      	beq.n	80109ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80109ba:	4b16      	ldr	r3, [pc, #88]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80109bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109be:	4a15      	ldr	r2, [pc, #84]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80109c0:	f043 0301 	orr.w	r3, r3, #1
 80109c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80109c6:	f7fd fe81 	bl	800e6cc <HAL_GetTick>
 80109ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80109cc:	e008      	b.n	80109e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80109ce:	f7fd fe7d 	bl	800e6cc <HAL_GetTick>
 80109d2:	4602      	mov	r2, r0
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	2b02      	cmp	r3, #2
 80109da:	d901      	bls.n	80109e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80109dc:	2303      	movs	r3, #3
 80109de:	e180      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80109e0:	4b0c      	ldr	r3, [pc, #48]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80109e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109e4:	f003 0302 	and.w	r3, r3, #2
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d0f0      	beq.n	80109ce <HAL_RCC_OscConfig+0x23a>
 80109ec:	e01a      	b.n	8010a24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80109ee:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80109f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109f2:	4a08      	ldr	r2, [pc, #32]	; (8010a14 <HAL_RCC_OscConfig+0x280>)
 80109f4:	f023 0301 	bic.w	r3, r3, #1
 80109f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80109fa:	f7fd fe67 	bl	800e6cc <HAL_GetTick>
 80109fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a00:	e00a      	b.n	8010a18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010a02:	f7fd fe63 	bl	800e6cc <HAL_GetTick>
 8010a06:	4602      	mov	r2, r0
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	d903      	bls.n	8010a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8010a10:	2303      	movs	r3, #3
 8010a12:	e166      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
 8010a14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a18:	4b92      	ldr	r3, [pc, #584]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a1c:	f003 0302 	and.w	r3, r3, #2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d1ee      	bne.n	8010a02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 0304 	and.w	r3, r3, #4
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	f000 80a4 	beq.w	8010b7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010a32:	4b8c      	ldr	r3, [pc, #560]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10d      	bne.n	8010a5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8010a3e:	4b89      	ldr	r3, [pc, #548]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a42:	4a88      	ldr	r2, [pc, #544]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a48:	6413      	str	r3, [r2, #64]	; 0x40
 8010a4a:	4b86      	ldr	r3, [pc, #536]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a52:	60bb      	str	r3, [r7, #8]
 8010a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010a56:	2301      	movs	r3, #1
 8010a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010a5a:	4b83      	ldr	r3, [pc, #524]	; (8010c68 <HAL_RCC_OscConfig+0x4d4>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d118      	bne.n	8010a98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8010a66:	4b80      	ldr	r3, [pc, #512]	; (8010c68 <HAL_RCC_OscConfig+0x4d4>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a7f      	ldr	r2, [pc, #508]	; (8010c68 <HAL_RCC_OscConfig+0x4d4>)
 8010a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010a72:	f7fd fe2b 	bl	800e6cc <HAL_GetTick>
 8010a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010a78:	e008      	b.n	8010a8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010a7a:	f7fd fe27 	bl	800e6cc <HAL_GetTick>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	2b64      	cmp	r3, #100	; 0x64
 8010a86:	d901      	bls.n	8010a8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8010a88:	2303      	movs	r3, #3
 8010a8a:	e12a      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010a8c:	4b76      	ldr	r3, [pc, #472]	; (8010c68 <HAL_RCC_OscConfig+0x4d4>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d0f0      	beq.n	8010a7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d106      	bne.n	8010aae <HAL_RCC_OscConfig+0x31a>
 8010aa0:	4b70      	ldr	r3, [pc, #448]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aa4:	4a6f      	ldr	r2, [pc, #444]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010aa6:	f043 0301 	orr.w	r3, r3, #1
 8010aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8010aac:	e02d      	b.n	8010b0a <HAL_RCC_OscConfig+0x376>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d10c      	bne.n	8010ad0 <HAL_RCC_OscConfig+0x33c>
 8010ab6:	4b6b      	ldr	r3, [pc, #428]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aba:	4a6a      	ldr	r2, [pc, #424]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010abc:	f023 0301 	bic.w	r3, r3, #1
 8010ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8010ac2:	4b68      	ldr	r3, [pc, #416]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ac6:	4a67      	ldr	r2, [pc, #412]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010ac8:	f023 0304 	bic.w	r3, r3, #4
 8010acc:	6713      	str	r3, [r2, #112]	; 0x70
 8010ace:	e01c      	b.n	8010b0a <HAL_RCC_OscConfig+0x376>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	689b      	ldr	r3, [r3, #8]
 8010ad4:	2b05      	cmp	r3, #5
 8010ad6:	d10c      	bne.n	8010af2 <HAL_RCC_OscConfig+0x35e>
 8010ad8:	4b62      	ldr	r3, [pc, #392]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010adc:	4a61      	ldr	r2, [pc, #388]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010ade:	f043 0304 	orr.w	r3, r3, #4
 8010ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8010ae4:	4b5f      	ldr	r3, [pc, #380]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ae8:	4a5e      	ldr	r2, [pc, #376]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010aea:	f043 0301 	orr.w	r3, r3, #1
 8010aee:	6713      	str	r3, [r2, #112]	; 0x70
 8010af0:	e00b      	b.n	8010b0a <HAL_RCC_OscConfig+0x376>
 8010af2:	4b5c      	ldr	r3, [pc, #368]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010af6:	4a5b      	ldr	r2, [pc, #364]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010af8:	f023 0301 	bic.w	r3, r3, #1
 8010afc:	6713      	str	r3, [r2, #112]	; 0x70
 8010afe:	4b59      	ldr	r3, [pc, #356]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b02:	4a58      	ldr	r2, [pc, #352]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b04:	f023 0304 	bic.w	r3, r3, #4
 8010b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	689b      	ldr	r3, [r3, #8]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d015      	beq.n	8010b3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b12:	f7fd fddb 	bl	800e6cc <HAL_GetTick>
 8010b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b18:	e00a      	b.n	8010b30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010b1a:	f7fd fdd7 	bl	800e6cc <HAL_GetTick>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d901      	bls.n	8010b30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8010b2c:	2303      	movs	r3, #3
 8010b2e:	e0d8      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b30:	4b4c      	ldr	r3, [pc, #304]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b34:	f003 0302 	and.w	r3, r3, #2
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d0ee      	beq.n	8010b1a <HAL_RCC_OscConfig+0x386>
 8010b3c:	e014      	b.n	8010b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b3e:	f7fd fdc5 	bl	800e6cc <HAL_GetTick>
 8010b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b44:	e00a      	b.n	8010b5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010b46:	f7fd fdc1 	bl	800e6cc <HAL_GetTick>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b54:	4293      	cmp	r3, r2
 8010b56:	d901      	bls.n	8010b5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8010b58:	2303      	movs	r3, #3
 8010b5a:	e0c2      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b5c:	4b41      	ldr	r3, [pc, #260]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b60:	f003 0302 	and.w	r3, r3, #2
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1ee      	bne.n	8010b46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010b68:	7dfb      	ldrb	r3, [r7, #23]
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d105      	bne.n	8010b7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010b6e:	4b3d      	ldr	r3, [pc, #244]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b72:	4a3c      	ldr	r2, [pc, #240]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	699b      	ldr	r3, [r3, #24]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f000 80ae 	beq.w	8010ce0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010b84:	4b37      	ldr	r3, [pc, #220]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	f003 030c 	and.w	r3, r3, #12
 8010b8c:	2b08      	cmp	r3, #8
 8010b8e:	d06d      	beq.n	8010c6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	699b      	ldr	r3, [r3, #24]
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d14b      	bne.n	8010c30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010b98:	4b32      	ldr	r3, [pc, #200]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4a31      	ldr	r2, [pc, #196]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ba4:	f7fd fd92 	bl	800e6cc <HAL_GetTick>
 8010ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010baa:	e008      	b.n	8010bbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010bac:	f7fd fd8e 	bl	800e6cc <HAL_GetTick>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	d901      	bls.n	8010bbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8010bba:	2303      	movs	r3, #3
 8010bbc:	e091      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010bbe:	4b29      	ldr	r3, [pc, #164]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1f0      	bne.n	8010bac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	69da      	ldr	r2, [r3, #28]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	431a      	orrs	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd8:	019b      	lsls	r3, r3, #6
 8010bda:	431a      	orrs	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010be0:	085b      	lsrs	r3, r3, #1
 8010be2:	3b01      	subs	r3, #1
 8010be4:	041b      	lsls	r3, r3, #16
 8010be6:	431a      	orrs	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bec:	061b      	lsls	r3, r3, #24
 8010bee:	431a      	orrs	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf4:	071b      	lsls	r3, r3, #28
 8010bf6:	491b      	ldr	r1, [pc, #108]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010bfc:	4b19      	ldr	r3, [pc, #100]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a18      	ldr	r2, [pc, #96]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c08:	f7fd fd60 	bl	800e6cc <HAL_GetTick>
 8010c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c0e:	e008      	b.n	8010c22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010c10:	f7fd fd5c 	bl	800e6cc <HAL_GetTick>
 8010c14:	4602      	mov	r2, r0
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d901      	bls.n	8010c22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8010c1e:	2303      	movs	r3, #3
 8010c20:	e05f      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c22:	4b10      	ldr	r3, [pc, #64]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d0f0      	beq.n	8010c10 <HAL_RCC_OscConfig+0x47c>
 8010c2e:	e057      	b.n	8010ce0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010c30:	4b0c      	ldr	r3, [pc, #48]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a0b      	ldr	r2, [pc, #44]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c3c:	f7fd fd46 	bl	800e6cc <HAL_GetTick>
 8010c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c42:	e008      	b.n	8010c56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010c44:	f7fd fd42 	bl	800e6cc <HAL_GetTick>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	1ad3      	subs	r3, r2, r3
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	d901      	bls.n	8010c56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8010c52:	2303      	movs	r3, #3
 8010c54:	e045      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c56:	4b03      	ldr	r3, [pc, #12]	; (8010c64 <HAL_RCC_OscConfig+0x4d0>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1f0      	bne.n	8010c44 <HAL_RCC_OscConfig+0x4b0>
 8010c62:	e03d      	b.n	8010ce0 <HAL_RCC_OscConfig+0x54c>
 8010c64:	40023800 	.word	0x40023800
 8010c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8010c6c:	4b1f      	ldr	r3, [pc, #124]	; (8010cec <HAL_RCC_OscConfig+0x558>)
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	d030      	beq.n	8010cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d129      	bne.n	8010cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d122      	bne.n	8010cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010c96:	68fa      	ldr	r2, [r7, #12]
 8010c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010c9c:	4013      	ands	r3, r2
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010ca2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d119      	bne.n	8010cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cb2:	085b      	lsrs	r3, r3, #1
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d10f      	bne.n	8010cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d107      	bne.n	8010cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d001      	beq.n	8010ce0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e000      	b.n	8010ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8010ce0:	2300      	movs	r3, #0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	40023800 	.word	0x40023800

08010cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8010d04:	2301      	movs	r3, #1
 8010d06:	e0d0      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010d08:	4b6a      	ldr	r3, [pc, #424]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f003 030f 	and.w	r3, r3, #15
 8010d10:	683a      	ldr	r2, [r7, #0]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d910      	bls.n	8010d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d16:	4b67      	ldr	r3, [pc, #412]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f023 020f 	bic.w	r2, r3, #15
 8010d1e:	4965      	ldr	r1, [pc, #404]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	4313      	orrs	r3, r2
 8010d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010d26:	4b63      	ldr	r3, [pc, #396]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f003 030f 	and.w	r3, r3, #15
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d001      	beq.n	8010d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8010d34:	2301      	movs	r3, #1
 8010d36:	e0b8      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f003 0302 	and.w	r3, r3, #2
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d020      	beq.n	8010d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f003 0304 	and.w	r3, r3, #4
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d005      	beq.n	8010d5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010d50:	4b59      	ldr	r3, [pc, #356]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d52:	689b      	ldr	r3, [r3, #8]
 8010d54:	4a58      	ldr	r2, [pc, #352]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f003 0308 	and.w	r3, r3, #8
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d005      	beq.n	8010d74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010d68:	4b53      	ldr	r3, [pc, #332]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	4a52      	ldr	r2, [pc, #328]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010d74:	4b50      	ldr	r3, [pc, #320]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	494d      	ldr	r1, [pc, #308]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d82:	4313      	orrs	r3, r2
 8010d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f003 0301 	and.w	r3, r3, #1
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d040      	beq.n	8010e14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d107      	bne.n	8010daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d9a:	4b47      	ldr	r3, [pc, #284]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d115      	bne.n	8010dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010da6:	2301      	movs	r3, #1
 8010da8:	e07f      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d107      	bne.n	8010dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010db2:	4b41      	ldr	r3, [pc, #260]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d109      	bne.n	8010dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e073      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010dc2:	4b3d      	ldr	r3, [pc, #244]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0302 	and.w	r3, r3, #2
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d101      	bne.n	8010dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e06b      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010dd2:	4b39      	ldr	r3, [pc, #228]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	f023 0203 	bic.w	r2, r3, #3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	4936      	ldr	r1, [pc, #216]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010de0:	4313      	orrs	r3, r2
 8010de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010de4:	f7fd fc72 	bl	800e6cc <HAL_GetTick>
 8010de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010dea:	e00a      	b.n	8010e02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dec:	f7fd fc6e 	bl	800e6cc <HAL_GetTick>
 8010df0:	4602      	mov	r2, r0
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d901      	bls.n	8010e02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8010dfe:	2303      	movs	r3, #3
 8010e00:	e053      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e02:	4b2d      	ldr	r3, [pc, #180]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	f003 020c 	and.w	r2, r3, #12
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d1eb      	bne.n	8010dec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010e14:	4b27      	ldr	r3, [pc, #156]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f003 030f 	and.w	r3, r3, #15
 8010e1c:	683a      	ldr	r2, [r7, #0]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d210      	bcs.n	8010e44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010e22:	4b24      	ldr	r3, [pc, #144]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f023 020f 	bic.w	r2, r3, #15
 8010e2a:	4922      	ldr	r1, [pc, #136]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010e32:	4b20      	ldr	r3, [pc, #128]	; (8010eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f003 030f 	and.w	r3, r3, #15
 8010e3a:	683a      	ldr	r2, [r7, #0]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d001      	beq.n	8010e44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8010e40:	2301      	movs	r3, #1
 8010e42:	e032      	b.n	8010eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f003 0304 	and.w	r3, r3, #4
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d008      	beq.n	8010e62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010e50:	4b19      	ldr	r3, [pc, #100]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	4916      	ldr	r1, [pc, #88]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f003 0308 	and.w	r3, r3, #8
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d009      	beq.n	8010e82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010e6e:	4b12      	ldr	r3, [pc, #72]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010e70:	689b      	ldr	r3, [r3, #8]
 8010e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	691b      	ldr	r3, [r3, #16]
 8010e7a:	00db      	lsls	r3, r3, #3
 8010e7c:	490e      	ldr	r1, [pc, #56]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010e82:	f000 f821 	bl	8010ec8 <HAL_RCC_GetSysClockFreq>
 8010e86:	4601      	mov	r1, r0
 8010e88:	4b0b      	ldr	r3, [pc, #44]	; (8010eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	091b      	lsrs	r3, r3, #4
 8010e8e:	f003 030f 	and.w	r3, r3, #15
 8010e92:	4a0a      	ldr	r2, [pc, #40]	; (8010ebc <HAL_RCC_ClockConfig+0x1cc>)
 8010e94:	5cd3      	ldrb	r3, [r2, r3]
 8010e96:	fa21 f303 	lsr.w	r3, r1, r3
 8010e9a:	4a09      	ldr	r2, [pc, #36]	; (8010ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8010e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8010e9e:	4b09      	ldr	r3, [pc, #36]	; (8010ec4 <HAL_RCC_ClockConfig+0x1d4>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fd fbce 	bl	800e644 <HAL_InitTick>

  return HAL_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	40023c00 	.word	0x40023c00
 8010eb8:	40023800 	.word	0x40023800
 8010ebc:	08020690 	.word	0x08020690
 8010ec0:	20000014 	.word	0x20000014
 8010ec4:	20000018 	.word	0x20000018

08010ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	607b      	str	r3, [r7, #4]
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	60fb      	str	r3, [r7, #12]
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8010eda:	2300      	movs	r3, #0
 8010edc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010ede:	4b63      	ldr	r3, [pc, #396]	; (801106c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	f003 030c 	and.w	r3, r3, #12
 8010ee6:	2b04      	cmp	r3, #4
 8010ee8:	d007      	beq.n	8010efa <HAL_RCC_GetSysClockFreq+0x32>
 8010eea:	2b08      	cmp	r3, #8
 8010eec:	d008      	beq.n	8010f00 <HAL_RCC_GetSysClockFreq+0x38>
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f040 80b4 	bne.w	801105c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010ef4:	4b5e      	ldr	r3, [pc, #376]	; (8011070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010ef6:	60bb      	str	r3, [r7, #8]
      break;
 8010ef8:	e0b3      	b.n	8011062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010efa:	4b5d      	ldr	r3, [pc, #372]	; (8011070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010efc:	60bb      	str	r3, [r7, #8]
      break;
 8010efe:	e0b0      	b.n	8011062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010f00:	4b5a      	ldr	r3, [pc, #360]	; (801106c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f08:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8010f0a:	4b58      	ldr	r3, [pc, #352]	; (801106c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d04a      	beq.n	8010fac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010f16:	4b55      	ldr	r3, [pc, #340]	; (801106c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	099b      	lsrs	r3, r3, #6
 8010f1c:	f04f 0400 	mov.w	r4, #0
 8010f20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010f24:	f04f 0200 	mov.w	r2, #0
 8010f28:	ea03 0501 	and.w	r5, r3, r1
 8010f2c:	ea04 0602 	and.w	r6, r4, r2
 8010f30:	4629      	mov	r1, r5
 8010f32:	4632      	mov	r2, r6
 8010f34:	f04f 0300 	mov.w	r3, #0
 8010f38:	f04f 0400 	mov.w	r4, #0
 8010f3c:	0154      	lsls	r4, r2, #5
 8010f3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010f42:	014b      	lsls	r3, r1, #5
 8010f44:	4619      	mov	r1, r3
 8010f46:	4622      	mov	r2, r4
 8010f48:	1b49      	subs	r1, r1, r5
 8010f4a:	eb62 0206 	sbc.w	r2, r2, r6
 8010f4e:	f04f 0300 	mov.w	r3, #0
 8010f52:	f04f 0400 	mov.w	r4, #0
 8010f56:	0194      	lsls	r4, r2, #6
 8010f58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010f5c:	018b      	lsls	r3, r1, #6
 8010f5e:	1a5b      	subs	r3, r3, r1
 8010f60:	eb64 0402 	sbc.w	r4, r4, r2
 8010f64:	f04f 0100 	mov.w	r1, #0
 8010f68:	f04f 0200 	mov.w	r2, #0
 8010f6c:	00e2      	lsls	r2, r4, #3
 8010f6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010f72:	00d9      	lsls	r1, r3, #3
 8010f74:	460b      	mov	r3, r1
 8010f76:	4614      	mov	r4, r2
 8010f78:	195b      	adds	r3, r3, r5
 8010f7a:	eb44 0406 	adc.w	r4, r4, r6
 8010f7e:	f04f 0100 	mov.w	r1, #0
 8010f82:	f04f 0200 	mov.w	r2, #0
 8010f86:	02a2      	lsls	r2, r4, #10
 8010f88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010f8c:	0299      	lsls	r1, r3, #10
 8010f8e:	460b      	mov	r3, r1
 8010f90:	4614      	mov	r4, r2
 8010f92:	4618      	mov	r0, r3
 8010f94:	4621      	mov	r1, r4
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f04f 0400 	mov.w	r4, #0
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	4623      	mov	r3, r4
 8010fa0:	f7f7 f9b6 	bl	8008310 <__aeabi_uldivmod>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	60fb      	str	r3, [r7, #12]
 8010faa:	e049      	b.n	8011040 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010fac:	4b2f      	ldr	r3, [pc, #188]	; (801106c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	099b      	lsrs	r3, r3, #6
 8010fb2:	f04f 0400 	mov.w	r4, #0
 8010fb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010fba:	f04f 0200 	mov.w	r2, #0
 8010fbe:	ea03 0501 	and.w	r5, r3, r1
 8010fc2:	ea04 0602 	and.w	r6, r4, r2
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	4632      	mov	r2, r6
 8010fca:	f04f 0300 	mov.w	r3, #0
 8010fce:	f04f 0400 	mov.w	r4, #0
 8010fd2:	0154      	lsls	r4, r2, #5
 8010fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010fd8:	014b      	lsls	r3, r1, #5
 8010fda:	4619      	mov	r1, r3
 8010fdc:	4622      	mov	r2, r4
 8010fde:	1b49      	subs	r1, r1, r5
 8010fe0:	eb62 0206 	sbc.w	r2, r2, r6
 8010fe4:	f04f 0300 	mov.w	r3, #0
 8010fe8:	f04f 0400 	mov.w	r4, #0
 8010fec:	0194      	lsls	r4, r2, #6
 8010fee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010ff2:	018b      	lsls	r3, r1, #6
 8010ff4:	1a5b      	subs	r3, r3, r1
 8010ff6:	eb64 0402 	sbc.w	r4, r4, r2
 8010ffa:	f04f 0100 	mov.w	r1, #0
 8010ffe:	f04f 0200 	mov.w	r2, #0
 8011002:	00e2      	lsls	r2, r4, #3
 8011004:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011008:	00d9      	lsls	r1, r3, #3
 801100a:	460b      	mov	r3, r1
 801100c:	4614      	mov	r4, r2
 801100e:	195b      	adds	r3, r3, r5
 8011010:	eb44 0406 	adc.w	r4, r4, r6
 8011014:	f04f 0100 	mov.w	r1, #0
 8011018:	f04f 0200 	mov.w	r2, #0
 801101c:	02a2      	lsls	r2, r4, #10
 801101e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8011022:	0299      	lsls	r1, r3, #10
 8011024:	460b      	mov	r3, r1
 8011026:	4614      	mov	r4, r2
 8011028:	4618      	mov	r0, r3
 801102a:	4621      	mov	r1, r4
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f04f 0400 	mov.w	r4, #0
 8011032:	461a      	mov	r2, r3
 8011034:	4623      	mov	r3, r4
 8011036:	f7f7 f96b 	bl	8008310 <__aeabi_uldivmod>
 801103a:	4603      	mov	r3, r0
 801103c:	460c      	mov	r4, r1
 801103e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8011040:	4b0a      	ldr	r3, [pc, #40]	; (801106c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	0c1b      	lsrs	r3, r3, #16
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	3301      	adds	r3, #1
 801104c:	005b      	lsls	r3, r3, #1
 801104e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8011050:	68fa      	ldr	r2, [r7, #12]
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	fbb2 f3f3 	udiv	r3, r2, r3
 8011058:	60bb      	str	r3, [r7, #8]
      break;
 801105a:	e002      	b.n	8011062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801105c:	4b04      	ldr	r3, [pc, #16]	; (8011070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801105e:	60bb      	str	r3, [r7, #8]
      break;
 8011060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011062:	68bb      	ldr	r3, [r7, #8]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3714      	adds	r7, #20
 8011068:	46bd      	mov	sp, r7
 801106a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801106c:	40023800 	.word	0x40023800
 8011070:	00f42400 	.word	0x00f42400

08011074 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011074:	b480      	push	{r7}
 8011076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011078:	4b03      	ldr	r3, [pc, #12]	; (8011088 <HAL_RCC_GetHCLKFreq+0x14>)
 801107a:	681b      	ldr	r3, [r3, #0]
}
 801107c:	4618      	mov	r0, r3
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	20000014 	.word	0x20000014

0801108c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011090:	f7ff fff0 	bl	8011074 <HAL_RCC_GetHCLKFreq>
 8011094:	4601      	mov	r1, r0
 8011096:	4b05      	ldr	r3, [pc, #20]	; (80110ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	0a9b      	lsrs	r3, r3, #10
 801109c:	f003 0307 	and.w	r3, r3, #7
 80110a0:	4a03      	ldr	r2, [pc, #12]	; (80110b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80110a2:	5cd3      	ldrb	r3, [r2, r3]
 80110a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	40023800 	.word	0x40023800
 80110b0:	080206a0 	.word	0x080206a0

080110b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80110b8:	f7ff ffdc 	bl	8011074 <HAL_RCC_GetHCLKFreq>
 80110bc:	4601      	mov	r1, r0
 80110be:	4b05      	ldr	r3, [pc, #20]	; (80110d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	0b5b      	lsrs	r3, r3, #13
 80110c4:	f003 0307 	and.w	r3, r3, #7
 80110c8:	4a03      	ldr	r2, [pc, #12]	; (80110d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80110ca:	5cd3      	ldrb	r3, [r2, r3]
 80110cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	40023800 	.word	0x40023800
 80110d8:	080206a0 	.word	0x080206a0

080110dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b088      	sub	sp, #32
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80110e4:	2300      	movs	r3, #0
 80110e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80110e8:	2300      	movs	r3, #0
 80110ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80110ec:	2300      	movs	r3, #0
 80110ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80110f4:	2300      	movs	r3, #0
 80110f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f003 0301 	and.w	r3, r3, #1
 8011100:	2b00      	cmp	r3, #0
 8011102:	d012      	beq.n	801112a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8011104:	4b69      	ldr	r3, [pc, #420]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	4a68      	ldr	r2, [pc, #416]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801110a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801110e:	6093      	str	r3, [r2, #8]
 8011110:	4b66      	ldr	r3, [pc, #408]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011112:	689a      	ldr	r2, [r3, #8]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011118:	4964      	ldr	r1, [pc, #400]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801111a:	4313      	orrs	r3, r2
 801111c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011122:	2b00      	cmp	r3, #0
 8011124:	d101      	bne.n	801112a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8011126:	2301      	movs	r3, #1
 8011128:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011132:	2b00      	cmp	r3, #0
 8011134:	d017      	beq.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011136:	4b5d      	ldr	r3, [pc, #372]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801113c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011144:	4959      	ldr	r1, [pc, #356]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011146:	4313      	orrs	r3, r2
 8011148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011154:	d101      	bne.n	801115a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8011156:	2301      	movs	r3, #1
 8011158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8011162:	2301      	movs	r3, #1
 8011164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801116e:	2b00      	cmp	r3, #0
 8011170:	d017      	beq.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011172:	4b4e      	ldr	r3, [pc, #312]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011180:	494a      	ldr	r1, [pc, #296]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011182:	4313      	orrs	r3, r2
 8011184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801118c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011190:	d101      	bne.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8011192:	2301      	movs	r3, #1
 8011194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801119a:	2b00      	cmp	r3, #0
 801119c:	d101      	bne.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801119e:	2301      	movs	r3, #1
 80111a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d001      	beq.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80111ae:	2301      	movs	r3, #1
 80111b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f003 0320 	and.w	r3, r3, #32
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 808b 	beq.w	80112d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80111c0:	4b3a      	ldr	r3, [pc, #232]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111c4:	4a39      	ldr	r2, [pc, #228]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111ca:	6413      	str	r3, [r2, #64]	; 0x40
 80111cc:	4b37      	ldr	r3, [pc, #220]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80111ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80111d4:	60bb      	str	r3, [r7, #8]
 80111d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80111d8:	4b35      	ldr	r3, [pc, #212]	; (80112b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4a34      	ldr	r2, [pc, #208]	; (80112b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80111de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111e4:	f7fd fa72 	bl	800e6cc <HAL_GetTick>
 80111e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80111ea:	e008      	b.n	80111fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80111ec:	f7fd fa6e 	bl	800e6cc <HAL_GetTick>
 80111f0:	4602      	mov	r2, r0
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	2b64      	cmp	r3, #100	; 0x64
 80111f8:	d901      	bls.n	80111fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80111fa:	2303      	movs	r3, #3
 80111fc:	e38d      	b.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80111fe:	4b2c      	ldr	r3, [pc, #176]	; (80112b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011206:	2b00      	cmp	r3, #0
 8011208:	d0f0      	beq.n	80111ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801120a:	4b28      	ldr	r3, [pc, #160]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801120e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011212:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d035      	beq.n	8011286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801121e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011222:	693a      	ldr	r2, [r7, #16]
 8011224:	429a      	cmp	r2, r3
 8011226:	d02e      	beq.n	8011286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011228:	4b20      	ldr	r3, [pc, #128]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801122c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011230:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8011232:	4b1e      	ldr	r3, [pc, #120]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011236:	4a1d      	ldr	r2, [pc, #116]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801123c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801123e:	4b1b      	ldr	r3, [pc, #108]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011242:	4a1a      	ldr	r2, [pc, #104]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011248:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801124a:	4a18      	ldr	r2, [pc, #96]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8011250:	4b16      	ldr	r3, [pc, #88]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011254:	f003 0301 	and.w	r3, r3, #1
 8011258:	2b01      	cmp	r3, #1
 801125a:	d114      	bne.n	8011286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801125c:	f7fd fa36 	bl	800e6cc <HAL_GetTick>
 8011260:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011262:	e00a      	b.n	801127a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011264:	f7fd fa32 	bl	800e6cc <HAL_GetTick>
 8011268:	4602      	mov	r2, r0
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	1ad3      	subs	r3, r2, r3
 801126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011272:	4293      	cmp	r3, r2
 8011274:	d901      	bls.n	801127a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8011276:	2303      	movs	r3, #3
 8011278:	e34f      	b.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801127a:	4b0c      	ldr	r3, [pc, #48]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801127c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801127e:	f003 0302 	and.w	r3, r3, #2
 8011282:	2b00      	cmp	r3, #0
 8011284:	d0ee      	beq.n	8011264 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801128e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011292:	d111      	bne.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8011294:	4b05      	ldr	r3, [pc, #20]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011296:	689b      	ldr	r3, [r3, #8]
 8011298:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80112a0:	4b04      	ldr	r3, [pc, #16]	; (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80112a2:	400b      	ands	r3, r1
 80112a4:	4901      	ldr	r1, [pc, #4]	; (80112ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80112a6:	4313      	orrs	r3, r2
 80112a8:	608b      	str	r3, [r1, #8]
 80112aa:	e00b      	b.n	80112c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80112ac:	40023800 	.word	0x40023800
 80112b0:	40007000 	.word	0x40007000
 80112b4:	0ffffcff 	.word	0x0ffffcff
 80112b8:	4bb3      	ldr	r3, [pc, #716]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	4ab2      	ldr	r2, [pc, #712]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80112c2:	6093      	str	r3, [r2, #8]
 80112c4:	4bb0      	ldr	r3, [pc, #704]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80112d0:	49ad      	ldr	r1, [pc, #692]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112d2:	4313      	orrs	r3, r2
 80112d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f003 0310 	and.w	r3, r3, #16
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d010      	beq.n	8011304 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80112e2:	4ba9      	ldr	r3, [pc, #676]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112e8:	4aa7      	ldr	r2, [pc, #668]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80112ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80112f2:	4ba5      	ldr	r3, [pc, #660]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112fc:	49a2      	ldr	r1, [pc, #648]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80112fe:	4313      	orrs	r3, r2
 8011300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801130c:	2b00      	cmp	r3, #0
 801130e:	d00a      	beq.n	8011326 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011310:	4b9d      	ldr	r3, [pc, #628]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801131e:	499a      	ldr	r1, [pc, #616]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011320:	4313      	orrs	r3, r2
 8011322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00a      	beq.n	8011348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011332:	4b95      	ldr	r3, [pc, #596]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011340:	4991      	ldr	r1, [pc, #580]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011342:	4313      	orrs	r3, r2
 8011344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00a      	beq.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011354:	4b8c      	ldr	r3, [pc, #560]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801135a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011362:	4989      	ldr	r1, [pc, #548]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011364:	4313      	orrs	r3, r2
 8011366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00a      	beq.n	801138c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011376:	4b84      	ldr	r3, [pc, #528]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801137c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011384:	4980      	ldr	r1, [pc, #512]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011386:	4313      	orrs	r3, r2
 8011388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00a      	beq.n	80113ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011398:	4b7b      	ldr	r3, [pc, #492]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801139e:	f023 0203 	bic.w	r2, r3, #3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113a6:	4978      	ldr	r1, [pc, #480]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113a8:	4313      	orrs	r3, r2
 80113aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00a      	beq.n	80113d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80113ba:	4b73      	ldr	r3, [pc, #460]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113c0:	f023 020c 	bic.w	r2, r3, #12
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113c8:	496f      	ldr	r1, [pc, #444]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113ca:	4313      	orrs	r3, r2
 80113cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00a      	beq.n	80113f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80113dc:	4b6a      	ldr	r3, [pc, #424]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113ea:	4967      	ldr	r1, [pc, #412]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80113ec:	4313      	orrs	r3, r2
 80113ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00a      	beq.n	8011414 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80113fe:	4b62      	ldr	r3, [pc, #392]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011404:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801140c:	495e      	ldr	r1, [pc, #376]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801140e:	4313      	orrs	r3, r2
 8011410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00a      	beq.n	8011436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011420:	4b59      	ldr	r3, [pc, #356]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801142e:	4956      	ldr	r1, [pc, #344]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011430:	4313      	orrs	r3, r2
 8011432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00a      	beq.n	8011458 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8011442:	4b51      	ldr	r3, [pc, #324]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011448:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011450:	494d      	ldr	r1, [pc, #308]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011452:	4313      	orrs	r3, r2
 8011454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011460:	2b00      	cmp	r3, #0
 8011462:	d00a      	beq.n	801147a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8011464:	4b48      	ldr	r3, [pc, #288]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801146a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011472:	4945      	ldr	r1, [pc, #276]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011474:	4313      	orrs	r3, r2
 8011476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00a      	beq.n	801149c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8011486:	4b40      	ldr	r3, [pc, #256]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801148c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011494:	493c      	ldr	r1, [pc, #240]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011496:	4313      	orrs	r3, r2
 8011498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00a      	beq.n	80114be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80114a8:	4b37      	ldr	r3, [pc, #220]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114b6:	4934      	ldr	r1, [pc, #208]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114b8:	4313      	orrs	r3, r2
 80114ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d011      	beq.n	80114ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80114ca:	4b2f      	ldr	r3, [pc, #188]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114d8:	492b      	ldr	r1, [pc, #172]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80114da:	4313      	orrs	r3, r2
 80114dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80114e8:	d101      	bne.n	80114ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80114ea:	2301      	movs	r3, #1
 80114ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	f003 0308 	and.w	r3, r3, #8
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d001      	beq.n	80114fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80114fa:	2301      	movs	r3, #1
 80114fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011506:	2b00      	cmp	r3, #0
 8011508:	d00a      	beq.n	8011520 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801150a:	4b1f      	ldr	r3, [pc, #124]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011510:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011518:	491b      	ldr	r1, [pc, #108]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801151a:	4313      	orrs	r3, r2
 801151c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00b      	beq.n	8011544 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801152c:	4b16      	ldr	r3, [pc, #88]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011532:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801153c:	4912      	ldr	r1, [pc, #72]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801153e:	4313      	orrs	r3, r2
 8011540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00b      	beq.n	8011568 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8011550:	4b0d      	ldr	r3, [pc, #52]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011556:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011560:	4909      	ldr	r1, [pc, #36]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011562:	4313      	orrs	r3, r2
 8011564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011570:	2b00      	cmp	r3, #0
 8011572:	d00f      	beq.n	8011594 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011574:	4b04      	ldr	r3, [pc, #16]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801157a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011584:	e002      	b.n	801158c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8011586:	bf00      	nop
 8011588:	40023800 	.word	0x40023800
 801158c:	4985      	ldr	r1, [pc, #532]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801158e:	4313      	orrs	r3, r2
 8011590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00b      	beq.n	80115b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80115a0:	4b80      	ldr	r3, [pc, #512]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80115a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115b0:	497c      	ldr	r1, [pc, #496]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80115b2:	4313      	orrs	r3, r2
 80115b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d005      	beq.n	80115ca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80115c6:	f040 80d6 	bne.w	8011776 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80115ca:	4b76      	ldr	r3, [pc, #472]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4a75      	ldr	r2, [pc, #468]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80115d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80115d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80115d6:	f7fd f879 	bl	800e6cc <HAL_GetTick>
 80115da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80115dc:	e008      	b.n	80115f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80115de:	f7fd f875 	bl	800e6cc <HAL_GetTick>
 80115e2:	4602      	mov	r2, r0
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	2b64      	cmp	r3, #100	; 0x64
 80115ea:	d901      	bls.n	80115f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80115ec:	2303      	movs	r3, #3
 80115ee:	e194      	b.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80115f0:	4b6c      	ldr	r3, [pc, #432]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1f0      	bne.n	80115de <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f003 0301 	and.w	r3, r3, #1
 8011604:	2b00      	cmp	r3, #0
 8011606:	d021      	beq.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801160c:	2b00      	cmp	r3, #0
 801160e:	d11d      	bne.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011610:	4b64      	ldr	r3, [pc, #400]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011616:	0c1b      	lsrs	r3, r3, #16
 8011618:	f003 0303 	and.w	r3, r3, #3
 801161c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801161e:	4b61      	ldr	r3, [pc, #388]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011624:	0e1b      	lsrs	r3, r3, #24
 8011626:	f003 030f 	and.w	r3, r3, #15
 801162a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	019a      	lsls	r2, r3, #6
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	041b      	lsls	r3, r3, #16
 8011636:	431a      	orrs	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	061b      	lsls	r3, r3, #24
 801163c:	431a      	orrs	r2, r3
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	071b      	lsls	r3, r3, #28
 8011644:	4957      	ldr	r1, [pc, #348]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011646:	4313      	orrs	r3, r2
 8011648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011654:	2b00      	cmp	r3, #0
 8011656:	d004      	beq.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801165c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011660:	d00a      	beq.n	8011678 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801166a:	2b00      	cmp	r3, #0
 801166c:	d02e      	beq.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011676:	d129      	bne.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011678:	4b4a      	ldr	r3, [pc, #296]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801167a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801167e:	0c1b      	lsrs	r3, r3, #16
 8011680:	f003 0303 	and.w	r3, r3, #3
 8011684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011686:	4b47      	ldr	r3, [pc, #284]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801168c:	0f1b      	lsrs	r3, r3, #28
 801168e:	f003 0307 	and.w	r3, r3, #7
 8011692:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	019a      	lsls	r2, r3, #6
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	041b      	lsls	r3, r3, #16
 801169e:	431a      	orrs	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	061b      	lsls	r3, r3, #24
 80116a6:	431a      	orrs	r2, r3
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	071b      	lsls	r3, r3, #28
 80116ac:	493d      	ldr	r1, [pc, #244]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116ae:	4313      	orrs	r3, r2
 80116b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80116b4:	4b3b      	ldr	r3, [pc, #236]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116ba:	f023 021f 	bic.w	r2, r3, #31
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c2:	3b01      	subs	r3, #1
 80116c4:	4937      	ldr	r1, [pc, #220]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116c6:	4313      	orrs	r3, r2
 80116c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d01d      	beq.n	8011714 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80116d8:	4b32      	ldr	r3, [pc, #200]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116de:	0e1b      	lsrs	r3, r3, #24
 80116e0:	f003 030f 	and.w	r3, r3, #15
 80116e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80116e6:	4b2f      	ldr	r3, [pc, #188]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80116e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116ec:	0f1b      	lsrs	r3, r3, #28
 80116ee:	f003 0307 	and.w	r3, r3, #7
 80116f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	019a      	lsls	r2, r3, #6
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	691b      	ldr	r3, [r3, #16]
 80116fe:	041b      	lsls	r3, r3, #16
 8011700:	431a      	orrs	r2, r3
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	061b      	lsls	r3, r3, #24
 8011706:	431a      	orrs	r2, r3
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	071b      	lsls	r3, r3, #28
 801170c:	4925      	ldr	r1, [pc, #148]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801170e:	4313      	orrs	r3, r2
 8011710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801171c:	2b00      	cmp	r3, #0
 801171e:	d011      	beq.n	8011744 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	019a      	lsls	r2, r3, #6
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	041b      	lsls	r3, r3, #16
 801172c:	431a      	orrs	r2, r3
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	061b      	lsls	r3, r3, #24
 8011734:	431a      	orrs	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	071b      	lsls	r3, r3, #28
 801173c:	4919      	ldr	r1, [pc, #100]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801173e:	4313      	orrs	r3, r2
 8011740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011744:	4b17      	ldr	r3, [pc, #92]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	4a16      	ldr	r2, [pc, #88]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801174a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801174e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011750:	f7fc ffbc 	bl	800e6cc <HAL_GetTick>
 8011754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011756:	e008      	b.n	801176a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011758:	f7fc ffb8 	bl	800e6cc <HAL_GetTick>
 801175c:	4602      	mov	r2, r0
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	1ad3      	subs	r3, r2, r3
 8011762:	2b64      	cmp	r3, #100	; 0x64
 8011764:	d901      	bls.n	801176a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011766:	2303      	movs	r3, #3
 8011768:	e0d7      	b.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801176a:	4b0e      	ldr	r3, [pc, #56]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011772:	2b00      	cmp	r3, #0
 8011774:	d0f0      	beq.n	8011758 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	2b01      	cmp	r3, #1
 801177a:	f040 80cd 	bne.w	8011918 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801177e:	4b09      	ldr	r3, [pc, #36]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4a08      	ldr	r2, [pc, #32]	; (80117a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801178a:	f7fc ff9f 	bl	800e6cc <HAL_GetTick>
 801178e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011790:	e00a      	b.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011792:	f7fc ff9b 	bl	800e6cc <HAL_GetTick>
 8011796:	4602      	mov	r2, r0
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	2b64      	cmp	r3, #100	; 0x64
 801179e:	d903      	bls.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80117a0:	2303      	movs	r3, #3
 80117a2:	e0ba      	b.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80117a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80117a8:	4b5e      	ldr	r3, [pc, #376]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80117b4:	d0ed      	beq.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d003      	beq.n	80117ca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d009      	beq.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d02e      	beq.n	8011834 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d12a      	bne.n	8011834 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80117de:	4b51      	ldr	r3, [pc, #324]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80117e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117e4:	0c1b      	lsrs	r3, r3, #16
 80117e6:	f003 0303 	and.w	r3, r3, #3
 80117ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80117ec:	4b4d      	ldr	r3, [pc, #308]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80117ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117f2:	0f1b      	lsrs	r3, r3, #28
 80117f4:	f003 0307 	and.w	r3, r3, #7
 80117f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	695b      	ldr	r3, [r3, #20]
 80117fe:	019a      	lsls	r2, r3, #6
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	041b      	lsls	r3, r3, #16
 8011804:	431a      	orrs	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	699b      	ldr	r3, [r3, #24]
 801180a:	061b      	lsls	r3, r3, #24
 801180c:	431a      	orrs	r2, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	071b      	lsls	r3, r3, #28
 8011812:	4944      	ldr	r1, [pc, #272]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011814:	4313      	orrs	r3, r2
 8011816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801181a:	4b42      	ldr	r3, [pc, #264]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801181c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011820:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011828:	3b01      	subs	r3, #1
 801182a:	021b      	lsls	r3, r3, #8
 801182c:	493d      	ldr	r1, [pc, #244]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801182e:	4313      	orrs	r3, r2
 8011830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801183c:	2b00      	cmp	r3, #0
 801183e:	d022      	beq.n	8011886 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011848:	d11d      	bne.n	8011886 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801184a:	4b36      	ldr	r3, [pc, #216]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801184c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011850:	0e1b      	lsrs	r3, r3, #24
 8011852:	f003 030f 	and.w	r3, r3, #15
 8011856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011858:	4b32      	ldr	r3, [pc, #200]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801185e:	0f1b      	lsrs	r3, r3, #28
 8011860:	f003 0307 	and.w	r3, r3, #7
 8011864:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	695b      	ldr	r3, [r3, #20]
 801186a:	019a      	lsls	r2, r3, #6
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	041b      	lsls	r3, r3, #16
 8011872:	431a      	orrs	r2, r3
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	061b      	lsls	r3, r3, #24
 8011878:	431a      	orrs	r2, r3
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	071b      	lsls	r3, r3, #28
 801187e:	4929      	ldr	r1, [pc, #164]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011880:	4313      	orrs	r3, r2
 8011882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f003 0308 	and.w	r3, r3, #8
 801188e:	2b00      	cmp	r3, #0
 8011890:	d028      	beq.n	80118e4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011892:	4b24      	ldr	r3, [pc, #144]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011898:	0e1b      	lsrs	r3, r3, #24
 801189a:	f003 030f 	and.w	r3, r3, #15
 801189e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80118a0:	4b20      	ldr	r3, [pc, #128]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118a6:	0c1b      	lsrs	r3, r3, #16
 80118a8:	f003 0303 	and.w	r3, r3, #3
 80118ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	695b      	ldr	r3, [r3, #20]
 80118b2:	019a      	lsls	r2, r3, #6
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	041b      	lsls	r3, r3, #16
 80118b8:	431a      	orrs	r2, r3
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	061b      	lsls	r3, r3, #24
 80118be:	431a      	orrs	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	69db      	ldr	r3, [r3, #28]
 80118c4:	071b      	lsls	r3, r3, #28
 80118c6:	4917      	ldr	r1, [pc, #92]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118c8:	4313      	orrs	r3, r2
 80118ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80118ce:	4b15      	ldr	r3, [pc, #84]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118dc:	4911      	ldr	r1, [pc, #68]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118de:	4313      	orrs	r3, r2
 80118e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80118e4:	4b0f      	ldr	r3, [pc, #60]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a0e      	ldr	r2, [pc, #56]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80118ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80118f0:	f7fc feec 	bl	800e6cc <HAL_GetTick>
 80118f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80118f6:	e008      	b.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80118f8:	f7fc fee8 	bl	800e6cc <HAL_GetTick>
 80118fc:	4602      	mov	r2, r0
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	2b64      	cmp	r3, #100	; 0x64
 8011904:	d901      	bls.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011906:	2303      	movs	r3, #3
 8011908:	e007      	b.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801190a:	4b06      	ldr	r3, [pc, #24]	; (8011924 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011916:	d1ef      	bne.n	80118f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3720      	adds	r7, #32
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	40023800 	.word	0x40023800

08011928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b084      	sub	sp, #16
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d101      	bne.n	801193a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011936:	2301      	movs	r3, #1
 8011938:	e084      	b.n	8011a44 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2200      	movs	r2, #0
 801193e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011946:	b2db      	uxtb	r3, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	d106      	bne.n	801195a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2200      	movs	r2, #0
 8011950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7fc fc8f 	bl	800e278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2202      	movs	r2, #2
 801195e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011970:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801197a:	d902      	bls.n	8011982 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]
 8011980:	e002      	b.n	8011988 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011986:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011990:	d007      	beq.n	80119a2 <HAL_SPI_Init+0x7a>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801199a:	d002      	beq.n	80119a2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d10b      	bne.n	80119c2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80119b2:	d903      	bls.n	80119bc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2202      	movs	r2, #2
 80119b8:	631a      	str	r2, [r3, #48]	; 0x30
 80119ba:	e002      	b.n	80119c2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2201      	movs	r2, #1
 80119c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685a      	ldr	r2, [r3, #4]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	689b      	ldr	r3, [r3, #8]
 80119ca:	431a      	orrs	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	691b      	ldr	r3, [r3, #16]
 80119d0:	431a      	orrs	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	695b      	ldr	r3, [r3, #20]
 80119d6:	431a      	orrs	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	699b      	ldr	r3, [r3, #24]
 80119dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80119e0:	431a      	orrs	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	69db      	ldr	r3, [r3, #28]
 80119e6:	431a      	orrs	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6a1b      	ldr	r3, [r3, #32]
 80119ec:	ea42 0103 	orr.w	r1, r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	430a      	orrs	r2, r1
 80119fa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	0c1b      	lsrs	r3, r3, #16
 8011a02:	f003 0204 	and.w	r2, r3, #4
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0a:	431a      	orrs	r2, r3
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a10:	431a      	orrs	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	ea42 0103 	orr.w	r1, r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	430a      	orrs	r2, r1
 8011a22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	69da      	ldr	r2, [r3, #28]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011a32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b088      	sub	sp, #32
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	603b      	str	r3, [r7, #0]
 8011a58:	4613      	mov	r3, r2
 8011a5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d101      	bne.n	8011a6e <HAL_SPI_Transmit+0x22>
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	e150      	b.n	8011d10 <HAL_SPI_Transmit+0x2c4>
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2201      	movs	r2, #1
 8011a72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011a76:	f7fc fe29 	bl	800e6cc <HAL_GetTick>
 8011a7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011a7c:	88fb      	ldrh	r3, [r7, #6]
 8011a7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d002      	beq.n	8011a92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011a90:	e135      	b.n	8011cfe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <HAL_SPI_Transmit+0x52>
 8011a98:	88fb      	ldrh	r3, [r7, #6]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d102      	bne.n	8011aa4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011aa2:	e12c      	b.n	8011cfe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	68ba      	ldr	r2, [r7, #8]
 8011ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	88fa      	ldrh	r2, [r7, #6]
 8011abc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	88fa      	ldrh	r2, [r7, #6]
 8011ac2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2200      	movs	r2, #0
 8011ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	689b      	ldr	r3, [r3, #8]
 8011aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011aee:	d107      	bne.n	8011b00 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011afe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b0a:	2b40      	cmp	r3, #64	; 0x40
 8011b0c:	d007      	beq.n	8011b1e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011b26:	d94b      	bls.n	8011bc0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d002      	beq.n	8011b36 <HAL_SPI_Transmit+0xea>
 8011b30:	8afb      	ldrh	r3, [r7, #22]
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d13e      	bne.n	8011bb4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b3a:	881a      	ldrh	r2, [r3, #0]
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b46:	1c9a      	adds	r2, r3, #2
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	3b01      	subs	r3, #1
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011b5a:	e02b      	b.n	8011bb4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	f003 0302 	and.w	r3, r3, #2
 8011b66:	2b02      	cmp	r3, #2
 8011b68:	d112      	bne.n	8011b90 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b6e:	881a      	ldrh	r2, [r3, #0]
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b7a:	1c9a      	adds	r2, r3, #2
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	3b01      	subs	r3, #1
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011b8e:	e011      	b.n	8011bb4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b90:	f7fc fd9c 	bl	800e6cc <HAL_GetTick>
 8011b94:	4602      	mov	r2, r0
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	1ad3      	subs	r3, r2, r3
 8011b9a:	683a      	ldr	r2, [r7, #0]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d803      	bhi.n	8011ba8 <HAL_SPI_Transmit+0x15c>
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba6:	d102      	bne.n	8011bae <HAL_SPI_Transmit+0x162>
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d102      	bne.n	8011bb4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011bb2:	e0a4      	b.n	8011cfe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d1ce      	bne.n	8011b5c <HAL_SPI_Transmit+0x110>
 8011bbe:	e07c      	b.n	8011cba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <HAL_SPI_Transmit+0x182>
 8011bc8:	8afb      	ldrh	r3, [r7, #22]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d170      	bne.n	8011cb0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d912      	bls.n	8011bfe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bdc:	881a      	ldrh	r2, [r3, #0]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be8:	1c9a      	adds	r2, r3, #2
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	3b02      	subs	r3, #2
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011bfc:	e058      	b.n	8011cb0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	330c      	adds	r3, #12
 8011c08:	7812      	ldrb	r2, [r2, #0]
 8011c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011c24:	e044      	b.n	8011cb0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	f003 0302 	and.w	r3, r3, #2
 8011c30:	2b02      	cmp	r3, #2
 8011c32:	d12b      	bne.n	8011c8c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d912      	bls.n	8011c64 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c42:	881a      	ldrh	r2, [r3, #0]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c4e:	1c9a      	adds	r2, r3, #2
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	3b02      	subs	r3, #2
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c62:	e025      	b.n	8011cb0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	330c      	adds	r3, #12
 8011c6e:	7812      	ldrb	r2, [r2, #0]
 8011c70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c76:	1c5a      	adds	r2, r3, #1
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	3b01      	subs	r3, #1
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c8a:	e011      	b.n	8011cb0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c8c:	f7fc fd1e 	bl	800e6cc <HAL_GetTick>
 8011c90:	4602      	mov	r2, r0
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	683a      	ldr	r2, [r7, #0]
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d803      	bhi.n	8011ca4 <HAL_SPI_Transmit+0x258>
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca2:	d102      	bne.n	8011caa <HAL_SPI_Transmit+0x25e>
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d102      	bne.n	8011cb0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8011caa:	2303      	movs	r3, #3
 8011cac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011cae:	e026      	b.n	8011cfe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1b5      	bne.n	8011c26 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011cba:	69ba      	ldr	r2, [r7, #24]
 8011cbc:	6839      	ldr	r1, [r7, #0]
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f000 fdf3 	bl	80128aa <SPI_EndRxTxTransaction>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d002      	beq.n	8011cd0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2220      	movs	r2, #32
 8011cce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d10a      	bne.n	8011cee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011cd8:	2300      	movs	r3, #0
 8011cda:	613b      	str	r3, [r7, #16]
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	613b      	str	r3, [r7, #16]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	689b      	ldr	r3, [r3, #8]
 8011cea:	613b      	str	r3, [r7, #16]
 8011cec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d002      	beq.n	8011cfc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	77fb      	strb	r3, [r7, #31]
 8011cfa:	e000      	b.n	8011cfe <HAL_SPI_Transmit+0x2b2>
  }

error:
 8011cfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2201      	movs	r2, #1
 8011d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3720      	adds	r7, #32
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b08a      	sub	sp, #40	; 0x28
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
 8011d24:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011d26:	2301      	movs	r3, #1
 8011d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d101      	bne.n	8011d3e <HAL_SPI_TransmitReceive+0x26>
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	e1fb      	b.n	8012136 <HAL_SPI_TransmitReceive+0x41e>
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2201      	movs	r2, #1
 8011d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011d46:	f7fc fcc1 	bl	800e6cc <HAL_GetTick>
 8011d4a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011d52:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8011d5a:	887b      	ldrh	r3, [r7, #2]
 8011d5c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8011d5e:	887b      	ldrh	r3, [r7, #2]
 8011d60:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011d62:	7efb      	ldrb	r3, [r7, #27]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d00e      	beq.n	8011d86 <HAL_SPI_TransmitReceive+0x6e>
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011d6e:	d106      	bne.n	8011d7e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d102      	bne.n	8011d7e <HAL_SPI_TransmitReceive+0x66>
 8011d78:	7efb      	ldrb	r3, [r7, #27]
 8011d7a:	2b04      	cmp	r3, #4
 8011d7c:	d003      	beq.n	8011d86 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8011d7e:	2302      	movs	r3, #2
 8011d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011d84:	e1cd      	b.n	8012122 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d005      	beq.n	8011d98 <HAL_SPI_TransmitReceive+0x80>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d002      	beq.n	8011d98 <HAL_SPI_TransmitReceive+0x80>
 8011d92:	887b      	ldrh	r3, [r7, #2]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d103      	bne.n	8011da0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8011d98:	2301      	movs	r3, #1
 8011d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011d9e:	e1c0      	b.n	8012122 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b04      	cmp	r3, #4
 8011daa:	d003      	beq.n	8011db4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2205      	movs	r2, #5
 8011db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2200      	movs	r2, #0
 8011db8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	887a      	ldrh	r2, [r7, #2]
 8011dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	887a      	ldrh	r2, [r7, #2]
 8011dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	68ba      	ldr	r2, [r7, #8]
 8011dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	887a      	ldrh	r2, [r7, #2]
 8011dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	887a      	ldrh	r2, [r7, #2]
 8011de0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2200      	movs	r2, #0
 8011de6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2200      	movs	r2, #0
 8011dec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011df6:	d802      	bhi.n	8011dfe <HAL_SPI_TransmitReceive+0xe6>
 8011df8:	8a3b      	ldrh	r3, [r7, #16]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d908      	bls.n	8011e10 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	685a      	ldr	r2, [r3, #4]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011e0c:	605a      	str	r2, [r3, #4]
 8011e0e:	e007      	b.n	8011e20 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	685a      	ldr	r2, [r3, #4]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011e1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e2a:	2b40      	cmp	r3, #64	; 0x40
 8011e2c:	d007      	beq.n	8011e3e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011e46:	d97c      	bls.n	8011f42 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d002      	beq.n	8011e56 <HAL_SPI_TransmitReceive+0x13e>
 8011e50:	8a7b      	ldrh	r3, [r7, #18]
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d169      	bne.n	8011f2a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5a:	881a      	ldrh	r2, [r3, #0]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e66:	1c9a      	adds	r2, r3, #2
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	3b01      	subs	r3, #1
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011e7a:	e056      	b.n	8011f2a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	f003 0302 	and.w	r3, r3, #2
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d11b      	bne.n	8011ec2 <HAL_SPI_TransmitReceive+0x1aa>
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d016      	beq.n	8011ec2 <HAL_SPI_TransmitReceive+0x1aa>
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d113      	bne.n	8011ec2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e9e:	881a      	ldrh	r2, [r3, #0]
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eaa:	1c9a      	adds	r2, r3, #2
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011eb4:	b29b      	uxth	r3, r3
 8011eb6:	3b01      	subs	r3, #1
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	f003 0301 	and.w	r3, r3, #1
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d11c      	bne.n	8011f0a <HAL_SPI_TransmitReceive+0x1f2>
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d016      	beq.n	8011f0a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	68da      	ldr	r2, [r3, #12]
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee6:	b292      	uxth	r2, r2
 8011ee8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eee:	1c9a      	adds	r2, r3, #2
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	3b01      	subs	r3, #1
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011f06:	2301      	movs	r3, #1
 8011f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011f0a:	f7fc fbdf 	bl	800e6cc <HAL_GetTick>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	1ad3      	subs	r3, r2, r3
 8011f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d807      	bhi.n	8011f2a <HAL_SPI_TransmitReceive+0x212>
 8011f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f20:	d003      	beq.n	8011f2a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011f22:	2303      	movs	r3, #3
 8011f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011f28:	e0fb      	b.n	8012122 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d1a3      	bne.n	8011e7c <HAL_SPI_TransmitReceive+0x164>
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d19d      	bne.n	8011e7c <HAL_SPI_TransmitReceive+0x164>
 8011f40:	e0df      	b.n	8012102 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d003      	beq.n	8011f52 <HAL_SPI_TransmitReceive+0x23a>
 8011f4a:	8a7b      	ldrh	r3, [r7, #18]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	f040 80cb 	bne.w	80120e8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d912      	bls.n	8011f82 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f60:	881a      	ldrh	r2, [r3, #0]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f6c:	1c9a      	adds	r2, r3, #2
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	3b02      	subs	r3, #2
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011f80:	e0b2      	b.n	80120e8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	330c      	adds	r3, #12
 8011f8c:	7812      	ldrb	r2, [r2, #0]
 8011f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f94:	1c5a      	adds	r2, r3, #1
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011fa8:	e09e      	b.n	80120e8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	689b      	ldr	r3, [r3, #8]
 8011fb0:	f003 0302 	and.w	r3, r3, #2
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d134      	bne.n	8012022 <HAL_SPI_TransmitReceive+0x30a>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d02f      	beq.n	8012022 <HAL_SPI_TransmitReceive+0x30a>
 8011fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d12c      	bne.n	8012022 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d912      	bls.n	8011ff8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fd6:	881a      	ldrh	r2, [r3, #0]
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe2:	1c9a      	adds	r2, r3, #2
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	3b02      	subs	r3, #2
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011ff6:	e012      	b.n	801201e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	330c      	adds	r3, #12
 8012002:	7812      	ldrb	r2, [r2, #0]
 8012004:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801200a:	1c5a      	adds	r2, r3, #1
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012014:	b29b      	uxth	r3, r3
 8012016:	3b01      	subs	r3, #1
 8012018:	b29a      	uxth	r2, r3
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801201e:	2300      	movs	r3, #0
 8012020:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	f003 0301 	and.w	r3, r3, #1
 801202c:	2b01      	cmp	r3, #1
 801202e:	d148      	bne.n	80120c2 <HAL_SPI_TransmitReceive+0x3aa>
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012036:	b29b      	uxth	r3, r3
 8012038:	2b00      	cmp	r3, #0
 801203a:	d042      	beq.n	80120c2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012042:	b29b      	uxth	r3, r3
 8012044:	2b01      	cmp	r3, #1
 8012046:	d923      	bls.n	8012090 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	68da      	ldr	r2, [r3, #12]
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012052:	b292      	uxth	r2, r2
 8012054:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205a:	1c9a      	adds	r2, r3, #2
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012066:	b29b      	uxth	r3, r3
 8012068:	3b02      	subs	r3, #2
 801206a:	b29a      	uxth	r2, r3
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012078:	b29b      	uxth	r3, r3
 801207a:	2b01      	cmp	r3, #1
 801207c:	d81f      	bhi.n	80120be <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	685a      	ldr	r2, [r3, #4]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801208c:	605a      	str	r2, [r3, #4]
 801208e:	e016      	b.n	80120be <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f103 020c 	add.w	r2, r3, #12
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801209c:	7812      	ldrb	r2, [r2, #0]
 801209e:	b2d2      	uxtb	r2, r2
 80120a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120a6:	1c5a      	adds	r2, r3, #1
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	3b01      	subs	r3, #1
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80120be:	2301      	movs	r3, #1
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80120c2:	f7fc fb03 	bl	800e6cc <HAL_GetTick>
 80120c6:	4602      	mov	r2, r0
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d803      	bhi.n	80120da <HAL_SPI_TransmitReceive+0x3c2>
 80120d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d8:	d102      	bne.n	80120e0 <HAL_SPI_TransmitReceive+0x3c8>
 80120da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d103      	bne.n	80120e8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80120e0:	2303      	movs	r3, #3
 80120e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80120e6:	e01c      	b.n	8012122 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f47f af5b 	bne.w	8011faa <HAL_SPI_TransmitReceive+0x292>
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f47f af54 	bne.w	8011faa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012102:	69fa      	ldr	r2, [r7, #28]
 8012104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f000 fbcf 	bl	80128aa <SPI_EndRxTxTransaction>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d006      	beq.n	8012120 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8012112:	2301      	movs	r3, #1
 8012114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2220      	movs	r2, #32
 801211c:	661a      	str	r2, [r3, #96]	; 0x60
 801211e:	e000      	b.n	8012122 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8012120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2201      	movs	r2, #1
 8012126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2200      	movs	r2, #0
 801212e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8012132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8012136:	4618      	mov	r0, r3
 8012138:	3728      	adds	r7, #40	; 0x28
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
 801214c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801214e:	2300      	movs	r3, #0
 8012150:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012158:	2b01      	cmp	r3, #1
 801215a:	d101      	bne.n	8012160 <HAL_SPI_TransmitReceive_DMA+0x20>
 801215c:	2302      	movs	r3, #2
 801215e:	e16c      	b.n	801243a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801216e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8012176:	7dbb      	ldrb	r3, [r7, #22]
 8012178:	2b01      	cmp	r3, #1
 801217a:	d00d      	beq.n	8012198 <HAL_SPI_TransmitReceive_DMA+0x58>
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012182:	d106      	bne.n	8012192 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d102      	bne.n	8012192 <HAL_SPI_TransmitReceive_DMA+0x52>
 801218c:	7dbb      	ldrb	r3, [r7, #22]
 801218e:	2b04      	cmp	r3, #4
 8012190:	d002      	beq.n	8012198 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8012192:	2302      	movs	r3, #2
 8012194:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012196:	e14b      	b.n	8012430 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d005      	beq.n	80121aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80121a4:	887b      	ldrh	r3, [r7, #2]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d102      	bne.n	80121b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80121aa:	2301      	movs	r3, #1
 80121ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80121ae:	e13f      	b.n	8012430 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	2b04      	cmp	r3, #4
 80121ba:	d003      	beq.n	80121c4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2205      	movs	r2, #5
 80121c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2200      	movs	r2, #0
 80121c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	68ba      	ldr	r2, [r7, #8]
 80121ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	887a      	ldrh	r2, [r7, #2]
 80121d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	887a      	ldrh	r2, [r7, #2]
 80121da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	887a      	ldrh	r2, [r7, #2]
 80121e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	887a      	ldrh	r2, [r7, #2]
 80121ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2200      	movs	r2, #0
 80121f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2200      	movs	r2, #0
 80121fc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	685a      	ldr	r2, [r3, #4]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801220c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012216:	d908      	bls.n	801222a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	685a      	ldr	r2, [r3, #4]
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012226:	605a      	str	r2, [r3, #4]
 8012228:	e06f      	b.n	801230a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	685a      	ldr	r2, [r3, #4]
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012238:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801223e:	699b      	ldr	r3, [r3, #24]
 8012240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012244:	d126      	bne.n	8012294 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801224a:	f003 0301 	and.w	r3, r3, #1
 801224e:	2b00      	cmp	r3, #0
 8012250:	d10f      	bne.n	8012272 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	685a      	ldr	r2, [r3, #4]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012260:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012266:	b29b      	uxth	r3, r3
 8012268:	085b      	lsrs	r3, r3, #1
 801226a:	b29a      	uxth	r2, r3
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012270:	e010      	b.n	8012294 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012280:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012286:	b29b      	uxth	r3, r3
 8012288:	085b      	lsrs	r3, r3, #1
 801228a:	b29b      	uxth	r3, r3
 801228c:	3301      	adds	r3, #1
 801228e:	b29a      	uxth	r2, r3
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012298:	699b      	ldr	r3, [r3, #24]
 801229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801229e:	d134      	bne.n	801230a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	685a      	ldr	r2, [r3, #4]
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80122ae:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	f003 0301 	and.w	r3, r3, #1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d111      	bne.n	80122e4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	685a      	ldr	r2, [r3, #4]
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80122ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	085b      	lsrs	r3, r3, #1
 80122da:	b29a      	uxth	r2, r3
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80122e2:	e012      	b.n	801230a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80122f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	085b      	lsrs	r3, r3, #1
 80122fe:	b29b      	uxth	r3, r3
 8012300:	3301      	adds	r3, #1
 8012302:	b29a      	uxth	r2, r3
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012310:	b2db      	uxtb	r3, r3
 8012312:	2b04      	cmp	r3, #4
 8012314:	d108      	bne.n	8012328 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801231a:	4a4a      	ldr	r2, [pc, #296]	; (8012444 <HAL_SPI_TransmitReceive_DMA+0x304>)
 801231c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012322:	4a49      	ldr	r2, [pc, #292]	; (8012448 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8012324:	63da      	str	r2, [r3, #60]	; 0x3c
 8012326:	e007      	b.n	8012338 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801232c:	4a47      	ldr	r2, [pc, #284]	; (801244c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 801232e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012334:	4a46      	ldr	r2, [pc, #280]	; (8012450 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8012336:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801233c:	4a45      	ldr	r2, [pc, #276]	; (8012454 <HAL_SPI_TransmitReceive_DMA+0x314>)
 801233e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012344:	2200      	movs	r2, #0
 8012346:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	330c      	adds	r3, #12
 8012352:	4619      	mov	r1, r3
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012358:	461a      	mov	r2, r3
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012360:	b29b      	uxth	r3, r3
 8012362:	f7fc fb7f 	bl	800ea64 <HAL_DMA_Start_IT>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00c      	beq.n	8012386 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012370:	f043 0210 	orr.w	r2, r3, #16
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8012378:	2301      	movs	r3, #1
 801237a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2201      	movs	r2, #1
 8012380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8012384:	e054      	b.n	8012430 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f042 0201 	orr.w	r2, r2, #1
 8012394:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801239a:	2200      	movs	r2, #0
 801239c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123a2:	2200      	movs	r2, #0
 80123a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123aa:	2200      	movs	r2, #0
 80123ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123b2:	2200      	movs	r2, #0
 80123b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123be:	4619      	mov	r1, r3
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	330c      	adds	r3, #12
 80123c6:	461a      	mov	r2, r3
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	f7fc fb49 	bl	800ea64 <HAL_DMA_Start_IT>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d00c      	beq.n	80123f2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80123dc:	f043 0210 	orr.w	r2, r3, #16
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80123e4:	2301      	movs	r3, #1
 80123e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2201      	movs	r2, #1
 80123ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80123f0:	e01e      	b.n	8012430 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123fc:	2b40      	cmp	r3, #64	; 0x40
 80123fe:	d007      	beq.n	8012410 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801240e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f042 0220 	orr.w	r2, r2, #32
 801241e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	685a      	ldr	r2, [r3, #4]
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f042 0202 	orr.w	r2, r2, #2
 801242e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2200      	movs	r2, #0
 8012434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8012438:	7dfb      	ldrb	r3, [r7, #23]
}
 801243a:	4618      	mov	r0, r3
 801243c:	3718      	adds	r7, #24
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
 8012442:	bf00      	nop
 8012444:	080125d5 	.word	0x080125d5
 8012448:	080124bd 	.word	0x080124bd
 801244c:	080125f1 	.word	0x080125f1
 8012450:	08012543 	.word	0x08012543
 8012454:	0801260d 	.word	0x0801260d

08012458 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012460:	bf00      	nop
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012474:	bf00      	nop
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012488:	bf00      	nop
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801249c:	bf00      	nop
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr

080124a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80124b0:	bf00      	nop
 80124b2:	370c      	adds	r7, #12
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124c8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80124ca:	f7fc f8ff 	bl	800e6cc <HAL_GetTick>
 80124ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124de:	d02a      	beq.n	8012536 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f022 0220 	bic.w	r2, r2, #32
 80124ee:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	685a      	ldr	r2, [r3, #4]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f022 0203 	bic.w	r2, r2, #3
 80124fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	2164      	movs	r1, #100	; 0x64
 8012504:	68f8      	ldr	r0, [r7, #12]
 8012506:	f000 f978 	bl	80127fa <SPI_EndRxTransaction>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2220      	movs	r2, #32
 8012514:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2200      	movs	r2, #0
 801251a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2201      	movs	r2, #1
 8012522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801252a:	2b00      	cmp	r3, #0
 801252c:	d003      	beq.n	8012536 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f7ff ffba 	bl	80124a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012534:	e002      	b.n	801253c <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f7ff ff8e 	bl	8012458 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b084      	sub	sp, #16
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801254e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012550:	f7fc f8bc 	bl	800e6cc <HAL_GetTick>
 8012554:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012564:	d030      	beq.n	80125c8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	685a      	ldr	r2, [r3, #4]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f022 0220 	bic.w	r2, r2, #32
 8012574:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012576:	68ba      	ldr	r2, [r7, #8]
 8012578:	2164      	movs	r1, #100	; 0x64
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f000 f995 	bl	80128aa <SPI_EndRxTxTransaction>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d005      	beq.n	8012592 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801258a:	f043 0220 	orr.w	r2, r3, #32
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	685a      	ldr	r2, [r3, #4]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	f022 0203 	bic.w	r2, r2, #3
 80125a0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2200      	movs	r2, #0
 80125a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2200      	movs	r2, #0
 80125ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2201      	movs	r2, #1
 80125b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d003      	beq.n	80125c8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f7ff ff71 	bl	80124a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80125c6:	e002      	b.n	80125ce <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff ff4f 	bl	801246c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80125ce:	3710      	adds	r7, #16
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7ff ff4c 	bl	8012480 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80125e8:	bf00      	nop
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	f7ff ff48 	bl	8012494 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012604:	bf00      	nop
 8012606:	3710      	adds	r7, #16
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012618:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f022 0203 	bic.w	r2, r2, #3
 8012628:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801262e:	f043 0210 	orr.w	r2, r3, #16
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2201      	movs	r2, #1
 801263a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801263e:	68f8      	ldr	r0, [r7, #12]
 8012640:	f7ff ff32 	bl	80124a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012644:	bf00      	nop
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	603b      	str	r3, [r7, #0]
 8012658:	4613      	mov	r3, r2
 801265a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801265c:	e04c      	b.n	80126f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012664:	d048      	beq.n	80126f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012666:	f7fc f831 	bl	800e6cc <HAL_GetTick>
 801266a:	4602      	mov	r2, r0
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	429a      	cmp	r2, r3
 8012674:	d902      	bls.n	801267c <SPI_WaitFlagStateUntilTimeout+0x30>
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d13d      	bne.n	80126f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	685a      	ldr	r2, [r3, #4]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801268a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012694:	d111      	bne.n	80126ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801269e:	d004      	beq.n	80126aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	689b      	ldr	r3, [r3, #8]
 80126a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80126a8:	d107      	bne.n	80126ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80126b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80126c2:	d10f      	bne.n	80126e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80126e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2201      	movs	r2, #1
 80126e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2200      	movs	r2, #0
 80126f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80126f4:	2303      	movs	r3, #3
 80126f6:	e00f      	b.n	8012718 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	689a      	ldr	r2, [r3, #8]
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	4013      	ands	r3, r2
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	429a      	cmp	r2, r3
 8012706:	bf0c      	ite	eq
 8012708:	2301      	moveq	r3, #1
 801270a:	2300      	movne	r3, #0
 801270c:	b2db      	uxtb	r3, r3
 801270e:	461a      	mov	r2, r3
 8012710:	79fb      	ldrb	r3, [r7, #7]
 8012712:	429a      	cmp	r2, r3
 8012714:	d1a3      	bne.n	801265e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 801272e:	e057      	b.n	80127e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012736:	d106      	bne.n	8012746 <SPI_WaitFifoStateUntilTimeout+0x26>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d103      	bne.n	8012746 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	330c      	adds	r3, #12
 8012744:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274c:	d048      	beq.n	80127e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801274e:	f7fb ffbd 	bl	800e6cc <HAL_GetTick>
 8012752:	4602      	mov	r2, r0
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	683a      	ldr	r2, [r7, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	d902      	bls.n	8012764 <SPI_WaitFifoStateUntilTimeout+0x44>
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d13d      	bne.n	80127e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	685a      	ldr	r2, [r3, #4]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801277c:	d111      	bne.n	80127a2 <SPI_WaitFifoStateUntilTimeout+0x82>
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012786:	d004      	beq.n	8012792 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012790:	d107      	bne.n	80127a2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80127a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80127aa:	d10f      	bne.n	80127cc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80127ba:	601a      	str	r2, [r3, #0]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	681a      	ldr	r2, [r3, #0]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80127ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2201      	movs	r2, #1
 80127d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2200      	movs	r2, #0
 80127d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80127dc:	2303      	movs	r3, #3
 80127de:	e008      	b.n	80127f2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	689a      	ldr	r2, [r3, #8]
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	4013      	ands	r3, r2
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d19f      	bne.n	8012730 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80127f0:	2300      	movs	r3, #0
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b086      	sub	sp, #24
 80127fe:	af02      	add	r7, sp, #8
 8012800:	60f8      	str	r0, [r7, #12]
 8012802:	60b9      	str	r1, [r7, #8]
 8012804:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801280e:	d111      	bne.n	8012834 <SPI_EndRxTransaction+0x3a>
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	689b      	ldr	r3, [r3, #8]
 8012814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012818:	d004      	beq.n	8012824 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012822:	d107      	bne.n	8012834 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012832:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	2200      	movs	r2, #0
 801283c:	2180      	movs	r1, #128	; 0x80
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f7ff ff04 	bl	801264c <SPI_WaitFlagStateUntilTimeout>
 8012844:	4603      	mov	r3, r0
 8012846:	2b00      	cmp	r3, #0
 8012848:	d007      	beq.n	801285a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801284e:	f043 0220 	orr.w	r2, r3, #32
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012856:	2303      	movs	r3, #3
 8012858:	e023      	b.n	80128a2 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012862:	d11d      	bne.n	80128a0 <SPI_EndRxTransaction+0xa6>
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801286c:	d004      	beq.n	8012878 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012876:	d113      	bne.n	80128a0 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	9300      	str	r3, [sp, #0]
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	2200      	movs	r2, #0
 8012880:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f7ff ff4b 	bl	8012720 <SPI_WaitFifoStateUntilTimeout>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d007      	beq.n	80128a0 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012894:	f043 0220 	orr.w	r2, r3, #32
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801289c:	2303      	movs	r3, #3
 801289e:	e000      	b.n	80128a2 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80128aa:	b580      	push	{r7, lr}
 80128ac:	b086      	sub	sp, #24
 80128ae:	af02      	add	r7, sp, #8
 80128b0:	60f8      	str	r0, [r7, #12]
 80128b2:	60b9      	str	r1, [r7, #8]
 80128b4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	9300      	str	r3, [sp, #0]
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	2200      	movs	r2, #0
 80128be:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f7ff ff2c 	bl	8012720 <SPI_WaitFifoStateUntilTimeout>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d007      	beq.n	80128de <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128d2:	f043 0220 	orr.w	r2, r3, #32
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80128da:	2303      	movs	r3, #3
 80128dc:	e027      	b.n	801292e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	9300      	str	r3, [sp, #0]
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	2200      	movs	r2, #0
 80128e6:	2180      	movs	r1, #128	; 0x80
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f7ff feaf 	bl	801264c <SPI_WaitFlagStateUntilTimeout>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d007      	beq.n	8012904 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128f8:	f043 0220 	orr.w	r2, r3, #32
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012900:	2303      	movs	r3, #3
 8012902:	e014      	b.n	801292e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	2200      	movs	r2, #0
 801290c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f7ff ff05 	bl	8012720 <SPI_WaitFifoStateUntilTimeout>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d007      	beq.n	801292c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012920:	f043 0220 	orr.w	r2, r3, #32
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012928:	2303      	movs	r3, #3
 801292a:	e000      	b.n	801292e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801292c:	2300      	movs	r3, #0
}
 801292e:	4618      	mov	r0, r3
 8012930:	3710      	adds	r7, #16
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b082      	sub	sp, #8
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d101      	bne.n	8012948 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012944:	2301      	movs	r3, #1
 8012946:	e040      	b.n	80129ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801294c:	2b00      	cmp	r3, #0
 801294e:	d106      	bne.n	801295e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7fb fd35 	bl	800e3c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2224      	movs	r2, #36	; 0x24
 8012962:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	f022 0201 	bic.w	r2, r2, #1
 8012972:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f000 fab9 	bl	8012eec <UART_SetConfig>
 801297a:	4603      	mov	r3, r0
 801297c:	2b01      	cmp	r3, #1
 801297e:	d101      	bne.n	8012984 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8012980:	2301      	movs	r3, #1
 8012982:	e022      	b.n	80129ca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012988:	2b00      	cmp	r3, #0
 801298a:	d002      	beq.n	8012992 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 fd57 	bl	8013440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	685a      	ldr	r2, [r3, #4]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80129a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	689a      	ldr	r2, [r3, #8]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80129b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	681a      	ldr	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f042 0201 	orr.w	r2, r2, #1
 80129c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f000 fdde 	bl	8013584 <UART_CheckIdleState>
 80129c8:	4603      	mov	r3, r0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
	...

080129d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b085      	sub	sp, #20
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	4613      	mov	r3, r2
 80129e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129e6:	2b20      	cmp	r3, #32
 80129e8:	f040 808a 	bne.w	8012b00 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d002      	beq.n	80129f8 <HAL_UART_Receive_IT+0x24>
 80129f2:	88fb      	ldrh	r3, [r7, #6]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80129f8:	2301      	movs	r3, #1
 80129fa:	e082      	b.n	8012b02 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d101      	bne.n	8012a0a <HAL_UART_Receive_IT+0x36>
 8012a06:	2302      	movs	r3, #2
 8012a08:	e07b      	b.n	8012b02 <HAL_UART_Receive_IT+0x12e>
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	68ba      	ldr	r2, [r7, #8]
 8012a16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	88fa      	ldrh	r2, [r7, #6]
 8012a1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	88fa      	ldrh	r2, [r7, #6]
 8012a24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a36:	d10e      	bne.n	8012a56 <HAL_UART_Receive_IT+0x82>
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	691b      	ldr	r3, [r3, #16]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d105      	bne.n	8012a4c <HAL_UART_Receive_IT+0x78>
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012a46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012a4a:	e02d      	b.n	8012aa8 <HAL_UART_Receive_IT+0xd4>
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	22ff      	movs	r2, #255	; 0xff
 8012a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012a54:	e028      	b.n	8012aa8 <HAL_UART_Receive_IT+0xd4>
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d10d      	bne.n	8012a7a <HAL_UART_Receive_IT+0xa6>
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	691b      	ldr	r3, [r3, #16]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d104      	bne.n	8012a70 <HAL_UART_Receive_IT+0x9c>
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	22ff      	movs	r2, #255	; 0xff
 8012a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012a6e:	e01b      	b.n	8012aa8 <HAL_UART_Receive_IT+0xd4>
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	227f      	movs	r2, #127	; 0x7f
 8012a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012a78:	e016      	b.n	8012aa8 <HAL_UART_Receive_IT+0xd4>
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	689b      	ldr	r3, [r3, #8]
 8012a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012a82:	d10d      	bne.n	8012aa0 <HAL_UART_Receive_IT+0xcc>
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d104      	bne.n	8012a96 <HAL_UART_Receive_IT+0xc2>
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	227f      	movs	r2, #127	; 0x7f
 8012a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012a94:	e008      	b.n	8012aa8 <HAL_UART_Receive_IT+0xd4>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	223f      	movs	r2, #63	; 0x3f
 8012a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012a9e:	e003      	b.n	8012aa8 <HAL_UART_Receive_IT+0xd4>
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2222      	movs	r2, #34	; 0x22
 8012ab2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	689a      	ldr	r2, [r3, #8]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f042 0201 	orr.w	r2, r2, #1
 8012ac2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	689b      	ldr	r3, [r3, #8]
 8012ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012acc:	d107      	bne.n	8012ade <HAL_UART_Receive_IT+0x10a>
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	691b      	ldr	r3, [r3, #16]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d103      	bne.n	8012ade <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	4a0d      	ldr	r2, [pc, #52]	; (8012b10 <HAL_UART_Receive_IT+0x13c>)
 8012ada:	661a      	str	r2, [r3, #96]	; 0x60
 8012adc:	e002      	b.n	8012ae4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	4a0c      	ldr	r2, [pc, #48]	; (8012b14 <HAL_UART_Receive_IT+0x140>)
 8012ae2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8012afa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8012afc:	2300      	movs	r3, #0
 8012afe:	e000      	b.n	8012b02 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8012b00:	2302      	movs	r3, #2
  }
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3714      	adds	r7, #20
 8012b06:	46bd      	mov	sp, r7
 8012b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0c:	4770      	bx	lr
 8012b0e:	bf00      	nop
 8012b10:	08013957 	.word	0x08013957
 8012b14:	080138b1 	.word	0x080138b1

08012b18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	4613      	mov	r3, r2
 8012b24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b2a:	2b20      	cmp	r3, #32
 8012b2c:	d164      	bne.n	8012bf8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d002      	beq.n	8012b3a <HAL_UART_Transmit_DMA+0x22>
 8012b34:	88fb      	ldrh	r3, [r7, #6]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d101      	bne.n	8012b3e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e05d      	b.n	8012bfa <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d101      	bne.n	8012b4c <HAL_UART_Transmit_DMA+0x34>
 8012b48:	2302      	movs	r3, #2
 8012b4a:	e056      	b.n	8012bfa <HAL_UART_Transmit_DMA+0xe2>
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2201      	movs	r2, #1
 8012b50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	68ba      	ldr	r2, [r7, #8]
 8012b58:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	88fa      	ldrh	r2, [r7, #6]
 8012b5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	88fa      	ldrh	r2, [r7, #6]
 8012b66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2221      	movs	r2, #33	; 0x21
 8012b74:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d02a      	beq.n	8012bd4 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b82:	4a20      	ldr	r2, [pc, #128]	; (8012c04 <HAL_UART_Transmit_DMA+0xec>)
 8012b84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b8a:	4a1f      	ldr	r2, [pc, #124]	; (8012c08 <HAL_UART_Transmit_DMA+0xf0>)
 8012b8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b92:	4a1e      	ldr	r2, [pc, #120]	; (8012c0c <HAL_UART_Transmit_DMA+0xf4>)
 8012b94:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	3328      	adds	r3, #40	; 0x28
 8012bae:	461a      	mov	r2, r3
 8012bb0:	88fb      	ldrh	r3, [r7, #6]
 8012bb2:	f7fb ff57 	bl	800ea64 <HAL_DMA_Start_IT>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00b      	beq.n	8012bd4 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2210      	movs	r2, #16
 8012bc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2220      	movs	r2, #32
 8012bce:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	e012      	b.n	8012bfa <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2240      	movs	r2, #64	; 0x40
 8012bda:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2200      	movs	r2, #0
 8012be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	689a      	ldr	r2, [r3, #8]
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012bf2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	e000      	b.n	8012bfa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8012bf8:	2302      	movs	r3, #2
  }
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	0801376f 	.word	0x0801376f
 8012c08:	080137bf 	.word	0x080137bf
 8012c0c:	080137db 	.word	0x080137db

08012c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b088      	sub	sp, #32
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	69db      	ldr	r3, [r3, #28]
 8012c1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012c30:	69fa      	ldr	r2, [r7, #28]
 8012c32:	f640 030f 	movw	r3, #2063	; 0x80f
 8012c36:	4013      	ands	r3, r2
 8012c38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d113      	bne.n	8012c68 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	f003 0320 	and.w	r3, r3, #32
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d00e      	beq.n	8012c68 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	f003 0320 	and.w	r3, r3, #32
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d009      	beq.n	8012c68 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f000 8114 	beq.w	8012e86 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	4798      	blx	r3
      }
      return;
 8012c66:	e10e      	b.n	8012e86 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f000 80d6 	beq.w	8012e1c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	f003 0301 	and.w	r3, r3, #1
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d105      	bne.n	8012c86 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	f000 80cb 	beq.w	8012e1c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012c86:	69fb      	ldr	r3, [r7, #28]
 8012c88:	f003 0301 	and.w	r3, r3, #1
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00e      	beq.n	8012cae <HAL_UART_IRQHandler+0x9e>
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d009      	beq.n	8012cae <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ca6:	f043 0201 	orr.w	r2, r3, #1
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012cae:	69fb      	ldr	r3, [r7, #28]
 8012cb0:	f003 0302 	and.w	r3, r3, #2
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d00e      	beq.n	8012cd6 <HAL_UART_IRQHandler+0xc6>
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	f003 0301 	and.w	r3, r3, #1
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d009      	beq.n	8012cd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cce:	f043 0204 	orr.w	r2, r3, #4
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	f003 0304 	and.w	r3, r3, #4
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00e      	beq.n	8012cfe <HAL_UART_IRQHandler+0xee>
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d009      	beq.n	8012cfe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2204      	movs	r2, #4
 8012cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cf6:	f043 0202 	orr.w	r2, r3, #2
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	f003 0308 	and.w	r3, r3, #8
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d013      	beq.n	8012d30 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	f003 0320 	and.w	r3, r3, #32
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d104      	bne.n	8012d1c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d009      	beq.n	8012d30 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2208      	movs	r2, #8
 8012d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d28:	f043 0208 	orr.w	r2, r3, #8
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d00f      	beq.n	8012d5a <HAL_UART_IRQHandler+0x14a>
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d00a      	beq.n	8012d5a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d52:	f043 0220 	orr.w	r2, r3, #32
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 8093 	beq.w	8012e8a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	f003 0320 	and.w	r3, r3, #32
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00c      	beq.n	8012d88 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	f003 0320 	and.w	r3, r3, #32
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d007      	beq.n	8012d88 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d003      	beq.n	8012d88 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d98:	2b40      	cmp	r3, #64	; 0x40
 8012d9a:	d004      	beq.n	8012da6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d031      	beq.n	8012e0a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 fcc1 	bl	801372e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012db6:	2b40      	cmp	r3, #64	; 0x40
 8012db8:	d123      	bne.n	8012e02 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	689a      	ldr	r2, [r3, #8]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012dc8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d013      	beq.n	8012dfa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dd6:	4a30      	ldr	r2, [pc, #192]	; (8012e98 <HAL_UART_IRQHandler+0x288>)
 8012dd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fb fea0 	bl	800eb24 <HAL_DMA_Abort_IT>
 8012de4:	4603      	mov	r3, r0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d016      	beq.n	8012e18 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012df0:	687a      	ldr	r2, [r7, #4]
 8012df2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8012df4:	4610      	mov	r0, r2
 8012df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012df8:	e00e      	b.n	8012e18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 f862 	bl	8012ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e00:	e00a      	b.n	8012e18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f000 f85e 	bl	8012ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e08:	e006      	b.n	8012e18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f000 f85a 	bl	8012ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2200      	movs	r2, #0
 8012e14:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8012e16:	e038      	b.n	8012e8a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e18:	bf00      	nop
    return;
 8012e1a:	e036      	b.n	8012e8a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d00d      	beq.n	8012e42 <HAL_UART_IRQHandler+0x232>
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d008      	beq.n	8012e42 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f000 f84c 	bl	8012ed8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012e40:	e026      	b.n	8012e90 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00d      	beq.n	8012e68 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012e4c:	69bb      	ldr	r3, [r7, #24]
 8012e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d008      	beq.n	8012e68 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d017      	beq.n	8012e8e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	4798      	blx	r3
    }
    return;
 8012e66:	e012      	b.n	8012e8e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00e      	beq.n	8012e90 <HAL_UART_IRQHandler+0x280>
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d009      	beq.n	8012e90 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f000 fcfe 	bl	801387e <UART_EndTransmit_IT>
    return;
 8012e82:	bf00      	nop
 8012e84:	e004      	b.n	8012e90 <HAL_UART_IRQHandler+0x280>
      return;
 8012e86:	bf00      	nop
 8012e88:	e002      	b.n	8012e90 <HAL_UART_IRQHandler+0x280>
    return;
 8012e8a:	bf00      	nop
 8012e8c:	e000      	b.n	8012e90 <HAL_UART_IRQHandler+0x280>
    return;
 8012e8e:	bf00      	nop
  }

}
 8012e90:	3720      	adds	r7, #32
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	08013853 	.word	0x08013853

08012e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012ea4:	bf00      	nop
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012ecc:	bf00      	nop
 8012ece:	370c      	adds	r7, #12
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr

08012ed8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b083      	sub	sp, #12
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012ee0:	bf00      	nop
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b088      	sub	sp, #32
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	689a      	ldr	r2, [r3, #8]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	691b      	ldr	r3, [r3, #16]
 8012f04:	431a      	orrs	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	695b      	ldr	r3, [r3, #20]
 8012f0a:	431a      	orrs	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	69db      	ldr	r3, [r3, #28]
 8012f10:	4313      	orrs	r3, r2
 8012f12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	4bb1      	ldr	r3, [pc, #708]	; (80131e0 <UART_SetConfig+0x2f4>)
 8012f1c:	4013      	ands	r3, r2
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	6812      	ldr	r2, [r2, #0]
 8012f22:	6939      	ldr	r1, [r7, #16]
 8012f24:	430b      	orrs	r3, r1
 8012f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	68da      	ldr	r2, [r3, #12]
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	430a      	orrs	r2, r1
 8012f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	699b      	ldr	r3, [r3, #24]
 8012f42:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6a1b      	ldr	r3, [r3, #32]
 8012f48:	693a      	ldr	r2, [r7, #16]
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	689b      	ldr	r3, [r3, #8]
 8012f54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	693a      	ldr	r2, [r7, #16]
 8012f5e:	430a      	orrs	r2, r1
 8012f60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	4a9f      	ldr	r2, [pc, #636]	; (80131e4 <UART_SetConfig+0x2f8>)
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	d121      	bne.n	8012fb0 <UART_SetConfig+0xc4>
 8012f6c:	4b9e      	ldr	r3, [pc, #632]	; (80131e8 <UART_SetConfig+0x2fc>)
 8012f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f72:	f003 0303 	and.w	r3, r3, #3
 8012f76:	2b03      	cmp	r3, #3
 8012f78:	d816      	bhi.n	8012fa8 <UART_SetConfig+0xbc>
 8012f7a:	a201      	add	r2, pc, #4	; (adr r2, 8012f80 <UART_SetConfig+0x94>)
 8012f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f80:	08012f91 	.word	0x08012f91
 8012f84:	08012f9d 	.word	0x08012f9d
 8012f88:	08012f97 	.word	0x08012f97
 8012f8c:	08012fa3 	.word	0x08012fa3
 8012f90:	2301      	movs	r3, #1
 8012f92:	77fb      	strb	r3, [r7, #31]
 8012f94:	e151      	b.n	801323a <UART_SetConfig+0x34e>
 8012f96:	2302      	movs	r3, #2
 8012f98:	77fb      	strb	r3, [r7, #31]
 8012f9a:	e14e      	b.n	801323a <UART_SetConfig+0x34e>
 8012f9c:	2304      	movs	r3, #4
 8012f9e:	77fb      	strb	r3, [r7, #31]
 8012fa0:	e14b      	b.n	801323a <UART_SetConfig+0x34e>
 8012fa2:	2308      	movs	r3, #8
 8012fa4:	77fb      	strb	r3, [r7, #31]
 8012fa6:	e148      	b.n	801323a <UART_SetConfig+0x34e>
 8012fa8:	2310      	movs	r3, #16
 8012faa:	77fb      	strb	r3, [r7, #31]
 8012fac:	bf00      	nop
 8012fae:	e144      	b.n	801323a <UART_SetConfig+0x34e>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a8d      	ldr	r2, [pc, #564]	; (80131ec <UART_SetConfig+0x300>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d134      	bne.n	8013024 <UART_SetConfig+0x138>
 8012fba:	4b8b      	ldr	r3, [pc, #556]	; (80131e8 <UART_SetConfig+0x2fc>)
 8012fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012fc0:	f003 030c 	and.w	r3, r3, #12
 8012fc4:	2b0c      	cmp	r3, #12
 8012fc6:	d829      	bhi.n	801301c <UART_SetConfig+0x130>
 8012fc8:	a201      	add	r2, pc, #4	; (adr r2, 8012fd0 <UART_SetConfig+0xe4>)
 8012fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fce:	bf00      	nop
 8012fd0:	08013005 	.word	0x08013005
 8012fd4:	0801301d 	.word	0x0801301d
 8012fd8:	0801301d 	.word	0x0801301d
 8012fdc:	0801301d 	.word	0x0801301d
 8012fe0:	08013011 	.word	0x08013011
 8012fe4:	0801301d 	.word	0x0801301d
 8012fe8:	0801301d 	.word	0x0801301d
 8012fec:	0801301d 	.word	0x0801301d
 8012ff0:	0801300b 	.word	0x0801300b
 8012ff4:	0801301d 	.word	0x0801301d
 8012ff8:	0801301d 	.word	0x0801301d
 8012ffc:	0801301d 	.word	0x0801301d
 8013000:	08013017 	.word	0x08013017
 8013004:	2300      	movs	r3, #0
 8013006:	77fb      	strb	r3, [r7, #31]
 8013008:	e117      	b.n	801323a <UART_SetConfig+0x34e>
 801300a:	2302      	movs	r3, #2
 801300c:	77fb      	strb	r3, [r7, #31]
 801300e:	e114      	b.n	801323a <UART_SetConfig+0x34e>
 8013010:	2304      	movs	r3, #4
 8013012:	77fb      	strb	r3, [r7, #31]
 8013014:	e111      	b.n	801323a <UART_SetConfig+0x34e>
 8013016:	2308      	movs	r3, #8
 8013018:	77fb      	strb	r3, [r7, #31]
 801301a:	e10e      	b.n	801323a <UART_SetConfig+0x34e>
 801301c:	2310      	movs	r3, #16
 801301e:	77fb      	strb	r3, [r7, #31]
 8013020:	bf00      	nop
 8013022:	e10a      	b.n	801323a <UART_SetConfig+0x34e>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4a71      	ldr	r2, [pc, #452]	; (80131f0 <UART_SetConfig+0x304>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d120      	bne.n	8013070 <UART_SetConfig+0x184>
 801302e:	4b6e      	ldr	r3, [pc, #440]	; (80131e8 <UART_SetConfig+0x2fc>)
 8013030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013038:	2b10      	cmp	r3, #16
 801303a:	d00f      	beq.n	801305c <UART_SetConfig+0x170>
 801303c:	2b10      	cmp	r3, #16
 801303e:	d802      	bhi.n	8013046 <UART_SetConfig+0x15a>
 8013040:	2b00      	cmp	r3, #0
 8013042:	d005      	beq.n	8013050 <UART_SetConfig+0x164>
 8013044:	e010      	b.n	8013068 <UART_SetConfig+0x17c>
 8013046:	2b20      	cmp	r3, #32
 8013048:	d005      	beq.n	8013056 <UART_SetConfig+0x16a>
 801304a:	2b30      	cmp	r3, #48	; 0x30
 801304c:	d009      	beq.n	8013062 <UART_SetConfig+0x176>
 801304e:	e00b      	b.n	8013068 <UART_SetConfig+0x17c>
 8013050:	2300      	movs	r3, #0
 8013052:	77fb      	strb	r3, [r7, #31]
 8013054:	e0f1      	b.n	801323a <UART_SetConfig+0x34e>
 8013056:	2302      	movs	r3, #2
 8013058:	77fb      	strb	r3, [r7, #31]
 801305a:	e0ee      	b.n	801323a <UART_SetConfig+0x34e>
 801305c:	2304      	movs	r3, #4
 801305e:	77fb      	strb	r3, [r7, #31]
 8013060:	e0eb      	b.n	801323a <UART_SetConfig+0x34e>
 8013062:	2308      	movs	r3, #8
 8013064:	77fb      	strb	r3, [r7, #31]
 8013066:	e0e8      	b.n	801323a <UART_SetConfig+0x34e>
 8013068:	2310      	movs	r3, #16
 801306a:	77fb      	strb	r3, [r7, #31]
 801306c:	bf00      	nop
 801306e:	e0e4      	b.n	801323a <UART_SetConfig+0x34e>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	4a5f      	ldr	r2, [pc, #380]	; (80131f4 <UART_SetConfig+0x308>)
 8013076:	4293      	cmp	r3, r2
 8013078:	d120      	bne.n	80130bc <UART_SetConfig+0x1d0>
 801307a:	4b5b      	ldr	r3, [pc, #364]	; (80131e8 <UART_SetConfig+0x2fc>)
 801307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013080:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013084:	2b40      	cmp	r3, #64	; 0x40
 8013086:	d00f      	beq.n	80130a8 <UART_SetConfig+0x1bc>
 8013088:	2b40      	cmp	r3, #64	; 0x40
 801308a:	d802      	bhi.n	8013092 <UART_SetConfig+0x1a6>
 801308c:	2b00      	cmp	r3, #0
 801308e:	d005      	beq.n	801309c <UART_SetConfig+0x1b0>
 8013090:	e010      	b.n	80130b4 <UART_SetConfig+0x1c8>
 8013092:	2b80      	cmp	r3, #128	; 0x80
 8013094:	d005      	beq.n	80130a2 <UART_SetConfig+0x1b6>
 8013096:	2bc0      	cmp	r3, #192	; 0xc0
 8013098:	d009      	beq.n	80130ae <UART_SetConfig+0x1c2>
 801309a:	e00b      	b.n	80130b4 <UART_SetConfig+0x1c8>
 801309c:	2300      	movs	r3, #0
 801309e:	77fb      	strb	r3, [r7, #31]
 80130a0:	e0cb      	b.n	801323a <UART_SetConfig+0x34e>
 80130a2:	2302      	movs	r3, #2
 80130a4:	77fb      	strb	r3, [r7, #31]
 80130a6:	e0c8      	b.n	801323a <UART_SetConfig+0x34e>
 80130a8:	2304      	movs	r3, #4
 80130aa:	77fb      	strb	r3, [r7, #31]
 80130ac:	e0c5      	b.n	801323a <UART_SetConfig+0x34e>
 80130ae:	2308      	movs	r3, #8
 80130b0:	77fb      	strb	r3, [r7, #31]
 80130b2:	e0c2      	b.n	801323a <UART_SetConfig+0x34e>
 80130b4:	2310      	movs	r3, #16
 80130b6:	77fb      	strb	r3, [r7, #31]
 80130b8:	bf00      	nop
 80130ba:	e0be      	b.n	801323a <UART_SetConfig+0x34e>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4a4d      	ldr	r2, [pc, #308]	; (80131f8 <UART_SetConfig+0x30c>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d124      	bne.n	8013110 <UART_SetConfig+0x224>
 80130c6:	4b48      	ldr	r3, [pc, #288]	; (80131e8 <UART_SetConfig+0x2fc>)
 80130c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80130d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130d4:	d012      	beq.n	80130fc <UART_SetConfig+0x210>
 80130d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130da:	d802      	bhi.n	80130e2 <UART_SetConfig+0x1f6>
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d007      	beq.n	80130f0 <UART_SetConfig+0x204>
 80130e0:	e012      	b.n	8013108 <UART_SetConfig+0x21c>
 80130e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130e6:	d006      	beq.n	80130f6 <UART_SetConfig+0x20a>
 80130e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80130ec:	d009      	beq.n	8013102 <UART_SetConfig+0x216>
 80130ee:	e00b      	b.n	8013108 <UART_SetConfig+0x21c>
 80130f0:	2300      	movs	r3, #0
 80130f2:	77fb      	strb	r3, [r7, #31]
 80130f4:	e0a1      	b.n	801323a <UART_SetConfig+0x34e>
 80130f6:	2302      	movs	r3, #2
 80130f8:	77fb      	strb	r3, [r7, #31]
 80130fa:	e09e      	b.n	801323a <UART_SetConfig+0x34e>
 80130fc:	2304      	movs	r3, #4
 80130fe:	77fb      	strb	r3, [r7, #31]
 8013100:	e09b      	b.n	801323a <UART_SetConfig+0x34e>
 8013102:	2308      	movs	r3, #8
 8013104:	77fb      	strb	r3, [r7, #31]
 8013106:	e098      	b.n	801323a <UART_SetConfig+0x34e>
 8013108:	2310      	movs	r3, #16
 801310a:	77fb      	strb	r3, [r7, #31]
 801310c:	bf00      	nop
 801310e:	e094      	b.n	801323a <UART_SetConfig+0x34e>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4a39      	ldr	r2, [pc, #228]	; (80131fc <UART_SetConfig+0x310>)
 8013116:	4293      	cmp	r3, r2
 8013118:	d124      	bne.n	8013164 <UART_SetConfig+0x278>
 801311a:	4b33      	ldr	r3, [pc, #204]	; (80131e8 <UART_SetConfig+0x2fc>)
 801311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013120:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013128:	d012      	beq.n	8013150 <UART_SetConfig+0x264>
 801312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801312e:	d802      	bhi.n	8013136 <UART_SetConfig+0x24a>
 8013130:	2b00      	cmp	r3, #0
 8013132:	d007      	beq.n	8013144 <UART_SetConfig+0x258>
 8013134:	e012      	b.n	801315c <UART_SetConfig+0x270>
 8013136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801313a:	d006      	beq.n	801314a <UART_SetConfig+0x25e>
 801313c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013140:	d009      	beq.n	8013156 <UART_SetConfig+0x26a>
 8013142:	e00b      	b.n	801315c <UART_SetConfig+0x270>
 8013144:	2301      	movs	r3, #1
 8013146:	77fb      	strb	r3, [r7, #31]
 8013148:	e077      	b.n	801323a <UART_SetConfig+0x34e>
 801314a:	2302      	movs	r3, #2
 801314c:	77fb      	strb	r3, [r7, #31]
 801314e:	e074      	b.n	801323a <UART_SetConfig+0x34e>
 8013150:	2304      	movs	r3, #4
 8013152:	77fb      	strb	r3, [r7, #31]
 8013154:	e071      	b.n	801323a <UART_SetConfig+0x34e>
 8013156:	2308      	movs	r3, #8
 8013158:	77fb      	strb	r3, [r7, #31]
 801315a:	e06e      	b.n	801323a <UART_SetConfig+0x34e>
 801315c:	2310      	movs	r3, #16
 801315e:	77fb      	strb	r3, [r7, #31]
 8013160:	bf00      	nop
 8013162:	e06a      	b.n	801323a <UART_SetConfig+0x34e>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a25      	ldr	r2, [pc, #148]	; (8013200 <UART_SetConfig+0x314>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d124      	bne.n	80131b8 <UART_SetConfig+0x2cc>
 801316e:	4b1e      	ldr	r3, [pc, #120]	; (80131e8 <UART_SetConfig+0x2fc>)
 8013170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013174:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801317c:	d012      	beq.n	80131a4 <UART_SetConfig+0x2b8>
 801317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013182:	d802      	bhi.n	801318a <UART_SetConfig+0x29e>
 8013184:	2b00      	cmp	r3, #0
 8013186:	d007      	beq.n	8013198 <UART_SetConfig+0x2ac>
 8013188:	e012      	b.n	80131b0 <UART_SetConfig+0x2c4>
 801318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801318e:	d006      	beq.n	801319e <UART_SetConfig+0x2b2>
 8013190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013194:	d009      	beq.n	80131aa <UART_SetConfig+0x2be>
 8013196:	e00b      	b.n	80131b0 <UART_SetConfig+0x2c4>
 8013198:	2300      	movs	r3, #0
 801319a:	77fb      	strb	r3, [r7, #31]
 801319c:	e04d      	b.n	801323a <UART_SetConfig+0x34e>
 801319e:	2302      	movs	r3, #2
 80131a0:	77fb      	strb	r3, [r7, #31]
 80131a2:	e04a      	b.n	801323a <UART_SetConfig+0x34e>
 80131a4:	2304      	movs	r3, #4
 80131a6:	77fb      	strb	r3, [r7, #31]
 80131a8:	e047      	b.n	801323a <UART_SetConfig+0x34e>
 80131aa:	2308      	movs	r3, #8
 80131ac:	77fb      	strb	r3, [r7, #31]
 80131ae:	e044      	b.n	801323a <UART_SetConfig+0x34e>
 80131b0:	2310      	movs	r3, #16
 80131b2:	77fb      	strb	r3, [r7, #31]
 80131b4:	bf00      	nop
 80131b6:	e040      	b.n	801323a <UART_SetConfig+0x34e>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a11      	ldr	r2, [pc, #68]	; (8013204 <UART_SetConfig+0x318>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d139      	bne.n	8013236 <UART_SetConfig+0x34a>
 80131c2:	4b09      	ldr	r3, [pc, #36]	; (80131e8 <UART_SetConfig+0x2fc>)
 80131c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80131cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80131d0:	d027      	beq.n	8013222 <UART_SetConfig+0x336>
 80131d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80131d6:	d817      	bhi.n	8013208 <UART_SetConfig+0x31c>
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d01c      	beq.n	8013216 <UART_SetConfig+0x32a>
 80131dc:	e027      	b.n	801322e <UART_SetConfig+0x342>
 80131de:	bf00      	nop
 80131e0:	efff69f3 	.word	0xefff69f3
 80131e4:	40011000 	.word	0x40011000
 80131e8:	40023800 	.word	0x40023800
 80131ec:	40004400 	.word	0x40004400
 80131f0:	40004800 	.word	0x40004800
 80131f4:	40004c00 	.word	0x40004c00
 80131f8:	40005000 	.word	0x40005000
 80131fc:	40011400 	.word	0x40011400
 8013200:	40007800 	.word	0x40007800
 8013204:	40007c00 	.word	0x40007c00
 8013208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801320c:	d006      	beq.n	801321c <UART_SetConfig+0x330>
 801320e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013212:	d009      	beq.n	8013228 <UART_SetConfig+0x33c>
 8013214:	e00b      	b.n	801322e <UART_SetConfig+0x342>
 8013216:	2300      	movs	r3, #0
 8013218:	77fb      	strb	r3, [r7, #31]
 801321a:	e00e      	b.n	801323a <UART_SetConfig+0x34e>
 801321c:	2302      	movs	r3, #2
 801321e:	77fb      	strb	r3, [r7, #31]
 8013220:	e00b      	b.n	801323a <UART_SetConfig+0x34e>
 8013222:	2304      	movs	r3, #4
 8013224:	77fb      	strb	r3, [r7, #31]
 8013226:	e008      	b.n	801323a <UART_SetConfig+0x34e>
 8013228:	2308      	movs	r3, #8
 801322a:	77fb      	strb	r3, [r7, #31]
 801322c:	e005      	b.n	801323a <UART_SetConfig+0x34e>
 801322e:	2310      	movs	r3, #16
 8013230:	77fb      	strb	r3, [r7, #31]
 8013232:	bf00      	nop
 8013234:	e001      	b.n	801323a <UART_SetConfig+0x34e>
 8013236:	2310      	movs	r3, #16
 8013238:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	69db      	ldr	r3, [r3, #28]
 801323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013242:	d17f      	bne.n	8013344 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8013244:	7ffb      	ldrb	r3, [r7, #31]
 8013246:	2b08      	cmp	r3, #8
 8013248:	d85c      	bhi.n	8013304 <UART_SetConfig+0x418>
 801324a:	a201      	add	r2, pc, #4	; (adr r2, 8013250 <UART_SetConfig+0x364>)
 801324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013250:	08013275 	.word	0x08013275
 8013254:	08013295 	.word	0x08013295
 8013258:	080132b5 	.word	0x080132b5
 801325c:	08013305 	.word	0x08013305
 8013260:	080132cd 	.word	0x080132cd
 8013264:	08013305 	.word	0x08013305
 8013268:	08013305 	.word	0x08013305
 801326c:	08013305 	.word	0x08013305
 8013270:	080132ed 	.word	0x080132ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013274:	f7fd ff0a 	bl	801108c <HAL_RCC_GetPCLK1Freq>
 8013278:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	005a      	lsls	r2, r3, #1
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	085b      	lsrs	r3, r3, #1
 8013284:	441a      	add	r2, r3
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	fbb2 f3f3 	udiv	r3, r2, r3
 801328e:	b29b      	uxth	r3, r3
 8013290:	61bb      	str	r3, [r7, #24]
        break;
 8013292:	e03a      	b.n	801330a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013294:	f7fd ff0e 	bl	80110b4 <HAL_RCC_GetPCLK2Freq>
 8013298:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	005a      	lsls	r2, r3, #1
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	085b      	lsrs	r3, r3, #1
 80132a4:	441a      	add	r2, r3
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	61bb      	str	r3, [r7, #24]
        break;
 80132b2:	e02a      	b.n	801330a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	085a      	lsrs	r2, r3, #1
 80132ba:	4b5f      	ldr	r3, [pc, #380]	; (8013438 <UART_SetConfig+0x54c>)
 80132bc:	4413      	add	r3, r2
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	6852      	ldr	r2, [r2, #4]
 80132c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	61bb      	str	r3, [r7, #24]
        break;
 80132ca:	e01e      	b.n	801330a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80132cc:	f7fd fdfc 	bl	8010ec8 <HAL_RCC_GetSysClockFreq>
 80132d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	005a      	lsls	r2, r3, #1
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	085b      	lsrs	r3, r3, #1
 80132dc:	441a      	add	r2, r3
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	61bb      	str	r3, [r7, #24]
        break;
 80132ea:	e00e      	b.n	801330a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	085b      	lsrs	r3, r3, #1
 80132f2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80132fe:	b29b      	uxth	r3, r3
 8013300:	61bb      	str	r3, [r7, #24]
        break;
 8013302:	e002      	b.n	801330a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8013304:	2301      	movs	r3, #1
 8013306:	75fb      	strb	r3, [r7, #23]
        break;
 8013308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	2b0f      	cmp	r3, #15
 801330e:	d916      	bls.n	801333e <UART_SetConfig+0x452>
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013316:	d212      	bcs.n	801333e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	b29b      	uxth	r3, r3
 801331c:	f023 030f 	bic.w	r3, r3, #15
 8013320:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	085b      	lsrs	r3, r3, #1
 8013326:	b29b      	uxth	r3, r3
 8013328:	f003 0307 	and.w	r3, r3, #7
 801332c:	b29a      	uxth	r2, r3
 801332e:	897b      	ldrh	r3, [r7, #10]
 8013330:	4313      	orrs	r3, r2
 8013332:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	897a      	ldrh	r2, [r7, #10]
 801333a:	60da      	str	r2, [r3, #12]
 801333c:	e070      	b.n	8013420 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 801333e:	2301      	movs	r3, #1
 8013340:	75fb      	strb	r3, [r7, #23]
 8013342:	e06d      	b.n	8013420 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8013344:	7ffb      	ldrb	r3, [r7, #31]
 8013346:	2b08      	cmp	r3, #8
 8013348:	d859      	bhi.n	80133fe <UART_SetConfig+0x512>
 801334a:	a201      	add	r2, pc, #4	; (adr r2, 8013350 <UART_SetConfig+0x464>)
 801334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013350:	08013375 	.word	0x08013375
 8013354:	08013393 	.word	0x08013393
 8013358:	080133b1 	.word	0x080133b1
 801335c:	080133ff 	.word	0x080133ff
 8013360:	080133c9 	.word	0x080133c9
 8013364:	080133ff 	.word	0x080133ff
 8013368:	080133ff 	.word	0x080133ff
 801336c:	080133ff 	.word	0x080133ff
 8013370:	080133e7 	.word	0x080133e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013374:	f7fd fe8a 	bl	801108c <HAL_RCC_GetPCLK1Freq>
 8013378:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	085a      	lsrs	r2, r3, #1
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	441a      	add	r2, r3
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	fbb2 f3f3 	udiv	r3, r2, r3
 801338c:	b29b      	uxth	r3, r3
 801338e:	61bb      	str	r3, [r7, #24]
        break;
 8013390:	e038      	b.n	8013404 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013392:	f7fd fe8f 	bl	80110b4 <HAL_RCC_GetPCLK2Freq>
 8013396:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	085a      	lsrs	r2, r3, #1
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	441a      	add	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	685b      	ldr	r3, [r3, #4]
 80133a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	61bb      	str	r3, [r7, #24]
        break;
 80133ae:	e029      	b.n	8013404 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	085a      	lsrs	r2, r3, #1
 80133b6:	4b21      	ldr	r3, [pc, #132]	; (801343c <UART_SetConfig+0x550>)
 80133b8:	4413      	add	r3, r2
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	6852      	ldr	r2, [r2, #4]
 80133be:	fbb3 f3f2 	udiv	r3, r3, r2
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	61bb      	str	r3, [r7, #24]
        break;
 80133c6:	e01d      	b.n	8013404 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80133c8:	f7fd fd7e 	bl	8010ec8 <HAL_RCC_GetSysClockFreq>
 80133cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	085a      	lsrs	r2, r3, #1
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	441a      	add	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	61bb      	str	r3, [r7, #24]
        break;
 80133e4:	e00e      	b.n	8013404 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	085b      	lsrs	r3, r3, #1
 80133ec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	61bb      	str	r3, [r7, #24]
        break;
 80133fc:	e002      	b.n	8013404 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80133fe:	2301      	movs	r3, #1
 8013400:	75fb      	strb	r3, [r7, #23]
        break;
 8013402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	2b0f      	cmp	r3, #15
 8013408:	d908      	bls.n	801341c <UART_SetConfig+0x530>
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013410:	d204      	bcs.n	801341c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	69ba      	ldr	r2, [r7, #24]
 8013418:	60da      	str	r2, [r3, #12]
 801341a:	e001      	b.n	8013420 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 801341c:	2301      	movs	r3, #1
 801341e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2200      	movs	r2, #0
 8013424:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2200      	movs	r2, #0
 801342a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 801342c:	7dfb      	ldrb	r3, [r7, #23]
}
 801342e:	4618      	mov	r0, r3
 8013430:	3720      	adds	r7, #32
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	01e84800 	.word	0x01e84800
 801343c:	00f42400 	.word	0x00f42400

08013440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344c:	f003 0301 	and.w	r3, r3, #1
 8013450:	2b00      	cmp	r3, #0
 8013452:	d00a      	beq.n	801346a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	430a      	orrs	r2, r1
 8013468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801346e:	f003 0302 	and.w	r3, r3, #2
 8013472:	2b00      	cmp	r3, #0
 8013474:	d00a      	beq.n	801348c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	430a      	orrs	r2, r1
 801348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013490:	f003 0304 	and.w	r3, r3, #4
 8013494:	2b00      	cmp	r3, #0
 8013496:	d00a      	beq.n	80134ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	430a      	orrs	r2, r1
 80134ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b2:	f003 0308 	and.w	r3, r3, #8
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00a      	beq.n	80134d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	430a      	orrs	r2, r1
 80134ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d4:	f003 0310 	and.w	r3, r3, #16
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00a      	beq.n	80134f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	689b      	ldr	r3, [r3, #8]
 80134e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	430a      	orrs	r2, r1
 80134f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f6:	f003 0320 	and.w	r3, r3, #32
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00a      	beq.n	8013514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	430a      	orrs	r2, r1
 8013512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801351c:	2b00      	cmp	r3, #0
 801351e:	d01a      	beq.n	8013556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	430a      	orrs	r2, r1
 8013534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801353e:	d10a      	bne.n	8013556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	430a      	orrs	r2, r1
 8013554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00a      	beq.n	8013578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	430a      	orrs	r2, r1
 8013576:	605a      	str	r2, [r3, #4]
  }
}
 8013578:	bf00      	nop
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b086      	sub	sp, #24
 8013588:	af02      	add	r7, sp, #8
 801358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2200      	movs	r2, #0
 8013590:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8013592:	f7fb f89b 	bl	800e6cc <HAL_GetTick>
 8013596:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f003 0308 	and.w	r3, r3, #8
 80135a2:	2b08      	cmp	r3, #8
 80135a4:	d10e      	bne.n	80135c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80135a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2200      	movs	r2, #0
 80135b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 f82a 	bl	801360e <UART_WaitOnFlagUntilTimeout>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80135c0:	2303      	movs	r3, #3
 80135c2:	e020      	b.n	8013606 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f003 0304 	and.w	r3, r3, #4
 80135ce:	2b04      	cmp	r3, #4
 80135d0:	d10e      	bne.n	80135f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80135d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2200      	movs	r2, #0
 80135dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f000 f814 	bl	801360e <UART_WaitOnFlagUntilTimeout>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d001      	beq.n	80135f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80135ec:	2303      	movs	r3, #3
 80135ee:	e00a      	b.n	8013606 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2220      	movs	r2, #32
 80135f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2220      	movs	r2, #32
 80135fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8013604:	2300      	movs	r3, #0
}
 8013606:	4618      	mov	r0, r3
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}

0801360e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801360e:	b580      	push	{r7, lr}
 8013610:	b084      	sub	sp, #16
 8013612:	af00      	add	r7, sp, #0
 8013614:	60f8      	str	r0, [r7, #12]
 8013616:	60b9      	str	r1, [r7, #8]
 8013618:	603b      	str	r3, [r7, #0]
 801361a:	4613      	mov	r3, r2
 801361c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801361e:	e05d      	b.n	80136dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013626:	d059      	beq.n	80136dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013628:	f7fb f850 	bl	800e6cc <HAL_GetTick>
 801362c:	4602      	mov	r2, r0
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	1ad3      	subs	r3, r2, r3
 8013632:	69ba      	ldr	r2, [r7, #24]
 8013634:	429a      	cmp	r2, r3
 8013636:	d302      	bcc.n	801363e <UART_WaitOnFlagUntilTimeout+0x30>
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d11b      	bne.n	8013676 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801364c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	689a      	ldr	r2, [r3, #8]
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f022 0201 	bic.w	r2, r2, #1
 801365c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	2220      	movs	r2, #32
 8013662:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2220      	movs	r2, #32
 8013668:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2200      	movs	r2, #0
 801366e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8013672:	2303      	movs	r3, #3
 8013674:	e042      	b.n	80136fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	f003 0304 	and.w	r3, r3, #4
 8013680:	2b00      	cmp	r3, #0
 8013682:	d02b      	beq.n	80136dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	69db      	ldr	r3, [r3, #28]
 801368a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801368e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013692:	d123      	bne.n	80136dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801369c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80136ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	689a      	ldr	r2, [r3, #8]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f022 0201 	bic.w	r2, r2, #1
 80136bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2220      	movs	r2, #32
 80136c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	2220      	movs	r2, #32
 80136c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	2220      	movs	r2, #32
 80136ce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80136d8:	2303      	movs	r3, #3
 80136da:	e00f      	b.n	80136fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	69da      	ldr	r2, [r3, #28]
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	4013      	ands	r3, r2
 80136e6:	68ba      	ldr	r2, [r7, #8]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	bf0c      	ite	eq
 80136ec:	2301      	moveq	r3, #1
 80136ee:	2300      	movne	r3, #0
 80136f0:	b2db      	uxtb	r3, r3
 80136f2:	461a      	mov	r2, r3
 80136f4:	79fb      	ldrb	r3, [r7, #7]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d092      	beq.n	8013620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3710      	adds	r7, #16
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801371a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2220      	movs	r2, #32
 8013720:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013722:	bf00      	nop
 8013724:	370c      	adds	r7, #12
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr

0801372e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801372e:	b480      	push	{r7}
 8013730:	b083      	sub	sp, #12
 8013732:	af00      	add	r7, sp, #0
 8013734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013744:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	689a      	ldr	r2, [r3, #8]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f022 0201 	bic.w	r2, r2, #1
 8013754:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2220      	movs	r2, #32
 801375a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2200      	movs	r2, #0
 8013760:	661a      	str	r2, [r3, #96]	; 0x60
}
 8013762:	bf00      	nop
 8013764:	370c      	adds	r7, #12
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr

0801376e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801376e:	b580      	push	{r7, lr}
 8013770:	b084      	sub	sp, #16
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801377a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	69db      	ldr	r3, [r3, #28]
 8013780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013784:	d014      	beq.n	80137b0 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2200      	movs	r2, #0
 801378a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	689a      	ldr	r2, [r3, #8]
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801379c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137ac:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80137ae:	e002      	b.n	80137b6 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80137b0:	68f8      	ldr	r0, [r7, #12]
 80137b2:	f7ff fb73 	bl	8012e9c <HAL_UART_TxCpltCallback>
}
 80137b6:	bf00      	nop
 80137b8:	3710      	adds	r7, #16
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}

080137be <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80137be:	b580      	push	{r7, lr}
 80137c0:	b084      	sub	sp, #16
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f7ff fb6f 	bl	8012eb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80137d2:	bf00      	nop
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b086      	sub	sp, #24
 80137de:	af00      	add	r7, sp, #0
 80137e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80137f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	689b      	ldr	r3, [r3, #8]
 80137fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137fe:	2b80      	cmp	r3, #128	; 0x80
 8013800:	d109      	bne.n	8013816 <UART_DMAError+0x3c>
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	2b21      	cmp	r3, #33	; 0x21
 8013806:	d106      	bne.n	8013816 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	2200      	movs	r2, #0
 801380c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8013810:	6978      	ldr	r0, [r7, #20]
 8013812:	f7ff ff77 	bl	8013704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013820:	2b40      	cmp	r3, #64	; 0x40
 8013822:	d109      	bne.n	8013838 <UART_DMAError+0x5e>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2b22      	cmp	r3, #34	; 0x22
 8013828:	d106      	bne.n	8013838 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	2200      	movs	r2, #0
 801382e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8013832:	6978      	ldr	r0, [r7, #20]
 8013834:	f7ff ff7b 	bl	801372e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801383c:	f043 0210 	orr.w	r2, r3, #16
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013844:	6978      	ldr	r0, [r7, #20]
 8013846:	f7ff fb3d 	bl	8012ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801384a:	bf00      	nop
 801384c:	3718      	adds	r7, #24
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b084      	sub	sp, #16
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2200      	movs	r2, #0
 801386c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013870:	68f8      	ldr	r0, [r7, #12]
 8013872:	f7ff fb27 	bl	8012ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013876:	bf00      	nop
 8013878:	3710      	adds	r7, #16
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801387e:	b580      	push	{r7, lr}
 8013880:	b082      	sub	sp, #8
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	681a      	ldr	r2, [r3, #0]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013894:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2220      	movs	r2, #32
 801389a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2200      	movs	r2, #0
 80138a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7ff fafa 	bl	8012e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138a8:	bf00      	nop
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80138be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138c4:	2b22      	cmp	r3, #34	; 0x22
 80138c6:	d13a      	bne.n	801393e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ce:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80138d0:	89bb      	ldrh	r3, [r7, #12]
 80138d2:	b2d9      	uxtb	r1, r3
 80138d4:	89fb      	ldrh	r3, [r7, #14]
 80138d6:	b2da      	uxtb	r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138dc:	400a      	ands	r2, r1
 80138de:	b2d2      	uxtb	r2, r2
 80138e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138e6:	1c5a      	adds	r2, r3, #1
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	3b01      	subs	r3, #1
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013904:	b29b      	uxth	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d121      	bne.n	801394e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013918:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	689a      	ldr	r2, [r3, #8]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	f022 0201 	bic.w	r2, r2, #1
 8013928:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2220      	movs	r2, #32
 801392e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2200      	movs	r2, #0
 8013934:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7f8 fc90 	bl	800c25c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801393c:	e007      	b.n	801394e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	699a      	ldr	r2, [r3, #24]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f042 0208 	orr.w	r2, r2, #8
 801394c:	619a      	str	r2, [r3, #24]
}
 801394e:	bf00      	nop
 8013950:	3710      	adds	r7, #16
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}

08013956 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013956:	b580      	push	{r7, lr}
 8013958:	b084      	sub	sp, #16
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013964:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801396a:	2b22      	cmp	r3, #34	; 0x22
 801396c:	d13a      	bne.n	80139e4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013974:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801397a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 801397c:	89ba      	ldrh	r2, [r7, #12]
 801397e:	89fb      	ldrh	r3, [r7, #14]
 8013980:	4013      	ands	r3, r2
 8013982:	b29a      	uxth	r2, r3
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801398c:	1c9a      	adds	r2, r3, #2
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013998:	b29b      	uxth	r3, r3
 801399a:	3b01      	subs	r3, #1
 801399c:	b29a      	uxth	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d121      	bne.n	80139f4 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80139be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	689a      	ldr	r2, [r3, #8]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f022 0201 	bic.w	r2, r2, #1
 80139ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2220      	movs	r2, #32
 80139d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2200      	movs	r2, #0
 80139da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7f8 fc3d 	bl	800c25c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80139e2:	e007      	b.n	80139f4 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	699a      	ldr	r2, [r3, #24]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f042 0208 	orr.w	r2, r2, #8
 80139f2:	619a      	str	r2, [r3, #24]
}
 80139f4:	bf00      	nop
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80139fc:	b480      	push	{r7}
 80139fe:	b085      	sub	sp, #20
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	4603      	mov	r3, r0
 8013a04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013a06:	2300      	movs	r3, #0
 8013a08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a0e:	2b84      	cmp	r3, #132	; 0x84
 8013a10:	d005      	beq.n	8013a1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	4413      	add	r3, r2
 8013a1a:	3303      	adds	r3, #3
 8013a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	3714      	adds	r7, #20
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013a30:	f001 fa7a 	bl	8014f28 <vTaskStartScheduler>
  
  return osOK;
 8013a34:	2300      	movs	r3, #0
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a3c:	b089      	sub	sp, #36	; 0x24
 8013a3e:	af04      	add	r7, sp, #16
 8013a40:	6078      	str	r0, [r7, #4]
 8013a42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	695b      	ldr	r3, [r3, #20]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d020      	beq.n	8013a8e <osThreadCreate+0x54>
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	699b      	ldr	r3, [r3, #24]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d01c      	beq.n	8013a8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	685c      	ldr	r4, [r3, #4]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681d      	ldr	r5, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	691e      	ldr	r6, [r3, #16]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff ffc8 	bl	80139fc <makeFreeRtosPriority>
 8013a6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	695b      	ldr	r3, [r3, #20]
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a76:	9202      	str	r2, [sp, #8]
 8013a78:	9301      	str	r3, [sp, #4]
 8013a7a:	9100      	str	r1, [sp, #0]
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	4632      	mov	r2, r6
 8013a80:	4629      	mov	r1, r5
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 ff5f 	bl	8014946 <xTaskCreateStatic>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	e01c      	b.n	8013ac8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	685c      	ldr	r4, [r3, #4]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a9a:	b29e      	uxth	r6, r3
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff ffaa 	bl	80139fc <makeFreeRtosPriority>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	f107 030c 	add.w	r3, r7, #12
 8013aae:	9301      	str	r3, [sp, #4]
 8013ab0:	9200      	str	r2, [sp, #0]
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	4632      	mov	r2, r6
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f000 ffa4 	bl	8014a06 <xTaskCreate>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d001      	beq.n	8013ac8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e000      	b.n	8013aca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3714      	adds	r7, #20
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ad2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b084      	sub	sp, #16
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d001      	beq.n	8013ae8 <osDelay+0x16>
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	e000      	b.n	8013aea <osDelay+0x18>
 8013ae8:	2301      	movs	r3, #1
 8013aea:	4618      	mov	r0, r3
 8013aec:	f001 f8c2 	bl	8014c74 <vTaskDelay>
  
  return osOK;
 8013af0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3710      	adds	r7, #16
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}

08013afa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b086      	sub	sp, #24
 8013afe:	af02      	add	r7, sp, #8
 8013b00:	6078      	str	r0, [r7, #4]
 8013b02:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d010      	beq.n	8013b2e <osSemaphoreCreate+0x34>
    if (count == 1) {
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d10b      	bne.n	8013b2a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	685a      	ldr	r2, [r3, #4]
 8013b16:	2303      	movs	r3, #3
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	2100      	movs	r1, #0
 8013b20:	2001      	movs	r0, #1
 8013b22:	f000 f965 	bl	8013df0 <xQueueGenericCreateStatic>
 8013b26:	4603      	mov	r3, r0
 8013b28:	e016      	b.n	8013b58 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	e014      	b.n	8013b58 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d110      	bne.n	8013b56 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8013b34:	2203      	movs	r2, #3
 8013b36:	2100      	movs	r1, #0
 8013b38:	2001      	movs	r0, #1
 8013b3a:	f000 f9d6 	bl	8013eea <xQueueGenericCreate>
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d005      	beq.n	8013b52 <osSemaphoreCreate+0x58>
 8013b46:	2300      	movs	r3, #0
 8013b48:	2200      	movs	r2, #0
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	68f8      	ldr	r0, [r7, #12]
 8013b4e:	f000 fa2d 	bl	8013fac <xQueueGenericSend>
      return sema;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	e000      	b.n	8013b58 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8013b56:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3710      	adds	r7, #16
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013b60:	b590      	push	{r4, r7, lr}
 8013b62:	b085      	sub	sp, #20
 8013b64:	af02      	add	r7, sp, #8
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d012      	beq.n	8013b98 <osMessageCreate+0x38>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00e      	beq.n	8013b98 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6818      	ldr	r0, [r3, #0]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6859      	ldr	r1, [r3, #4]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	689a      	ldr	r2, [r3, #8]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	68dc      	ldr	r4, [r3, #12]
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	9300      	str	r3, [sp, #0]
 8013b8e:	4623      	mov	r3, r4
 8013b90:	f000 f92e 	bl	8013df0 <xQueueGenericCreateStatic>
 8013b94:	4603      	mov	r3, r0
 8013b96:	e008      	b.n	8013baa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6818      	ldr	r0, [r3, #0]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	f000 f9a1 	bl	8013eea <xQueueGenericCreate>
 8013ba8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd90      	pop	{r4, r7, pc}

08013bb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013bb2:	b480      	push	{r7}
 8013bb4:	b083      	sub	sp, #12
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f103 0208 	add.w	r2, r3, #8
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8013bca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f103 0208 	add.w	r2, r3, #8
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f103 0208 	add.w	r2, r3, #8
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2200      	movs	r2, #0
 8013be4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013be6:	bf00      	nop
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr

08013bf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013bf2:	b480      	push	{r7}
 8013bf4:	b083      	sub	sp, #12
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013c00:	bf00      	nop
 8013c02:	370c      	adds	r7, #12
 8013c04:	46bd      	mov	sp, r7
 8013c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0a:	4770      	bx	lr

08013c0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b085      	sub	sp, #20
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	689a      	ldr	r2, [r3, #8]
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	683a      	ldr	r2, [r7, #0]
 8013c30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	683a      	ldr	r2, [r7, #0]
 8013c36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	1c5a      	adds	r2, r3, #1
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	601a      	str	r2, [r3, #0]
}
 8013c48:	bf00      	nop
 8013c4a:	3714      	adds	r7, #20
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr

08013c54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c54:	b480      	push	{r7}
 8013c56:	b085      	sub	sp, #20
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c6a:	d103      	bne.n	8013c74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	60fb      	str	r3, [r7, #12]
 8013c72:	e00c      	b.n	8013c8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	3308      	adds	r3, #8
 8013c78:	60fb      	str	r3, [r7, #12]
 8013c7a:	e002      	b.n	8013c82 <vListInsert+0x2e>
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	60fb      	str	r3, [r7, #12]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d2f6      	bcs.n	8013c7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	685a      	ldr	r2, [r3, #4]
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	683a      	ldr	r2, [r7, #0]
 8013c9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	68fa      	ldr	r2, [r7, #12]
 8013ca2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	1c5a      	adds	r2, r3, #1
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	601a      	str	r2, [r3, #0]
}
 8013cba:	bf00      	nop
 8013cbc:	3714      	adds	r7, #20
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr

08013cc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013cc6:	b480      	push	{r7}
 8013cc8:	b085      	sub	sp, #20
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	685b      	ldr	r3, [r3, #4]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	6892      	ldr	r2, [r2, #8]
 8013cdc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	689b      	ldr	r3, [r3, #8]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	6852      	ldr	r2, [r2, #4]
 8013ce6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d103      	bne.n	8013cfa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	689a      	ldr	r2, [r3, #8]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	1e5a      	subs	r2, r3, #1
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3714      	adds	r7, #20
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr
	...

08013d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d10b      	bne.n	8013d48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d34:	b672      	cpsid	i
 8013d36:	f383 8811 	msr	BASEPRI, r3
 8013d3a:	f3bf 8f6f 	isb	sy
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	b662      	cpsie	i
 8013d44:	60bb      	str	r3, [r7, #8]
 8013d46:	e7fe      	b.n	8013d46 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013d48:	f002 f83e 	bl	8015dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d54:	68f9      	ldr	r1, [r7, #12]
 8013d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d58:	fb01 f303 	mul.w	r3, r1, r3
 8013d5c:	441a      	add	r2, r3
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2200      	movs	r2, #0
 8013d66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d78:	3b01      	subs	r3, #1
 8013d7a:	68f9      	ldr	r1, [r7, #12]
 8013d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d7e:	fb01 f303 	mul.w	r3, r1, r3
 8013d82:	441a      	add	r2, r3
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	22ff      	movs	r2, #255	; 0xff
 8013d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	22ff      	movs	r2, #255	; 0xff
 8013d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d114      	bne.n	8013dc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d01a      	beq.n	8013ddc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	3310      	adds	r3, #16
 8013daa:	4618      	mov	r0, r3
 8013dac:	f001 fb06 	bl	80153bc <xTaskRemoveFromEventList>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d012      	beq.n	8013ddc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013db6:	4b0d      	ldr	r3, [pc, #52]	; (8013dec <xQueueGenericReset+0xd0>)
 8013db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dbc:	601a      	str	r2, [r3, #0]
 8013dbe:	f3bf 8f4f 	dsb	sy
 8013dc2:	f3bf 8f6f 	isb	sy
 8013dc6:	e009      	b.n	8013ddc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	3310      	adds	r3, #16
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7ff fef0 	bl	8013bb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	3324      	adds	r3, #36	; 0x24
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ff feeb 	bl	8013bb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013ddc:	f002 f826 	bl	8015e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013de0:	2301      	movs	r3, #1
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	e000ed04 	.word	0xe000ed04

08013df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b08e      	sub	sp, #56	; 0x38
 8013df4:	af02      	add	r7, sp, #8
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	607a      	str	r2, [r7, #4]
 8013dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d10b      	bne.n	8013e1c <xQueueGenericCreateStatic+0x2c>
 8013e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e08:	b672      	cpsid	i
 8013e0a:	f383 8811 	msr	BASEPRI, r3
 8013e0e:	f3bf 8f6f 	isb	sy
 8013e12:	f3bf 8f4f 	dsb	sy
 8013e16:	b662      	cpsie	i
 8013e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e1a:	e7fe      	b.n	8013e1a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d10b      	bne.n	8013e3a <xQueueGenericCreateStatic+0x4a>
 8013e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e26:	b672      	cpsid	i
 8013e28:	f383 8811 	msr	BASEPRI, r3
 8013e2c:	f3bf 8f6f 	isb	sy
 8013e30:	f3bf 8f4f 	dsb	sy
 8013e34:	b662      	cpsie	i
 8013e36:	627b      	str	r3, [r7, #36]	; 0x24
 8013e38:	e7fe      	b.n	8013e38 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <xQueueGenericCreateStatic+0x56>
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d001      	beq.n	8013e4a <xQueueGenericCreateStatic+0x5a>
 8013e46:	2301      	movs	r3, #1
 8013e48:	e000      	b.n	8013e4c <xQueueGenericCreateStatic+0x5c>
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d10b      	bne.n	8013e68 <xQueueGenericCreateStatic+0x78>
 8013e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e54:	b672      	cpsid	i
 8013e56:	f383 8811 	msr	BASEPRI, r3
 8013e5a:	f3bf 8f6f 	isb	sy
 8013e5e:	f3bf 8f4f 	dsb	sy
 8013e62:	b662      	cpsie	i
 8013e64:	623b      	str	r3, [r7, #32]
 8013e66:	e7fe      	b.n	8013e66 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d102      	bne.n	8013e74 <xQueueGenericCreateStatic+0x84>
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d101      	bne.n	8013e78 <xQueueGenericCreateStatic+0x88>
 8013e74:	2301      	movs	r3, #1
 8013e76:	e000      	b.n	8013e7a <xQueueGenericCreateStatic+0x8a>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d10b      	bne.n	8013e96 <xQueueGenericCreateStatic+0xa6>
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	b672      	cpsid	i
 8013e84:	f383 8811 	msr	BASEPRI, r3
 8013e88:	f3bf 8f6f 	isb	sy
 8013e8c:	f3bf 8f4f 	dsb	sy
 8013e90:	b662      	cpsie	i
 8013e92:	61fb      	str	r3, [r7, #28]
 8013e94:	e7fe      	b.n	8013e94 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013e96:	2348      	movs	r3, #72	; 0x48
 8013e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	2b48      	cmp	r3, #72	; 0x48
 8013e9e:	d00b      	beq.n	8013eb8 <xQueueGenericCreateStatic+0xc8>
 8013ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea4:	b672      	cpsid	i
 8013ea6:	f383 8811 	msr	BASEPRI, r3
 8013eaa:	f3bf 8f6f 	isb	sy
 8013eae:	f3bf 8f4f 	dsb	sy
 8013eb2:	b662      	cpsie	i
 8013eb4:	61bb      	str	r3, [r7, #24]
 8013eb6:	e7fe      	b.n	8013eb6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013eb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00d      	beq.n	8013ee0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ecc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	68b9      	ldr	r1, [r7, #8]
 8013eda:	68f8      	ldr	r0, [r7, #12]
 8013edc:	f000 f846 	bl	8013f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3730      	adds	r7, #48	; 0x30
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013eea:	b580      	push	{r7, lr}
 8013eec:	b08a      	sub	sp, #40	; 0x28
 8013eee:	af02      	add	r7, sp, #8
 8013ef0:	60f8      	str	r0, [r7, #12]
 8013ef2:	60b9      	str	r1, [r7, #8]
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d10b      	bne.n	8013f16 <xQueueGenericCreate+0x2c>
 8013efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f02:	b672      	cpsid	i
 8013f04:	f383 8811 	msr	BASEPRI, r3
 8013f08:	f3bf 8f6f 	isb	sy
 8013f0c:	f3bf 8f4f 	dsb	sy
 8013f10:	b662      	cpsie	i
 8013f12:	613b      	str	r3, [r7, #16]
 8013f14:	e7fe      	b.n	8013f14 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d102      	bne.n	8013f22 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	61fb      	str	r3, [r7, #28]
 8013f20:	e004      	b.n	8013f2c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	68ba      	ldr	r2, [r7, #8]
 8013f26:	fb02 f303 	mul.w	r3, r2, r3
 8013f2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	3348      	adds	r3, #72	; 0x48
 8013f30:	4618      	mov	r0, r3
 8013f32:	f002 f86b 	bl	801600c <pvPortMalloc>
 8013f36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d011      	beq.n	8013f62 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013f3e:	69bb      	ldr	r3, [r7, #24]
 8013f40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	3348      	adds	r3, #72	; 0x48
 8013f46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013f48:	69bb      	ldr	r3, [r7, #24]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013f50:	79fa      	ldrb	r2, [r7, #7]
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	9300      	str	r3, [sp, #0]
 8013f56:	4613      	mov	r3, r2
 8013f58:	697a      	ldr	r2, [r7, #20]
 8013f5a:	68b9      	ldr	r1, [r7, #8]
 8013f5c:	68f8      	ldr	r0, [r7, #12]
 8013f5e:	f000 f805 	bl	8013f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013f62:	69bb      	ldr	r3, [r7, #24]
	}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3720      	adds	r7, #32
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	60f8      	str	r0, [r7, #12]
 8013f74:	60b9      	str	r1, [r7, #8]
 8013f76:	607a      	str	r2, [r7, #4]
 8013f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d103      	bne.n	8013f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013f80:	69bb      	ldr	r3, [r7, #24]
 8013f82:	69ba      	ldr	r2, [r7, #24]
 8013f84:	601a      	str	r2, [r3, #0]
 8013f86:	e002      	b.n	8013f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013f88:	69bb      	ldr	r3, [r7, #24]
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013f8e:	69bb      	ldr	r3, [r7, #24]
 8013f90:	68fa      	ldr	r2, [r7, #12]
 8013f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013f94:	69bb      	ldr	r3, [r7, #24]
 8013f96:	68ba      	ldr	r2, [r7, #8]
 8013f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013f9a:	2101      	movs	r1, #1
 8013f9c:	69b8      	ldr	r0, [r7, #24]
 8013f9e:	f7ff febd 	bl	8013d1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013fa2:	bf00      	nop
 8013fa4:	3710      	adds	r7, #16
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}
	...

08013fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b08e      	sub	sp, #56	; 0x38
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	607a      	str	r2, [r7, #4]
 8013fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d10b      	bne.n	8013fe0 <xQueueGenericSend+0x34>
 8013fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fcc:	b672      	cpsid	i
 8013fce:	f383 8811 	msr	BASEPRI, r3
 8013fd2:	f3bf 8f6f 	isb	sy
 8013fd6:	f3bf 8f4f 	dsb	sy
 8013fda:	b662      	cpsie	i
 8013fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fde:	e7fe      	b.n	8013fde <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d103      	bne.n	8013fee <xQueueGenericSend+0x42>
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d101      	bne.n	8013ff2 <xQueueGenericSend+0x46>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e000      	b.n	8013ff4 <xQueueGenericSend+0x48>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d10b      	bne.n	8014010 <xQueueGenericSend+0x64>
 8013ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffc:	b672      	cpsid	i
 8013ffe:	f383 8811 	msr	BASEPRI, r3
 8014002:	f3bf 8f6f 	isb	sy
 8014006:	f3bf 8f4f 	dsb	sy
 801400a:	b662      	cpsie	i
 801400c:	627b      	str	r3, [r7, #36]	; 0x24
 801400e:	e7fe      	b.n	801400e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	2b02      	cmp	r3, #2
 8014014:	d103      	bne.n	801401e <xQueueGenericSend+0x72>
 8014016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801401a:	2b01      	cmp	r3, #1
 801401c:	d101      	bne.n	8014022 <xQueueGenericSend+0x76>
 801401e:	2301      	movs	r3, #1
 8014020:	e000      	b.n	8014024 <xQueueGenericSend+0x78>
 8014022:	2300      	movs	r3, #0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d10b      	bne.n	8014040 <xQueueGenericSend+0x94>
 8014028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402c:	b672      	cpsid	i
 801402e:	f383 8811 	msr	BASEPRI, r3
 8014032:	f3bf 8f6f 	isb	sy
 8014036:	f3bf 8f4f 	dsb	sy
 801403a:	b662      	cpsie	i
 801403c:	623b      	str	r3, [r7, #32]
 801403e:	e7fe      	b.n	801403e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014040:	f001 fb7a 	bl	8015738 <xTaskGetSchedulerState>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d102      	bne.n	8014050 <xQueueGenericSend+0xa4>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d101      	bne.n	8014054 <xQueueGenericSend+0xa8>
 8014050:	2301      	movs	r3, #1
 8014052:	e000      	b.n	8014056 <xQueueGenericSend+0xaa>
 8014054:	2300      	movs	r3, #0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d10b      	bne.n	8014072 <xQueueGenericSend+0xc6>
 801405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405e:	b672      	cpsid	i
 8014060:	f383 8811 	msr	BASEPRI, r3
 8014064:	f3bf 8f6f 	isb	sy
 8014068:	f3bf 8f4f 	dsb	sy
 801406c:	b662      	cpsie	i
 801406e:	61fb      	str	r3, [r7, #28]
 8014070:	e7fe      	b.n	8014070 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014072:	f001 fea9 	bl	8015dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801407e:	429a      	cmp	r2, r3
 8014080:	d302      	bcc.n	8014088 <xQueueGenericSend+0xdc>
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	2b02      	cmp	r3, #2
 8014086:	d129      	bne.n	80140dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	68b9      	ldr	r1, [r7, #8]
 801408c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801408e:	f000 fb4a 	bl	8014726 <prvCopyDataToQueue>
 8014092:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014098:	2b00      	cmp	r3, #0
 801409a:	d010      	beq.n	80140be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409e:	3324      	adds	r3, #36	; 0x24
 80140a0:	4618      	mov	r0, r3
 80140a2:	f001 f98b 	bl	80153bc <xTaskRemoveFromEventList>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d013      	beq.n	80140d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80140ac:	4b3f      	ldr	r3, [pc, #252]	; (80141ac <xQueueGenericSend+0x200>)
 80140ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140b2:	601a      	str	r2, [r3, #0]
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	f3bf 8f6f 	isb	sy
 80140bc:	e00a      	b.n	80140d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80140be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d007      	beq.n	80140d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80140c4:	4b39      	ldr	r3, [pc, #228]	; (80141ac <xQueueGenericSend+0x200>)
 80140c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140ca:	601a      	str	r2, [r3, #0]
 80140cc:	f3bf 8f4f 	dsb	sy
 80140d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80140d4:	f001 feaa 	bl	8015e2c <vPortExitCritical>
				return pdPASS;
 80140d8:	2301      	movs	r3, #1
 80140da:	e063      	b.n	80141a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d103      	bne.n	80140ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80140e2:	f001 fea3 	bl	8015e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80140e6:	2300      	movs	r3, #0
 80140e8:	e05c      	b.n	80141a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80140ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d106      	bne.n	80140fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80140f0:	f107 0314 	add.w	r3, r7, #20
 80140f4:	4618      	mov	r0, r3
 80140f6:	f001 f9c5 	bl	8015484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80140fa:	2301      	movs	r3, #1
 80140fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80140fe:	f001 fe95 	bl	8015e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014102:	f000 ff73 	bl	8014fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014106:	f001 fe5f 	bl	8015dc8 <vPortEnterCritical>
 801410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014110:	b25b      	sxtb	r3, r3
 8014112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014116:	d103      	bne.n	8014120 <xQueueGenericSend+0x174>
 8014118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411a:	2200      	movs	r2, #0
 801411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014126:	b25b      	sxtb	r3, r3
 8014128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412c:	d103      	bne.n	8014136 <xQueueGenericSend+0x18a>
 801412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014130:	2200      	movs	r2, #0
 8014132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014136:	f001 fe79 	bl	8015e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801413a:	1d3a      	adds	r2, r7, #4
 801413c:	f107 0314 	add.w	r3, r7, #20
 8014140:	4611      	mov	r1, r2
 8014142:	4618      	mov	r0, r3
 8014144:	f001 f9b4 	bl	80154b0 <xTaskCheckForTimeOut>
 8014148:	4603      	mov	r3, r0
 801414a:	2b00      	cmp	r3, #0
 801414c:	d124      	bne.n	8014198 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801414e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014150:	f000 fbe1 	bl	8014916 <prvIsQueueFull>
 8014154:	4603      	mov	r3, r0
 8014156:	2b00      	cmp	r3, #0
 8014158:	d018      	beq.n	801418c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801415c:	3310      	adds	r3, #16
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	4611      	mov	r1, r2
 8014162:	4618      	mov	r0, r3
 8014164:	f001 f904 	bl	8015370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801416a:	f000 fb6c 	bl	8014846 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801416e:	f000 ff4b 	bl	8015008 <xTaskResumeAll>
 8014172:	4603      	mov	r3, r0
 8014174:	2b00      	cmp	r3, #0
 8014176:	f47f af7c 	bne.w	8014072 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801417a:	4b0c      	ldr	r3, [pc, #48]	; (80141ac <xQueueGenericSend+0x200>)
 801417c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014180:	601a      	str	r2, [r3, #0]
 8014182:	f3bf 8f4f 	dsb	sy
 8014186:	f3bf 8f6f 	isb	sy
 801418a:	e772      	b.n	8014072 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801418c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801418e:	f000 fb5a 	bl	8014846 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014192:	f000 ff39 	bl	8015008 <xTaskResumeAll>
 8014196:	e76c      	b.n	8014072 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801419a:	f000 fb54 	bl	8014846 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801419e:	f000 ff33 	bl	8015008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80141a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3738      	adds	r7, #56	; 0x38
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	e000ed04 	.word	0xe000ed04

080141b0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b08e      	sub	sp, #56	; 0x38
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80141be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10b      	bne.n	80141dc <xQueueGiveFromISR+0x2c>
 80141c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c8:	b672      	cpsid	i
 80141ca:	f383 8811 	msr	BASEPRI, r3
 80141ce:	f3bf 8f6f 	isb	sy
 80141d2:	f3bf 8f4f 	dsb	sy
 80141d6:	b662      	cpsie	i
 80141d8:	623b      	str	r3, [r7, #32]
 80141da:	e7fe      	b.n	80141da <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80141dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d00b      	beq.n	80141fc <xQueueGiveFromISR+0x4c>
 80141e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e8:	b672      	cpsid	i
 80141ea:	f383 8811 	msr	BASEPRI, r3
 80141ee:	f3bf 8f6f 	isb	sy
 80141f2:	f3bf 8f4f 	dsb	sy
 80141f6:	b662      	cpsie	i
 80141f8:	61fb      	str	r3, [r7, #28]
 80141fa:	e7fe      	b.n	80141fa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80141fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d103      	bne.n	801420c <xQueueGiveFromISR+0x5c>
 8014204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014206:	689b      	ldr	r3, [r3, #8]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d101      	bne.n	8014210 <xQueueGiveFromISR+0x60>
 801420c:	2301      	movs	r3, #1
 801420e:	e000      	b.n	8014212 <xQueueGiveFromISR+0x62>
 8014210:	2300      	movs	r3, #0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d10b      	bne.n	801422e <xQueueGiveFromISR+0x7e>
 8014216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801421a:	b672      	cpsid	i
 801421c:	f383 8811 	msr	BASEPRI, r3
 8014220:	f3bf 8f6f 	isb	sy
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	b662      	cpsie	i
 801422a:	61bb      	str	r3, [r7, #24]
 801422c:	e7fe      	b.n	801422c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801422e:	f001 feab 	bl	8015f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014232:	f3ef 8211 	mrs	r2, BASEPRI
 8014236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423a:	b672      	cpsid	i
 801423c:	f383 8811 	msr	BASEPRI, r3
 8014240:	f3bf 8f6f 	isb	sy
 8014244:	f3bf 8f4f 	dsb	sy
 8014248:	b662      	cpsie	i
 801424a:	617a      	str	r2, [r7, #20]
 801424c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801424e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014256:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801425c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801425e:	429a      	cmp	r2, r3
 8014260:	d22b      	bcs.n	80142ba <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801426e:	1c5a      	adds	r2, r3, #1
 8014270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014272:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801427c:	d112      	bne.n	80142a4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014282:	2b00      	cmp	r3, #0
 8014284:	d016      	beq.n	80142b4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014288:	3324      	adds	r3, #36	; 0x24
 801428a:	4618      	mov	r0, r3
 801428c:	f001 f896 	bl	80153bc <xTaskRemoveFromEventList>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d00e      	beq.n	80142b4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00b      	beq.n	80142b4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	2201      	movs	r2, #1
 80142a0:	601a      	str	r2, [r3, #0]
 80142a2:	e007      	b.n	80142b4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80142a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142a8:	3301      	adds	r3, #1
 80142aa:	b2db      	uxtb	r3, r3
 80142ac:	b25a      	sxtb	r2, r3
 80142ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80142b4:	2301      	movs	r3, #1
 80142b6:	637b      	str	r3, [r7, #52]	; 0x34
 80142b8:	e001      	b.n	80142be <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80142ba:	2300      	movs	r3, #0
 80142bc:	637b      	str	r3, [r7, #52]	; 0x34
 80142be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80142c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80142ca:	4618      	mov	r0, r3
 80142cc:	3738      	adds	r7, #56	; 0x38
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}
	...

080142d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b08c      	sub	sp, #48	; 0x30
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80142e0:	2300      	movs	r3, #0
 80142e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80142e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d10b      	bne.n	8014306 <xQueueReceive+0x32>
	__asm volatile
 80142ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f2:	b672      	cpsid	i
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	b662      	cpsie	i
 8014302:	623b      	str	r3, [r7, #32]
 8014304:	e7fe      	b.n	8014304 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d103      	bne.n	8014314 <xQueueReceive+0x40>
 801430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014310:	2b00      	cmp	r3, #0
 8014312:	d101      	bne.n	8014318 <xQueueReceive+0x44>
 8014314:	2301      	movs	r3, #1
 8014316:	e000      	b.n	801431a <xQueueReceive+0x46>
 8014318:	2300      	movs	r3, #0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d10b      	bne.n	8014336 <xQueueReceive+0x62>
 801431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014322:	b672      	cpsid	i
 8014324:	f383 8811 	msr	BASEPRI, r3
 8014328:	f3bf 8f6f 	isb	sy
 801432c:	f3bf 8f4f 	dsb	sy
 8014330:	b662      	cpsie	i
 8014332:	61fb      	str	r3, [r7, #28]
 8014334:	e7fe      	b.n	8014334 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014336:	f001 f9ff 	bl	8015738 <xTaskGetSchedulerState>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d102      	bne.n	8014346 <xQueueReceive+0x72>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <xQueueReceive+0x76>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <xQueueReceive+0x78>
 801434a:	2300      	movs	r3, #0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10b      	bne.n	8014368 <xQueueReceive+0x94>
 8014350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014354:	b672      	cpsid	i
 8014356:	f383 8811 	msr	BASEPRI, r3
 801435a:	f3bf 8f6f 	isb	sy
 801435e:	f3bf 8f4f 	dsb	sy
 8014362:	b662      	cpsie	i
 8014364:	61bb      	str	r3, [r7, #24]
 8014366:	e7fe      	b.n	8014366 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014368:	f001 fd2e 	bl	8015dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014370:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	2b00      	cmp	r3, #0
 8014376:	d01f      	beq.n	80143b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014378:	68b9      	ldr	r1, [r7, #8]
 801437a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801437c:	f000 fa3d 	bl	80147fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014382:	1e5a      	subs	r2, r3, #1
 8014384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014386:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d00f      	beq.n	80143b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014392:	3310      	adds	r3, #16
 8014394:	4618      	mov	r0, r3
 8014396:	f001 f811 	bl	80153bc <xTaskRemoveFromEventList>
 801439a:	4603      	mov	r3, r0
 801439c:	2b00      	cmp	r3, #0
 801439e:	d007      	beq.n	80143b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80143a0:	4b3c      	ldr	r3, [pc, #240]	; (8014494 <xQueueReceive+0x1c0>)
 80143a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143a6:	601a      	str	r2, [r3, #0]
 80143a8:	f3bf 8f4f 	dsb	sy
 80143ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80143b0:	f001 fd3c 	bl	8015e2c <vPortExitCritical>
				return pdPASS;
 80143b4:	2301      	movs	r3, #1
 80143b6:	e069      	b.n	801448c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d103      	bne.n	80143c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80143be:	f001 fd35 	bl	8015e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80143c2:	2300      	movs	r3, #0
 80143c4:	e062      	b.n	801448c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80143c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d106      	bne.n	80143da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80143cc:	f107 0310 	add.w	r3, r7, #16
 80143d0:	4618      	mov	r0, r3
 80143d2:	f001 f857 	bl	8015484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80143d6:	2301      	movs	r3, #1
 80143d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80143da:	f001 fd27 	bl	8015e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80143de:	f000 fe05 	bl	8014fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80143e2:	f001 fcf1 	bl	8015dc8 <vPortEnterCritical>
 80143e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143ec:	b25b      	sxtb	r3, r3
 80143ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143f2:	d103      	bne.n	80143fc <xQueueReceive+0x128>
 80143f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f6:	2200      	movs	r2, #0
 80143f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014402:	b25b      	sxtb	r3, r3
 8014404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014408:	d103      	bne.n	8014412 <xQueueReceive+0x13e>
 801440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801440c:	2200      	movs	r2, #0
 801440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014412:	f001 fd0b 	bl	8015e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014416:	1d3a      	adds	r2, r7, #4
 8014418:	f107 0310 	add.w	r3, r7, #16
 801441c:	4611      	mov	r1, r2
 801441e:	4618      	mov	r0, r3
 8014420:	f001 f846 	bl	80154b0 <xTaskCheckForTimeOut>
 8014424:	4603      	mov	r3, r0
 8014426:	2b00      	cmp	r3, #0
 8014428:	d123      	bne.n	8014472 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801442a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801442c:	f000 fa5d 	bl	80148ea <prvIsQueueEmpty>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d017      	beq.n	8014466 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	3324      	adds	r3, #36	; 0x24
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	4611      	mov	r1, r2
 801443e:	4618      	mov	r0, r3
 8014440:	f000 ff96 	bl	8015370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014446:	f000 f9fe 	bl	8014846 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801444a:	f000 fddd 	bl	8015008 <xTaskResumeAll>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d189      	bne.n	8014368 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014454:	4b0f      	ldr	r3, [pc, #60]	; (8014494 <xQueueReceive+0x1c0>)
 8014456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801445a:	601a      	str	r2, [r3, #0]
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	f3bf 8f6f 	isb	sy
 8014464:	e780      	b.n	8014368 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014468:	f000 f9ed 	bl	8014846 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801446c:	f000 fdcc 	bl	8015008 <xTaskResumeAll>
 8014470:	e77a      	b.n	8014368 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014474:	f000 f9e7 	bl	8014846 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014478:	f000 fdc6 	bl	8015008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801447c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801447e:	f000 fa34 	bl	80148ea <prvIsQueueEmpty>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	f43f af6f 	beq.w	8014368 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801448a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801448c:	4618      	mov	r0, r3
 801448e:	3730      	adds	r7, #48	; 0x30
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	e000ed04 	.word	0xe000ed04

08014498 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b08e      	sub	sp, #56	; 0x38
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80144a2:	2300      	movs	r3, #0
 80144a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80144aa:	2300      	movs	r3, #0
 80144ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d10b      	bne.n	80144cc <xQueueSemaphoreTake+0x34>
 80144b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b8:	b672      	cpsid	i
 80144ba:	f383 8811 	msr	BASEPRI, r3
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	f3bf 8f4f 	dsb	sy
 80144c6:	b662      	cpsie	i
 80144c8:	623b      	str	r3, [r7, #32]
 80144ca:	e7fe      	b.n	80144ca <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80144cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d00b      	beq.n	80144ec <xQueueSemaphoreTake+0x54>
 80144d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d8:	b672      	cpsid	i
 80144da:	f383 8811 	msr	BASEPRI, r3
 80144de:	f3bf 8f6f 	isb	sy
 80144e2:	f3bf 8f4f 	dsb	sy
 80144e6:	b662      	cpsie	i
 80144e8:	61fb      	str	r3, [r7, #28]
 80144ea:	e7fe      	b.n	80144ea <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80144ec:	f001 f924 	bl	8015738 <xTaskGetSchedulerState>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d102      	bne.n	80144fc <xQueueSemaphoreTake+0x64>
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d101      	bne.n	8014500 <xQueueSemaphoreTake+0x68>
 80144fc:	2301      	movs	r3, #1
 80144fe:	e000      	b.n	8014502 <xQueueSemaphoreTake+0x6a>
 8014500:	2300      	movs	r3, #0
 8014502:	2b00      	cmp	r3, #0
 8014504:	d10b      	bne.n	801451e <xQueueSemaphoreTake+0x86>
 8014506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450a:	b672      	cpsid	i
 801450c:	f383 8811 	msr	BASEPRI, r3
 8014510:	f3bf 8f6f 	isb	sy
 8014514:	f3bf 8f4f 	dsb	sy
 8014518:	b662      	cpsie	i
 801451a:	61bb      	str	r3, [r7, #24]
 801451c:	e7fe      	b.n	801451c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801451e:	f001 fc53 	bl	8015dc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014526:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801452a:	2b00      	cmp	r3, #0
 801452c:	d024      	beq.n	8014578 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014530:	1e5a      	subs	r2, r3, #1
 8014532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014534:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d104      	bne.n	8014548 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801453e:	f001 fabd 	bl	8015abc <pvTaskIncrementMutexHeldCount>
 8014542:	4602      	mov	r2, r0
 8014544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014546:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454a:	691b      	ldr	r3, [r3, #16]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d00f      	beq.n	8014570 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014552:	3310      	adds	r3, #16
 8014554:	4618      	mov	r0, r3
 8014556:	f000 ff31 	bl	80153bc <xTaskRemoveFromEventList>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d007      	beq.n	8014570 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014560:	4b54      	ldr	r3, [pc, #336]	; (80146b4 <xQueueSemaphoreTake+0x21c>)
 8014562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014566:	601a      	str	r2, [r3, #0]
 8014568:	f3bf 8f4f 	dsb	sy
 801456c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014570:	f001 fc5c 	bl	8015e2c <vPortExitCritical>
				return pdPASS;
 8014574:	2301      	movs	r3, #1
 8014576:	e098      	b.n	80146aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d112      	bne.n	80145a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014580:	2b00      	cmp	r3, #0
 8014582:	d00b      	beq.n	801459c <xQueueSemaphoreTake+0x104>
 8014584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014588:	b672      	cpsid	i
 801458a:	f383 8811 	msr	BASEPRI, r3
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f3bf 8f4f 	dsb	sy
 8014596:	b662      	cpsie	i
 8014598:	617b      	str	r3, [r7, #20]
 801459a:	e7fe      	b.n	801459a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801459c:	f001 fc46 	bl	8015e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80145a0:	2300      	movs	r3, #0
 80145a2:	e082      	b.n	80146aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d106      	bne.n	80145b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80145aa:	f107 030c 	add.w	r3, r7, #12
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 ff68 	bl	8015484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145b4:	2301      	movs	r3, #1
 80145b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145b8:	f001 fc38 	bl	8015e2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145bc:	f000 fd16 	bl	8014fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145c0:	f001 fc02 	bl	8015dc8 <vPortEnterCritical>
 80145c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145ca:	b25b      	sxtb	r3, r3
 80145cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145d0:	d103      	bne.n	80145da <xQueueSemaphoreTake+0x142>
 80145d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d4:	2200      	movs	r2, #0
 80145d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145e0:	b25b      	sxtb	r3, r3
 80145e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145e6:	d103      	bne.n	80145f0 <xQueueSemaphoreTake+0x158>
 80145e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ea:	2200      	movs	r2, #0
 80145ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145f0:	f001 fc1c 	bl	8015e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145f4:	463a      	mov	r2, r7
 80145f6:	f107 030c 	add.w	r3, r7, #12
 80145fa:	4611      	mov	r1, r2
 80145fc:	4618      	mov	r0, r3
 80145fe:	f000 ff57 	bl	80154b0 <xTaskCheckForTimeOut>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d132      	bne.n	801466e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801460a:	f000 f96e 	bl	80148ea <prvIsQueueEmpty>
 801460e:	4603      	mov	r3, r0
 8014610:	2b00      	cmp	r3, #0
 8014612:	d026      	beq.n	8014662 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d109      	bne.n	8014630 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801461c:	f001 fbd4 	bl	8015dc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	4618      	mov	r0, r3
 8014626:	f001 f8a5 	bl	8015774 <xTaskPriorityInherit>
 801462a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801462c:	f001 fbfe 	bl	8015e2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014632:	3324      	adds	r3, #36	; 0x24
 8014634:	683a      	ldr	r2, [r7, #0]
 8014636:	4611      	mov	r1, r2
 8014638:	4618      	mov	r0, r3
 801463a:	f000 fe99 	bl	8015370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801463e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014640:	f000 f901 	bl	8014846 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014644:	f000 fce0 	bl	8015008 <xTaskResumeAll>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	f47f af67 	bne.w	801451e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014650:	4b18      	ldr	r3, [pc, #96]	; (80146b4 <xQueueSemaphoreTake+0x21c>)
 8014652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014656:	601a      	str	r2, [r3, #0]
 8014658:	f3bf 8f4f 	dsb	sy
 801465c:	f3bf 8f6f 	isb	sy
 8014660:	e75d      	b.n	801451e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014664:	f000 f8ef 	bl	8014846 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014668:	f000 fcce 	bl	8015008 <xTaskResumeAll>
 801466c:	e757      	b.n	801451e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801466e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014670:	f000 f8e9 	bl	8014846 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014674:	f000 fcc8 	bl	8015008 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801467a:	f000 f936 	bl	80148ea <prvIsQueueEmpty>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	f43f af4c 	beq.w	801451e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014688:	2b00      	cmp	r3, #0
 801468a:	d00d      	beq.n	80146a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801468c:	f001 fb9c 	bl	8015dc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014692:	f000 f830 	bl	80146f6 <prvGetDisinheritPriorityAfterTimeout>
 8014696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801469e:	4618      	mov	r0, r3
 80146a0:	f001 f970 	bl	8015984 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80146a4:	f001 fbc2 	bl	8015e2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80146a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3738      	adds	r7, #56	; 0x38
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	e000ed04 	.word	0xe000ed04

080146b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d10b      	bne.n	80146de <uxQueueMessagesWaiting+0x26>
 80146c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ca:	b672      	cpsid	i
 80146cc:	f383 8811 	msr	BASEPRI, r3
 80146d0:	f3bf 8f6f 	isb	sy
 80146d4:	f3bf 8f4f 	dsb	sy
 80146d8:	b662      	cpsie	i
 80146da:	60bb      	str	r3, [r7, #8]
 80146dc:	e7fe      	b.n	80146dc <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80146de:	f001 fb73 	bl	8015dc8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146e6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80146e8:	f001 fba0 	bl	8015e2c <vPortExitCritical>

	return uxReturn;
 80146ec:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80146ee:	4618      	mov	r0, r3
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80146f6:	b480      	push	{r7}
 80146f8:	b085      	sub	sp, #20
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014702:	2b00      	cmp	r3, #0
 8014704:	d006      	beq.n	8014714 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f1c3 0307 	rsb	r3, r3, #7
 8014710:	60fb      	str	r3, [r7, #12]
 8014712:	e001      	b.n	8014718 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014714:	2300      	movs	r3, #0
 8014716:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014718:	68fb      	ldr	r3, [r7, #12]
	}
 801471a:	4618      	mov	r0, r3
 801471c:	3714      	adds	r7, #20
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr

08014726 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014726:	b580      	push	{r7, lr}
 8014728:	b086      	sub	sp, #24
 801472a:	af00      	add	r7, sp, #0
 801472c:	60f8      	str	r0, [r7, #12]
 801472e:	60b9      	str	r1, [r7, #8]
 8014730:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014732:	2300      	movs	r3, #0
 8014734:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801473a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10d      	bne.n	8014760 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d14d      	bne.n	80147e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	689b      	ldr	r3, [r3, #8]
 8014750:	4618      	mov	r0, r3
 8014752:	f001 f88f 	bl	8015874 <xTaskPriorityDisinherit>
 8014756:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2200      	movs	r2, #0
 801475c:	609a      	str	r2, [r3, #8]
 801475e:	e043      	b.n	80147e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d119      	bne.n	801479a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6858      	ldr	r0, [r3, #4]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801476e:	461a      	mov	r2, r3
 8014770:	68b9      	ldr	r1, [r7, #8]
 8014772:	f001 fe55 	bl	8016420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	685a      	ldr	r2, [r3, #4]
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801477e:	441a      	add	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	685a      	ldr	r2, [r3, #4]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	689b      	ldr	r3, [r3, #8]
 801478c:	429a      	cmp	r2, r3
 801478e:	d32b      	bcc.n	80147e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	605a      	str	r2, [r3, #4]
 8014798:	e026      	b.n	80147e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	68d8      	ldr	r0, [r3, #12]
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a2:	461a      	mov	r2, r3
 80147a4:	68b9      	ldr	r1, [r7, #8]
 80147a6:	f001 fe3b 	bl	8016420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	68da      	ldr	r2, [r3, #12]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147b2:	425b      	negs	r3, r3
 80147b4:	441a      	add	r2, r3
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	68da      	ldr	r2, [r3, #12]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d207      	bcs.n	80147d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	689a      	ldr	r2, [r3, #8]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147ce:	425b      	negs	r3, r3
 80147d0:	441a      	add	r2, r3
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b02      	cmp	r3, #2
 80147da:	d105      	bne.n	80147e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d002      	beq.n	80147e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	3b01      	subs	r3, #1
 80147e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	1c5a      	adds	r2, r3, #1
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80147f0:	697b      	ldr	r3, [r7, #20]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3718      	adds	r7, #24
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80147fa:	b580      	push	{r7, lr}
 80147fc:	b082      	sub	sp, #8
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
 8014802:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014808:	2b00      	cmp	r3, #0
 801480a:	d018      	beq.n	801483e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	68da      	ldr	r2, [r3, #12]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014814:	441a      	add	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	68da      	ldr	r2, [r3, #12]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	689b      	ldr	r3, [r3, #8]
 8014822:	429a      	cmp	r2, r3
 8014824:	d303      	bcc.n	801482e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681a      	ldr	r2, [r3, #0]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	68d9      	ldr	r1, [r3, #12]
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014836:	461a      	mov	r2, r3
 8014838:	6838      	ldr	r0, [r7, #0]
 801483a:	f001 fdf1 	bl	8016420 <memcpy>
	}
}
 801483e:	bf00      	nop
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}

08014846 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014846:	b580      	push	{r7, lr}
 8014848:	b084      	sub	sp, #16
 801484a:	af00      	add	r7, sp, #0
 801484c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801484e:	f001 fabb 	bl	8015dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014858:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801485a:	e011      	b.n	8014880 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014860:	2b00      	cmp	r3, #0
 8014862:	d012      	beq.n	801488a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	3324      	adds	r3, #36	; 0x24
 8014868:	4618      	mov	r0, r3
 801486a:	f000 fda7 	bl	80153bc <xTaskRemoveFromEventList>
 801486e:	4603      	mov	r3, r0
 8014870:	2b00      	cmp	r3, #0
 8014872:	d001      	beq.n	8014878 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014874:	f000 fe80 	bl	8015578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014878:	7bfb      	ldrb	r3, [r7, #15]
 801487a:	3b01      	subs	r3, #1
 801487c:	b2db      	uxtb	r3, r3
 801487e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014884:	2b00      	cmp	r3, #0
 8014886:	dce9      	bgt.n	801485c <prvUnlockQueue+0x16>
 8014888:	e000      	b.n	801488c <prvUnlockQueue+0x46>
					break;
 801488a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	22ff      	movs	r2, #255	; 0xff
 8014890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014894:	f001 faca 	bl	8015e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014898:	f001 fa96 	bl	8015dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148a4:	e011      	b.n	80148ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	691b      	ldr	r3, [r3, #16]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d012      	beq.n	80148d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	3310      	adds	r3, #16
 80148b2:	4618      	mov	r0, r3
 80148b4:	f000 fd82 	bl	80153bc <xTaskRemoveFromEventList>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80148be:	f000 fe5b 	bl	8015578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80148c2:	7bbb      	ldrb	r3, [r7, #14]
 80148c4:	3b01      	subs	r3, #1
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	dce9      	bgt.n	80148a6 <prvUnlockQueue+0x60>
 80148d2:	e000      	b.n	80148d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80148d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	22ff      	movs	r2, #255	; 0xff
 80148da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80148de:	f001 faa5 	bl	8015e2c <vPortExitCritical>
}
 80148e2:	bf00      	nop
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}

080148ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80148ea:	b580      	push	{r7, lr}
 80148ec:	b084      	sub	sp, #16
 80148ee:	af00      	add	r7, sp, #0
 80148f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148f2:	f001 fa69 	bl	8015dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d102      	bne.n	8014904 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80148fe:	2301      	movs	r3, #1
 8014900:	60fb      	str	r3, [r7, #12]
 8014902:	e001      	b.n	8014908 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014904:	2300      	movs	r3, #0
 8014906:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014908:	f001 fa90 	bl	8015e2c <vPortExitCritical>

	return xReturn;
 801490c:	68fb      	ldr	r3, [r7, #12]
}
 801490e:	4618      	mov	r0, r3
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}

08014916 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014916:	b580      	push	{r7, lr}
 8014918:	b084      	sub	sp, #16
 801491a:	af00      	add	r7, sp, #0
 801491c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801491e:	f001 fa53 	bl	8015dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801492a:	429a      	cmp	r2, r3
 801492c:	d102      	bne.n	8014934 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801492e:	2301      	movs	r3, #1
 8014930:	60fb      	str	r3, [r7, #12]
 8014932:	e001      	b.n	8014938 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014934:	2300      	movs	r3, #0
 8014936:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014938:	f001 fa78 	bl	8015e2c <vPortExitCritical>

	return xReturn;
 801493c:	68fb      	ldr	r3, [r7, #12]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014946:	b580      	push	{r7, lr}
 8014948:	b08e      	sub	sp, #56	; 0x38
 801494a:	af04      	add	r7, sp, #16
 801494c:	60f8      	str	r0, [r7, #12]
 801494e:	60b9      	str	r1, [r7, #8]
 8014950:	607a      	str	r2, [r7, #4]
 8014952:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10b      	bne.n	8014972 <xTaskCreateStatic+0x2c>
 801495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495e:	b672      	cpsid	i
 8014960:	f383 8811 	msr	BASEPRI, r3
 8014964:	f3bf 8f6f 	isb	sy
 8014968:	f3bf 8f4f 	dsb	sy
 801496c:	b662      	cpsie	i
 801496e:	623b      	str	r3, [r7, #32]
 8014970:	e7fe      	b.n	8014970 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8014972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014974:	2b00      	cmp	r3, #0
 8014976:	d10b      	bne.n	8014990 <xTaskCreateStatic+0x4a>
 8014978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801497c:	b672      	cpsid	i
 801497e:	f383 8811 	msr	BASEPRI, r3
 8014982:	f3bf 8f6f 	isb	sy
 8014986:	f3bf 8f4f 	dsb	sy
 801498a:	b662      	cpsie	i
 801498c:	61fb      	str	r3, [r7, #28]
 801498e:	e7fe      	b.n	801498e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014990:	2354      	movs	r3, #84	; 0x54
 8014992:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	2b54      	cmp	r3, #84	; 0x54
 8014998:	d00b      	beq.n	80149b2 <xTaskCreateStatic+0x6c>
 801499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801499e:	b672      	cpsid	i
 80149a0:	f383 8811 	msr	BASEPRI, r3
 80149a4:	f3bf 8f6f 	isb	sy
 80149a8:	f3bf 8f4f 	dsb	sy
 80149ac:	b662      	cpsie	i
 80149ae:	61bb      	str	r3, [r7, #24]
 80149b0:	e7fe      	b.n	80149b0 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80149b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80149b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d01e      	beq.n	80149f8 <xTaskCreateStatic+0xb2>
 80149ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d01b      	beq.n	80149f8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80149c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149cc:	2202      	movs	r2, #2
 80149ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80149d2:	2300      	movs	r3, #0
 80149d4:	9303      	str	r3, [sp, #12]
 80149d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d8:	9302      	str	r3, [sp, #8]
 80149da:	f107 0314 	add.w	r3, r7, #20
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	68b9      	ldr	r1, [r7, #8]
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f000 f850 	bl	8014a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80149f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149f2:	f000 f8d5 	bl	8014ba0 <prvAddNewTaskToReadyList>
 80149f6:	e001      	b.n	80149fc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80149f8:	2300      	movs	r3, #0
 80149fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80149fc:	697b      	ldr	r3, [r7, #20]
	}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3728      	adds	r7, #40	; 0x28
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b08c      	sub	sp, #48	; 0x30
 8014a0a:	af04      	add	r7, sp, #16
 8014a0c:	60f8      	str	r0, [r7, #12]
 8014a0e:	60b9      	str	r1, [r7, #8]
 8014a10:	603b      	str	r3, [r7, #0]
 8014a12:	4613      	mov	r3, r2
 8014a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a16:	88fb      	ldrh	r3, [r7, #6]
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f001 faf6 	bl	801600c <pvPortMalloc>
 8014a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00e      	beq.n	8014a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014a28:	2054      	movs	r0, #84	; 0x54
 8014a2a:	f001 faef 	bl	801600c <pvPortMalloc>
 8014a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d003      	beq.n	8014a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	697a      	ldr	r2, [r7, #20]
 8014a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8014a3c:	e005      	b.n	8014a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014a3e:	6978      	ldr	r0, [r7, #20]
 8014a40:	f001 fbac 	bl	801619c <vPortFree>
 8014a44:	e001      	b.n	8014a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014a46:	2300      	movs	r3, #0
 8014a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014a4a:	69fb      	ldr	r3, [r7, #28]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d017      	beq.n	8014a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	2200      	movs	r2, #0
 8014a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014a58:	88fa      	ldrh	r2, [r7, #6]
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	9303      	str	r3, [sp, #12]
 8014a5e:	69fb      	ldr	r3, [r7, #28]
 8014a60:	9302      	str	r3, [sp, #8]
 8014a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a64:	9301      	str	r3, [sp, #4]
 8014a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	68b9      	ldr	r1, [r7, #8]
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f000 f80e 	bl	8014a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a74:	69f8      	ldr	r0, [r7, #28]
 8014a76:	f000 f893 	bl	8014ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	61bb      	str	r3, [r7, #24]
 8014a7e:	e002      	b.n	8014a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014a80:	f04f 33ff 	mov.w	r3, #4294967295
 8014a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014a86:	69bb      	ldr	r3, [r7, #24]
	}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3720      	adds	r7, #32
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}

08014a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b088      	sub	sp, #32
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	607a      	str	r2, [r7, #4]
 8014a9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014aa2:	6879      	ldr	r1, [r7, #4]
 8014aa4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014aa8:	440b      	add	r3, r1
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	4413      	add	r3, r2
 8014aae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014ab0:	69bb      	ldr	r3, [r7, #24]
 8014ab2:	f023 0307 	bic.w	r3, r3, #7
 8014ab6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014ab8:	69bb      	ldr	r3, [r7, #24]
 8014aba:	f003 0307 	and.w	r3, r3, #7
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d00b      	beq.n	8014ada <prvInitialiseNewTask+0x4a>
 8014ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac6:	b672      	cpsid	i
 8014ac8:	f383 8811 	msr	BASEPRI, r3
 8014acc:	f3bf 8f6f 	isb	sy
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	b662      	cpsie	i
 8014ad6:	617b      	str	r3, [r7, #20]
 8014ad8:	e7fe      	b.n	8014ad8 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d01f      	beq.n	8014b20 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	61fb      	str	r3, [r7, #28]
 8014ae4:	e012      	b.n	8014b0c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	4413      	add	r3, r2
 8014aec:	7819      	ldrb	r1, [r3, #0]
 8014aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	4413      	add	r3, r2
 8014af4:	3334      	adds	r3, #52	; 0x34
 8014af6:	460a      	mov	r2, r1
 8014af8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014afa:	68ba      	ldr	r2, [r7, #8]
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	4413      	add	r3, r2
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d006      	beq.n	8014b14 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	3301      	adds	r3, #1
 8014b0a:	61fb      	str	r3, [r7, #28]
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	2b0f      	cmp	r3, #15
 8014b10:	d9e9      	bls.n	8014ae6 <prvInitialiseNewTask+0x56>
 8014b12:	e000      	b.n	8014b16 <prvInitialiseNewTask+0x86>
			{
				break;
 8014b14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	2200      	movs	r2, #0
 8014b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014b1e:	e003      	b.n	8014b28 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b22:	2200      	movs	r2, #0
 8014b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b2a:	2b06      	cmp	r3, #6
 8014b2c:	d901      	bls.n	8014b32 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014b2e:	2306      	movs	r3, #6
 8014b30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b40:	2200      	movs	r2, #0
 8014b42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b46:	3304      	adds	r3, #4
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7ff f852 	bl	8013bf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b50:	3318      	adds	r3, #24
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7ff f84d 	bl	8013bf2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b60:	f1c3 0207 	rsb	r2, r3, #7
 8014b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b70:	2200      	movs	r2, #0
 8014b72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b76:	2200      	movs	r2, #0
 8014b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014b7c:	683a      	ldr	r2, [r7, #0]
 8014b7e:	68f9      	ldr	r1, [r7, #12]
 8014b80:	69b8      	ldr	r0, [r7, #24]
 8014b82:	f001 f815 	bl	8015bb0 <pxPortInitialiseStack>
 8014b86:	4602      	mov	r2, r0
 8014b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d002      	beq.n	8014b98 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b98:	bf00      	nop
 8014b9a:	3720      	adds	r7, #32
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014ba8:	f001 f90e 	bl	8015dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014bac:	4b2a      	ldr	r3, [pc, #168]	; (8014c58 <prvAddNewTaskToReadyList+0xb8>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	4a29      	ldr	r2, [pc, #164]	; (8014c58 <prvAddNewTaskToReadyList+0xb8>)
 8014bb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014bb6:	4b29      	ldr	r3, [pc, #164]	; (8014c5c <prvAddNewTaskToReadyList+0xbc>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d109      	bne.n	8014bd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014bbe:	4a27      	ldr	r2, [pc, #156]	; (8014c5c <prvAddNewTaskToReadyList+0xbc>)
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014bc4:	4b24      	ldr	r3, [pc, #144]	; (8014c58 <prvAddNewTaskToReadyList+0xb8>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d110      	bne.n	8014bee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014bcc:	f000 fcf8 	bl	80155c0 <prvInitialiseTaskLists>
 8014bd0:	e00d      	b.n	8014bee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014bd2:	4b23      	ldr	r3, [pc, #140]	; (8014c60 <prvAddNewTaskToReadyList+0xc0>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d109      	bne.n	8014bee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014bda:	4b20      	ldr	r3, [pc, #128]	; (8014c5c <prvAddNewTaskToReadyList+0xbc>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d802      	bhi.n	8014bee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014be8:	4a1c      	ldr	r2, [pc, #112]	; (8014c5c <prvAddNewTaskToReadyList+0xbc>)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014bee:	4b1d      	ldr	r3, [pc, #116]	; (8014c64 <prvAddNewTaskToReadyList+0xc4>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	4a1b      	ldr	r2, [pc, #108]	; (8014c64 <prvAddNewTaskToReadyList+0xc4>)
 8014bf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	409a      	lsls	r2, r3
 8014c00:	4b19      	ldr	r3, [pc, #100]	; (8014c68 <prvAddNewTaskToReadyList+0xc8>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4313      	orrs	r3, r2
 8014c06:	4a18      	ldr	r2, [pc, #96]	; (8014c68 <prvAddNewTaskToReadyList+0xc8>)
 8014c08:	6013      	str	r3, [r2, #0]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c0e:	4613      	mov	r3, r2
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	4413      	add	r3, r2
 8014c14:	009b      	lsls	r3, r3, #2
 8014c16:	4a15      	ldr	r2, [pc, #84]	; (8014c6c <prvAddNewTaskToReadyList+0xcc>)
 8014c18:	441a      	add	r2, r3
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	4619      	mov	r1, r3
 8014c20:	4610      	mov	r0, r2
 8014c22:	f7fe fff3 	bl	8013c0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014c26:	f001 f901 	bl	8015e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014c2a:	4b0d      	ldr	r3, [pc, #52]	; (8014c60 <prvAddNewTaskToReadyList+0xc0>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d00e      	beq.n	8014c50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014c32:	4b0a      	ldr	r3, [pc, #40]	; (8014c5c <prvAddNewTaskToReadyList+0xbc>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d207      	bcs.n	8014c50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014c40:	4b0b      	ldr	r3, [pc, #44]	; (8014c70 <prvAddNewTaskToReadyList+0xd0>)
 8014c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c46:	601a      	str	r2, [r3, #0]
 8014c48:	f3bf 8f4f 	dsb	sy
 8014c4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c50:	bf00      	nop
 8014c52:	3708      	adds	r7, #8
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}
 8014c58:	2000043c 	.word	0x2000043c
 8014c5c:	2000033c 	.word	0x2000033c
 8014c60:	20000448 	.word	0x20000448
 8014c64:	20000458 	.word	0x20000458
 8014c68:	20000444 	.word	0x20000444
 8014c6c:	20000340 	.word	0x20000340
 8014c70:	e000ed04 	.word	0xe000ed04

08014c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d018      	beq.n	8014cb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014c86:	4b14      	ldr	r3, [pc, #80]	; (8014cd8 <vTaskDelay+0x64>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d00b      	beq.n	8014ca6 <vTaskDelay+0x32>
 8014c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c92:	b672      	cpsid	i
 8014c94:	f383 8811 	msr	BASEPRI, r3
 8014c98:	f3bf 8f6f 	isb	sy
 8014c9c:	f3bf 8f4f 	dsb	sy
 8014ca0:	b662      	cpsie	i
 8014ca2:	60bb      	str	r3, [r7, #8]
 8014ca4:	e7fe      	b.n	8014ca4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014ca6:	f000 f9a1 	bl	8014fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014caa:	2100      	movs	r1, #0
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f000 ff19 	bl	8015ae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014cb2:	f000 f9a9 	bl	8015008 <xTaskResumeAll>
 8014cb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d107      	bne.n	8014cce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014cbe:	4b07      	ldr	r3, [pc, #28]	; (8014cdc <vTaskDelay+0x68>)
 8014cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cc4:	601a      	str	r2, [r3, #0]
 8014cc6:	f3bf 8f4f 	dsb	sy
 8014cca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014cce:	bf00      	nop
 8014cd0:	3710      	adds	r7, #16
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	20000464 	.word	0x20000464
 8014cdc:	e000ed04 	.word	0xe000ed04

08014ce0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014ce8:	f001 f86e 	bl	8015dc8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d102      	bne.n	8014cf8 <vTaskSuspend+0x18>
 8014cf2:	4b3d      	ldr	r3, [pc, #244]	; (8014de8 <vTaskSuspend+0x108>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	e000      	b.n	8014cfa <vTaskSuspend+0x1a>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	3304      	adds	r3, #4
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7fe ffe0 	bl	8013cc6 <uxListRemove>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d115      	bne.n	8014d38 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d10:	4936      	ldr	r1, [pc, #216]	; (8014dec <vTaskSuspend+0x10c>)
 8014d12:	4613      	mov	r3, r2
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	4413      	add	r3, r2
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	440b      	add	r3, r1
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d10a      	bne.n	8014d38 <vTaskSuspend+0x58>
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d26:	2201      	movs	r2, #1
 8014d28:	fa02 f303 	lsl.w	r3, r2, r3
 8014d2c:	43da      	mvns	r2, r3
 8014d2e:	4b30      	ldr	r3, [pc, #192]	; (8014df0 <vTaskSuspend+0x110>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	4013      	ands	r3, r2
 8014d34:	4a2e      	ldr	r2, [pc, #184]	; (8014df0 <vTaskSuspend+0x110>)
 8014d36:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d004      	beq.n	8014d4a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	3318      	adds	r3, #24
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7fe ffbe 	bl	8013cc6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	3304      	adds	r3, #4
 8014d4e:	4619      	mov	r1, r3
 8014d50:	4828      	ldr	r0, [pc, #160]	; (8014df4 <vTaskSuspend+0x114>)
 8014d52:	f7fe ff5b 	bl	8013c0c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014d5c:	b2db      	uxtb	r3, r3
 8014d5e:	2b01      	cmp	r3, #1
 8014d60:	d103      	bne.n	8014d6a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2200      	movs	r2, #0
 8014d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014d6a:	f001 f85f 	bl	8015e2c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014d6e:	4b22      	ldr	r3, [pc, #136]	; (8014df8 <vTaskSuspend+0x118>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d005      	beq.n	8014d82 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014d76:	f001 f827 	bl	8015dc8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014d7a:	f000 fcbd 	bl	80156f8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014d7e:	f001 f855 	bl	8015e2c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014d82:	4b19      	ldr	r3, [pc, #100]	; (8014de8 <vTaskSuspend+0x108>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	68fa      	ldr	r2, [r7, #12]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d128      	bne.n	8014dde <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8014d8c:	4b1a      	ldr	r3, [pc, #104]	; (8014df8 <vTaskSuspend+0x118>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d018      	beq.n	8014dc6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014d94:	4b19      	ldr	r3, [pc, #100]	; (8014dfc <vTaskSuspend+0x11c>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d00b      	beq.n	8014db4 <vTaskSuspend+0xd4>
 8014d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da0:	b672      	cpsid	i
 8014da2:	f383 8811 	msr	BASEPRI, r3
 8014da6:	f3bf 8f6f 	isb	sy
 8014daa:	f3bf 8f4f 	dsb	sy
 8014dae:	b662      	cpsie	i
 8014db0:	60bb      	str	r3, [r7, #8]
 8014db2:	e7fe      	b.n	8014db2 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 8014db4:	4b12      	ldr	r3, [pc, #72]	; (8014e00 <vTaskSuspend+0x120>)
 8014db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dba:	601a      	str	r2, [r3, #0]
 8014dbc:	f3bf 8f4f 	dsb	sy
 8014dc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014dc4:	e00b      	b.n	8014dde <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014dc6:	4b0b      	ldr	r3, [pc, #44]	; (8014df4 <vTaskSuspend+0x114>)
 8014dc8:	681a      	ldr	r2, [r3, #0]
 8014dca:	4b0e      	ldr	r3, [pc, #56]	; (8014e04 <vTaskSuspend+0x124>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d103      	bne.n	8014dda <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8014dd2:	4b05      	ldr	r3, [pc, #20]	; (8014de8 <vTaskSuspend+0x108>)
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	601a      	str	r2, [r3, #0]
	}
 8014dd8:	e001      	b.n	8014dde <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8014dda:	f000 fa6d 	bl	80152b8 <vTaskSwitchContext>
	}
 8014dde:	bf00      	nop
 8014de0:	3710      	adds	r7, #16
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	2000033c 	.word	0x2000033c
 8014dec:	20000340 	.word	0x20000340
 8014df0:	20000444 	.word	0x20000444
 8014df4:	20000428 	.word	0x20000428
 8014df8:	20000448 	.word	0x20000448
 8014dfc:	20000464 	.word	0x20000464
 8014e00:	e000ed04 	.word	0xe000ed04
 8014e04:	2000043c 	.word	0x2000043c

08014e08 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014e08:	b480      	push	{r7}
 8014e0a:	b087      	sub	sp, #28
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014e10:	2300      	movs	r3, #0
 8014e12:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d10b      	bne.n	8014e36 <prvTaskIsTaskSuspended+0x2e>
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	b672      	cpsid	i
 8014e24:	f383 8811 	msr	BASEPRI, r3
 8014e28:	f3bf 8f6f 	isb	sy
 8014e2c:	f3bf 8f4f 	dsb	sy
 8014e30:	b662      	cpsie	i
 8014e32:	60fb      	str	r3, [r7, #12]
 8014e34:	e7fe      	b.n	8014e34 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	695b      	ldr	r3, [r3, #20]
 8014e3a:	4a0a      	ldr	r2, [pc, #40]	; (8014e64 <prvTaskIsTaskSuspended+0x5c>)
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	d10a      	bne.n	8014e56 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e44:	4a08      	ldr	r2, [pc, #32]	; (8014e68 <prvTaskIsTaskSuspended+0x60>)
 8014e46:	4293      	cmp	r3, r2
 8014e48:	d005      	beq.n	8014e56 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d101      	bne.n	8014e56 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8014e52:	2301      	movs	r3, #1
 8014e54:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e56:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014e58:	4618      	mov	r0, r3
 8014e5a:	371c      	adds	r7, #28
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr
 8014e64:	20000428 	.word	0x20000428
 8014e68:	200003fc 	.word	0x200003fc

08014e6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d10b      	bne.n	8014e96 <vTaskResume+0x2a>
 8014e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e82:	b672      	cpsid	i
 8014e84:	f383 8811 	msr	BASEPRI, r3
 8014e88:	f3bf 8f6f 	isb	sy
 8014e8c:	f3bf 8f4f 	dsb	sy
 8014e90:	b662      	cpsie	i
 8014e92:	60bb      	str	r3, [r7, #8]
 8014e94:	e7fe      	b.n	8014e94 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014e96:	4b20      	ldr	r3, [pc, #128]	; (8014f18 <vTaskResume+0xac>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	68fa      	ldr	r2, [r7, #12]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d037      	beq.n	8014f10 <vTaskResume+0xa4>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d034      	beq.n	8014f10 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8014ea6:	f000 ff8f 	bl	8015dc8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014eaa:	68f8      	ldr	r0, [r7, #12]
 8014eac:	f7ff ffac 	bl	8014e08 <prvTaskIsTaskSuspended>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d02a      	beq.n	8014f0c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	3304      	adds	r3, #4
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fe ff03 	bl	8013cc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	409a      	lsls	r2, r3
 8014ec8:	4b14      	ldr	r3, [pc, #80]	; (8014f1c <vTaskResume+0xb0>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4313      	orrs	r3, r2
 8014ece:	4a13      	ldr	r2, [pc, #76]	; (8014f1c <vTaskResume+0xb0>)
 8014ed0:	6013      	str	r3, [r2, #0]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	009b      	lsls	r3, r3, #2
 8014eda:	4413      	add	r3, r2
 8014edc:	009b      	lsls	r3, r3, #2
 8014ede:	4a10      	ldr	r2, [pc, #64]	; (8014f20 <vTaskResume+0xb4>)
 8014ee0:	441a      	add	r2, r3
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	3304      	adds	r3, #4
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	4610      	mov	r0, r2
 8014eea:	f7fe fe8f 	bl	8013c0c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ef2:	4b09      	ldr	r3, [pc, #36]	; (8014f18 <vTaskResume+0xac>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d307      	bcc.n	8014f0c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014efc:	4b09      	ldr	r3, [pc, #36]	; (8014f24 <vTaskResume+0xb8>)
 8014efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f02:	601a      	str	r2, [r3, #0]
 8014f04:	f3bf 8f4f 	dsb	sy
 8014f08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014f0c:	f000 ff8e 	bl	8015e2c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f10:	bf00      	nop
 8014f12:	3710      	adds	r7, #16
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	2000033c 	.word	0x2000033c
 8014f1c:	20000444 	.word	0x20000444
 8014f20:	20000340 	.word	0x20000340
 8014f24:	e000ed04 	.word	0xe000ed04

08014f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b08a      	sub	sp, #40	; 0x28
 8014f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014f32:	2300      	movs	r3, #0
 8014f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014f36:	463a      	mov	r2, r7
 8014f38:	1d39      	adds	r1, r7, #4
 8014f3a:	f107 0308 	add.w	r3, r7, #8
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7f6 fd6e 	bl	800ba20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	68ba      	ldr	r2, [r7, #8]
 8014f4a:	9202      	str	r2, [sp, #8]
 8014f4c:	9301      	str	r3, [sp, #4]
 8014f4e:	2300      	movs	r3, #0
 8014f50:	9300      	str	r3, [sp, #0]
 8014f52:	2300      	movs	r3, #0
 8014f54:	460a      	mov	r2, r1
 8014f56:	491f      	ldr	r1, [pc, #124]	; (8014fd4 <vTaskStartScheduler+0xac>)
 8014f58:	481f      	ldr	r0, [pc, #124]	; (8014fd8 <vTaskStartScheduler+0xb0>)
 8014f5a:	f7ff fcf4 	bl	8014946 <xTaskCreateStatic>
 8014f5e:	4602      	mov	r2, r0
 8014f60:	4b1e      	ldr	r3, [pc, #120]	; (8014fdc <vTaskStartScheduler+0xb4>)
 8014f62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014f64:	4b1d      	ldr	r3, [pc, #116]	; (8014fdc <vTaskStartScheduler+0xb4>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d002      	beq.n	8014f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	617b      	str	r3, [r7, #20]
 8014f70:	e001      	b.n	8014f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014f72:	2300      	movs	r3, #0
 8014f74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d117      	bne.n	8014fac <vTaskStartScheduler+0x84>
 8014f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f80:	b672      	cpsid	i
 8014f82:	f383 8811 	msr	BASEPRI, r3
 8014f86:	f3bf 8f6f 	isb	sy
 8014f8a:	f3bf 8f4f 	dsb	sy
 8014f8e:	b662      	cpsie	i
 8014f90:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014f92:	4b13      	ldr	r3, [pc, #76]	; (8014fe0 <vTaskStartScheduler+0xb8>)
 8014f94:	f04f 32ff 	mov.w	r2, #4294967295
 8014f98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014f9a:	4b12      	ldr	r3, [pc, #72]	; (8014fe4 <vTaskStartScheduler+0xbc>)
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014fa0:	4b11      	ldr	r3, [pc, #68]	; (8014fe8 <vTaskStartScheduler+0xc0>)
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014fa6:	f000 fe93 	bl	8015cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014faa:	e00f      	b.n	8014fcc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb2:	d10b      	bne.n	8014fcc <vTaskStartScheduler+0xa4>
 8014fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb8:	b672      	cpsid	i
 8014fba:	f383 8811 	msr	BASEPRI, r3
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f3bf 8f4f 	dsb	sy
 8014fc6:	b662      	cpsie	i
 8014fc8:	60fb      	str	r3, [r7, #12]
 8014fca:	e7fe      	b.n	8014fca <vTaskStartScheduler+0xa2>
}
 8014fcc:	bf00      	nop
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	080166a4 	.word	0x080166a4
 8014fd8:	08015591 	.word	0x08015591
 8014fdc:	20000460 	.word	0x20000460
 8014fe0:	2000045c 	.word	0x2000045c
 8014fe4:	20000448 	.word	0x20000448
 8014fe8:	20000440 	.word	0x20000440

08014fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014fec:	b480      	push	{r7}
 8014fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014ff0:	4b04      	ldr	r3, [pc, #16]	; (8015004 <vTaskSuspendAll+0x18>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	4a03      	ldr	r2, [pc, #12]	; (8015004 <vTaskSuspendAll+0x18>)
 8014ff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014ffa:	bf00      	nop
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr
 8015004:	20000464 	.word	0x20000464

08015008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801500e:	2300      	movs	r3, #0
 8015010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015012:	2300      	movs	r3, #0
 8015014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015016:	4b42      	ldr	r3, [pc, #264]	; (8015120 <xTaskResumeAll+0x118>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d10b      	bne.n	8015036 <xTaskResumeAll+0x2e>
 801501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015022:	b672      	cpsid	i
 8015024:	f383 8811 	msr	BASEPRI, r3
 8015028:	f3bf 8f6f 	isb	sy
 801502c:	f3bf 8f4f 	dsb	sy
 8015030:	b662      	cpsie	i
 8015032:	603b      	str	r3, [r7, #0]
 8015034:	e7fe      	b.n	8015034 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015036:	f000 fec7 	bl	8015dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801503a:	4b39      	ldr	r3, [pc, #228]	; (8015120 <xTaskResumeAll+0x118>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	3b01      	subs	r3, #1
 8015040:	4a37      	ldr	r2, [pc, #220]	; (8015120 <xTaskResumeAll+0x118>)
 8015042:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015044:	4b36      	ldr	r3, [pc, #216]	; (8015120 <xTaskResumeAll+0x118>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d161      	bne.n	8015110 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801504c:	4b35      	ldr	r3, [pc, #212]	; (8015124 <xTaskResumeAll+0x11c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d05d      	beq.n	8015110 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015054:	e02e      	b.n	80150b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015056:	4b34      	ldr	r3, [pc, #208]	; (8015128 <xTaskResumeAll+0x120>)
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	68db      	ldr	r3, [r3, #12]
 801505c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	3318      	adds	r3, #24
 8015062:	4618      	mov	r0, r3
 8015064:	f7fe fe2f 	bl	8013cc6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	3304      	adds	r3, #4
 801506c:	4618      	mov	r0, r3
 801506e:	f7fe fe2a 	bl	8013cc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015076:	2201      	movs	r2, #1
 8015078:	409a      	lsls	r2, r3
 801507a:	4b2c      	ldr	r3, [pc, #176]	; (801512c <xTaskResumeAll+0x124>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	4313      	orrs	r3, r2
 8015080:	4a2a      	ldr	r2, [pc, #168]	; (801512c <xTaskResumeAll+0x124>)
 8015082:	6013      	str	r3, [r2, #0]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015088:	4613      	mov	r3, r2
 801508a:	009b      	lsls	r3, r3, #2
 801508c:	4413      	add	r3, r2
 801508e:	009b      	lsls	r3, r3, #2
 8015090:	4a27      	ldr	r2, [pc, #156]	; (8015130 <xTaskResumeAll+0x128>)
 8015092:	441a      	add	r2, r3
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	3304      	adds	r3, #4
 8015098:	4619      	mov	r1, r3
 801509a:	4610      	mov	r0, r2
 801509c:	f7fe fdb6 	bl	8013c0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a4:	4b23      	ldr	r3, [pc, #140]	; (8015134 <xTaskResumeAll+0x12c>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d302      	bcc.n	80150b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80150ae:	4b22      	ldr	r3, [pc, #136]	; (8015138 <xTaskResumeAll+0x130>)
 80150b0:	2201      	movs	r2, #1
 80150b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150b4:	4b1c      	ldr	r3, [pc, #112]	; (8015128 <xTaskResumeAll+0x120>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d1cc      	bne.n	8015056 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d001      	beq.n	80150c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80150c2:	f000 fb19 	bl	80156f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80150c6:	4b1d      	ldr	r3, [pc, #116]	; (801513c <xTaskResumeAll+0x134>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d010      	beq.n	80150f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80150d2:	f000 f837 	bl	8015144 <xTaskIncrementTick>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d002      	beq.n	80150e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80150dc:	4b16      	ldr	r3, [pc, #88]	; (8015138 <xTaskResumeAll+0x130>)
 80150de:	2201      	movs	r2, #1
 80150e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	3b01      	subs	r3, #1
 80150e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d1f1      	bne.n	80150d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80150ee:	4b13      	ldr	r3, [pc, #76]	; (801513c <xTaskResumeAll+0x134>)
 80150f0:	2200      	movs	r2, #0
 80150f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80150f4:	4b10      	ldr	r3, [pc, #64]	; (8015138 <xTaskResumeAll+0x130>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d009      	beq.n	8015110 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80150fc:	2301      	movs	r3, #1
 80150fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015100:	4b0f      	ldr	r3, [pc, #60]	; (8015140 <xTaskResumeAll+0x138>)
 8015102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015106:	601a      	str	r2, [r3, #0]
 8015108:	f3bf 8f4f 	dsb	sy
 801510c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015110:	f000 fe8c 	bl	8015e2c <vPortExitCritical>

	return xAlreadyYielded;
 8015114:	68bb      	ldr	r3, [r7, #8]
}
 8015116:	4618      	mov	r0, r3
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	20000464 	.word	0x20000464
 8015124:	2000043c 	.word	0x2000043c
 8015128:	200003fc 	.word	0x200003fc
 801512c:	20000444 	.word	0x20000444
 8015130:	20000340 	.word	0x20000340
 8015134:	2000033c 	.word	0x2000033c
 8015138:	20000450 	.word	0x20000450
 801513c:	2000044c 	.word	0x2000044c
 8015140:	e000ed04 	.word	0xe000ed04

08015144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b086      	sub	sp, #24
 8015148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801514a:	2300      	movs	r3, #0
 801514c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801514e:	4b4f      	ldr	r3, [pc, #316]	; (801528c <xTaskIncrementTick+0x148>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	f040 8089 	bne.w	801526a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015158:	4b4d      	ldr	r3, [pc, #308]	; (8015290 <xTaskIncrementTick+0x14c>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	3301      	adds	r3, #1
 801515e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015160:	4a4b      	ldr	r2, [pc, #300]	; (8015290 <xTaskIncrementTick+0x14c>)
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d121      	bne.n	80151b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801516c:	4b49      	ldr	r3, [pc, #292]	; (8015294 <xTaskIncrementTick+0x150>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00b      	beq.n	801518e <xTaskIncrementTick+0x4a>
 8015176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517a:	b672      	cpsid	i
 801517c:	f383 8811 	msr	BASEPRI, r3
 8015180:	f3bf 8f6f 	isb	sy
 8015184:	f3bf 8f4f 	dsb	sy
 8015188:	b662      	cpsie	i
 801518a:	603b      	str	r3, [r7, #0]
 801518c:	e7fe      	b.n	801518c <xTaskIncrementTick+0x48>
 801518e:	4b41      	ldr	r3, [pc, #260]	; (8015294 <xTaskIncrementTick+0x150>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	60fb      	str	r3, [r7, #12]
 8015194:	4b40      	ldr	r3, [pc, #256]	; (8015298 <xTaskIncrementTick+0x154>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	4a3e      	ldr	r2, [pc, #248]	; (8015294 <xTaskIncrementTick+0x150>)
 801519a:	6013      	str	r3, [r2, #0]
 801519c:	4a3e      	ldr	r2, [pc, #248]	; (8015298 <xTaskIncrementTick+0x154>)
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	6013      	str	r3, [r2, #0]
 80151a2:	4b3e      	ldr	r3, [pc, #248]	; (801529c <xTaskIncrementTick+0x158>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	3301      	adds	r3, #1
 80151a8:	4a3c      	ldr	r2, [pc, #240]	; (801529c <xTaskIncrementTick+0x158>)
 80151aa:	6013      	str	r3, [r2, #0]
 80151ac:	f000 faa4 	bl	80156f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80151b0:	4b3b      	ldr	r3, [pc, #236]	; (80152a0 <xTaskIncrementTick+0x15c>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	693a      	ldr	r2, [r7, #16]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d348      	bcc.n	801524c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80151ba:	4b36      	ldr	r3, [pc, #216]	; (8015294 <xTaskIncrementTick+0x150>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d104      	bne.n	80151ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151c4:	4b36      	ldr	r3, [pc, #216]	; (80152a0 <xTaskIncrementTick+0x15c>)
 80151c6:	f04f 32ff 	mov.w	r2, #4294967295
 80151ca:	601a      	str	r2, [r3, #0]
					break;
 80151cc:	e03e      	b.n	801524c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151ce:	4b31      	ldr	r3, [pc, #196]	; (8015294 <xTaskIncrementTick+0x150>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	68db      	ldr	r3, [r3, #12]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80151de:	693a      	ldr	r2, [r7, #16]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d203      	bcs.n	80151ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80151e6:	4a2e      	ldr	r2, [pc, #184]	; (80152a0 <xTaskIncrementTick+0x15c>)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80151ec:	e02e      	b.n	801524c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	3304      	adds	r3, #4
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fe fd67 	bl	8013cc6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d004      	beq.n	801520a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	3318      	adds	r3, #24
 8015204:	4618      	mov	r0, r3
 8015206:	f7fe fd5e 	bl	8013cc6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801520e:	2201      	movs	r2, #1
 8015210:	409a      	lsls	r2, r3
 8015212:	4b24      	ldr	r3, [pc, #144]	; (80152a4 <xTaskIncrementTick+0x160>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	4313      	orrs	r3, r2
 8015218:	4a22      	ldr	r2, [pc, #136]	; (80152a4 <xTaskIncrementTick+0x160>)
 801521a:	6013      	str	r3, [r2, #0]
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015220:	4613      	mov	r3, r2
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	4413      	add	r3, r2
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	4a1f      	ldr	r2, [pc, #124]	; (80152a8 <xTaskIncrementTick+0x164>)
 801522a:	441a      	add	r2, r3
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	3304      	adds	r3, #4
 8015230:	4619      	mov	r1, r3
 8015232:	4610      	mov	r0, r2
 8015234:	f7fe fcea 	bl	8013c0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801523c:	4b1b      	ldr	r3, [pc, #108]	; (80152ac <xTaskIncrementTick+0x168>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015242:	429a      	cmp	r2, r3
 8015244:	d3b9      	bcc.n	80151ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015246:	2301      	movs	r3, #1
 8015248:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801524a:	e7b6      	b.n	80151ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801524c:	4b17      	ldr	r3, [pc, #92]	; (80152ac <xTaskIncrementTick+0x168>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015252:	4915      	ldr	r1, [pc, #84]	; (80152a8 <xTaskIncrementTick+0x164>)
 8015254:	4613      	mov	r3, r2
 8015256:	009b      	lsls	r3, r3, #2
 8015258:	4413      	add	r3, r2
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	440b      	add	r3, r1
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	2b01      	cmp	r3, #1
 8015262:	d907      	bls.n	8015274 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8015264:	2301      	movs	r3, #1
 8015266:	617b      	str	r3, [r7, #20]
 8015268:	e004      	b.n	8015274 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801526a:	4b11      	ldr	r3, [pc, #68]	; (80152b0 <xTaskIncrementTick+0x16c>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	3301      	adds	r3, #1
 8015270:	4a0f      	ldr	r2, [pc, #60]	; (80152b0 <xTaskIncrementTick+0x16c>)
 8015272:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015274:	4b0f      	ldr	r3, [pc, #60]	; (80152b4 <xTaskIncrementTick+0x170>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d001      	beq.n	8015280 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 801527c:	2301      	movs	r3, #1
 801527e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015280:	697b      	ldr	r3, [r7, #20]
}
 8015282:	4618      	mov	r0, r3
 8015284:	3718      	adds	r7, #24
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	20000464 	.word	0x20000464
 8015290:	20000440 	.word	0x20000440
 8015294:	200003f4 	.word	0x200003f4
 8015298:	200003f8 	.word	0x200003f8
 801529c:	20000454 	.word	0x20000454
 80152a0:	2000045c 	.word	0x2000045c
 80152a4:	20000444 	.word	0x20000444
 80152a8:	20000340 	.word	0x20000340
 80152ac:	2000033c 	.word	0x2000033c
 80152b0:	2000044c 	.word	0x2000044c
 80152b4:	20000450 	.word	0x20000450

080152b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80152b8:	b480      	push	{r7}
 80152ba:	b087      	sub	sp, #28
 80152bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80152be:	4b27      	ldr	r3, [pc, #156]	; (801535c <vTaskSwitchContext+0xa4>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d003      	beq.n	80152ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80152c6:	4b26      	ldr	r3, [pc, #152]	; (8015360 <vTaskSwitchContext+0xa8>)
 80152c8:	2201      	movs	r2, #1
 80152ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80152cc:	e040      	b.n	8015350 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80152ce:	4b24      	ldr	r3, [pc, #144]	; (8015360 <vTaskSwitchContext+0xa8>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152d4:	4b23      	ldr	r3, [pc, #140]	; (8015364 <vTaskSwitchContext+0xac>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	fab3 f383 	clz	r3, r3
 80152e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80152e2:	7afb      	ldrb	r3, [r7, #11]
 80152e4:	f1c3 031f 	rsb	r3, r3, #31
 80152e8:	617b      	str	r3, [r7, #20]
 80152ea:	491f      	ldr	r1, [pc, #124]	; (8015368 <vTaskSwitchContext+0xb0>)
 80152ec:	697a      	ldr	r2, [r7, #20]
 80152ee:	4613      	mov	r3, r2
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	4413      	add	r3, r2
 80152f4:	009b      	lsls	r3, r3, #2
 80152f6:	440b      	add	r3, r1
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d10b      	bne.n	8015316 <vTaskSwitchContext+0x5e>
	__asm volatile
 80152fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015302:	b672      	cpsid	i
 8015304:	f383 8811 	msr	BASEPRI, r3
 8015308:	f3bf 8f6f 	isb	sy
 801530c:	f3bf 8f4f 	dsb	sy
 8015310:	b662      	cpsie	i
 8015312:	607b      	str	r3, [r7, #4]
 8015314:	e7fe      	b.n	8015314 <vTaskSwitchContext+0x5c>
 8015316:	697a      	ldr	r2, [r7, #20]
 8015318:	4613      	mov	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4413      	add	r3, r2
 801531e:	009b      	lsls	r3, r3, #2
 8015320:	4a11      	ldr	r2, [pc, #68]	; (8015368 <vTaskSwitchContext+0xb0>)
 8015322:	4413      	add	r3, r2
 8015324:	613b      	str	r3, [r7, #16]
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	685b      	ldr	r3, [r3, #4]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	605a      	str	r2, [r3, #4]
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	685a      	ldr	r2, [r3, #4]
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	3308      	adds	r3, #8
 8015338:	429a      	cmp	r2, r3
 801533a:	d104      	bne.n	8015346 <vTaskSwitchContext+0x8e>
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	685a      	ldr	r2, [r3, #4]
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	605a      	str	r2, [r3, #4]
 8015346:	693b      	ldr	r3, [r7, #16]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	4a07      	ldr	r2, [pc, #28]	; (801536c <vTaskSwitchContext+0xb4>)
 801534e:	6013      	str	r3, [r2, #0]
}
 8015350:	bf00      	nop
 8015352:	371c      	adds	r7, #28
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr
 801535c:	20000464 	.word	0x20000464
 8015360:	20000450 	.word	0x20000450
 8015364:	20000444 	.word	0x20000444
 8015368:	20000340 	.word	0x20000340
 801536c:	2000033c 	.word	0x2000033c

08015370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b084      	sub	sp, #16
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d10b      	bne.n	8015398 <vTaskPlaceOnEventList+0x28>
 8015380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015384:	b672      	cpsid	i
 8015386:	f383 8811 	msr	BASEPRI, r3
 801538a:	f3bf 8f6f 	isb	sy
 801538e:	f3bf 8f4f 	dsb	sy
 8015392:	b662      	cpsie	i
 8015394:	60fb      	str	r3, [r7, #12]
 8015396:	e7fe      	b.n	8015396 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015398:	4b07      	ldr	r3, [pc, #28]	; (80153b8 <vTaskPlaceOnEventList+0x48>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	3318      	adds	r3, #24
 801539e:	4619      	mov	r1, r3
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f7fe fc57 	bl	8013c54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80153a6:	2101      	movs	r1, #1
 80153a8:	6838      	ldr	r0, [r7, #0]
 80153aa:	f000 fb9b 	bl	8015ae4 <prvAddCurrentTaskToDelayedList>
}
 80153ae:	bf00      	nop
 80153b0:	3710      	adds	r7, #16
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	2000033c 	.word	0x2000033c

080153bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b086      	sub	sp, #24
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d10b      	bne.n	80153ea <xTaskRemoveFromEventList+0x2e>
 80153d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d6:	b672      	cpsid	i
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	b662      	cpsie	i
 80153e6:	60fb      	str	r3, [r7, #12]
 80153e8:	e7fe      	b.n	80153e8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	3318      	adds	r3, #24
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7fe fc69 	bl	8013cc6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153f4:	4b1d      	ldr	r3, [pc, #116]	; (801546c <xTaskRemoveFromEventList+0xb0>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d11c      	bne.n	8015436 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	3304      	adds	r3, #4
 8015400:	4618      	mov	r0, r3
 8015402:	f7fe fc60 	bl	8013cc6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801540a:	2201      	movs	r2, #1
 801540c:	409a      	lsls	r2, r3
 801540e:	4b18      	ldr	r3, [pc, #96]	; (8015470 <xTaskRemoveFromEventList+0xb4>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	4313      	orrs	r3, r2
 8015414:	4a16      	ldr	r2, [pc, #88]	; (8015470 <xTaskRemoveFromEventList+0xb4>)
 8015416:	6013      	str	r3, [r2, #0]
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541c:	4613      	mov	r3, r2
 801541e:	009b      	lsls	r3, r3, #2
 8015420:	4413      	add	r3, r2
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	4a13      	ldr	r2, [pc, #76]	; (8015474 <xTaskRemoveFromEventList+0xb8>)
 8015426:	441a      	add	r2, r3
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	3304      	adds	r3, #4
 801542c:	4619      	mov	r1, r3
 801542e:	4610      	mov	r0, r2
 8015430:	f7fe fbec 	bl	8013c0c <vListInsertEnd>
 8015434:	e005      	b.n	8015442 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	3318      	adds	r3, #24
 801543a:	4619      	mov	r1, r3
 801543c:	480e      	ldr	r0, [pc, #56]	; (8015478 <xTaskRemoveFromEventList+0xbc>)
 801543e:	f7fe fbe5 	bl	8013c0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015446:	4b0d      	ldr	r3, [pc, #52]	; (801547c <xTaskRemoveFromEventList+0xc0>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801544c:	429a      	cmp	r2, r3
 801544e:	d905      	bls.n	801545c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015450:	2301      	movs	r3, #1
 8015452:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015454:	4b0a      	ldr	r3, [pc, #40]	; (8015480 <xTaskRemoveFromEventList+0xc4>)
 8015456:	2201      	movs	r2, #1
 8015458:	601a      	str	r2, [r3, #0]
 801545a:	e001      	b.n	8015460 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801545c:	2300      	movs	r3, #0
 801545e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015460:	697b      	ldr	r3, [r7, #20]
}
 8015462:	4618      	mov	r0, r3
 8015464:	3718      	adds	r7, #24
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	20000464 	.word	0x20000464
 8015470:	20000444 	.word	0x20000444
 8015474:	20000340 	.word	0x20000340
 8015478:	200003fc 	.word	0x200003fc
 801547c:	2000033c 	.word	0x2000033c
 8015480:	20000450 	.word	0x20000450

08015484 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015484:	b480      	push	{r7}
 8015486:	b083      	sub	sp, #12
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801548c:	4b06      	ldr	r3, [pc, #24]	; (80154a8 <vTaskInternalSetTimeOutState+0x24>)
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015494:	4b05      	ldr	r3, [pc, #20]	; (80154ac <vTaskInternalSetTimeOutState+0x28>)
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	605a      	str	r2, [r3, #4]
}
 801549c:	bf00      	nop
 801549e:	370c      	adds	r7, #12
 80154a0:	46bd      	mov	sp, r7
 80154a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a6:	4770      	bx	lr
 80154a8:	20000454 	.word	0x20000454
 80154ac:	20000440 	.word	0x20000440

080154b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b088      	sub	sp, #32
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d10b      	bne.n	80154d8 <xTaskCheckForTimeOut+0x28>
 80154c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c4:	b672      	cpsid	i
 80154c6:	f383 8811 	msr	BASEPRI, r3
 80154ca:	f3bf 8f6f 	isb	sy
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	b662      	cpsie	i
 80154d4:	613b      	str	r3, [r7, #16]
 80154d6:	e7fe      	b.n	80154d6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d10b      	bne.n	80154f6 <xTaskCheckForTimeOut+0x46>
 80154de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e2:	b672      	cpsid	i
 80154e4:	f383 8811 	msr	BASEPRI, r3
 80154e8:	f3bf 8f6f 	isb	sy
 80154ec:	f3bf 8f4f 	dsb	sy
 80154f0:	b662      	cpsie	i
 80154f2:	60fb      	str	r3, [r7, #12]
 80154f4:	e7fe      	b.n	80154f4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80154f6:	f000 fc67 	bl	8015dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80154fa:	4b1d      	ldr	r3, [pc, #116]	; (8015570 <xTaskCheckForTimeOut+0xc0>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	69ba      	ldr	r2, [r7, #24]
 8015506:	1ad3      	subs	r3, r2, r3
 8015508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015512:	d102      	bne.n	801551a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015514:	2300      	movs	r3, #0
 8015516:	61fb      	str	r3, [r7, #28]
 8015518:	e023      	b.n	8015562 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681a      	ldr	r2, [r3, #0]
 801551e:	4b15      	ldr	r3, [pc, #84]	; (8015574 <xTaskCheckForTimeOut+0xc4>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	429a      	cmp	r2, r3
 8015524:	d007      	beq.n	8015536 <xTaskCheckForTimeOut+0x86>
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	69ba      	ldr	r2, [r7, #24]
 801552c:	429a      	cmp	r2, r3
 801552e:	d302      	bcc.n	8015536 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015530:	2301      	movs	r3, #1
 8015532:	61fb      	str	r3, [r7, #28]
 8015534:	e015      	b.n	8015562 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	697a      	ldr	r2, [r7, #20]
 801553c:	429a      	cmp	r2, r3
 801553e:	d20b      	bcs.n	8015558 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	681a      	ldr	r2, [r3, #0]
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	1ad2      	subs	r2, r2, r3
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f7ff ff99 	bl	8015484 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015552:	2300      	movs	r3, #0
 8015554:	61fb      	str	r3, [r7, #28]
 8015556:	e004      	b.n	8015562 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	2200      	movs	r2, #0
 801555c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801555e:	2301      	movs	r3, #1
 8015560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015562:	f000 fc63 	bl	8015e2c <vPortExitCritical>

	return xReturn;
 8015566:	69fb      	ldr	r3, [r7, #28]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3720      	adds	r7, #32
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}
 8015570:	20000440 	.word	0x20000440
 8015574:	20000454 	.word	0x20000454

08015578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015578:	b480      	push	{r7}
 801557a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801557c:	4b03      	ldr	r3, [pc, #12]	; (801558c <vTaskMissedYield+0x14>)
 801557e:	2201      	movs	r2, #1
 8015580:	601a      	str	r2, [r3, #0]
}
 8015582:	bf00      	nop
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr
 801558c:	20000450 	.word	0x20000450

08015590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015598:	f000 f852 	bl	8015640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801559c:	4b06      	ldr	r3, [pc, #24]	; (80155b8 <prvIdleTask+0x28>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d9f9      	bls.n	8015598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80155a4:	4b05      	ldr	r3, [pc, #20]	; (80155bc <prvIdleTask+0x2c>)
 80155a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155aa:	601a      	str	r2, [r3, #0]
 80155ac:	f3bf 8f4f 	dsb	sy
 80155b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80155b4:	e7f0      	b.n	8015598 <prvIdleTask+0x8>
 80155b6:	bf00      	nop
 80155b8:	20000340 	.word	0x20000340
 80155bc:	e000ed04 	.word	0xe000ed04

080155c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80155c6:	2300      	movs	r3, #0
 80155c8:	607b      	str	r3, [r7, #4]
 80155ca:	e00c      	b.n	80155e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80155cc:	687a      	ldr	r2, [r7, #4]
 80155ce:	4613      	mov	r3, r2
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	4413      	add	r3, r2
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	4a12      	ldr	r2, [pc, #72]	; (8015620 <prvInitialiseTaskLists+0x60>)
 80155d8:	4413      	add	r3, r2
 80155da:	4618      	mov	r0, r3
 80155dc:	f7fe fae9 	bl	8013bb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	3301      	adds	r3, #1
 80155e4:	607b      	str	r3, [r7, #4]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2b06      	cmp	r3, #6
 80155ea:	d9ef      	bls.n	80155cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80155ec:	480d      	ldr	r0, [pc, #52]	; (8015624 <prvInitialiseTaskLists+0x64>)
 80155ee:	f7fe fae0 	bl	8013bb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80155f2:	480d      	ldr	r0, [pc, #52]	; (8015628 <prvInitialiseTaskLists+0x68>)
 80155f4:	f7fe fadd 	bl	8013bb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80155f8:	480c      	ldr	r0, [pc, #48]	; (801562c <prvInitialiseTaskLists+0x6c>)
 80155fa:	f7fe fada 	bl	8013bb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80155fe:	480c      	ldr	r0, [pc, #48]	; (8015630 <prvInitialiseTaskLists+0x70>)
 8015600:	f7fe fad7 	bl	8013bb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015604:	480b      	ldr	r0, [pc, #44]	; (8015634 <prvInitialiseTaskLists+0x74>)
 8015606:	f7fe fad4 	bl	8013bb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801560a:	4b0b      	ldr	r3, [pc, #44]	; (8015638 <prvInitialiseTaskLists+0x78>)
 801560c:	4a05      	ldr	r2, [pc, #20]	; (8015624 <prvInitialiseTaskLists+0x64>)
 801560e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015610:	4b0a      	ldr	r3, [pc, #40]	; (801563c <prvInitialiseTaskLists+0x7c>)
 8015612:	4a05      	ldr	r2, [pc, #20]	; (8015628 <prvInitialiseTaskLists+0x68>)
 8015614:	601a      	str	r2, [r3, #0]
}
 8015616:	bf00      	nop
 8015618:	3708      	adds	r7, #8
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}
 801561e:	bf00      	nop
 8015620:	20000340 	.word	0x20000340
 8015624:	200003cc 	.word	0x200003cc
 8015628:	200003e0 	.word	0x200003e0
 801562c:	200003fc 	.word	0x200003fc
 8015630:	20000410 	.word	0x20000410
 8015634:	20000428 	.word	0x20000428
 8015638:	200003f4 	.word	0x200003f4
 801563c:	200003f8 	.word	0x200003f8

08015640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015646:	e019      	b.n	801567c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015648:	f000 fbbe 	bl	8015dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801564c:	4b0f      	ldr	r3, [pc, #60]	; (801568c <prvCheckTasksWaitingTermination+0x4c>)
 801564e:	68db      	ldr	r3, [r3, #12]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	3304      	adds	r3, #4
 8015658:	4618      	mov	r0, r3
 801565a:	f7fe fb34 	bl	8013cc6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801565e:	4b0c      	ldr	r3, [pc, #48]	; (8015690 <prvCheckTasksWaitingTermination+0x50>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	3b01      	subs	r3, #1
 8015664:	4a0a      	ldr	r2, [pc, #40]	; (8015690 <prvCheckTasksWaitingTermination+0x50>)
 8015666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015668:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <prvCheckTasksWaitingTermination+0x54>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	3b01      	subs	r3, #1
 801566e:	4a09      	ldr	r2, [pc, #36]	; (8015694 <prvCheckTasksWaitingTermination+0x54>)
 8015670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015672:	f000 fbdb 	bl	8015e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f000 f80e 	bl	8015698 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801567c:	4b05      	ldr	r3, [pc, #20]	; (8015694 <prvCheckTasksWaitingTermination+0x54>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d1e1      	bne.n	8015648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015684:	bf00      	nop
 8015686:	3708      	adds	r7, #8
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	20000410 	.word	0x20000410
 8015690:	2000043c 	.word	0x2000043c
 8015694:	20000424 	.word	0x20000424

08015698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d108      	bne.n	80156bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ae:	4618      	mov	r0, r3
 80156b0:	f000 fd74 	bl	801619c <vPortFree>
				vPortFree( pxTCB );
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f000 fd71 	bl	801619c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80156ba:	e019      	b.n	80156f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d103      	bne.n	80156ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 fd68 	bl	801619c <vPortFree>
	}
 80156cc:	e010      	b.n	80156f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80156d4:	2b02      	cmp	r3, #2
 80156d6:	d00b      	beq.n	80156f0 <prvDeleteTCB+0x58>
 80156d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156dc:	b672      	cpsid	i
 80156de:	f383 8811 	msr	BASEPRI, r3
 80156e2:	f3bf 8f6f 	isb	sy
 80156e6:	f3bf 8f4f 	dsb	sy
 80156ea:	b662      	cpsie	i
 80156ec:	60fb      	str	r3, [r7, #12]
 80156ee:	e7fe      	b.n	80156ee <prvDeleteTCB+0x56>
	}
 80156f0:	bf00      	nop
 80156f2:	3710      	adds	r7, #16
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80156fe:	4b0c      	ldr	r3, [pc, #48]	; (8015730 <prvResetNextTaskUnblockTime+0x38>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d104      	bne.n	8015712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015708:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <prvResetNextTaskUnblockTime+0x3c>)
 801570a:	f04f 32ff 	mov.w	r2, #4294967295
 801570e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015710:	e008      	b.n	8015724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015712:	4b07      	ldr	r3, [pc, #28]	; (8015730 <prvResetNextTaskUnblockTime+0x38>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	4a04      	ldr	r2, [pc, #16]	; (8015734 <prvResetNextTaskUnblockTime+0x3c>)
 8015722:	6013      	str	r3, [r2, #0]
}
 8015724:	bf00      	nop
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr
 8015730:	200003f4 	.word	0x200003f4
 8015734:	2000045c 	.word	0x2000045c

08015738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015738:	b480      	push	{r7}
 801573a:	b083      	sub	sp, #12
 801573c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801573e:	4b0b      	ldr	r3, [pc, #44]	; (801576c <xTaskGetSchedulerState+0x34>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d102      	bne.n	801574c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015746:	2301      	movs	r3, #1
 8015748:	607b      	str	r3, [r7, #4]
 801574a:	e008      	b.n	801575e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801574c:	4b08      	ldr	r3, [pc, #32]	; (8015770 <xTaskGetSchedulerState+0x38>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d102      	bne.n	801575a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015754:	2302      	movs	r3, #2
 8015756:	607b      	str	r3, [r7, #4]
 8015758:	e001      	b.n	801575e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801575a:	2300      	movs	r3, #0
 801575c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801575e:	687b      	ldr	r3, [r7, #4]
	}
 8015760:	4618      	mov	r0, r3
 8015762:	370c      	adds	r7, #12
 8015764:	46bd      	mov	sp, r7
 8015766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576a:	4770      	bx	lr
 801576c:	20000448 	.word	0x20000448
 8015770:	20000464 	.word	0x20000464

08015774 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015780:	2300      	movs	r3, #0
 8015782:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d069      	beq.n	801585e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801578e:	4b36      	ldr	r3, [pc, #216]	; (8015868 <xTaskPriorityInherit+0xf4>)
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015794:	429a      	cmp	r2, r3
 8015796:	d259      	bcs.n	801584c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015798:	68bb      	ldr	r3, [r7, #8]
 801579a:	699b      	ldr	r3, [r3, #24]
 801579c:	2b00      	cmp	r3, #0
 801579e:	db06      	blt.n	80157ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157a0:	4b31      	ldr	r3, [pc, #196]	; (8015868 <xTaskPriorityInherit+0xf4>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157a6:	f1c3 0207 	rsb	r2, r3, #7
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	6959      	ldr	r1, [r3, #20]
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157b6:	4613      	mov	r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	4413      	add	r3, r2
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	4a2b      	ldr	r2, [pc, #172]	; (801586c <xTaskPriorityInherit+0xf8>)
 80157c0:	4413      	add	r3, r2
 80157c2:	4299      	cmp	r1, r3
 80157c4:	d13a      	bne.n	801583c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	3304      	adds	r3, #4
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7fe fa7b 	bl	8013cc6 <uxListRemove>
 80157d0:	4603      	mov	r3, r0
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d115      	bne.n	8015802 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157da:	4924      	ldr	r1, [pc, #144]	; (801586c <xTaskPriorityInherit+0xf8>)
 80157dc:	4613      	mov	r3, r2
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	4413      	add	r3, r2
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	440b      	add	r3, r1
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d10a      	bne.n	8015802 <xTaskPriorityInherit+0x8e>
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157f0:	2201      	movs	r2, #1
 80157f2:	fa02 f303 	lsl.w	r3, r2, r3
 80157f6:	43da      	mvns	r2, r3
 80157f8:	4b1d      	ldr	r3, [pc, #116]	; (8015870 <xTaskPriorityInherit+0xfc>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	4013      	ands	r3, r2
 80157fe:	4a1c      	ldr	r2, [pc, #112]	; (8015870 <xTaskPriorityInherit+0xfc>)
 8015800:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015802:	4b19      	ldr	r3, [pc, #100]	; (8015868 <xTaskPriorityInherit+0xf4>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015810:	2201      	movs	r2, #1
 8015812:	409a      	lsls	r2, r3
 8015814:	4b16      	ldr	r3, [pc, #88]	; (8015870 <xTaskPriorityInherit+0xfc>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	4313      	orrs	r3, r2
 801581a:	4a15      	ldr	r2, [pc, #84]	; (8015870 <xTaskPriorityInherit+0xfc>)
 801581c:	6013      	str	r3, [r2, #0]
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015822:	4613      	mov	r3, r2
 8015824:	009b      	lsls	r3, r3, #2
 8015826:	4413      	add	r3, r2
 8015828:	009b      	lsls	r3, r3, #2
 801582a:	4a10      	ldr	r2, [pc, #64]	; (801586c <xTaskPriorityInherit+0xf8>)
 801582c:	441a      	add	r2, r3
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	3304      	adds	r3, #4
 8015832:	4619      	mov	r1, r3
 8015834:	4610      	mov	r0, r2
 8015836:	f7fe f9e9 	bl	8013c0c <vListInsertEnd>
 801583a:	e004      	b.n	8015846 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801583c:	4b0a      	ldr	r3, [pc, #40]	; (8015868 <xTaskPriorityInherit+0xf4>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015846:	2301      	movs	r3, #1
 8015848:	60fb      	str	r3, [r7, #12]
 801584a:	e008      	b.n	801585e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015850:	4b05      	ldr	r3, [pc, #20]	; (8015868 <xTaskPriorityInherit+0xf4>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015856:	429a      	cmp	r2, r3
 8015858:	d201      	bcs.n	801585e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801585a:	2301      	movs	r3, #1
 801585c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801585e:	68fb      	ldr	r3, [r7, #12]
	}
 8015860:	4618      	mov	r0, r3
 8015862:	3710      	adds	r7, #16
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}
 8015868:	2000033c 	.word	0x2000033c
 801586c:	20000340 	.word	0x20000340
 8015870:	20000444 	.word	0x20000444

08015874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015880:	2300      	movs	r3, #0
 8015882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d070      	beq.n	801596c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801588a:	4b3b      	ldr	r3, [pc, #236]	; (8015978 <xTaskPriorityDisinherit+0x104>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	693a      	ldr	r2, [r7, #16]
 8015890:	429a      	cmp	r2, r3
 8015892:	d00b      	beq.n	80158ac <xTaskPriorityDisinherit+0x38>
 8015894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015898:	b672      	cpsid	i
 801589a:	f383 8811 	msr	BASEPRI, r3
 801589e:	f3bf 8f6f 	isb	sy
 80158a2:	f3bf 8f4f 	dsb	sy
 80158a6:	b662      	cpsie	i
 80158a8:	60fb      	str	r3, [r7, #12]
 80158aa:	e7fe      	b.n	80158aa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d10b      	bne.n	80158cc <xTaskPriorityDisinherit+0x58>
 80158b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b8:	b672      	cpsid	i
 80158ba:	f383 8811 	msr	BASEPRI, r3
 80158be:	f3bf 8f6f 	isb	sy
 80158c2:	f3bf 8f4f 	dsb	sy
 80158c6:	b662      	cpsie	i
 80158c8:	60bb      	str	r3, [r7, #8]
 80158ca:	e7fe      	b.n	80158ca <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80158d0:	1e5a      	subs	r2, r3, #1
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158de:	429a      	cmp	r2, r3
 80158e0:	d044      	beq.n	801596c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d140      	bne.n	801596c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	3304      	adds	r3, #4
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7fe f9e9 	bl	8013cc6 <uxListRemove>
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d115      	bne.n	8015926 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158fe:	491f      	ldr	r1, [pc, #124]	; (801597c <xTaskPriorityDisinherit+0x108>)
 8015900:	4613      	mov	r3, r2
 8015902:	009b      	lsls	r3, r3, #2
 8015904:	4413      	add	r3, r2
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	440b      	add	r3, r1
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10a      	bne.n	8015926 <xTaskPriorityDisinherit+0xb2>
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015914:	2201      	movs	r2, #1
 8015916:	fa02 f303 	lsl.w	r3, r2, r3
 801591a:	43da      	mvns	r2, r3
 801591c:	4b18      	ldr	r3, [pc, #96]	; (8015980 <xTaskPriorityDisinherit+0x10c>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	4013      	ands	r3, r2
 8015922:	4a17      	ldr	r2, [pc, #92]	; (8015980 <xTaskPriorityDisinherit+0x10c>)
 8015924:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015932:	f1c3 0207 	rsb	r2, r3, #7
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801593e:	2201      	movs	r2, #1
 8015940:	409a      	lsls	r2, r3
 8015942:	4b0f      	ldr	r3, [pc, #60]	; (8015980 <xTaskPriorityDisinherit+0x10c>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	4313      	orrs	r3, r2
 8015948:	4a0d      	ldr	r2, [pc, #52]	; (8015980 <xTaskPriorityDisinherit+0x10c>)
 801594a:	6013      	str	r3, [r2, #0]
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015950:	4613      	mov	r3, r2
 8015952:	009b      	lsls	r3, r3, #2
 8015954:	4413      	add	r3, r2
 8015956:	009b      	lsls	r3, r3, #2
 8015958:	4a08      	ldr	r2, [pc, #32]	; (801597c <xTaskPriorityDisinherit+0x108>)
 801595a:	441a      	add	r2, r3
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	3304      	adds	r3, #4
 8015960:	4619      	mov	r1, r3
 8015962:	4610      	mov	r0, r2
 8015964:	f7fe f952 	bl	8013c0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015968:	2301      	movs	r3, #1
 801596a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801596c:	697b      	ldr	r3, [r7, #20]
	}
 801596e:	4618      	mov	r0, r3
 8015970:	3718      	adds	r7, #24
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	2000033c 	.word	0x2000033c
 801597c:	20000340 	.word	0x20000340
 8015980:	20000444 	.word	0x20000444

08015984 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015984:	b580      	push	{r7, lr}
 8015986:	b088      	sub	sp, #32
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015992:	2301      	movs	r3, #1
 8015994:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2b00      	cmp	r3, #0
 801599a:	f000 8085 	beq.w	8015aa8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d10b      	bne.n	80159be <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80159a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159aa:	b672      	cpsid	i
 80159ac:	f383 8811 	msr	BASEPRI, r3
 80159b0:	f3bf 8f6f 	isb	sy
 80159b4:	f3bf 8f4f 	dsb	sy
 80159b8:	b662      	cpsie	i
 80159ba:	60fb      	str	r3, [r7, #12]
 80159bc:	e7fe      	b.n	80159bc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159c2:	683a      	ldr	r2, [r7, #0]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d902      	bls.n	80159ce <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	61fb      	str	r3, [r7, #28]
 80159cc:	e002      	b.n	80159d4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80159d4:	69bb      	ldr	r3, [r7, #24]
 80159d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d8:	69fa      	ldr	r2, [r7, #28]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d064      	beq.n	8015aa8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80159de:	69bb      	ldr	r3, [r7, #24]
 80159e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159e2:	697a      	ldr	r2, [r7, #20]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d15f      	bne.n	8015aa8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80159e8:	4b31      	ldr	r3, [pc, #196]	; (8015ab0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	69ba      	ldr	r2, [r7, #24]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d10b      	bne.n	8015a0a <vTaskPriorityDisinheritAfterTimeout+0x86>
 80159f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f6:	b672      	cpsid	i
 80159f8:	f383 8811 	msr	BASEPRI, r3
 80159fc:	f3bf 8f6f 	isb	sy
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	b662      	cpsie	i
 8015a06:	60bb      	str	r3, [r7, #8]
 8015a08:	e7fe      	b.n	8015a08 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a0e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	69fa      	ldr	r2, [r7, #28]
 8015a14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	699b      	ldr	r3, [r3, #24]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	db04      	blt.n	8015a28 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a1e:	69fb      	ldr	r3, [r7, #28]
 8015a20:	f1c3 0207 	rsb	r2, r3, #7
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	6959      	ldr	r1, [r3, #20]
 8015a2c:	693a      	ldr	r2, [r7, #16]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	4413      	add	r3, r2
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	4a1f      	ldr	r2, [pc, #124]	; (8015ab4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015a38:	4413      	add	r3, r2
 8015a3a:	4299      	cmp	r1, r3
 8015a3c:	d134      	bne.n	8015aa8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	3304      	adds	r3, #4
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fe f93f 	bl	8013cc6 <uxListRemove>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d115      	bne.n	8015a7a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a52:	4918      	ldr	r1, [pc, #96]	; (8015ab4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015a54:	4613      	mov	r3, r2
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	4413      	add	r3, r2
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	440b      	add	r3, r1
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d10a      	bne.n	8015a7a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a68:	2201      	movs	r2, #1
 8015a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a6e:	43da      	mvns	r2, r3
 8015a70:	4b11      	ldr	r3, [pc, #68]	; (8015ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4013      	ands	r3, r2
 8015a76:	4a10      	ldr	r2, [pc, #64]	; (8015ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015a78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a7e:	2201      	movs	r2, #1
 8015a80:	409a      	lsls	r2, r3
 8015a82:	4b0d      	ldr	r3, [pc, #52]	; (8015ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	4313      	orrs	r3, r2
 8015a88:	4a0b      	ldr	r2, [pc, #44]	; (8015ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015a8a:	6013      	str	r3, [r2, #0]
 8015a8c:	69bb      	ldr	r3, [r7, #24]
 8015a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a90:	4613      	mov	r3, r2
 8015a92:	009b      	lsls	r3, r3, #2
 8015a94:	4413      	add	r3, r2
 8015a96:	009b      	lsls	r3, r3, #2
 8015a98:	4a06      	ldr	r2, [pc, #24]	; (8015ab4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015a9a:	441a      	add	r2, r3
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	3304      	adds	r3, #4
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	4610      	mov	r0, r2
 8015aa4:	f7fe f8b2 	bl	8013c0c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015aa8:	bf00      	nop
 8015aaa:	3720      	adds	r7, #32
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	2000033c 	.word	0x2000033c
 8015ab4:	20000340 	.word	0x20000340
 8015ab8:	20000444 	.word	0x20000444

08015abc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015abc:	b480      	push	{r7}
 8015abe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015ac0:	4b07      	ldr	r3, [pc, #28]	; (8015ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d004      	beq.n	8015ad2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015ac8:	4b05      	ldr	r3, [pc, #20]	; (8015ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015ace:	3201      	adds	r2, #1
 8015ad0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8015ad2:	4b03      	ldr	r3, [pc, #12]	; (8015ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
	}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr
 8015ae0:	2000033c 	.word	0x2000033c

08015ae4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015aee:	4b29      	ldr	r3, [pc, #164]	; (8015b94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015af4:	4b28      	ldr	r3, [pc, #160]	; (8015b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	3304      	adds	r3, #4
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7fe f8e3 	bl	8013cc6 <uxListRemove>
 8015b00:	4603      	mov	r3, r0
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10b      	bne.n	8015b1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015b06:	4b24      	ldr	r3, [pc, #144]	; (8015b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b12:	43da      	mvns	r2, r3
 8015b14:	4b21      	ldr	r3, [pc, #132]	; (8015b9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	4013      	ands	r3, r2
 8015b1a:	4a20      	ldr	r2, [pc, #128]	; (8015b9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8015b1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b24:	d10a      	bne.n	8015b3c <prvAddCurrentTaskToDelayedList+0x58>
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d007      	beq.n	8015b3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b2c:	4b1a      	ldr	r3, [pc, #104]	; (8015b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	3304      	adds	r3, #4
 8015b32:	4619      	mov	r1, r3
 8015b34:	481a      	ldr	r0, [pc, #104]	; (8015ba0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015b36:	f7fe f869 	bl	8013c0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015b3a:	e026      	b.n	8015b8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015b3c:	68fa      	ldr	r2, [r7, #12]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	4413      	add	r3, r2
 8015b42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015b44:	4b14      	ldr	r3, [pc, #80]	; (8015b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	68ba      	ldr	r2, [r7, #8]
 8015b4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	429a      	cmp	r2, r3
 8015b52:	d209      	bcs.n	8015b68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b54:	4b13      	ldr	r3, [pc, #76]	; (8015ba4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	4b0f      	ldr	r3, [pc, #60]	; (8015b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	3304      	adds	r3, #4
 8015b5e:	4619      	mov	r1, r3
 8015b60:	4610      	mov	r0, r2
 8015b62:	f7fe f877 	bl	8013c54 <vListInsert>
}
 8015b66:	e010      	b.n	8015b8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b68:	4b0f      	ldr	r3, [pc, #60]	; (8015ba8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	4b0a      	ldr	r3, [pc, #40]	; (8015b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	3304      	adds	r3, #4
 8015b72:	4619      	mov	r1, r3
 8015b74:	4610      	mov	r0, r2
 8015b76:	f7fe f86d 	bl	8013c54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015b7a:	4b0c      	ldr	r3, [pc, #48]	; (8015bac <prvAddCurrentTaskToDelayedList+0xc8>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	68ba      	ldr	r2, [r7, #8]
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d202      	bcs.n	8015b8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015b84:	4a09      	ldr	r2, [pc, #36]	; (8015bac <prvAddCurrentTaskToDelayedList+0xc8>)
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	6013      	str	r3, [r2, #0]
}
 8015b8a:	bf00      	nop
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	20000440 	.word	0x20000440
 8015b98:	2000033c 	.word	0x2000033c
 8015b9c:	20000444 	.word	0x20000444
 8015ba0:	20000428 	.word	0x20000428
 8015ba4:	200003f8 	.word	0x200003f8
 8015ba8:	200003f4 	.word	0x200003f4
 8015bac:	2000045c 	.word	0x2000045c

08015bb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015bb0:	b480      	push	{r7}
 8015bb2:	b085      	sub	sp, #20
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	60f8      	str	r0, [r7, #12]
 8015bb8:	60b9      	str	r1, [r7, #8]
 8015bba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	3b04      	subs	r3, #4
 8015bc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	3b04      	subs	r3, #4
 8015bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	f023 0201 	bic.w	r2, r3, #1
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	3b04      	subs	r3, #4
 8015bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015be0:	4a0c      	ldr	r2, [pc, #48]	; (8015c14 <pxPortInitialiseStack+0x64>)
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	3b14      	subs	r3, #20
 8015bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	3b04      	subs	r3, #4
 8015bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	f06f 0202 	mvn.w	r2, #2
 8015bfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	3b20      	subs	r3, #32
 8015c04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015c06:	68fb      	ldr	r3, [r7, #12]
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3714      	adds	r7, #20
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr
 8015c14:	08015c19 	.word	0x08015c19

08015c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b085      	sub	sp, #20
 8015c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015c22:	4b13      	ldr	r3, [pc, #76]	; (8015c70 <prvTaskExitError+0x58>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c2a:	d00b      	beq.n	8015c44 <prvTaskExitError+0x2c>
 8015c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c30:	b672      	cpsid	i
 8015c32:	f383 8811 	msr	BASEPRI, r3
 8015c36:	f3bf 8f6f 	isb	sy
 8015c3a:	f3bf 8f4f 	dsb	sy
 8015c3e:	b662      	cpsie	i
 8015c40:	60fb      	str	r3, [r7, #12]
 8015c42:	e7fe      	b.n	8015c42 <prvTaskExitError+0x2a>
 8015c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c48:	b672      	cpsid	i
 8015c4a:	f383 8811 	msr	BASEPRI, r3
 8015c4e:	f3bf 8f6f 	isb	sy
 8015c52:	f3bf 8f4f 	dsb	sy
 8015c56:	b662      	cpsie	i
 8015c58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015c5a:	bf00      	nop
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d0fc      	beq.n	8015c5c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015c62:	bf00      	nop
 8015c64:	3714      	adds	r7, #20
 8015c66:	46bd      	mov	sp, r7
 8015c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop
 8015c70:	20000020 	.word	0x20000020
	...

08015c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015c80:	4b07      	ldr	r3, [pc, #28]	; (8015ca0 <pxCurrentTCBConst2>)
 8015c82:	6819      	ldr	r1, [r3, #0]
 8015c84:	6808      	ldr	r0, [r1, #0]
 8015c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8a:	f380 8809 	msr	PSP, r0
 8015c8e:	f3bf 8f6f 	isb	sy
 8015c92:	f04f 0000 	mov.w	r0, #0
 8015c96:	f380 8811 	msr	BASEPRI, r0
 8015c9a:	4770      	bx	lr
 8015c9c:	f3af 8000 	nop.w

08015ca0 <pxCurrentTCBConst2>:
 8015ca0:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015ca4:	bf00      	nop
 8015ca6:	bf00      	nop

08015ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015ca8:	4808      	ldr	r0, [pc, #32]	; (8015ccc <prvPortStartFirstTask+0x24>)
 8015caa:	6800      	ldr	r0, [r0, #0]
 8015cac:	6800      	ldr	r0, [r0, #0]
 8015cae:	f380 8808 	msr	MSP, r0
 8015cb2:	f04f 0000 	mov.w	r0, #0
 8015cb6:	f380 8814 	msr	CONTROL, r0
 8015cba:	b662      	cpsie	i
 8015cbc:	b661      	cpsie	f
 8015cbe:	f3bf 8f4f 	dsb	sy
 8015cc2:	f3bf 8f6f 	isb	sy
 8015cc6:	df00      	svc	0
 8015cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015cca:	bf00      	nop
 8015ccc:	e000ed08 	.word	0xe000ed08

08015cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b084      	sub	sp, #16
 8015cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015cd6:	4b36      	ldr	r3, [pc, #216]	; (8015db0 <xPortStartScheduler+0xe0>)
 8015cd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	22ff      	movs	r2, #255	; 0xff
 8015ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015cf0:	78fb      	ldrb	r3, [r7, #3]
 8015cf2:	b2db      	uxtb	r3, r3
 8015cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015cf8:	b2da      	uxtb	r2, r3
 8015cfa:	4b2e      	ldr	r3, [pc, #184]	; (8015db4 <xPortStartScheduler+0xe4>)
 8015cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015cfe:	4b2e      	ldr	r3, [pc, #184]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d00:	2207      	movs	r2, #7
 8015d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d04:	e009      	b.n	8015d1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015d06:	4b2c      	ldr	r3, [pc, #176]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	3b01      	subs	r3, #1
 8015d0c:	4a2a      	ldr	r2, [pc, #168]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015d10:	78fb      	ldrb	r3, [r7, #3]
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d1a:	78fb      	ldrb	r3, [r7, #3]
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d22:	2b80      	cmp	r3, #128	; 0x80
 8015d24:	d0ef      	beq.n	8015d06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015d26:	4b24      	ldr	r3, [pc, #144]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f1c3 0307 	rsb	r3, r3, #7
 8015d2e:	2b04      	cmp	r3, #4
 8015d30:	d00b      	beq.n	8015d4a <xPortStartScheduler+0x7a>
 8015d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d36:	b672      	cpsid	i
 8015d38:	f383 8811 	msr	BASEPRI, r3
 8015d3c:	f3bf 8f6f 	isb	sy
 8015d40:	f3bf 8f4f 	dsb	sy
 8015d44:	b662      	cpsie	i
 8015d46:	60bb      	str	r3, [r7, #8]
 8015d48:	e7fe      	b.n	8015d48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015d4a:	4b1b      	ldr	r3, [pc, #108]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	021b      	lsls	r3, r3, #8
 8015d50:	4a19      	ldr	r2, [pc, #100]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015d54:	4b18      	ldr	r3, [pc, #96]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d5c:	4a16      	ldr	r2, [pc, #88]	; (8015db8 <xPortStartScheduler+0xe8>)
 8015d5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	b2da      	uxtb	r2, r3
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015d68:	4b14      	ldr	r3, [pc, #80]	; (8015dbc <xPortStartScheduler+0xec>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	4a13      	ldr	r2, [pc, #76]	; (8015dbc <xPortStartScheduler+0xec>)
 8015d6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015d72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015d74:	4b11      	ldr	r3, [pc, #68]	; (8015dbc <xPortStartScheduler+0xec>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	4a10      	ldr	r2, [pc, #64]	; (8015dbc <xPortStartScheduler+0xec>)
 8015d7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015d7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015d80:	f000 f8d4 	bl	8015f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015d84:	4b0e      	ldr	r3, [pc, #56]	; (8015dc0 <xPortStartScheduler+0xf0>)
 8015d86:	2200      	movs	r2, #0
 8015d88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015d8a:	f000 f8f3 	bl	8015f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015d8e:	4b0d      	ldr	r3, [pc, #52]	; (8015dc4 <xPortStartScheduler+0xf4>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	4a0c      	ldr	r2, [pc, #48]	; (8015dc4 <xPortStartScheduler+0xf4>)
 8015d94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015d98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015d9a:	f7ff ff85 	bl	8015ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015d9e:	f7ff fa8b 	bl	80152b8 <vTaskSwitchContext>
	prvTaskExitError();
 8015da2:	f7ff ff39 	bl	8015c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3710      	adds	r7, #16
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	e000e400 	.word	0xe000e400
 8015db4:	20000468 	.word	0x20000468
 8015db8:	2000046c 	.word	0x2000046c
 8015dbc:	e000ed20 	.word	0xe000ed20
 8015dc0:	20000020 	.word	0x20000020
 8015dc4:	e000ef34 	.word	0xe000ef34

08015dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd2:	b672      	cpsid	i
 8015dd4:	f383 8811 	msr	BASEPRI, r3
 8015dd8:	f3bf 8f6f 	isb	sy
 8015ddc:	f3bf 8f4f 	dsb	sy
 8015de0:	b662      	cpsie	i
 8015de2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015de4:	4b0f      	ldr	r3, [pc, #60]	; (8015e24 <vPortEnterCritical+0x5c>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	3301      	adds	r3, #1
 8015dea:	4a0e      	ldr	r2, [pc, #56]	; (8015e24 <vPortEnterCritical+0x5c>)
 8015dec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015dee:	4b0d      	ldr	r3, [pc, #52]	; (8015e24 <vPortEnterCritical+0x5c>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d110      	bne.n	8015e18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015df6:	4b0c      	ldr	r3, [pc, #48]	; (8015e28 <vPortEnterCritical+0x60>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d00b      	beq.n	8015e18 <vPortEnterCritical+0x50>
 8015e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e04:	b672      	cpsid	i
 8015e06:	f383 8811 	msr	BASEPRI, r3
 8015e0a:	f3bf 8f6f 	isb	sy
 8015e0e:	f3bf 8f4f 	dsb	sy
 8015e12:	b662      	cpsie	i
 8015e14:	603b      	str	r3, [r7, #0]
 8015e16:	e7fe      	b.n	8015e16 <vPortEnterCritical+0x4e>
	}
}
 8015e18:	bf00      	nop
 8015e1a:	370c      	adds	r7, #12
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e22:	4770      	bx	lr
 8015e24:	20000020 	.word	0x20000020
 8015e28:	e000ed04 	.word	0xe000ed04

08015e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b083      	sub	sp, #12
 8015e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015e32:	4b12      	ldr	r3, [pc, #72]	; (8015e7c <vPortExitCritical+0x50>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d10b      	bne.n	8015e52 <vPortExitCritical+0x26>
 8015e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e3e:	b672      	cpsid	i
 8015e40:	f383 8811 	msr	BASEPRI, r3
 8015e44:	f3bf 8f6f 	isb	sy
 8015e48:	f3bf 8f4f 	dsb	sy
 8015e4c:	b662      	cpsie	i
 8015e4e:	607b      	str	r3, [r7, #4]
 8015e50:	e7fe      	b.n	8015e50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015e52:	4b0a      	ldr	r3, [pc, #40]	; (8015e7c <vPortExitCritical+0x50>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	3b01      	subs	r3, #1
 8015e58:	4a08      	ldr	r2, [pc, #32]	; (8015e7c <vPortExitCritical+0x50>)
 8015e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015e5c:	4b07      	ldr	r3, [pc, #28]	; (8015e7c <vPortExitCritical+0x50>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d104      	bne.n	8015e6e <vPortExitCritical+0x42>
 8015e64:	2300      	movs	r3, #0
 8015e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015e6e:	bf00      	nop
 8015e70:	370c      	adds	r7, #12
 8015e72:	46bd      	mov	sp, r7
 8015e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e78:	4770      	bx	lr
 8015e7a:	bf00      	nop
 8015e7c:	20000020 	.word	0x20000020

08015e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015e80:	f3ef 8009 	mrs	r0, PSP
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	4b15      	ldr	r3, [pc, #84]	; (8015ee0 <pxCurrentTCBConst>)
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	f01e 0f10 	tst.w	lr, #16
 8015e90:	bf08      	it	eq
 8015e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9a:	6010      	str	r0, [r2, #0]
 8015e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015ea4:	b672      	cpsid	i
 8015ea6:	f380 8811 	msr	BASEPRI, r0
 8015eaa:	f3bf 8f4f 	dsb	sy
 8015eae:	f3bf 8f6f 	isb	sy
 8015eb2:	b662      	cpsie	i
 8015eb4:	f7ff fa00 	bl	80152b8 <vTaskSwitchContext>
 8015eb8:	f04f 0000 	mov.w	r0, #0
 8015ebc:	f380 8811 	msr	BASEPRI, r0
 8015ec0:	bc09      	pop	{r0, r3}
 8015ec2:	6819      	ldr	r1, [r3, #0]
 8015ec4:	6808      	ldr	r0, [r1, #0]
 8015ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eca:	f01e 0f10 	tst.w	lr, #16
 8015ece:	bf08      	it	eq
 8015ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ed4:	f380 8809 	msr	PSP, r0
 8015ed8:	f3bf 8f6f 	isb	sy
 8015edc:	4770      	bx	lr
 8015ede:	bf00      	nop

08015ee0 <pxCurrentTCBConst>:
 8015ee0:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015ee4:	bf00      	nop
 8015ee6:	bf00      	nop

08015ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
	__asm volatile
 8015eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef2:	b672      	cpsid	i
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	b662      	cpsie	i
 8015f02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015f04:	f7ff f91e 	bl	8015144 <xTaskIncrementTick>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d003      	beq.n	8015f16 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015f0e:	4b06      	ldr	r3, [pc, #24]	; (8015f28 <xPortSysTickHandler+0x40>)
 8015f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f14:	601a      	str	r2, [r3, #0]
 8015f16:	2300      	movs	r3, #0
 8015f18:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015f20:	bf00      	nop
 8015f22:	3708      	adds	r7, #8
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	e000ed04 	.word	0xe000ed04

08015f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015f30:	4b0b      	ldr	r3, [pc, #44]	; (8015f60 <vPortSetupTimerInterrupt+0x34>)
 8015f32:	2200      	movs	r2, #0
 8015f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015f36:	4b0b      	ldr	r3, [pc, #44]	; (8015f64 <vPortSetupTimerInterrupt+0x38>)
 8015f38:	2200      	movs	r2, #0
 8015f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015f3c:	4b0a      	ldr	r3, [pc, #40]	; (8015f68 <vPortSetupTimerInterrupt+0x3c>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	4a0a      	ldr	r2, [pc, #40]	; (8015f6c <vPortSetupTimerInterrupt+0x40>)
 8015f42:	fba2 2303 	umull	r2, r3, r2, r3
 8015f46:	099b      	lsrs	r3, r3, #6
 8015f48:	4a09      	ldr	r2, [pc, #36]	; (8015f70 <vPortSetupTimerInterrupt+0x44>)
 8015f4a:	3b01      	subs	r3, #1
 8015f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015f4e:	4b04      	ldr	r3, [pc, #16]	; (8015f60 <vPortSetupTimerInterrupt+0x34>)
 8015f50:	2207      	movs	r2, #7
 8015f52:	601a      	str	r2, [r3, #0]
}
 8015f54:	bf00      	nop
 8015f56:	46bd      	mov	sp, r7
 8015f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5c:	4770      	bx	lr
 8015f5e:	bf00      	nop
 8015f60:	e000e010 	.word	0xe000e010
 8015f64:	e000e018 	.word	0xe000e018
 8015f68:	20000014 	.word	0x20000014
 8015f6c:	10624dd3 	.word	0x10624dd3
 8015f70:	e000e014 	.word	0xe000e014

08015f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015f84 <vPortEnableVFP+0x10>
 8015f78:	6801      	ldr	r1, [r0, #0]
 8015f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015f7e:	6001      	str	r1, [r0, #0]
 8015f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015f82:	bf00      	nop
 8015f84:	e000ed88 	.word	0xe000ed88

08015f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015f88:	b480      	push	{r7}
 8015f8a:	b085      	sub	sp, #20
 8015f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015f8e:	f3ef 8305 	mrs	r3, IPSR
 8015f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2b0f      	cmp	r3, #15
 8015f98:	d915      	bls.n	8015fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015f9a:	4a18      	ldr	r2, [pc, #96]	; (8015ffc <vPortValidateInterruptPriority+0x74>)
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	4413      	add	r3, r2
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015fa4:	4b16      	ldr	r3, [pc, #88]	; (8016000 <vPortValidateInterruptPriority+0x78>)
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	7afa      	ldrb	r2, [r7, #11]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d20b      	bcs.n	8015fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb2:	b672      	cpsid	i
 8015fb4:	f383 8811 	msr	BASEPRI, r3
 8015fb8:	f3bf 8f6f 	isb	sy
 8015fbc:	f3bf 8f4f 	dsb	sy
 8015fc0:	b662      	cpsie	i
 8015fc2:	607b      	str	r3, [r7, #4]
 8015fc4:	e7fe      	b.n	8015fc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015fc6:	4b0f      	ldr	r3, [pc, #60]	; (8016004 <vPortValidateInterruptPriority+0x7c>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015fce:	4b0e      	ldr	r3, [pc, #56]	; (8016008 <vPortValidateInterruptPriority+0x80>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d90b      	bls.n	8015fee <vPortValidateInterruptPriority+0x66>
 8015fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fda:	b672      	cpsid	i
 8015fdc:	f383 8811 	msr	BASEPRI, r3
 8015fe0:	f3bf 8f6f 	isb	sy
 8015fe4:	f3bf 8f4f 	dsb	sy
 8015fe8:	b662      	cpsie	i
 8015fea:	603b      	str	r3, [r7, #0]
 8015fec:	e7fe      	b.n	8015fec <vPortValidateInterruptPriority+0x64>
	}
 8015fee:	bf00      	nop
 8015ff0:	3714      	adds	r7, #20
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff8:	4770      	bx	lr
 8015ffa:	bf00      	nop
 8015ffc:	e000e3f0 	.word	0xe000e3f0
 8016000:	20000468 	.word	0x20000468
 8016004:	e000ed0c 	.word	0xe000ed0c
 8016008:	2000046c 	.word	0x2000046c

0801600c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b08a      	sub	sp, #40	; 0x28
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016014:	2300      	movs	r3, #0
 8016016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016018:	f7fe ffe8 	bl	8014fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801601c:	4b5a      	ldr	r3, [pc, #360]	; (8016188 <pvPortMalloc+0x17c>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d101      	bne.n	8016028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016024:	f000 f916 	bl	8016254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016028:	4b58      	ldr	r3, [pc, #352]	; (801618c <pvPortMalloc+0x180>)
 801602a:	681a      	ldr	r2, [r3, #0]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	4013      	ands	r3, r2
 8016030:	2b00      	cmp	r3, #0
 8016032:	f040 8090 	bne.w	8016156 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d01e      	beq.n	801607a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801603c:	2208      	movs	r2, #8
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	4413      	add	r3, r2
 8016042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f003 0307 	and.w	r3, r3, #7
 801604a:	2b00      	cmp	r3, #0
 801604c:	d015      	beq.n	801607a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f023 0307 	bic.w	r3, r3, #7
 8016054:	3308      	adds	r3, #8
 8016056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f003 0307 	and.w	r3, r3, #7
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00b      	beq.n	801607a <pvPortMalloc+0x6e>
 8016062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016066:	b672      	cpsid	i
 8016068:	f383 8811 	msr	BASEPRI, r3
 801606c:	f3bf 8f6f 	isb	sy
 8016070:	f3bf 8f4f 	dsb	sy
 8016074:	b662      	cpsie	i
 8016076:	617b      	str	r3, [r7, #20]
 8016078:	e7fe      	b.n	8016078 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d06a      	beq.n	8016156 <pvPortMalloc+0x14a>
 8016080:	4b43      	ldr	r3, [pc, #268]	; (8016190 <pvPortMalloc+0x184>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	429a      	cmp	r2, r3
 8016088:	d865      	bhi.n	8016156 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801608a:	4b42      	ldr	r3, [pc, #264]	; (8016194 <pvPortMalloc+0x188>)
 801608c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801608e:	4b41      	ldr	r3, [pc, #260]	; (8016194 <pvPortMalloc+0x188>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016094:	e004      	b.n	80160a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	687a      	ldr	r2, [r7, #4]
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d903      	bls.n	80160b2 <pvPortMalloc+0xa6>
 80160aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1f1      	bne.n	8016096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80160b2:	4b35      	ldr	r3, [pc, #212]	; (8016188 <pvPortMalloc+0x17c>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d04c      	beq.n	8016156 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80160bc:	6a3b      	ldr	r3, [r7, #32]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	2208      	movs	r2, #8
 80160c2:	4413      	add	r3, r2
 80160c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80160c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	6a3b      	ldr	r3, [r7, #32]
 80160cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80160ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d0:	685a      	ldr	r2, [r3, #4]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	1ad2      	subs	r2, r2, r3
 80160d6:	2308      	movs	r3, #8
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	429a      	cmp	r2, r3
 80160dc:	d920      	bls.n	8016120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80160de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	4413      	add	r3, r2
 80160e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160e6:	69bb      	ldr	r3, [r7, #24]
 80160e8:	f003 0307 	and.w	r3, r3, #7
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d00b      	beq.n	8016108 <pvPortMalloc+0xfc>
 80160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f4:	b672      	cpsid	i
 80160f6:	f383 8811 	msr	BASEPRI, r3
 80160fa:	f3bf 8f6f 	isb	sy
 80160fe:	f3bf 8f4f 	dsb	sy
 8016102:	b662      	cpsie	i
 8016104:	613b      	str	r3, [r7, #16]
 8016106:	e7fe      	b.n	8016106 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610a:	685a      	ldr	r2, [r3, #4]
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	1ad2      	subs	r2, r2, r3
 8016110:	69bb      	ldr	r3, [r7, #24]
 8016112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801611a:	69b8      	ldr	r0, [r7, #24]
 801611c:	f000 f8fc 	bl	8016318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016120:	4b1b      	ldr	r3, [pc, #108]	; (8016190 <pvPortMalloc+0x184>)
 8016122:	681a      	ldr	r2, [r3, #0]
 8016124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	4a19      	ldr	r2, [pc, #100]	; (8016190 <pvPortMalloc+0x184>)
 801612c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801612e:	4b18      	ldr	r3, [pc, #96]	; (8016190 <pvPortMalloc+0x184>)
 8016130:	681a      	ldr	r2, [r3, #0]
 8016132:	4b19      	ldr	r3, [pc, #100]	; (8016198 <pvPortMalloc+0x18c>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	429a      	cmp	r2, r3
 8016138:	d203      	bcs.n	8016142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801613a:	4b15      	ldr	r3, [pc, #84]	; (8016190 <pvPortMalloc+0x184>)
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	4a16      	ldr	r2, [pc, #88]	; (8016198 <pvPortMalloc+0x18c>)
 8016140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016144:	685a      	ldr	r2, [r3, #4]
 8016146:	4b11      	ldr	r3, [pc, #68]	; (801618c <pvPortMalloc+0x180>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	431a      	orrs	r2, r3
 801614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016152:	2200      	movs	r2, #0
 8016154:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016156:	f7fe ff57 	bl	8015008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801615a:	69fb      	ldr	r3, [r7, #28]
 801615c:	f003 0307 	and.w	r3, r3, #7
 8016160:	2b00      	cmp	r3, #0
 8016162:	d00b      	beq.n	801617c <pvPortMalloc+0x170>
 8016164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016168:	b672      	cpsid	i
 801616a:	f383 8811 	msr	BASEPRI, r3
 801616e:	f3bf 8f6f 	isb	sy
 8016172:	f3bf 8f4f 	dsb	sy
 8016176:	b662      	cpsie	i
 8016178:	60fb      	str	r3, [r7, #12]
 801617a:	e7fe      	b.n	801617a <pvPortMalloc+0x16e>
	return pvReturn;
 801617c:	69fb      	ldr	r3, [r7, #28]
}
 801617e:	4618      	mov	r0, r3
 8016180:	3728      	adds	r7, #40	; 0x28
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	20004078 	.word	0x20004078
 801618c:	20004084 	.word	0x20004084
 8016190:	2000407c 	.word	0x2000407c
 8016194:	20004070 	.word	0x20004070
 8016198:	20004080 	.word	0x20004080

0801619c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b086      	sub	sp, #24
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d04a      	beq.n	8016244 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80161ae:	2308      	movs	r3, #8
 80161b0:	425b      	negs	r3, r3
 80161b2:	697a      	ldr	r2, [r7, #20]
 80161b4:	4413      	add	r3, r2
 80161b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	685a      	ldr	r2, [r3, #4]
 80161c0:	4b22      	ldr	r3, [pc, #136]	; (801624c <vPortFree+0xb0>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	4013      	ands	r3, r2
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d10b      	bne.n	80161e2 <vPortFree+0x46>
 80161ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ce:	b672      	cpsid	i
 80161d0:	f383 8811 	msr	BASEPRI, r3
 80161d4:	f3bf 8f6f 	isb	sy
 80161d8:	f3bf 8f4f 	dsb	sy
 80161dc:	b662      	cpsie	i
 80161de:	60fb      	str	r3, [r7, #12]
 80161e0:	e7fe      	b.n	80161e0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d00b      	beq.n	8016202 <vPortFree+0x66>
 80161ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ee:	b672      	cpsid	i
 80161f0:	f383 8811 	msr	BASEPRI, r3
 80161f4:	f3bf 8f6f 	isb	sy
 80161f8:	f3bf 8f4f 	dsb	sy
 80161fc:	b662      	cpsie	i
 80161fe:	60bb      	str	r3, [r7, #8]
 8016200:	e7fe      	b.n	8016200 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	685a      	ldr	r2, [r3, #4]
 8016206:	4b11      	ldr	r3, [pc, #68]	; (801624c <vPortFree+0xb0>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4013      	ands	r3, r2
 801620c:	2b00      	cmp	r3, #0
 801620e:	d019      	beq.n	8016244 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d115      	bne.n	8016244 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	685a      	ldr	r2, [r3, #4]
 801621c:	4b0b      	ldr	r3, [pc, #44]	; (801624c <vPortFree+0xb0>)
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	43db      	mvns	r3, r3
 8016222:	401a      	ands	r2, r3
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016228:	f7fe fee0 	bl	8014fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	685a      	ldr	r2, [r3, #4]
 8016230:	4b07      	ldr	r3, [pc, #28]	; (8016250 <vPortFree+0xb4>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4413      	add	r3, r2
 8016236:	4a06      	ldr	r2, [pc, #24]	; (8016250 <vPortFree+0xb4>)
 8016238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801623a:	6938      	ldr	r0, [r7, #16]
 801623c:	f000 f86c 	bl	8016318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016240:	f7fe fee2 	bl	8015008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016244:	bf00      	nop
 8016246:	3718      	adds	r7, #24
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	20004084 	.word	0x20004084
 8016250:	2000407c 	.word	0x2000407c

08016254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016254:	b480      	push	{r7}
 8016256:	b085      	sub	sp, #20
 8016258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801625a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801625e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016260:	4b27      	ldr	r3, [pc, #156]	; (8016300 <prvHeapInit+0xac>)
 8016262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f003 0307 	and.w	r3, r3, #7
 801626a:	2b00      	cmp	r3, #0
 801626c:	d00c      	beq.n	8016288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	3307      	adds	r3, #7
 8016272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f023 0307 	bic.w	r3, r3, #7
 801627a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801627c:	68ba      	ldr	r2, [r7, #8]
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	1ad3      	subs	r3, r2, r3
 8016282:	4a1f      	ldr	r2, [pc, #124]	; (8016300 <prvHeapInit+0xac>)
 8016284:	4413      	add	r3, r2
 8016286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801628c:	4a1d      	ldr	r2, [pc, #116]	; (8016304 <prvHeapInit+0xb0>)
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016292:	4b1c      	ldr	r3, [pc, #112]	; (8016304 <prvHeapInit+0xb0>)
 8016294:	2200      	movs	r2, #0
 8016296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	68ba      	ldr	r2, [r7, #8]
 801629c:	4413      	add	r3, r2
 801629e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80162a0:	2208      	movs	r2, #8
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	1a9b      	subs	r3, r3, r2
 80162a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	f023 0307 	bic.w	r3, r3, #7
 80162ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	4a15      	ldr	r2, [pc, #84]	; (8016308 <prvHeapInit+0xb4>)
 80162b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80162b6:	4b14      	ldr	r3, [pc, #80]	; (8016308 <prvHeapInit+0xb4>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	2200      	movs	r2, #0
 80162bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80162be:	4b12      	ldr	r3, [pc, #72]	; (8016308 <prvHeapInit+0xb4>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2200      	movs	r2, #0
 80162c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	1ad2      	subs	r2, r2, r3
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80162d4:	4b0c      	ldr	r3, [pc, #48]	; (8016308 <prvHeapInit+0xb4>)
 80162d6:	681a      	ldr	r2, [r3, #0]
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	4a0a      	ldr	r2, [pc, #40]	; (801630c <prvHeapInit+0xb8>)
 80162e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	4a09      	ldr	r2, [pc, #36]	; (8016310 <prvHeapInit+0xbc>)
 80162ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80162ec:	4b09      	ldr	r3, [pc, #36]	; (8016314 <prvHeapInit+0xc0>)
 80162ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80162f2:	601a      	str	r2, [r3, #0]
}
 80162f4:	bf00      	nop
 80162f6:	3714      	adds	r7, #20
 80162f8:	46bd      	mov	sp, r7
 80162fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fe:	4770      	bx	lr
 8016300:	20000470 	.word	0x20000470
 8016304:	20004070 	.word	0x20004070
 8016308:	20004078 	.word	0x20004078
 801630c:	20004080 	.word	0x20004080
 8016310:	2000407c 	.word	0x2000407c
 8016314:	20004084 	.word	0x20004084

08016318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016318:	b480      	push	{r7}
 801631a:	b085      	sub	sp, #20
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016320:	4b28      	ldr	r3, [pc, #160]	; (80163c4 <prvInsertBlockIntoFreeList+0xac>)
 8016322:	60fb      	str	r3, [r7, #12]
 8016324:	e002      	b.n	801632c <prvInsertBlockIntoFreeList+0x14>
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	60fb      	str	r3, [r7, #12]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	687a      	ldr	r2, [r7, #4]
 8016332:	429a      	cmp	r2, r3
 8016334:	d8f7      	bhi.n	8016326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	68ba      	ldr	r2, [r7, #8]
 8016340:	4413      	add	r3, r2
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	429a      	cmp	r2, r3
 8016346:	d108      	bne.n	801635a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	685a      	ldr	r2, [r3, #4]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	441a      	add	r2, r3
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	68ba      	ldr	r2, [r7, #8]
 8016364:	441a      	add	r2, r3
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	429a      	cmp	r2, r3
 801636c:	d118      	bne.n	80163a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	4b15      	ldr	r3, [pc, #84]	; (80163c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	429a      	cmp	r2, r3
 8016378:	d00d      	beq.n	8016396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	685a      	ldr	r2, [r3, #4]
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	441a      	add	r2, r3
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	601a      	str	r2, [r3, #0]
 8016394:	e008      	b.n	80163a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016396:	4b0c      	ldr	r3, [pc, #48]	; (80163c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	601a      	str	r2, [r3, #0]
 801639e:	e003      	b.n	80163a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	681a      	ldr	r2, [r3, #0]
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80163a8:	68fa      	ldr	r2, [r7, #12]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d002      	beq.n	80163b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	687a      	ldr	r2, [r7, #4]
 80163b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80163b6:	bf00      	nop
 80163b8:	3714      	adds	r7, #20
 80163ba:	46bd      	mov	sp, r7
 80163bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c0:	4770      	bx	lr
 80163c2:	bf00      	nop
 80163c4:	20004070 	.word	0x20004070
 80163c8:	20004078 	.word	0x20004078

080163cc <__errno>:
 80163cc:	4b01      	ldr	r3, [pc, #4]	; (80163d4 <__errno+0x8>)
 80163ce:	6818      	ldr	r0, [r3, #0]
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop
 80163d4:	20000024 	.word	0x20000024

080163d8 <__libc_init_array>:
 80163d8:	b570      	push	{r4, r5, r6, lr}
 80163da:	4e0d      	ldr	r6, [pc, #52]	; (8016410 <__libc_init_array+0x38>)
 80163dc:	4c0d      	ldr	r4, [pc, #52]	; (8016414 <__libc_init_array+0x3c>)
 80163de:	1ba4      	subs	r4, r4, r6
 80163e0:	10a4      	asrs	r4, r4, #2
 80163e2:	2500      	movs	r5, #0
 80163e4:	42a5      	cmp	r5, r4
 80163e6:	d109      	bne.n	80163fc <__libc_init_array+0x24>
 80163e8:	4e0b      	ldr	r6, [pc, #44]	; (8016418 <__libc_init_array+0x40>)
 80163ea:	4c0c      	ldr	r4, [pc, #48]	; (801641c <__libc_init_array+0x44>)
 80163ec:	f000 f8d0 	bl	8016590 <_init>
 80163f0:	1ba4      	subs	r4, r4, r6
 80163f2:	10a4      	asrs	r4, r4, #2
 80163f4:	2500      	movs	r5, #0
 80163f6:	42a5      	cmp	r5, r4
 80163f8:	d105      	bne.n	8016406 <__libc_init_array+0x2e>
 80163fa:	bd70      	pop	{r4, r5, r6, pc}
 80163fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016400:	4798      	blx	r3
 8016402:	3501      	adds	r5, #1
 8016404:	e7ee      	b.n	80163e4 <__libc_init_array+0xc>
 8016406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801640a:	4798      	blx	r3
 801640c:	3501      	adds	r5, #1
 801640e:	e7f2      	b.n	80163f6 <__libc_init_array+0x1e>
 8016410:	08020724 	.word	0x08020724
 8016414:	08020724 	.word	0x08020724
 8016418:	08020724 	.word	0x08020724
 801641c:	08020728 	.word	0x08020728

08016420 <memcpy>:
 8016420:	b510      	push	{r4, lr}
 8016422:	1e43      	subs	r3, r0, #1
 8016424:	440a      	add	r2, r1
 8016426:	4291      	cmp	r1, r2
 8016428:	d100      	bne.n	801642c <memcpy+0xc>
 801642a:	bd10      	pop	{r4, pc}
 801642c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016434:	e7f7      	b.n	8016426 <memcpy+0x6>

08016436 <memset>:
 8016436:	4402      	add	r2, r0
 8016438:	4603      	mov	r3, r0
 801643a:	4293      	cmp	r3, r2
 801643c:	d100      	bne.n	8016440 <memset+0xa>
 801643e:	4770      	bx	lr
 8016440:	f803 1b01 	strb.w	r1, [r3], #1
 8016444:	e7f9      	b.n	801643a <memset+0x4>
	...

08016448 <sqrt>:
 8016448:	b500      	push	{lr}
 801644a:	ed2d 8b02 	vpush	{d8}
 801644e:	eeb0 8b40 	vmov.f64	d8, d0
 8016452:	b08b      	sub	sp, #44	; 0x2c
 8016454:	f000 f894 	bl	8016580 <__ieee754_sqrt>
 8016458:	4b1f      	ldr	r3, [pc, #124]	; (80164d8 <sqrt+0x90>)
 801645a:	f993 3000 	ldrsb.w	r3, [r3]
 801645e:	1c5a      	adds	r2, r3, #1
 8016460:	d024      	beq.n	80164ac <sqrt+0x64>
 8016462:	eeb4 8b48 	vcmp.f64	d8, d8
 8016466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801646a:	d61f      	bvs.n	80164ac <sqrt+0x64>
 801646c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 80164d0 <sqrt+0x88>
 8016470:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016478:	d518      	bpl.n	80164ac <sqrt+0x64>
 801647a:	2201      	movs	r2, #1
 801647c:	9200      	str	r2, [sp, #0]
 801647e:	4a17      	ldr	r2, [pc, #92]	; (80164dc <sqrt+0x94>)
 8016480:	9201      	str	r2, [sp, #4]
 8016482:	2200      	movs	r2, #0
 8016484:	9208      	str	r2, [sp, #32]
 8016486:	ed8d 8b04 	vstr	d8, [sp, #16]
 801648a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801648e:	b993      	cbnz	r3, 80164b6 <sqrt+0x6e>
 8016490:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016494:	4668      	mov	r0, sp
 8016496:	f000 f879 	bl	801658c <matherr>
 801649a:	b190      	cbz	r0, 80164c2 <sqrt+0x7a>
 801649c:	9b08      	ldr	r3, [sp, #32]
 801649e:	b11b      	cbz	r3, 80164a8 <sqrt+0x60>
 80164a0:	f7ff ff94 	bl	80163cc <__errno>
 80164a4:	9b08      	ldr	r3, [sp, #32]
 80164a6:	6003      	str	r3, [r0, #0]
 80164a8:	ed9d 0b06 	vldr	d0, [sp, #24]
 80164ac:	b00b      	add	sp, #44	; 0x2c
 80164ae:	ecbd 8b02 	vpop	{d8}
 80164b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80164b6:	2b02      	cmp	r3, #2
 80164b8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80164bc:	ed8d 6b06 	vstr	d6, [sp, #24]
 80164c0:	d1e8      	bne.n	8016494 <sqrt+0x4c>
 80164c2:	f7ff ff83 	bl	80163cc <__errno>
 80164c6:	2321      	movs	r3, #33	; 0x21
 80164c8:	6003      	str	r3, [r0, #0]
 80164ca:	e7e7      	b.n	801649c <sqrt+0x54>
 80164cc:	f3af 8000 	nop.w
	...
 80164d8:	20000088 	.word	0x20000088
 80164dc:	08020710 	.word	0x08020710

080164e0 <sqrtf>:
 80164e0:	b500      	push	{lr}
 80164e2:	ed2d 8b02 	vpush	{d8}
 80164e6:	b08b      	sub	sp, #44	; 0x2c
 80164e8:	eeb0 8a40 	vmov.f32	s16, s0
 80164ec:	f000 f84b 	bl	8016586 <__ieee754_sqrtf>
 80164f0:	4b21      	ldr	r3, [pc, #132]	; (8016578 <sqrtf+0x98>)
 80164f2:	f993 3000 	ldrsb.w	r3, [r3]
 80164f6:	1c5a      	adds	r2, r3, #1
 80164f8:	d028      	beq.n	801654c <sqrtf+0x6c>
 80164fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80164fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016502:	d623      	bvs.n	801654c <sqrtf+0x6c>
 8016504:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801650c:	d51e      	bpl.n	801654c <sqrtf+0x6c>
 801650e:	2201      	movs	r2, #1
 8016510:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8016514:	9200      	str	r2, [sp, #0]
 8016516:	4a19      	ldr	r2, [pc, #100]	; (801657c <sqrtf+0x9c>)
 8016518:	9201      	str	r2, [sp, #4]
 801651a:	2200      	movs	r2, #0
 801651c:	9208      	str	r2, [sp, #32]
 801651e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016522:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016526:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8016570 <sqrtf+0x90>
 801652a:	b9a3      	cbnz	r3, 8016556 <sqrtf+0x76>
 801652c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016530:	4668      	mov	r0, sp
 8016532:	f000 f82b 	bl	801658c <matherr>
 8016536:	b1a0      	cbz	r0, 8016562 <sqrtf+0x82>
 8016538:	9b08      	ldr	r3, [sp, #32]
 801653a:	b11b      	cbz	r3, 8016544 <sqrtf+0x64>
 801653c:	f7ff ff46 	bl	80163cc <__errno>
 8016540:	9b08      	ldr	r3, [sp, #32]
 8016542:	6003      	str	r3, [r0, #0]
 8016544:	ed9d 0b06 	vldr	d0, [sp, #24]
 8016548:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801654c:	b00b      	add	sp, #44	; 0x2c
 801654e:	ecbd 8b02 	vpop	{d8}
 8016552:	f85d fb04 	ldr.w	pc, [sp], #4
 8016556:	2b02      	cmp	r3, #2
 8016558:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801655c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8016560:	d1e6      	bne.n	8016530 <sqrtf+0x50>
 8016562:	f7ff ff33 	bl	80163cc <__errno>
 8016566:	2321      	movs	r3, #33	; 0x21
 8016568:	6003      	str	r3, [r0, #0]
 801656a:	e7e5      	b.n	8016538 <sqrtf+0x58>
 801656c:	f3af 8000 	nop.w
	...
 8016578:	20000088 	.word	0x20000088
 801657c:	08020715 	.word	0x08020715

08016580 <__ieee754_sqrt>:
 8016580:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8016584:	4770      	bx	lr

08016586 <__ieee754_sqrtf>:
 8016586:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801658a:	4770      	bx	lr

0801658c <matherr>:
 801658c:	2000      	movs	r0, #0
 801658e:	4770      	bx	lr

08016590 <_init>:
 8016590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016592:	bf00      	nop
 8016594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016596:	bc08      	pop	{r3}
 8016598:	469e      	mov	lr, r3
 801659a:	4770      	bx	lr

0801659c <_fini>:
 801659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801659e:	bf00      	nop
 80165a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165a2:	bc08      	pop	{r3}
 80165a4:	469e      	mov	lr, r3
 80165a6:	4770      	bx	lr
