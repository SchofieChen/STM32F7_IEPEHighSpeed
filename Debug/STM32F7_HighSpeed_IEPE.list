
STM32F7_HighSpeed_IEPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebec  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a130  08016df0  08016df0  00016df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020f20  08020f20  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08020f20  08020f20  00020f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020f28  08020f28  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020f28  08020f28  00020f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020f2c  08020f2c  00020f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08020f30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0006a37c  200000a0  08020fc0  000300a0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2006a41c  08020fc0  0003a41c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024cc1  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005005  00000000  00000000  00054d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  00059d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00029f6a  00000000  00000000  0005b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001724e  00000000  00000000  00085352  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00100773  00000000  00000000  0009c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0019cd13  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013b8  00000000  00000000  0019cd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005b70  00000000  00000000  0019e148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000a0 	.word	0x200000a0
 800821c:	00000000 	.word	0x00000000
 8008220:	08016dd4 	.word	0x08016dd4

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000a4 	.word	0x200000a4
 800823c:	08016dd4 	.word	0x08016dd4

08008240 <arm_bitreversal_32>:
 8008240:	1c4b      	adds	r3, r1, #1
 8008242:	2b01      	cmp	r3, #1
 8008244:	bf98      	it	ls
 8008246:	4770      	bxls	lr
 8008248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800824c:	1c91      	adds	r1, r2, #2
 800824e:	089b      	lsrs	r3, r3, #2

08008250 <arm_bitreversal_32_0>:
 8008250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8008254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8008258:	880a      	ldrh	r2, [r1, #0]
 800825a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800825e:	4480      	add	r8, r0
 8008260:	4481      	add	r9, r0
 8008262:	4402      	add	r2, r0
 8008264:	4484      	add	ip, r0
 8008266:	f8d9 7000 	ldr.w	r7, [r9]
 800826a:	f8d8 6000 	ldr.w	r6, [r8]
 800826e:	6815      	ldr	r5, [r2, #0]
 8008270:	f8dc 4000 	ldr.w	r4, [ip]
 8008274:	f8c9 6000 	str.w	r6, [r9]
 8008278:	f8c8 7000 	str.w	r7, [r8]
 800827c:	f8cc 5000 	str.w	r5, [ip]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8008286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800828a:	6855      	ldr	r5, [r2, #4]
 800828c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008290:	f8c9 6004 	str.w	r6, [r9, #4]
 8008294:	f8c8 7004 	str.w	r7, [r8, #4]
 8008298:	f8cc 5004 	str.w	r5, [ip, #4]
 800829c:	6054      	str	r4, [r2, #4]
 800829e:	3108      	adds	r1, #8
 80082a0:	3b01      	subs	r3, #1
 80082a2:	d1d5      	bne.n	8008250 <arm_bitreversal_32_0>
 80082a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80082a8:	4770      	bx	lr

080082aa <arm_bitreversal_16>:
 80082aa:	1c4b      	adds	r3, r1, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	bf98      	it	ls
 80082b0:	4770      	bxls	lr
 80082b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80082b6:	1c91      	adds	r1, r2, #2
 80082b8:	089b      	lsrs	r3, r3, #2

080082ba <arm_bitreversal_16_0>:
 80082ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80082be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80082c2:	880a      	ldrh	r2, [r1, #0]
 80082c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80082c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80082cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80082d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80082d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80082d8:	f8d9 7000 	ldr.w	r7, [r9]
 80082dc:	f8d8 6000 	ldr.w	r6, [r8]
 80082e0:	6815      	ldr	r5, [r2, #0]
 80082e2:	f8dc 4000 	ldr.w	r4, [ip]
 80082e6:	f8c9 6000 	str.w	r6, [r9]
 80082ea:	f8c8 7000 	str.w	r7, [r8]
 80082ee:	f8cc 5000 	str.w	r5, [ip]
 80082f2:	6014      	str	r4, [r2, #0]
 80082f4:	3108      	adds	r1, #8
 80082f6:	3b01      	subs	r3, #1
 80082f8:	d1df      	bne.n	80082ba <arm_bitreversal_16_0>
 80082fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80082fe:	4770      	bx	lr

08008300 <strlen>:
 8008300:	4603      	mov	r3, r0
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1fb      	bne.n	8008302 <strlen+0x2>
 800830a:	1a18      	subs	r0, r3, r0
 800830c:	3801      	subs	r0, #1
 800830e:	4770      	bx	lr

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295
 8008320:	f04f 30ff 	movne.w	r0, #4294967295
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	ed87 0a01 	vstr	s0, [r7, #4]
 800861a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800861c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008628:	db0a      	blt.n	8008640 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800862a:	ed97 0a01 	vldr	s0, [r7, #4]
 800862e:	f00d febf 	bl	80163b0 <sqrtf>
 8008632:	eef0 7a40 	vmov.f32	s15, s0
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800863c:	2300      	movs	r3, #0
 800863e:	e005      	b.n	800864c <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	089b      	lsrs	r3, r3, #2
 8008664:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008666:	e082      	b.n	800876e <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	60fa      	str	r2, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	60fa      	str	r2, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800867c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008680:	edd7 7a06 	vldr	s15, [r7, #24]
 8008684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008688:	edd7 6a05 	vldr	s13, [r7, #20]
 800868c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	1d1a      	adds	r2, r3, #4
 800869c:	60ba      	str	r2, [r7, #8]
 800869e:	4618      	mov	r0, r3
 80086a0:	eeb0 0a67 	vmov.f32	s0, s15
 80086a4:	f7ff ffb4 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	60fa      	str	r2, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1d1a      	adds	r2, r3, #4
 80086b6:	60fa      	str	r2, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80086bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80086c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80086c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80086cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80086d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	60ba      	str	r2, [r7, #8]
 80086de:	4618      	mov	r0, r3
 80086e0:	eeb0 0a67 	vmov.f32	s0, s15
 80086e4:	f7ff ff94 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	1d1a      	adds	r2, r3, #4
 80086ec:	60fa      	str	r2, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1d1a      	adds	r2, r3, #4
 80086f6:	60fa      	str	r2, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80086fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8008700:	edd7 7a06 	vldr	s15, [r7, #24]
 8008704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008708:	edd7 6a05 	vldr	s13, [r7, #20]
 800870c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	60ba      	str	r2, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	eeb0 0a67 	vmov.f32	s0, s15
 8008724:	f7ff ff74 	bl	8008610 <arm_sqrt_f32>

    realIn = *pSrc++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	1d1a      	adds	r2, r3, #4
 800872c:	60fa      	str	r2, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	60fa      	str	r2, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800873c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008740:	edd7 7a06 	vldr	s15, [r7, #24]
 8008744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008748:	edd7 6a05 	vldr	s13, [r7, #20]
 800874c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	60ba      	str	r2, [r7, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	eeb0 0a67 	vmov.f32	s0, s15
 8008764:	f7ff ff54 	bl	8008610 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	3b01      	subs	r3, #1
 800876c:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f af79 	bne.w	8008668 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 800877e:	e022      	b.n	80087c6 <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	60fa      	str	r2, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1d1a      	adds	r2, r3, #4
 800878e:	60fa      	str	r2, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008794:	ed97 7a06 	vldr	s14, [r7, #24]
 8008798:	edd7 7a06 	vldr	s15, [r7, #24]
 800879c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80087a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80087a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	60ba      	str	r2, [r7, #8]
 80087b6:	4618      	mov	r0, r3
 80087b8:	eeb0 0a67 	vmov.f32	s0, s15
 80087bc:	f7ff ff28 	bl	8008610 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1d9      	bne.n	8008780 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80087cc:	bf00      	nop
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	60fa      	str	r2, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	089b      	lsrs	r3, r3, #2
 80087fa:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80087fc:	e051      	b.n	80088a2 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1d1a      	adds	r2, r3, #4
 8008802:	60fa      	str	r2, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	60fa      	str	r2, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008812:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008816:	edd7 7a05 	vldr	s15, [r7, #20]
 800881a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008822:	d504      	bpl.n	800882e <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	60fa      	str	r2, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8008838:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800883c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	d504      	bpl.n	8008854 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	3302      	adds	r3, #2
 8008852:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	60fa      	str	r2, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800885e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008862:	edd7 7a05 	vldr	s15, [r7, #20]
 8008866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d504      	bpl.n	800887a <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	3303      	adds	r3, #3
 8008878:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800887a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800887e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888a:	d504      	bpl.n	8008896 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	3304      	adds	r3, #4
 8008894:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	3304      	adds	r3, #4
 800889a:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	3b01      	subs	r3, #1
 80088a0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1aa      	bne.n	80087fe <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80088b2:	e016      	b.n	80088e2 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	60fa      	str	r2, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80088be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80088c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80088c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ce:	d505      	bpl.n	80088dc <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	3b01      	subs	r3, #1
 80088e0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ec:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	601a      	str	r2, [r3, #0]
}
 80088f4:	bf00      	nop
 80088f6:	372c      	adds	r7, #44	; 0x2c
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008900:	b480      	push	{r7}
 8008902:	b08b      	sub	sp, #44	; 0x2c
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	089b      	lsrs	r3, r3, #2
 8008916:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008918:	e036      	b.n	8008988 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	60fa      	str	r2, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	60fa      	str	r2, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	60fa      	str	r2, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	60fa      	str	r2, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	613b      	str	r3, [r7, #16]

    sum += in1;
 8008942:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008946:	edd7 7a07 	vldr	s15, [r7, #28]
 800894a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800894e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 8008952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008956:	edd7 7a06 	vldr	s15, [r7, #24]
 800895a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800895e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 8008962:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008966:	edd7 7a05 	vldr	s15, [r7, #20]
 800896a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800896e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 8008972:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008976:	edd7 7a04 	vldr	s15, [r7, #16]
 800897a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800897e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	3b01      	subs	r3, #1
 8008986:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1c5      	bne.n	800891a <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008996:	e00d      	b.n	80089b4 <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	60fa      	str	r2, [r7, #12]
 800899e:	edd3 7a00 	vldr	s15, [r3]
 80089a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80089a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1ee      	bne.n	8008998 <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	ee07 3a90 	vmov	s15, r3
 80089c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80089c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	edc3 7a00 	vstr	s15, [r3]
}
 80089d2:	bf00      	nop
 80089d4:	372c      	adds	r7, #44	; 0x2c
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80089de:	b480      	push	{r7}
 80089e0:	b08b      	sub	sp, #44	; 0x2c
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1d1a      	adds	r2, r3, #4
 80089f8:	60fa      	str	r2, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	089b      	lsrs	r3, r3, #2
 8008a04:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8008a06:	e051      	b.n	8008aac <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	60fa      	str	r2, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	60fa      	str	r2, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008a1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	dd04      	ble.n	8008a38 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	3301      	adds	r3, #1
 8008a36:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	60fa      	str	r2, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 8008a42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a52:	dd04      	ble.n	8008a5e <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	3302      	adds	r3, #2
 8008a5c:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	60fa      	str	r2, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a78:	dd04      	ble.n	8008a84 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3303      	adds	r3, #3
 8008a82:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8008a84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a94:	dd04      	ble.n	8008aa0 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1aa      	bne.n	8008a08 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8008abc:	e016      	b.n	8008aec <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	60fa      	str	r2, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8008ac8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	dd05      	ble.n	8008ae6 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af6:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	372c      	adds	r7, #44	; 0x2c
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <arm_sqrt_f32>:
  {
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	ed87 0a01 	vstr	s0, [r7, #4]
 8008b14:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	db0a      	blt.n	8008b3a <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008b24:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b28:	f00d fc42 	bl	80163b0 <sqrtf>
 8008b2c:	eef0 7a40 	vmov.f32	s15, s0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008b36:	2300      	movs	r3, #0
 8008b38:	e005      	b.n	8008b46 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008b42:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b088      	sub	sp, #32
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	089b      	lsrs	r3, r3, #2
 8008b64:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008b66:	e046      	b.n	8008bf6 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1d1a      	adds	r2, r3, #4
 8008b6c:	60fa      	str	r2, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008b72:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	60fa      	str	r2, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba8:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	60fa      	str	r2, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be4:	ed97 7a07 	vldr	s14, [r7, #28]
 8008be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bec:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1b5      	bne.n	8008b68 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008c04:	e013      	b.n	8008c2e <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	60fa      	str	r2, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008c10:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c24:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e8      	bne.n	8008c06 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	eeb0 0a66 	vmov.f32	s0, s13
 8008c4c:	f7ff ff5d 	bl	8008b0a <arm_sqrt_f32>
}
 8008c50:	bf00      	nop
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <arm_sqrt_f32>:
  {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008c62:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c70:	db0a      	blt.n	8008c88 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008c72:	ed97 0a01 	vldr	s0, [r7, #4]
 8008c76:	f00d fb9b 	bl	80163b0 <sqrtf>
 8008c7a:	eef0 7a40 	vmov.f32	s15, s0
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008c84:	2300      	movs	r3, #0
 8008c86:	e005      	b.n	8008c94 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d104      	bne.n	8008cc4 <arm_std_f32+0x28>
	{
		*pResult = 0;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
		return;
 8008cc2:	e0d0      	b.n	8008e66 <arm_std_f32+0x1ca>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008cca:	e066      	b.n	8008d9a <arm_std_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	60fa      	str	r2, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
    sum += in;
 8008cd6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1d1a      	adds	r2, r3, #4
 8008d02:	60fa      	str	r2, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d08:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d2c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	60fa      	str	r2, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d3a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	60fa      	str	r2, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
    sum += in;
 8008d6c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	3b01      	subs	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d195      	bne.n	8008ccc <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8008da8:	e01b      	b.n	8008de2 <arm_std_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	60fa      	str	r2, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	617b      	str	r3, [r7, #20]
    sum += in;
 8008db4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008dc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8008dc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	3b01      	subs	r3, #1
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e0      	bne.n	8008daa <arm_std_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008dfa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e02:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e40:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008e44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8008e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8008e50:	ed97 7a08 	vldr	s14, [r7, #32]
 8008e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008e62:	f7ff fef9 	bl	8008c58 <arm_sqrt_f32>
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8008e66:	3730      	adds	r7, #48	; 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <arm_var_f32>:

void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b08d      	sub	sp, #52	; 0x34
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]

  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d104      	bne.n	8008e94 <arm_var_f32+0x28>
	{
		*pResult = 0;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
		return;
 8008e92:	e0ce      	b.n	8009032 <arm_var_f32+0x1c6>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	089b      	lsrs	r3, r3, #2
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008e9a:	e066      	b.n	8008f6a <arm_var_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	617b      	str	r3, [r7, #20]
    sum += in;
 8008ea6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8008eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eb2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008eb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	60fa      	str	r2, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	617b      	str	r3, [r7, #20]
    sum += in;
 8008ed8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008ee8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008eec:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008efc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	60fa      	str	r2, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f0a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f16:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1d1a      	adds	r2, r3, #4
 8008f36:	60fa      	str	r2, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	3b01      	subs	r3, #1
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d195      	bne.n	8008e9c <arm_var_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8008f78:	e01b      	b.n	8008fb2 <arm_var_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	60fa      	str	r2, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	617b      	str	r3, [r7, #20]
    sum += in;
 8008f84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8008f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fa8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e0      	bne.n	8008f7a <arm_var_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008fca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd2:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fe0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe8:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8008fec:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ff0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009010:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009014:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 8009020:	ed97 7a08 	vldr	s14, [r7, #32]
 8009024:	edd7 7a06 	vldr	s15, [r7, #24]
 8009028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	edc3 7a00 	vstr	s15, [r3]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8009032:	3734      	adds	r7, #52	; 0x34
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b0a0      	sub	sp, #128	; 0x80
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800904c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4413      	add	r3, r2
 8009054:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8009060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009062:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8009064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800906a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4413      	add	r3, r2
 8009072:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8009074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800907a:	4413      	add	r3, r2
 800907c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800907e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009080:	089b      	lsrs	r3, r3, #2
 8009082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009084:	e1b6      	b.n	80093f4 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800909e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80090a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80090aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80090b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80090b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80090bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80090c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80090c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80090ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80090d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80090da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80090e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80090e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80090ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	603a      	str	r2, [r7, #0]
 80090f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80090fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009100:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	603a      	str	r2, [r7, #0]
 800910a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800910e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8009112:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009116:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	603a      	str	r2, [r7, #0]
 8009120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009124:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8009128:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800912c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	603a      	str	r2, [r7, #0]
 8009136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913a:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800913e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800914a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800914e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009152:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800915a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800915e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009162:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800916a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800916e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800917a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800917e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009182:	edd7 7a02 	vldr	s15, [r7, #8]
 8009186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800918c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009190:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8009194:	ed97 7a07 	vldr	s14, [r7, #28]
 8009198:	edd7 7a03 	vldr	s15, [r7, #12]
 800919c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a6:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80091aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80091ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80091b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091bc:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80091c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80091c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80091c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d2:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80091d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80091da:	edd7 7a06 	vldr	s15, [r7, #24]
 80091de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091e2:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80091e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80091ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80091ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091f2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80091f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80091fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80091fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009202:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8009206:	ed97 7a05 	vldr	s14, [r7, #20]
 800920a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800920e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009212:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8009216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	673a      	str	r2, [r7, #112]	; 0x70
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8009220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	673a      	str	r2, [r7, #112]	; 0x70
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800922a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800922e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800923a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800923e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800924a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800924e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009256:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800925a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800925e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009266:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800926a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	677a      	str	r2, [r7, #116]	; 0x74
 8009270:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009274:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800927c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8009280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009282:	1d1a      	adds	r2, r3, #4
 8009284:	677a      	str	r2, [r7, #116]	; 0x74
 8009286:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800928a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800928e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009292:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8009296:	edd7 7a02 	vldr	s15, [r7, #8]
 800929a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80092a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80092b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80092be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80092c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80092ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80092d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d8:	1d1a      	adds	r2, r3, #4
 80092da:	67ba      	str	r2, [r7, #120]	; 0x78
 80092dc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80092e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80092ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80092f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80092f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80092fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fe:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8009302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	673a      	str	r2, [r7, #112]	; 0x70
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800930c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	673a      	str	r2, [r7, #112]	; 0x70
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8009316:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800931a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800931e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009322:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8009326:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800932a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800932e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009332:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8009336:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800933a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8009346:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800934a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800934e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009352:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	677a      	str	r2, [r7, #116]	; 0x74
 800935c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009368:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800936c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936e:	1d1a      	adds	r2, r3, #4
 8009370:	677a      	str	r2, [r7, #116]	; 0x74
 8009372:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009376:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800937a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800937e:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8009382:	edd7 7a04 	vldr	s15, [r7, #16]
 8009386:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8009392:	edd7 7a05 	vldr	s15, [r7, #20]
 8009396:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80093a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80093a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80093b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80093b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80093c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80093c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80093cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80093d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d4:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80093d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093da:	1d1a      	adds	r2, r3, #4
 80093dc:	67ba      	str	r2, [r7, #120]	; 0x78
 80093de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80093e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80093e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ea:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	3b01      	subs	r3, #1
 80093f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f47f ae45 	bne.w	8009086 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80093fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093fe:	b299      	uxth	r1, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	2302      	movs	r3, #2
 8009406:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009408:	f000 feda 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800940c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800940e:	b299      	uxth	r1, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	2302      	movs	r3, #2
 8009416:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009418:	f000 fed2 	bl	800a1c0 <arm_radix8_butterfly_f32>
}
 800941c:	bf00      	nop
 800941e:	3780      	adds	r7, #128	; 0x80
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b0ac      	sub	sp, #176	; 0xb0
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	b29b      	uxth	r3, r3
 8009436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800943a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4413      	add	r3, r2
 8009444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8009448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009452:	4413      	add	r3, r2
 8009454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8009458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009462:	4413      	add	r3, r2
 8009464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800946c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009470:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8009472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009476:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8009478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800947c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800947e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009482:	3b04      	subs	r3, #4
 8009484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8009488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800948c:	3b04      	subs	r3, #4
 800948e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8009492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009496:	3b04      	subs	r3, #4
 8009498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800949c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094a6:	4413      	add	r3, r2
 80094a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80094c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80094ce:	2302      	movs	r3, #2
 80094d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80094d2:	2304      	movs	r3, #4
 80094d4:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80094d6:	2306      	movs	r3, #6
 80094d8:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	ed93 7a00 	vldr	s14, [r3]
 80094e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094ec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	ed93 7a00 	vldr	s14, [r3]
 80094f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094fa:	edd3 7a00 	vldr	s15, [r3]
 80094fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009502:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3304      	adds	r3, #4
 800950a:	ed93 7a00 	vldr	s14, [r3]
 800950e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009512:	3304      	adds	r3, #4
 8009514:	edd3 7a00 	vldr	s15, [r3]
 8009518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800951c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	3304      	adds	r3, #4
 8009524:	ed93 7a00 	vldr	s14, [r3]
 8009528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800952c:	3304      	adds	r3, #4
 800952e:	edd3 7a00 	vldr	s15, [r3]
 8009532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800953a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800953e:	3304      	adds	r3, #4
 8009540:	ed93 7a00 	vldr	s14, [r3]
 8009544:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009550:	3304      	adds	r3, #4
 8009552:	edd3 7a00 	vldr	s15, [r3]
 8009556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800955a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800955e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800956a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800956e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009572:	edd3 7a00 	vldr	s15, [r3]
 8009576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800957e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009582:	edd3 7a00 	vldr	s15, [r3]
 8009586:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800958a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800958e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009592:	edd3 7a00 	vldr	s15, [r3]
 8009596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800959a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800959e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095a2:	3304      	adds	r3, #4
 80095a4:	edd3 7a00 	vldr	s15, [r3]
 80095a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80095ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095b4:	3304      	adds	r3, #4
 80095b6:	edd3 7a00 	vldr	s15, [r3]
 80095ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095be:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80095c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095c6:	3304      	adds	r3, #4
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80095d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095d8:	3304      	adds	r3, #4
 80095da:	edd3 7a00 	vldr	s15, [r3]
 80095de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095e2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80095e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095ea:	ed93 7a00 	vldr	s14, [r3]
 80095ee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80095f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095fa:	edd3 7a00 	vldr	s15, [r3]
 80095fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009602:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800960a:	ed93 7a00 	vldr	s14, [r3]
 800960e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800961a:	edd3 7a00 	vldr	s15, [r3]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	603a      	str	r2, [r7, #0]
 8009624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009628:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800962c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009630:	3304      	adds	r3, #4
 8009632:	ed93 7a00 	vldr	s14, [r3]
 8009636:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800963a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800963e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009642:	3304      	adds	r3, #4
 8009644:	edd3 7a00 	vldr	s15, [r3]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	603a      	str	r2, [r7, #0]
 800964e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009652:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8009656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009662:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800966e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009670:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8009680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800968e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800969c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80096aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80096b2:	4413      	add	r3, r2
 80096b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80096b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80096c0:	4413      	add	r3, r2
 80096c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80096c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ce:	4413      	add	r3, r2
 80096d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80096d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096d8:	3b02      	subs	r3, #2
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096e0:	e31a      	b.n	8009d18 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	ed93 7a00 	vldr	s14, [r3]
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ec:	edd3 7a00 	vldr	s15, [r3]
 80096f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	ed93 7a00 	vldr	s14, [r3]
 80096fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009702:	edd3 7a00 	vldr	s15, [r3]
 8009706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800970a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	ed93 7a00 	vldr	s14, [r3]
 8009716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800971a:	3304      	adds	r3, #4
 800971c:	edd3 7a00 	vldr	s15, [r3]
 8009720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009724:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	ed93 7a00 	vldr	s14, [r3]
 8009730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009734:	3304      	adds	r3, #4
 8009736:	edd3 7a00 	vldr	s15, [r3]
 800973a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800973e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009746:	3304      	adds	r3, #4
 8009748:	ed93 7a00 	vldr	s14, [r3]
 800974c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009758:	3304      	adds	r3, #4
 800975a:	edd3 7a00 	vldr	s15, [r3]
 800975e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009762:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800976a:	edd3 7a00 	vldr	s15, [r3]
 800976e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009782:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800978a:	edd3 7a00 	vldr	s15, [r3]
 800978e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800979a:	edd3 7a00 	vldr	s15, [r3]
 800979e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80097a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097aa:	3304      	adds	r3, #4
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80097b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097bc:	3304      	adds	r3, #4
 80097be:	edd3 7a00 	vldr	s15, [r3]
 80097c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097c6:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80097ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ce:	3304      	adds	r3, #4
 80097d0:	edd3 7a00 	vldr	s15, [r3]
 80097d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097e0:	3304      	adds	r3, #4
 80097e2:	edd3 7a00 	vldr	s15, [r3]
 80097e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ea:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80097ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097f2:	ed93 7a00 	vldr	s14, [r3]
 80097f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80097fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009802:	edd3 7a00 	vldr	s15, [r3]
 8009806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800980a:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 800980e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009812:	ed93 7a00 	vldr	s14, [r3]
 8009816:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800981a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800981e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009822:	edd3 7a00 	vldr	s15, [r3]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	603a      	str	r2, [r7, #0]
 800982c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009830:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009838:	3304      	adds	r3, #4
 800983a:	ed93 7a00 	vldr	s14, [r3]
 800983e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800984a:	3304      	adds	r3, #4
 800984c:	edd3 7a00 	vldr	s15, [r3]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	603a      	str	r2, [r7, #0]
 8009856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800985e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009862:	3b04      	subs	r3, #4
 8009864:	ed93 7a00 	vldr	s14, [r3]
 8009868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800986c:	3b04      	subs	r3, #4
 800986e:	edd3 7a00 	vldr	s15, [r3]
 8009872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009876:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800987a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800987e:	3b04      	subs	r3, #4
 8009880:	ed93 7a00 	vldr	s14, [r3]
 8009884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009888:	3b04      	subs	r3, #4
 800988a:	edd3 7a00 	vldr	s15, [r3]
 800988e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009892:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8009896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800989a:	ed93 7a00 	vldr	s14, [r3]
 800989e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098a2:	edd3 7a00 	vldr	s15, [r3]
 80098a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80098ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b2:	ed93 7a00 	vldr	s14, [r3]
 80098b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ba:	edd3 7a00 	vldr	s15, [r3]
 80098be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80098c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098ca:	ed93 7a00 	vldr	s14, [r3]
 80098ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098d2:	edd3 7a00 	vldr	s15, [r3]
 80098d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80098de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80098e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ea:	ed93 7a00 	vldr	s14, [r3]
 80098ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098f2:	edd3 7a00 	vldr	s15, [r3]
 80098f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098fe:	3b04      	subs	r3, #4
 8009900:	edd3 7a00 	vldr	s15, [r3]
 8009904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800990c:	3b04      	subs	r3, #4
 800990e:	edd3 7a00 	vldr	s15, [r3]
 8009912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009916:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800991a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800991e:	3b04      	subs	r3, #4
 8009920:	edd3 7a00 	vldr	s15, [r3]
 8009924:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800992c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009930:	3b04      	subs	r3, #4
 8009932:	edd3 7a00 	vldr	s15, [r3]
 8009936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800993a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800993e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009942:	edd3 7a00 	vldr	s15, [r3]
 8009946:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800994a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800994e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009952:	edd3 7a00 	vldr	s15, [r3]
 8009956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800995e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009962:	ed93 7a00 	vldr	s14, [r3]
 8009966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800996a:	edd3 7a00 	vldr	s15, [r3]
 800996e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009972:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800997a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800997e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009982:	3b04      	subs	r3, #4
 8009984:	ed93 7a00 	vldr	s14, [r3]
 8009988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800998c:	3b04      	subs	r3, #4
 800998e:	edd3 7a00 	vldr	s15, [r3]
 8009992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009996:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800999a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800999e:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80099a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099a6:	ed93 7a00 	vldr	s14, [r3]
 80099aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80099ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099b6:	edd3 7a00 	vldr	s15, [r3]
 80099ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099be:	1f1a      	subs	r2, r3, #4
 80099c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099c8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80099cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099d0:	3b04      	subs	r3, #4
 80099d2:	ed93 7a00 	vldr	s14, [r3]
 80099d6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80099da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099e2:	3b04      	subs	r3, #4
 80099e4:	edd3 7a00 	vldr	s15, [r3]
 80099e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ec:	1f1a      	subs	r2, r3, #4
 80099ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f6:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80099fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099fe:	1d1a      	adds	r2, r3, #4
 8009a00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8009a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a0c:	1d1a      	adds	r2, r3, #4
 8009a0e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8009a16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8009a26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a2a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8009a36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a3a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8009a46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8009a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a5a:	1d1a      	adds	r2, r3, #4
 8009a5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a60:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a6c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8009a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009a7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a86:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8009a8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009a8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a96:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8009a9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009a9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8009aaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009aae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8009aba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009abe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8009aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ace:	1f1a      	subs	r2, r3, #4
 8009ad0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ad4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ae0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8009ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ae8:	1f1a      	subs	r2, r3, #4
 8009aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009aee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009af2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009afa:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8009afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8009b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8009b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009b16:	4413      	add	r3, r2
 8009b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8009b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b28:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8009b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b38:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8009b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b48:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8009b4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8009b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b66:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b72:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8009b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b80:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009b84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b8c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8009b90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b94:	eef1 7a67 	vneg.f32	s15, s15
 8009b98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8009ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8009bb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009bb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8009bc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009bc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8009bd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bd8:	1f1a      	subs	r2, r3, #4
 8009bda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bde:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009be2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bea:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8009bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bf2:	1f1a      	subs	r2, r3, #4
 8009bf4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bf8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009bfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c04:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8009c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8009c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8009c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c20:	4413      	add	r3, r2
 8009c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8009c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8009c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c3a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8009c46:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8009c56:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009c70:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009c74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8009c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009c8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c96:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8009c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8009caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8009cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cbe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8009cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8009cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cde:	1f1a      	subs	r2, r3, #4
 8009ce0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009ce4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ce8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cf0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8009cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf8:	1f1a      	subs	r2, r3, #4
 8009cfa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009cfe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d0a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8009d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d12:	3b01      	subs	r3, #1
 8009d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f47f ace0 	bne.w	80096e2 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	ed93 7a00 	vldr	s14, [r3]
 8009d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d2c:	edd3 7a00 	vldr	s15, [r3]
 8009d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d34:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	ed93 7a00 	vldr	s14, [r3]
 8009d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d42:	edd3 7a00 	vldr	s15, [r3]
 8009d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d4a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	3304      	adds	r3, #4
 8009d52:	ed93 7a00 	vldr	s14, [r3]
 8009d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	edd3 7a00 	vldr	s15, [r3]
 8009d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d64:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	ed93 7a00 	vldr	s14, [r3]
 8009d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d74:	3304      	adds	r3, #4
 8009d76:	edd3 7a00 	vldr	s15, [r3]
 8009d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d86:	3304      	adds	r3, #4
 8009d88:	ed93 7a00 	vldr	s14, [r3]
 8009d8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d98:	3304      	adds	r3, #4
 8009d9a:	edd3 7a00 	vldr	s15, [r3]
 8009d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009daa:	edd3 7a00 	vldr	s15, [r3]
 8009dae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dba:	edd3 7a00 	vldr	s15, [r3]
 8009dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dca:	edd3 7a00 	vldr	s15, [r3]
 8009dce:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dda:	edd3 7a00 	vldr	s15, [r3]
 8009dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dea:	3304      	adds	r3, #4
 8009dec:	edd3 7a00 	vldr	s15, [r3]
 8009df0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	edd3 7a00 	vldr	s15, [r3]
 8009e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e06:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e0e:	3304      	adds	r3, #4
 8009e10:	edd3 7a00 	vldr	s15, [r3]
 8009e14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e20:	3304      	adds	r3, #4
 8009e22:	edd3 7a00 	vldr	s15, [r3]
 8009e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e2a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e32:	ed93 7a00 	vldr	s14, [r3]
 8009e36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e4a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e52:	ed93 7a00 	vldr	s14, [r3]
 8009e56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e62:	edd3 7a00 	vldr	s15, [r3]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	1d1a      	adds	r2, r3, #4
 8009e6a:	603a      	str	r2, [r7, #0]
 8009e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e70:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e78:	3304      	adds	r3, #4
 8009e7a:	ed93 7a00 	vldr	s14, [r3]
 8009e7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	edd3 7a00 	vldr	s15, [r3]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	603a      	str	r2, [r7, #0]
 8009e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9a:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8009e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009eae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009eb2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009ebe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ec2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009ece:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ed2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eda:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009ede:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009ee2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ef2:	1d1a      	adds	r2, r3, #4
 8009ef4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009ef8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009efc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f04:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f0c:	1d1a      	adds	r2, r3, #4
 8009f0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009f12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f1e:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8009f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8009f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8009f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8009f42:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8009f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8009f62:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8009f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f76:	1d1a      	adds	r2, r3, #4
 8009f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f7c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f88:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8009f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f90:	1d1a      	adds	r2, r3, #4
 8009f92:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fa2:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8009fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009fc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fda:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a000:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a004:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a00c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800a010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a01a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a01e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a022:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a026:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800a02a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a02e:	b299      	uxth	r1, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	2304      	movs	r3, #4
 800a036:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a038:	f000 f8c2 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800a03c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a040:	b299      	uxth	r1, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	2304      	movs	r3, #4
 800a048:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a04a:	f000 f8b9 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800a04e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a052:	b299      	uxth	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	2304      	movs	r3, #4
 800a05a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a05c:	f000 f8b0 	bl	800a1c0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800a060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a064:	b299      	uxth	r1, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	2304      	movs	r3, #4
 800a06c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a06e:	f000 f8a7 	bl	800a1c0 <arm_radix8_butterfly_f32>
}
 800a072:	bf00      	nop
 800a074:	37b0      	adds	r7, #176	; 0xb0
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	460b      	mov	r3, r1
 800a08a:	71fb      	strb	r3, [r7, #7]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d117      	bne.n	800a0cc <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	e00d      	b.n	800a0c4 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	edd3 7a00 	vldr	s15, [r3]
 800a0ae:	eef1 7a67 	vneg.f32	s15, s15
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d3ed      	bcc.n	800a0a8 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d2:	d024      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d80b      	bhi.n	800a0f2 <arm_cfft_f32+0x78>
 800a0da:	2b20      	cmp	r3, #32
 800a0dc:	d01f      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d802      	bhi.n	800a0e8 <arm_cfft_f32+0x6e>
 800a0e2:	2b10      	cmp	r3, #16
 800a0e4:	d016      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0e6:	e028      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d01d      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a0ec:	2b80      	cmp	r3, #128	; 0x80
 800a0ee:	d011      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0f0:	e023      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f6:	d00d      	beq.n	800a114 <arm_cfft_f32+0x9a>
 800a0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0fc:	d803      	bhi.n	800a106 <arm_cfft_f32+0x8c>
 800a0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a102:	d011      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a104:	e019      	b.n	800a13a <arm_cfft_f32+0xc0>
 800a106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10a:	d008      	beq.n	800a11e <arm_cfft_f32+0xa4>
 800a10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a110:	d00a      	beq.n	800a128 <arm_cfft_f32+0xae>
 800a112:	e012      	b.n	800a13a <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7fe ff90 	bl	800903c <arm_cfft_radix8by2_f32>
        break;
 800a11c:	e00d      	b.n	800a13a <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff f97f 	bl	8009424 <arm_cfft_radix8by4_f32>
        break;
 800a126:	e008      	b.n	800a13a <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	b299      	uxth	r1, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	2301      	movs	r3, #1
 800a132:	68b8      	ldr	r0, [r7, #8]
 800a134:	f000 f844 	bl	800a1c0 <arm_radix8_butterfly_f32>
        break;
 800a138:	bf00      	nop
    }  

    if( bitReverseFlag )
 800a13a:	79bb      	ldrb	r3, [r7, #6]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d007      	beq.n	800a150 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8999      	ldrh	r1, [r3, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	461a      	mov	r2, r3
 800a14a:	68b8      	ldr	r0, [r7, #8]
 800a14c:	f7fe f878 	bl	8008240 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d130      	bne.n	800a1b8 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a168:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a170:	2300      	movs	r3, #0
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e01c      	b.n	800a1b0 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	1d1a      	adds	r2, r3, #4
 800a17a:	61ba      	str	r2, [r7, #24]
 800a17c:	ed93 7a00 	vldr	s14, [r3]
 800a180:	edd7 7a04 	vldr	s15, [r7, #16]
 800a184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a188:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	edd3 7a00 	vldr	s15, [r3]
 800a192:	eeb1 7a67 	vneg.f32	s14, s15
 800a196:	edd7 7a04 	vldr	s15, [r7, #16]
 800a19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	61fb      	str	r3, [r7, #28]
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d3de      	bcc.n	800a176 <arm_cfft_f32+0xfc>
        }
    }
}
 800a1b8:	bf00      	nop
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b0bd      	sub	sp, #244	; 0xf4
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	817b      	strh	r3, [r7, #10]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a1d4:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <arm_radix8_butterfly_f32+0x3c>)
 800a1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a1da:	897b      	ldrh	r3, [r7, #10]
 800a1dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800a1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ec:	08db      	lsrs	r3, r3, #3
 800a1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1f8:	e002      	b.n	800a200 <arm_radix8_butterfly_f32+0x40>
 800a1fa:	bf00      	nop
 800a1fc:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800a200:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a208:	4413      	add	r3, r2
 800a20a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a20e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	4413      	add	r3, r2
 800a218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a21c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a224:	4413      	add	r3, r2
 800a226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a22a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a232:	4413      	add	r3, r2
 800a234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a238:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a240:	4413      	add	r3, r2
 800a242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24e:	4413      	add	r3, r2
 800a250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a25c:	4413      	add	r3, r2
 800a25e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	ed93 7a00 	vldr	s14, [r3]
 800a270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4413      	add	r3, r2
 800a27a:	edd3 7a00 	vldr	s15, [r3]
 800a27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a282:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	ed93 7a00 	vldr	s14, [r3]
 800a294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	edd3 7a00 	vldr	s15, [r3]
 800a2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	ed93 7a00 	vldr	s14, [r3]
 800a2b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	edd3 7a00 	vldr	s15, [r3]
 800a2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a2ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	ed93 7a00 	vldr	s14, [r3]
 800a2dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	edd3 7a00 	vldr	s15, [r3]
 800a2ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2ee:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a2f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	ed93 7a00 	vldr	s14, [r3]
 800a300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	edd3 7a00 	vldr	s15, [r3]
 800a30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a312:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	ed93 7a00 	vldr	s14, [r3]
 800a324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	edd3 7a00 	vldr	s15, [r3]
 800a332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a336:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a33a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4413      	add	r3, r2
 800a344:	ed93 7a00 	vldr	s14, [r3]
 800a348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	edd3 7a00 	vldr	s15, [r3]
 800a356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a35a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a35e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	ed93 7a00 	vldr	s14, [r3]
 800a36c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4413      	add	r3, r2
 800a376:	edd3 7a00 	vldr	s15, [r3]
 800a37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a37e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a382:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a386:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a38a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a38e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a392:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a396:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a39e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a3a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a3a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a3b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a3b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800a3c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a3d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a3d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a3dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a3ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3f2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a3f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4413      	add	r3, r2
 800a402:	ed93 7a00 	vldr	s14, [r3]
 800a406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	3304      	adds	r3, #4
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	edd3 7a00 	vldr	s15, [r3]
 800a416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a41a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a41e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	ed93 7a00 	vldr	s14, [r3]
 800a42e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	3304      	adds	r3, #4
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	edd3 7a00 	vldr	s15, [r3]
 800a43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a442:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	ed93 7a00 	vldr	s14, [r3]
 800a456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	3304      	adds	r3, #4
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	4413      	add	r3, r2
 800a462:	edd3 7a00 	vldr	s15, [r3]
 800a466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a46a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	3304      	adds	r3, #4
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	ed93 7a00 	vldr	s14, [r3]
 800a47e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	3304      	adds	r3, #4
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	edd3 7a00 	vldr	s15, [r3]
 800a48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a492:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	3304      	adds	r3, #4
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	ed93 7a00 	vldr	s14, [r3]
 800a4a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	edd3 7a00 	vldr	s15, [r3]
 800a4b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a4be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	ed93 7a00 	vldr	s14, [r3]
 800a4ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	edd3 7a00 	vldr	s15, [r3]
 800a4de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	ed93 7a00 	vldr	s14, [r3]
 800a4f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	edd3 7a00 	vldr	s15, [r3]
 800a506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a50a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a50e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	3304      	adds	r3, #4
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	ed93 7a00 	vldr	s14, [r3]
 800a51e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	3304      	adds	r3, #4
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	edd3 7a00 	vldr	s15, [r3]
 800a52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a532:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a536:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a53a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a542:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a546:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a54a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a54e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a552:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a556:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a55a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a55e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a562:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a566:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a56a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a56e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a572:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a586:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a58e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	3304      	adds	r3, #4
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a5a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a5ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a5bc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5c4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800a5c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a5d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800a5e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a5f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a5f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800a5fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	3304      	adds	r3, #4
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a60e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a612:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a616:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800a61a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a61e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a622:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a626:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800a632:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a636:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a63e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800a64a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a64e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a656:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800a662:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a666:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a66a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a66e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a676:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800a67a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a67e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a682:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a686:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800a68a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a68e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a696:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800a69a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a69e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800a6aa:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a6ae:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800a6ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a6be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800a6ca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a6ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800a6da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a6de:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6e6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800a6ea:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a6ee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6f6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800a6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a708:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a710:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800a714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a722:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a72a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800a72e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a73c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a740:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a744:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800a748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a756:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800a762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	3304      	adds	r3, #4
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a772:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800a77e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3304      	adds	r3, #4
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a78e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a792:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a796:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800a79a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a7aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a7ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800a7b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	3304      	adds	r3, #4
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a7c6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a7ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ce:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800a7d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a7d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7da:	4413      	add	r3, r2
 800a7dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800a7e0:	897b      	ldrh	r3, [r7, #10]
 800a7e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	f4ff ad0a 	bcc.w	800a200 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f0:	2b07      	cmp	r3, #7
 800a7f2:	f240 84e3 	bls.w	800b1bc <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800a802:	893b      	ldrh	r3, [r7, #8]
 800a804:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a808:	4413      	add	r3, r2
 800a80a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800a80c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a80e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800a812:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a818:	4413      	add	r3, r2
 800a81a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800a81c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a81e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a820:	4413      	add	r3, r2
 800a822:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800a824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a828:	4413      	add	r3, r2
 800a82a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800a82c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a82e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a830:	4413      	add	r3, r2
 800a832:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800a834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a838:	4413      	add	r3, r2
 800a83a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800a83c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a83e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a840:	4413      	add	r3, r2
 800a842:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800a844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800a852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800a85e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	4413      	add	r3, r2
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800a86a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800a876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800a882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800a88e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4413      	add	r3, r2
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800a89a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800a8aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800a8b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	3304      	adds	r3, #4
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800a8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	3304      	adds	r3, #4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800a8e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800a8f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800a8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800a906:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90e:	4413      	add	r3, r2
 800a910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800a914:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91c:	4413      	add	r3, r2
 800a91e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800a922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a92a:	4413      	add	r3, r2
 800a92c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800a930:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a938:	4413      	add	r3, r2
 800a93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800a93e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a946:	4413      	add	r3, r2
 800a948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800a94c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a954:	4413      	add	r3, r2
 800a956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800a95a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	4413      	add	r3, r2
 800a964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	ed93 7a00 	vldr	s14, [r3]
 800a976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	edd3 7a00 	vldr	s15, [r3]
 800a984:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a988:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a98c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	ed93 7a00 	vldr	s14, [r3]
 800a99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a99e:	00db      	lsls	r3, r3, #3
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	edd3 7a00 	vldr	s15, [r3]
 800a9a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ac:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a9b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	ed93 7a00 	vldr	s14, [r3]
 800a9be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	edd3 7a00 	vldr	s15, [r3]
 800a9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9d0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a9d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	ed93 7a00 	vldr	s14, [r3]
 800a9e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	edd3 7a00 	vldr	s15, [r3]
 800a9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9f4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a9f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	ed93 7a00 	vldr	s14, [r3]
 800aa06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	edd3 7a00 	vldr	s15, [r3]
 800aa14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa18:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800aa1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	ed93 7a00 	vldr	s14, [r3]
 800aa2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa3c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800aa40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	ed93 7a00 	vldr	s14, [r3]
 800aa4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	edd3 7a00 	vldr	s15, [r3]
 800aa5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa60:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	ed93 7a00 	vldr	s14, [r3]
 800aa72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa84:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800aa88:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa94:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800aa98:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa9c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aaa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaa4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800aaa8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aaac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aab4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800aab8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aabc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800aac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aad6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800aada:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aade:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800aae2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aae6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800aaea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800aaf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	3304      	adds	r3, #4
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	ed93 7a00 	vldr	s14, [r3]
 800ab02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	3304      	adds	r3, #4
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	edd3 7a00 	vldr	s15, [r3]
 800ab12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800ab1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	3304      	adds	r3, #4
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	ed93 7a00 	vldr	s14, [r3]
 800ab2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	3304      	adds	r3, #4
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	edd3 7a00 	vldr	s15, [r3]
 800ab3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800ab42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	3304      	adds	r3, #4
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	ed93 7a00 	vldr	s14, [r3]
 800ab52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	3304      	adds	r3, #4
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	edd3 7a00 	vldr	s15, [r3]
 800ab62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800ab6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	3304      	adds	r3, #4
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	ed93 7a00 	vldr	s14, [r3]
 800ab7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	3304      	adds	r3, #4
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	edd3 7a00 	vldr	s15, [r3]
 800ab8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab8e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ab92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	3304      	adds	r3, #4
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	ed93 7a00 	vldr	s14, [r3]
 800aba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	3304      	adds	r3, #4
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	edd3 7a00 	vldr	s15, [r3]
 800abb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abb6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800abba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	3304      	adds	r3, #4
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	ed93 7a00 	vldr	s14, [r3]
 800abca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	3304      	adds	r3, #4
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	edd3 7a00 	vldr	s15, [r3]
 800abda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abde:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800abe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	3304      	adds	r3, #4
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4413      	add	r3, r2
 800abee:	ed93 7a00 	vldr	s14, [r3]
 800abf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	3304      	adds	r3, #4
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	edd3 7a00 	vldr	s15, [r3]
 800ac02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac06:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ac0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3304      	adds	r3, #4
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	ed93 7a00 	vldr	s14, [r3]
 800ac1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	3304      	adds	r3, #4
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	edd3 7a00 	vldr	s15, [r3]
 800ac2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800ac32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac3e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800ac42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ac52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac56:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800ac62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac66:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800ac72:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ac76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac7e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ac82:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ac86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ac8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac8e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ac92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	3304      	adds	r3, #4
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acaa:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800acae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800acbe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800acc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800acc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800acce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800acd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800acd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800acde:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ace2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ace6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acea:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800acee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800acf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800acfe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ad02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800ad0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ad12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ad16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800ad1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad2c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad34:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800ad38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	3304      	adds	r3, #4
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad48:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad50:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800ad54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ad58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ad5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad60:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800ad64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad70:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800ad74:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ad78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad80:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800ad84:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800ad94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ada2:	edd7 7a06 	vldr	s15, [r7, #24]
 800ada6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adaa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800adae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	3304      	adds	r3, #4
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	ed97 7a05 	vldr	s14, [r7, #20]
 800adbe:	edd7 7a04 	vldr	s15, [r7, #16]
 800adc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adc6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800adca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800adce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800add2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800adda:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800adde:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800adea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800adee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800adfa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800adfe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800ae0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae18:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae20:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800ae24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae34:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae3c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800ae40:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ae44:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae4c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae54:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800ae58:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ae5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae64:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800ae70:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ae74:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ae78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae7c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800ae88:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ae8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ae90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae94:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ae98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800aea0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aea4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800aeb0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aeb4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aeb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aebc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800aec0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aec4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aecc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800aed0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aed4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aedc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800aee0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aee4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800aef0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aefc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800af00:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af04:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af0c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800af10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af14:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af1c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800af20:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af24:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800af28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af2c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800af30:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af34:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800af38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af3c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800af40:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800af44:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af4c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800af50:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800af54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af5c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800af60:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af64:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800af68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800af70:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800af78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af7c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800af80:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800af84:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af8c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800af90:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800af94:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af9c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800afa0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800afa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800afb0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800afb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800afc0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800afc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afcc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800afd0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800afd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afdc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800afe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4413      	add	r3, r2
 800afea:	ed97 7a07 	vldr	s14, [r7, #28]
 800afee:	edd7 7a06 	vldr	s15, [r7, #24]
 800aff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800affa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	3304      	adds	r3, #4
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4413      	add	r3, r2
 800b006:	ed97 7a05 	vldr	s14, [r7, #20]
 800b00a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b012:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b016:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b01a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b026:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b02a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b032:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b036:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b03a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b046:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b04a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b052:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	ed97 7a07 	vldr	s14, [r7, #28]
 800b064:	edd7 7a06 	vldr	s15, [r7, #24]
 800b068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b06c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	3304      	adds	r3, #4
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4413      	add	r3, r2
 800b07c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b080:	edd7 7a04 	vldr	s15, [r7, #16]
 800b084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b088:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b08c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b090:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b098:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b09c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b0ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b0b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b0bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b0cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b0da:	edd7 7a06 	vldr	s15, [r7, #24]
 800b0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b0e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b0f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fe:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b102:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b106:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b112:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b116:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b122:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b126:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b132:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b136:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	4413      	add	r3, r2
 800b14c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b150:	edd7 7a06 	vldr	s15, [r7, #24]
 800b154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b158:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b15c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	3304      	adds	r3, #4
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	ed97 7a05 	vldr	s14, [r7, #20]
 800b16c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b174:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800b178:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b17c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b180:	4413      	add	r3, r2
 800b182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800b186:	897b      	ldrh	r3, [r7, #10]
 800b188:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b18c:	429a      	cmp	r2, r3
 800b18e:	f4ff abba 	bcc.w	800a906 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800b192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b196:	3301      	adds	r3, #1
 800b198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800b19c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	f4ff ab2c 	bcc.w	800a802 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800b1aa:	893b      	ldrh	r3, [r7, #8]
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800b1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b4:	2b07      	cmp	r3, #7
 800b1b6:	f63f a813 	bhi.w	800a1e0 <arm_radix8_butterfly_f32+0x20>
}
 800b1ba:	e000      	b.n	800b1be <arm_radix8_butterfly_f32+0xffe>
         break;
 800b1bc:	bf00      	nop
}
 800b1be:	bf00      	nop
 800b1c0:	37f4      	adds	r7, #244	; 0xf4
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	460a      	mov	r2, r1
 800b1d6:	71fb      	strb	r3, [r7, #7]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	b25a      	sxtb	r2, r3
 800b1e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	b25b      	sxtb	r3, r3
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	f000 f832 	bl	800b258 <writeByteToReg>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	733b      	strb	r3, [r7, #12]
	CS_0();
 800b20a:	2200      	movs	r2, #0
 800b20c:	2110      	movs	r1, #16
 800b20e:	4809      	ldr	r0, [pc, #36]	; (800b234 <writeCMD+0x38>)
 800b210:	f004 fc18 	bl	800fa44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800b214:	f107 010c 	add.w	r1, r7, #12
 800b218:	2332      	movs	r3, #50	; 0x32
 800b21a:	2201      	movs	r2, #1
 800b21c:	4806      	ldr	r0, [pc, #24]	; (800b238 <writeCMD+0x3c>)
 800b21e:	f006 fa69 	bl	80116f4 <HAL_SPI_Transmit>
	CS_1();
 800b222:	2201      	movs	r2, #1
 800b224:	2110      	movs	r1, #16
 800b226:	4803      	ldr	r0, [pc, #12]	; (800b234 <writeCMD+0x38>)
 800b228:	f004 fc0c 	bl	800fa44 <HAL_GPIO_WritePin>
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	40020000 	.word	0x40020000
 800b238:	200662e4 	.word	0x200662e4

0800b23c <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 800b246:	79fb      	ldrb	r3, [r7, #7]
 800b248:	4619      	mov	r1, r3
 800b24a:	2003      	movs	r0, #3
 800b24c:	f000 f804 	bl	800b258 <writeByteToReg>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	460a      	mov	r2, r1
 800b262:	71fb      	strb	r3, [r7, #7]
 800b264:	4613      	mov	r3, r2
 800b266:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800b272:	2300      	movs	r3, #0
 800b274:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800b276:	79bb      	ldrb	r3, [r7, #6]
 800b278:	73bb      	strb	r3, [r7, #14]
	CS_0();
 800b27a:	2200      	movs	r2, #0
 800b27c:	2110      	movs	r1, #16
 800b27e:	4809      	ldr	r0, [pc, #36]	; (800b2a4 <writeByteToReg+0x4c>)
 800b280:	f004 fbe0 	bl	800fa44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800b284:	f107 010c 	add.w	r1, r7, #12
 800b288:	2364      	movs	r3, #100	; 0x64
 800b28a:	2203      	movs	r2, #3
 800b28c:	4806      	ldr	r0, [pc, #24]	; (800b2a8 <writeByteToReg+0x50>)
 800b28e:	f006 fa31 	bl	80116f4 <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800b292:	2201      	movs	r2, #1
 800b294:	2110      	movs	r1, #16
 800b296:	4803      	ldr	r0, [pc, #12]	; (800b2a4 <writeByteToReg+0x4c>)
 800b298:	f004 fbd4 	bl	800fa44 <HAL_GPIO_WritePin>

}
 800b29c:	bf00      	nop
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	40020000 	.word	0x40020000
 800b2a8:	200662e4 	.word	0x200662e4

0800b2ac <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2002      	movs	r0, #2
 800b2bc:	f7ff ffcc 	bl	800b258 <writeByteToReg>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	e009      	b.n	800b2e8 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 800b2d4:	2108      	movs	r1, #8
 800b2d6:	4809      	ldr	r0, [pc, #36]	; (800b2fc <waitDRDY+0x34>)
 800b2d8:	f004 fb9c 	bl	800fa14 <HAL_GPIO_ReadPin>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a05      	ldr	r2, [pc, #20]	; (800b300 <waitDRDY+0x38>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d9f1      	bls.n	800b2d4 <waitDRDY+0xc>
				break;
			}
		}
}
 800b2f0:	e000      	b.n	800b2f4 <waitDRDY+0x2c>
				break;
 800b2f2:	bf00      	nop
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	40020000 	.word	0x40020000
 800b300:	026259ff 	.word	0x026259ff

0800b304 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
	waitDRDY();
 800b30a:	f7ff ffdd 	bl	800b2c8 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 800b30e:	2000      	movs	r0, #0
 800b310:	f000 f820 	bl	800b354 <readByteFromReg>
 800b314:	4603      	mov	r3, r0
 800b316:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	b2db      	uxtb	r3, r3
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800b32e:	23ff      	movs	r3, #255	; 0xff
 800b330:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 800b336:	1dba      	adds	r2, r7, #6
 800b338:	1df9      	adds	r1, r7, #7
 800b33a:	2332      	movs	r3, #50	; 0x32
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	2301      	movs	r3, #1
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <receive8bit+0x28>)
 800b342:	f006 fb3d 	bl	80119c0 <HAL_SPI_TransmitReceive>
	return read;
 800b346:	79bb      	ldrb	r3, [r7, #6]



}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	200662e4 	.word	0x200662e4

0800b354 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	f043 0310 	orr.w	r3, r3, #16
 800b364:	b2db      	uxtb	r3, r3
 800b366:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 800b368:	2300      	movs	r3, #0
 800b36a:	737b      	strb	r3, [r7, #13]
	CS_0();
 800b36c:	2200      	movs	r2, #0
 800b36e:	2110      	movs	r1, #16
 800b370:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <readByteFromReg+0x54>)
 800b372:	f004 fb67 	bl	800fa44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800b376:	f107 010c 	add.w	r1, r7, #12
 800b37a:	2332      	movs	r3, #50	; 0x32
 800b37c:	2202      	movs	r2, #2
 800b37e:	480b      	ldr	r0, [pc, #44]	; (800b3ac <readByteFromReg+0x58>)
 800b380:	f006 f9b8 	bl	80116f4 <HAL_SPI_Transmit>
	delay_us(10);
 800b384:	200a      	movs	r0, #10
 800b386:	f000 fd9d 	bl	800bec4 <delay_us>
	uint8_t read = receive8bit();
 800b38a:	f7ff ffcd 	bl	800b328 <receive8bit>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800b392:	2201      	movs	r2, #1
 800b394:	2110      	movs	r1, #16
 800b396:	4804      	ldr	r0, [pc, #16]	; (800b3a8 <readByteFromReg+0x54>)
 800b398:	f004 fb54 	bl	800fa44 <HAL_GPIO_WritePin>

	return read;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	40020000 	.word	0x40020000
 800b3ac:	200662e4 	.word	0x200662e4

0800b3b0 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800b3ba:	2350      	movs	r3, #80	; 0x50
 800b3bc:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	b25b      	sxtb	r3, r3
 800b3c4:	f043 0304 	orr.w	r3, r3, #4
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	717b      	strb	r3, [r7, #5]

	CS_0();
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2110      	movs	r1, #16
 800b3d2:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <setBuffer+0x48>)
 800b3d4:	f004 fb36 	bl	800fa44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800b3d8:	1d39      	adds	r1, r7, #4
 800b3da:	2332      	movs	r3, #50	; 0x32
 800b3dc:	2202      	movs	r2, #2
 800b3de:	4807      	ldr	r0, [pc, #28]	; (800b3fc <setBuffer+0x4c>)
 800b3e0:	f006 f988 	bl	80116f4 <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	2110      	movs	r1, #16
 800b3e8:	4803      	ldr	r0, [pc, #12]	; (800b3f8 <setBuffer+0x48>)
 800b3ea:	f004 fb2b 	bl	800fa44 <HAL_GPIO_WritePin>
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	40020000 	.word	0x40020000
 800b3fc:	200662e4 	.word	0x200662e4

0800b400 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b404:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b408:	4b05      	ldr	r3, [pc, #20]	; (800b420 <__NVIC_SystemReset+0x20>)
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b410:	4903      	ldr	r1, [pc, #12]	; (800b420 <__NVIC_SystemReset+0x20>)
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <__NVIC_SystemReset+0x24>)
 800b414:	4313      	orrs	r3, r2
 800b416:	60cb      	str	r3, [r1, #12]
 800b418:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b41c:	bf00      	nop
 800b41e:	e7fd      	b.n	800b41c <__NVIC_SystemReset+0x1c>
 800b420:	e000ed00 	.word	0xe000ed00
 800b424:	05fa0004 	.word	0x05fa0004

0800b428 <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	ed2d 8b10 	vpush	{d8-d15}
 800b42e:	b0a2      	sub	sp, #136	; 0x88
 800b430:	af20      	add	r7, sp, #128	; 0x80
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]

	if( USARTBLE.IAPflag == 1)
 800b436:	4b72      	ldr	r3, [pc, #456]	; (800b600 <BLE_USART+0x1d8>)
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d008      	beq.n	800b450 <BLE_USART+0x28>
	{
		USARTBLE.sendflag =0;
 800b43e:	4b70      	ldr	r3, [pc, #448]	; (800b600 <BLE_USART+0x1d8>)
 800b440:	2200      	movs	r2, #0
 800b442:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 800b444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b448:	f000 fd94 	bl	800bf74 <TM_DelayMillis>
		NVIC_SystemReset();
 800b44c:	f7ff ffd8 	bl	800b400 <__NVIC_SystemReset>

	}
	if(USARTBLE.sendflag ==1)
 800b450:	4b6b      	ldr	r3, [pc, #428]	; (800b600 <BLE_USART+0x1d8>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 80cd 	beq.w	800b5f4 <BLE_USART+0x1cc>
	{

		//2021/0201/George
		//TODO : BLE transmission parameter number3 from var to min and
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b460:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b604 <BLE_USART+0x1dc>
 800b464:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800b472:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800b604 <BLE_USART+0x1dc>
 800b476:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b47a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					sendpData->Statistic_DisplacementOvall,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b484:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					sendpData->Statistic_DisplacementOvall,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	edd3 4a00 	vldr	s9, [r3]
 800b48e:	ed9f 4a5d 	vldr	s8, [pc, #372]	; 800b604 <BLE_USART+0x1dc>
 800b492:	ee64 4a84 	vmul.f32	s9, s9, s8
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b496:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
					sendpData->Statistic_DisplacementOvall,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	edd3 3a06 	vldr	s7, [r3, #24]
 800b4a0:	ed9f 3a58 	vldr	s6, [pc, #352]	; 800b604 <BLE_USART+0x1dc>
 800b4a4:	ee63 3a83 	vmul.f32	s7, s7, s6
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b4a8:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	edd3 2a02 	vldr	s5, [r3, #8]
 800b4b2:	ed9f 2a54 	vldr	s4, [pc, #336]	; 800b604 <BLE_USART+0x1dc>
 800b4b6:	ee62 2a82 	vmul.f32	s5, s5, s4
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b4ba:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	edd3 1a04 	vldr	s3, [r3, #16]
 800b4c4:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 800b604 <BLE_USART+0x1dc>
 800b4c8:	ee61 1a81 	vmul.f32	s3, s3, s2
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b4cc:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	edd3 0a07 	vldr	s1, [r3, #28]
 800b4d6:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800b604 <BLE_USART+0x1dc>
 800b4da:	ee60 0a80 	vmul.f32	s1, s1, s0
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b4de:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
					sendpData->Statistic_kurtosis*1000, sendpData->Statistic_skewness*1000,
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	ed93 8a08 	vldr	s16, [r3, #32]
 800b4e8:	eddf 8a46 	vldr	s17, [pc, #280]	; 800b604 <BLE_USART+0x1dc>
 800b4ec:	ee28 8a28 	vmul.f32	s16, s16, s17
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b4f0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
					sendpData->Statistic_kurtosis*1000, sendpData->Statistic_skewness*1000,
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	ed93 9a09 	vldr	s18, [r3, #36]	; 0x24
 800b4fa:	eddf 9a42 	vldr	s19, [pc, #264]	; 800b604 <BLE_USART+0x1dc>
 800b4fe:	ee29 9a29 	vmul.f32	s18, s18, s19
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b502:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b506:	4b40      	ldr	r3, [pc, #256]	; (800b608 <BLE_USART+0x1e0>)
 800b508:	ed93 aa0e 	vldr	s20, [r3, #56]	; 0x38
 800b50c:	eddf aa3d 	vldr	s21, [pc, #244]	; 800b604 <BLE_USART+0x1dc>
 800b510:	ee2a aa2a 	vmul.f32	s20, s20, s21
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b514:	eeb7 aaca 	vcvt.f64.f32	d10, s20
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b518:	4b3b      	ldr	r3, [pc, #236]	; (800b608 <BLE_USART+0x1e0>)
 800b51a:	ed93 ba0f 	vldr	s22, [r3, #60]	; 0x3c
 800b51e:	eddf ba39 	vldr	s23, [pc, #228]	; 800b604 <BLE_USART+0x1dc>
 800b522:	ee2b ba2b 	vmul.f32	s22, s22, s23
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b526:	eeb7 bacb 	vcvt.f64.f32	d11, s22
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b52a:	4b37      	ldr	r3, [pc, #220]	; (800b608 <BLE_USART+0x1e0>)
 800b52c:	ed93 ca10 	vldr	s24, [r3, #64]	; 0x40
 800b530:	eddf ca34 	vldr	s25, [pc, #208]	; 800b604 <BLE_USART+0x1dc>
 800b534:	ee2c ca2c 	vmul.f32	s24, s24, s25
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b538:	eeb7 cacc 	vcvt.f64.f32	d12, s24
					statistic_value.Statistic_VeloccityFreqPeak[0]*1000,statistic_value.Statistic_VeloccityFreqPeak[1]*1000,statistic_value.Statistic_VeloccityFreqPeak[2]*1000);
 800b53c:	4b32      	ldr	r3, [pc, #200]	; (800b608 <BLE_USART+0x1e0>)
 800b53e:	ed93 da22 	vldr	s26, [r3, #136]	; 0x88
 800b542:	eddf da30 	vldr	s27, [pc, #192]	; 800b604 <BLE_USART+0x1dc>
 800b546:	ee2d da2d 	vmul.f32	s26, s26, s27
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b54a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
					statistic_value.Statistic_VeloccityFreqPeak[0]*1000,statistic_value.Statistic_VeloccityFreqPeak[1]*1000,statistic_value.Statistic_VeloccityFreqPeak[2]*1000);
 800b54e:	4b2e      	ldr	r3, [pc, #184]	; (800b608 <BLE_USART+0x1e0>)
 800b550:	ed93 ea23 	vldr	s28, [r3, #140]	; 0x8c
 800b554:	eddf ea2b 	vldr	s29, [pc, #172]	; 800b604 <BLE_USART+0x1dc>
 800b558:	ee2e ea2e 	vmul.f32	s28, s28, s29
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b55c:	eeb7 eace 	vcvt.f64.f32	d14, s28
					statistic_value.Statistic_VeloccityFreqPeak[0]*1000,statistic_value.Statistic_VeloccityFreqPeak[1]*1000,statistic_value.Statistic_VeloccityFreqPeak[2]*1000);
 800b560:	4b29      	ldr	r3, [pc, #164]	; (800b608 <BLE_USART+0x1e0>)
 800b562:	ed93 fa24 	vldr	s30, [r3, #144]	; 0x90
 800b566:	eddf fa27 	vldr	s31, [pc, #156]	; 800b604 <BLE_USART+0x1dc>
 800b56a:	ee2f fa2f 	vmul.f32	s30, s30, s31
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b56e:	eeb7 facf 	vcvt.f64.f32	d15, s30
 800b572:	ed8d fb1e 	vstr	d15, [sp, #120]	; 0x78
 800b576:	ed8d eb1c 	vstr	d14, [sp, #112]	; 0x70
 800b57a:	ed8d db1a 	vstr	d13, [sp, #104]	; 0x68
 800b57e:	ed8d cb18 	vstr	d12, [sp, #96]	; 0x60
 800b582:	ed8d bb16 	vstr	d11, [sp, #88]	; 0x58
 800b586:	ed8d ab14 	vstr	d10, [sp, #80]	; 0x50
 800b58a:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 800b58e:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 800b592:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 800b596:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800b59a:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800b59e:	ed8d 3b08 	vstr	d3, [sp, #32]
 800b5a2:	ed8d 4b06 	vstr	d4, [sp, #24]
 800b5a6:	ed8d 5b04 	vstr	d5, [sp, #16]
 800b5aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b5ae:	ed8d 7b00 	vstr	d7, [sp]
 800b5b2:	4a16      	ldr	r2, [pc, #88]	; (800b60c <BLE_USART+0x1e4>)
 800b5b4:	2180      	movs	r1, #128	; 0x80
 800b5b6:	4816      	ldr	r0, [pc, #88]	; (800b610 <BLE_USART+0x1e8>)
 800b5b8:	f003 f938 	bl	800e82c <snprintf_>

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800b5bc:	4814      	ldr	r0, [pc, #80]	; (800b610 <BLE_USART+0x1e8>)
 800b5be:	f7fc fe9f 	bl	8008300 <strlen>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b80      	cmp	r3, #128	; 0x80
 800b5c6:	d804      	bhi.n	800b5d2 <BLE_USART+0x1aa>
 800b5c8:	4811      	ldr	r0, [pc, #68]	; (800b610 <BLE_USART+0x1e8>)
 800b5ca:	f7fc fe99 	bl	8008300 <strlen>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e000      	b.n	800b5d4 <BLE_USART+0x1ac>
 800b5d2:	2380      	movs	r3, #128	; 0x80
 800b5d4:	4a0a      	ldr	r2, [pc, #40]	; (800b600 <BLE_USART+0x1d8>)
 800b5d6:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224

		if(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 800b5da:	4b09      	ldr	r3, [pc, #36]	; (800b600 <BLE_USART+0x1d8>)
 800b5dc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	490a      	ldr	r1, [pc, #40]	; (800b610 <BLE_USART+0x1e8>)
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f007 f8ea 	bl	80127c0 <HAL_UART_Transmit_DMA>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d100      	bne.n	800b5f4 <BLE_USART+0x1cc>
		{
			__NOP();
 800b5f2:	bf00      	nop
		}

	}
}
 800b5f4:	bf00      	nop
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	ecbd 8b10 	vpop	{d8-d15}
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	2005e020 	.word	0x2005e020
 800b604:	447a0000 	.word	0x447a0000
 800b608:	20059c18 	.word	0x20059c18
 800b60c:	08016df0 	.word	0x08016df0
 800b610:	2005e0c0 	.word	0x2005e0c0

0800b614 <checkBLECommandFromBLEGateway>:

_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d011      	beq.n	800b64c <checkBLECommandFromBLEGateway+0x38>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f00a fd27 	bl	801607e <strstr>
 800b630:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	461a      	mov	r2, r3
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	f00a fd0e 	bl	801605a <strncmp>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <checkBLECommandFromBLEGateway+0x34>
		   return true;
 800b644:	2301      	movs	r3, #1
 800b646:	e002      	b.n	800b64e <checkBLECommandFromBLEGateway+0x3a>
	   }
	   else
	   {
		   return false;
 800b648:	2300      	movs	r3, #0
 800b64a:	e000      	b.n	800b64e <checkBLECommandFromBLEGateway+0x3a>

	}
	else
	{

		return false;
 800b64c:	2300      	movs	r3, #0
	}

}
 800b64e:	4618      	mov	r0, r3
 800b650:	3718      	adds	r7, #24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <CalcluateMean>:
 *
 * Calculate Skewness & kurtosis
 *
 * */
float CalcluateMean(float *x, int n)
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
	float sum = 0;
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < n; i++)
 800b666:	2300      	movs	r3, #0
 800b668:	60bb      	str	r3, [r7, #8]
 800b66a:	e00e      	b.n	800b68a <CalcluateMean+0x34>
		sum += x[i];
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	edd3 7a00 	vldr	s15, [r3]
 800b678:	ed97 7a03 	vldr	s14, [r7, #12]
 800b67c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b680:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < n; i++)
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	3301      	adds	r3, #1
 800b688:	60bb      	str	r3, [r7, #8]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	dbec      	blt.n	800b66c <CalcluateMean+0x16>

	return sum / n;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	ee07 3a90 	vmov	s15, r3
 800b698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b69c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b6a4:	eef0 7a66 	vmov.f32	s15, s13
}
 800b6a8:	eeb0 0a67 	vmov.f32	s0, s15
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <CalcluateMoment>:

float CalcluateMoment(float *x, int n, int m)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b088      	sub	sp, #32
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	60f8      	str	r0, [r7, #12]
 800b6be:	60b9      	str	r1, [r7, #8]
 800b6c0:	607a      	str	r2, [r7, #4]
	float mean = CalcluateMean(x, n), sum = 0;
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7ff ffc6 	bl	800b656 <CalcluateMean>
 800b6ca:	ed87 0a05 	vstr	s0, [r7, #20]
 800b6ce:	f04f 0300 	mov.w	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < n; i++)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	e025      	b.n	800b726 <CalcluateMoment+0x70>
		sum += pow(x[i] - mean, m);
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	ed93 7a00 	vldr	s14, [r3]
 800b6e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	ee06 3a90 	vmov	s13, r3
 800b6f8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b6fc:	eeb0 1b46 	vmov.f64	d1, d6
 800b700:	eeb0 0b47 	vmov.f64	d0, d7
 800b704:	f00a fcd8 	bl	80160b8 <pow>
 800b708:	eeb0 6b40 	vmov.f64	d6, d0
 800b70c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b714:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b718:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b71c:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < n; i++)
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	3301      	adds	r3, #1
 800b724:	61bb      	str	r3, [r7, #24]
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	dbd5      	blt.n	800b6da <CalcluateMoment+0x24>

	return sum / n;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b738:	ed97 7a07 	vldr	s14, [r7, #28]
 800b73c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b740:	eef0 7a66 	vmov.f32	s15, s13
}
 800b744:	eeb0 0a67 	vmov.f32	s0, s15
 800b748:	3720      	adds	r7, #32
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <CalcluateVariance>:

float CalcluateVariance(float *x, int n)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b086      	sub	sp, #24
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
	float mean = CalcluateMean(x, n), sumSq = 0;
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff ff7b 	bl	800b656 <CalcluateMean>
 800b760:	ed87 0a03 	vstr	s0, [r7, #12]
 800b764:	f04f 0300 	mov.w	r3, #0
 800b768:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++)
 800b76a:	2300      	movs	r3, #0
 800b76c:	613b      	str	r3, [r7, #16]
 800b76e:	e01a      	b.n	800b7a6 <CalcluateVariance+0x58>
	{
		float delta = x[i] - mean;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	4413      	add	r3, r2
 800b778:	ed93 7a00 	vldr	s14, [r3]
 800b77c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b780:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b784:	edc7 7a02 	vstr	s15, [r7, #8]

		sumSq += delta * delta;
 800b788:	ed97 7a02 	vldr	s14, [r7, #8]
 800b78c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b794:	ed97 7a05 	vldr	s14, [r7, #20]
 800b798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b79c:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < n; i++)
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	613b      	str	r3, [r7, #16]
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	dbe0      	blt.n	800b770 <CalcluateVariance+0x22>
	}

	return sumSq / (n - 1);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7ba:	ed97 7a05 	vldr	s14, [r7, #20]
 800b7be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b7c2:	eef0 7a66 	vmov.f32	s15, s13
}
 800b7c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <CalcluateStandardDeviation>:
float CalcluateStandardDeviation(float *x, int n)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
	return sqrt(CalcluateVariance(x, n));
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ffb6 	bl	800b74e <CalcluateVariance>
 800b7e2:	eef0 7a40 	vmov.f32	s15, s0
 800b7e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b7ea:	eeb0 0b47 	vmov.f64	d0, d7
 800b7ee:	f00a fd93 	bl	8016318 <sqrt>
 800b7f2:	eeb0 7b40 	vmov.f64	d7, d0
 800b7f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b7fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <Calculate_skewness>:

float Calculate_skewness(float *x, int n)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	ed2d 8b02 	vpush	{d8}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
	// NIST definition of adjusted Fisher-Pearson
	// coefficient of skewness
	float m3 = CalcluateMoment(x, n, 3);
 800b812:	2203      	movs	r2, #3
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff ff4d 	bl	800b6b6 <CalcluateMoment>
 800b81c:	ed87 0a05 	vstr	s0, [r7, #20]
	float sx = CalcluateStandardDeviation(x, n);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ffd4 	bl	800b7d0 <CalcluateStandardDeviation>
 800b828:	ed87 0a04 	vstr	s0, [r7, #16]
	int n1 = n - 1;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	3b01      	subs	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]
	float Skewness = (sqrt(n * n1) / n1) * m3 / pow(sx, 3);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	fb02 f303 	mul.w	r3, r2, r3
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b842:	eeb0 0b47 	vmov.f64	d0, d7
 800b846:	f00a fd67 	bl	8016318 <sqrt>
 800b84a:	eeb0 5b40 	vmov.f64	d5, d0
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	ee07 3a90 	vmov	s15, r3
 800b854:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b858:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800b85c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b864:	ee26 8b07 	vmul.f64	d8, d6, d7
 800b868:	edd7 7a04 	vldr	s15, [r7, #16]
 800b86c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b870:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800b874:	eeb0 0b47 	vmov.f64	d0, d7
 800b878:	f00a fc1e 	bl	80160b8 <pow>
 800b87c:	eeb0 6b40 	vmov.f64	d6, d0
 800b880:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800b884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b888:	edc7 7a02 	vstr	s15, [r7, #8]

	return Skewness;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	ee07 3a90 	vmov	s15, r3
}
 800b892:	eeb0 0a67 	vmov.f32	s0, s15
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	ecbd 8b02 	vpop	{d8}
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <Calculate_kurtosis>:
float Calculate_kurtosis(float *x, int n)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	float m2 = CalcluateMoment(x, n, 2);
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff ff01 	bl	800b6b6 <CalcluateMoment>
 800b8b4:	ed87 0a05 	vstr	s0, [r7, #20]
	float m4 = CalcluateMoment(x, n, 4);
 800b8b8:	2204      	movs	r2, #4
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff fefa 	bl	800b6b6 <CalcluateMoment>
 800b8c2:	ed87 0a04 	vstr	s0, [r7, #16]


	float Kurtosis = m4 / (m2 * m2) - 3.0;
 800b8c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b8ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8d2:	edd7 6a04 	vldr	s13, [r7, #16]
 800b8d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b8de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8e2:	edc7 7a03 	vstr	s15, [r7, #12]
    return Kurtosis;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	ee07 3a90 	vmov	s15, r3
}
 800b8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <Calculate_FreqBandRMS>:

void Calculate_FreqBandRMS(float *x,  FreqMaxMin * FreqMaxMin , int8_t freq_index)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b090      	sub	sp, #64	; 0x40
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	4613      	mov	r3, r2
 800b904:	71fb      	strb	r3, [r7, #7]

	if(FreqMaxMin->Max != 0)
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 80f9 	beq.w	800bb02 <Calculate_FreqBandRMS+0x20a>
	{
		float * velocityBuffer;
		velocityBuffer = pvPortMalloc(4096 * sizeof(float));
 800b910:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b914:	f00a f982 	bl	8015c1c <pvPortMalloc>
 800b918:	62f8      	str	r0, [r7, #44]	; 0x2c

		int dataRate = 15000;
 800b91a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800b91e:	62bb      	str	r3, [r7, #40]	; 0x28
		float frequencyResolution = dataRate/(float)fftSize;
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b92a:	4b7d      	ldr	r3, [pc, #500]	; (800bb20 <Calculate_FreqBandRMS+0x228>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b93a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float accelerationRMS = 0;
 800b93e:	f04f 0300 	mov.w	r3, #0
 800b942:	623b      	str	r3, [r7, #32]

		float parseRangeMax = FreqMaxMin->Max / frequencyResolution;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b950:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b958:	edc7 7a07 	vstr	s15, [r7, #28]
		float parseRangeMin = FreqMaxMin->Min / frequencyResolution;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	ee07 3a90 	vmov	s15, r3
 800b964:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b968:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b970:	edc7 7a06 	vstr	s15, [r7, #24]
		float ParsevalFftPower = 0;
 800b974:	f04f 0300 	mov.w	r3, #0
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
		float velocityPower = 0;
 800b97a:	f04f 0300 	mov.w	r3, #0
 800b97e:	63bb      	str	r3, [r7, #56]	; 0x38
		float velocityRMS = 0;
 800b980:	f04f 0300 	mov.w	r3, #0
 800b984:	617b      	str	r3, [r7, #20]

		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b986:	edd7 7a06 	vldr	s15, [r7, #24]
 800b98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b98e:	ee17 3a90 	vmov	r3, s15
 800b992:	637b      	str	r3, [r7, #52]	; 0x34
 800b994:	e016      	b.n	800b9c4 <Calculate_FreqBandRMS+0xcc>
		{
			ParsevalFftPower += x[i] * x[i];
 800b996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	ed93 7a00 	vldr	s14, [r3]
 800b9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	edd3 7a00 	vldr	s15, [r3]
 800b9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9b2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b9b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9ba:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9cc:	ee17 2a90 	vmov	r2, s15
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	dbdf      	blt.n	800b996 <Calculate_FreqBandRMS+0x9e>
		}

		//2021/03/09/George/Velocity target RMS
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800b9d6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9de:	ee17 3a90 	vmov	r3, s15
 800b9e2:	633b      	str	r3, [r7, #48]	; 0x30
 800b9e4:	e049      	b.n	800ba7a <Calculate_FreqBandRMS+0x182>
		{

			if(i ==0)
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <Calculate_FreqBandRMS+0x10a>
			{
				velocityBuffer[i] = x[i];
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	441a      	add	r2, r3
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9fa:	440b      	add	r3, r1
 800b9fc:	6812      	ldr	r2, [r2, #0]
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	e024      	b.n	800ba4c <Calculate_FreqBandRMS+0x154>
			}
			else
			{
				velocityBuffer[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyResolution * i);
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	4413      	add	r3, r2
 800ba0a:	edd3 7a00 	vldr	s15, [r3]
 800ba0e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800bb24 <Calculate_FreqBandRMS+0x22c>
 800ba12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba16:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800ba1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ba1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba22:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bb10 <Calculate_FreqBandRMS+0x218>
 800ba26:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	ee07 3a90 	vmov	s15, r3
 800ba30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba34:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba42:	4413      	add	r3, r2
 800ba44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba48:	edc3 7a00 	vstr	s15, [r3]

			}
			velocityPower += velocityBuffer[i] * velocityBuffer[i];
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba52:	4413      	add	r3, r2
 800ba54:	ed93 7a00 	vldr	s14, [r3]
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba5e:	4413      	add	r3, r2
 800ba60:	edd3 7a00 	vldr	s15, [r3]
 800ba64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba68:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ba6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba70:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	3301      	adds	r3, #1
 800ba78:	633b      	str	r3, [r7, #48]	; 0x30
 800ba7a:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba82:	ee17 2a90 	vmov	r2, s15
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	dbac      	blt.n	800b9e6 <Calculate_FreqBandRMS+0xee>
		}

		accelerationRMS = sqrt(ParsevalFftPower * 2)/4096;
 800ba8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ba90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba98:	eeb0 0b47 	vmov.f64	d0, d7
 800ba9c:	f00a fc3c 	bl	8016318 <sqrt>
 800baa0:	eeb0 5b40 	vmov.f64	d5, d0
 800baa4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800bb18 <Calculate_FreqBandRMS+0x220>
 800baa8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800baac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bab0:	edc7 7a08 	vstr	s15, [r7, #32]

		//2021/0309/George/ Velocity RMS ans
		velocityRMS = sqrt(velocityPower * 2)/4096;
 800bab4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800bab8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800babc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bac0:	eeb0 0b47 	vmov.f64	d0, d7
 800bac4:	f00a fc28 	bl	8016318 <sqrt>
 800bac8:	eeb0 5b40 	vmov.f64	d5, d0
 800bacc:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800bb18 <Calculate_FreqBandRMS+0x220>
 800bad0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bad4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bad8:	edc7 7a05 	vstr	s15, [r7, #20]

		statistic_value.Statistic_FreqPeak[freq_index] = accelerationRMS;
 800badc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bae0:	4a11      	ldr	r2, [pc, #68]	; (800bb28 <Calculate_FreqBandRMS+0x230>)
 800bae2:	330e      	adds	r3, #14
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	6a3a      	ldr	r2, [r7, #32]
 800baea:	601a      	str	r2, [r3, #0]
		statistic_value.Statistic_VeloccityFreqPeak[freq_index] = velocityRMS;
 800baec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baf0:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <Calculate_FreqBandRMS+0x230>)
 800baf2:	3322      	adds	r3, #34	; 0x22
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	601a      	str	r2, [r3, #0]

		vPortFree(velocityBuffer);
 800bafc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bafe:	f00a f955 	bl	8015dac <vPortFree>
	}
}
 800bb02:	bf00      	nop
 800bb04:	3740      	adds	r7, #64	; 0x40
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	f3af 8000 	nop.w
 800bb10:	4d12d84a 	.word	0x4d12d84a
 800bb14:	401921fb 	.word	0x401921fb
 800bb18:	00000000 	.word	0x00000000
 800bb1c:	40b00000 	.word	0x40b00000
 800bb20:	2000000c 	.word	0x2000000c
 800bb24:	46193c00 	.word	0x46193c00
 800bb28:	20059c18 	.word	0x20059c18
 800bb2c:	00000000 	.word	0x00000000

0800bb30 <Calculate_FreqOverAll>:

void Calculate_FreqOverAll(float *x, int n)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b090      	sub	sp, #64	; 0x40
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
	//2021/0209/George
	//Acceleration sin(2πft) integral is Velocity cos(2πft)/2πft
	//Velocity cos(2πft)/2πft integral is cos(2πft)/(2πft)^2
	float ParsevalFftPower = 0;
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float AccelerationRMS = 0;
 800bb40:	f04f 0300 	mov.w	r3, #0
 800bb44:	62bb      	str	r3, [r7, #40]	; 0x28
	float velocityPower = 0;
 800bb46:	f04f 0300 	mov.w	r3, #0
 800bb4a:	63bb      	str	r3, [r7, #56]	; 0x38
	float displacementPower = 0;
 800bb4c:	f04f 0300 	mov.w	r3, #0
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
	float displacementP2p = 0;
 800bb52:	f04f 0300 	mov.w	r3, #0
 800bb56:	613b      	str	r3, [r7, #16]
	uint32_t displacement_index = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<n/2; i++)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	633b      	str	r3, [r7, #48]	; 0x30
 800bb60:	e016      	b.n	800bb90 <Calculate_FreqOverAll+0x60>
	{
		ParsevalFftPower += x[i] * x[i];
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	ed93 7a00 	vldr	s14, [r3]
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	4413      	add	r3, r2
 800bb76:	edd3 7a00 	vldr	s15, [r3]
 800bb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bb82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i = 0; i<n/2; i++)
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	633b      	str	r3, [r7, #48]	; 0x30
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	da00      	bge.n	800bb98 <Calculate_FreqOverAll+0x68>
 800bb96:	3301      	adds	r3, #1
 800bb98:	105b      	asrs	r3, r3, #1
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	dbdf      	blt.n	800bb62 <Calculate_FreqOverAll+0x32>
	}

	int fftSize = 4096;
 800bba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
	/*
	 * 2021/0203/George
	 * Compute Speed Ovall
	 * TODO: Improve compute fftSize to fftSize/2
	 * */
	float32_t sampleCount = 4096;
 800bba8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800bbac:	623b      	str	r3, [r7, #32]
	float32_t samplingRate = 15000;
 800bbae:	4b94      	ldr	r3, [pc, #592]	; (800be00 <Calculate_FreqOverAll+0x2d0>)
 800bbb0:	61fb      	str	r3, [r7, #28]
	float32_t frequencyScale = samplingRate/sampleCount;
 800bbb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbb6:	ed97 7a08 	vldr	s14, [r7, #32]
 800bbba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbbe:	edc7 7a06 	vstr	s15, [r7, #24]
	float SpeedparsevalFftPower = 0;
 800bbc2:	f04f 0300 	mov.w	r3, #0
 800bbc6:	617b      	str	r3, [r7, #20]

	//2021/0203/George
	//Calculate Velocity power
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bbcc:	e051      	b.n	800bc72 <Calculate_FreqOverAll+0x142>
	{
			if(i < fftSize/2)
 800bbce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da00      	bge.n	800bbd8 <Calculate_FreqOverAll+0xa8>
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	105b      	asrs	r3, r3, #1
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	da46      	bge.n	800bc6c <Calculate_FreqOverAll+0x13c>
			{
				if(i ==0)
 800bbde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <Calculate_FreqOverAll+0xca>
				{
					x[i] = x[i];
 800bbe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	441a      	add	r2, r3
 800bbec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	6879      	ldr	r1, [r7, #4]
 800bbf2:	440b      	add	r3, r1
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	e024      	b.n	800bc44 <Calculate_FreqOverAll+0x114>
				}
				else
				{
					x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800bbfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	4413      	add	r3, r2
 800bc02:	edd3 7a00 	vldr	s15, [r3]
 800bc06:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800be04 <Calculate_FreqOverAll+0x2d4>
 800bc0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc0e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800bc12:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc1a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800bdf0 <Calculate_FreqOverAll+0x2c0>
 800bc1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bc22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc24:	ee07 3a90 	vmov	s15, r3
 800bc28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bc34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bc40:	edc3 7a00 	vstr	s15, [r3]

				}
				velocityPower += x[i] * x[i];
 800bc44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	ed93 7a00 	vldr	s14, [r3]
 800bc50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	4413      	add	r3, r2
 800bc58:	edd3 7a00 	vldr	s15, [r3]
 800bc5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc60:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bc64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800bc6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc6e:	3301      	adds	r3, #1
 800bc70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da00      	bge.n	800bc7c <Calculate_FreqOverAll+0x14c>
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	105b      	asrs	r3, r3, #1
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	dba5      	blt.n	800bbce <Calculate_FreqOverAll+0x9e>

	}

	//2021/0203/George
	//Calculate displacement power
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800bc82:	2300      	movs	r3, #0
 800bc84:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bc86:	e04d      	b.n	800bd24 <Calculate_FreqOverAll+0x1f4>
	{
			if(i < fftSize/2)
 800bc88:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	da00      	bge.n	800bc92 <Calculate_FreqOverAll+0x162>
 800bc90:	3301      	adds	r3, #1
 800bc92:	105b      	asrs	r3, r3, #1
 800bc94:	429a      	cmp	r2, r3
 800bc96:	da42      	bge.n	800bd1e <Calculate_FreqOverAll+0x1ee>
			{
				if(i ==0)
 800bc98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10a      	bne.n	800bcb4 <Calculate_FreqOverAll+0x184>
				{
					x[i] = x[i];
 800bc9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	441a      	add	r2, r3
 800bca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	6879      	ldr	r1, [r7, #4]
 800bcac:	440b      	add	r3, r1
 800bcae:	6812      	ldr	r2, [r2, #0]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e020      	b.n	800bcf6 <Calculate_FreqOverAll+0x1c6>
				}
				else
				{
					x[i] = (x[i]) / (2 * 3.1415926 * frequencyScale * i);
 800bcb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4413      	add	r3, r2
 800bcbc:	edd3 7a00 	vldr	s15, [r3]
 800bcc0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800bcc4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bcc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bccc:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800bdf0 <Calculate_FreqOverAll+0x2c0>
 800bcd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bcd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bcde:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bce2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bce6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	4413      	add	r3, r2
 800bcee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bcf2:	edc3 7a00 	vstr	s15, [r3]

				}
				displacementPower += x[i] * x[i];
 800bcf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	ed93 7a00 	vldr	s14, [r3]
 800bd02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	4413      	add	r3, r2
 800bd0a:	edd3 7a00 	vldr	s15, [r3]
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd1a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800bd1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd20:	3301      	adds	r3, #1
 800bd22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bd24:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da00      	bge.n	800bd2e <Calculate_FreqOverAll+0x1fe>
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	105b      	asrs	r3, r3, #1
 800bd30:	429a      	cmp	r2, r3
 800bd32:	dba9      	blt.n	800bc88 <Calculate_FreqOverAll+0x158>

	}

	//2021/0203/George2
	//TODO:calculate
	arm_max_f32(x, 2048, &displacementP2p, &displacement_index);
 800bd34:	f107 030c 	add.w	r3, r7, #12
 800bd38:	f107 0210 	add.w	r2, r7, #16
 800bd3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7fc fd47 	bl	80087d4 <arm_max_f32>


	//2021/0203/George
	//TODO: improve formula from sqrt(ParsevalFftPower)/n to sqrt(2 * ParsevalFftPower)/n;
	AccelerationRMS = sqrt(2 * ParsevalFftPower)/n;
 800bd46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800bd4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd52:	eeb0 0b47 	vmov.f64	d0, d7
 800bd56:	f00a fadf 	bl	8016318 <sqrt>
 800bd5a:	eeb0 5b40 	vmov.f64	d5, d0
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	ee07 3a90 	vmov	s15, r3
 800bd64:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bd68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bd6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bd70:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//2021/0203/George
	//TODO: improve formula from sqrt(velocityPower)/n to sqrt(2 * velocityPower)/n;
	statistic_value.Statistic_FreqOvall = AccelerationRMS;
 800bd74:	4a24      	ldr	r2, [pc, #144]	; (800be08 <Calculate_FreqOverAll+0x2d8>)
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	6293      	str	r3, [r2, #40]	; 0x28
	statistic_value.Statistic_SpeedOvall = sqrt(2 * velocityPower)/n; // unit : mm/s
 800bd7a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800bd7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd86:	eeb0 0b47 	vmov.f64	d0, d7
 800bd8a:	f00a fac5 	bl	8016318 <sqrt>
 800bd8e:	eeb0 5b40 	vmov.f64	d5, d0
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bd9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bda0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bda4:	4b18      	ldr	r3, [pc, #96]	; (800be08 <Calculate_FreqOverAll+0x2d8>)
 800bda6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	statistic_value.Statistic_DisplacementOvall = 1000 * sqrt(2 * displacementPower)/n; // unit : um
 800bdaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bdae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bdb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bdb6:	eeb0 0b47 	vmov.f64	d0, d7
 800bdba:	f00a faad 	bl	8016318 <sqrt>
 800bdbe:	eeb0 6b40 	vmov.f64	d6, d0
 800bdc2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800bdf8 <Calculate_FreqOverAll+0x2c8>
 800bdc6:	ee26 5b07 	vmul.f64	d5, d6, d7
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	ee07 3a90 	vmov	s15, r3
 800bdd0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bdd4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bdd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bddc:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <Calculate_FreqOverAll+0x2d8>)
 800bdde:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	return AccelerationRMS;
 800bde2:	bf00      	nop
}
 800bde4:	3740      	adds	r7, #64	; 0x40
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	f3af 8000 	nop.w
 800bdf0:	4d12d84a 	.word	0x4d12d84a
 800bdf4:	401921fb 	.word	0x401921fb
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	408f4000 	.word	0x408f4000
 800be00:	466a6000 	.word	0x466a6000
 800be04:	46193c00 	.word	0x46193c00
 800be08:	20059c18 	.word	0x20059c18

0800be0c <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800be16:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <delay_init+0x44>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a0d      	ldr	r2, [pc, #52]	; (800be50 <delay_init+0x44>)
 800be1c:	f023 0304 	bic.w	r3, r3, #4
 800be20:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	08db      	lsrs	r3, r3, #3
 800be26:	b2da      	uxtb	r2, r3
 800be28:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <delay_init+0x48>)
 800be2a:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800be2c:	4b09      	ldr	r3, [pc, #36]	; (800be54 <delay_init+0x48>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	b29b      	uxth	r3, r3
 800be32:	461a      	mov	r2, r3
 800be34:	0152      	lsls	r2, r2, #5
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	0092      	lsls	r2, r2, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	b29a      	uxth	r2, r3
 800be40:	4b05      	ldr	r3, [pc, #20]	; (800be58 <delay_init+0x4c>)
 800be42:	801a      	strh	r2, [r3, #0]
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	e000e010 	.word	0xe000e010
 800be54:	200000bc 	.word	0x200000bc
 800be58:	200000be 	.word	0x200000be

0800be5c <delay_ms>:

void delay_ms(uint16_t nms)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800be66:	88fb      	ldrh	r3, [r7, #6]
 800be68:	4a14      	ldr	r2, [pc, #80]	; (800bebc <delay_ms+0x60>)
 800be6a:	8812      	ldrh	r2, [r2, #0]
 800be6c:	4611      	mov	r1, r2
 800be6e:	4a14      	ldr	r2, [pc, #80]	; (800bec0 <delay_ms+0x64>)
 800be70:	fb01 f303 	mul.w	r3, r1, r3
 800be74:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 800be76:	4b12      	ldr	r3, [pc, #72]	; (800bec0 <delay_ms+0x64>)
 800be78:	2200      	movs	r2, #0
 800be7a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 800be7c:	4b10      	ldr	r3, [pc, #64]	; (800bec0 <delay_ms+0x64>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a0f      	ldr	r2, [pc, #60]	; (800bec0 <delay_ms+0x64>)
 800be82:	f043 0301 	orr.w	r3, r3, #1
 800be86:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800be88:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <delay_ms+0x64>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <delay_ms+0x46>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d0f2      	beq.n	800be88 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 800bea2:	4b07      	ldr	r3, [pc, #28]	; (800bec0 <delay_ms+0x64>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <delay_ms+0x64>)
 800beaa:	2200      	movs	r2, #0
 800beac:	609a      	str	r2, [r3, #8]
}
 800beae:	bf00      	nop
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	200000be 	.word	0x200000be
 800bec0:	e000e010 	.word	0xe000e010

0800bec4 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800becc:	4b14      	ldr	r3, [pc, #80]	; (800bf20 <delay_us+0x5c>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	4619      	mov	r1, r3
 800bed2:	4a14      	ldr	r2, [pc, #80]	; (800bf24 <delay_us+0x60>)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	fb03 f301 	mul.w	r3, r3, r1
 800beda:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800bedc:	4b11      	ldr	r3, [pc, #68]	; (800bf24 <delay_us+0x60>)
 800bede:	2200      	movs	r2, #0
 800bee0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 800bee2:	4b10      	ldr	r3, [pc, #64]	; (800bf24 <delay_us+0x60>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a0f      	ldr	r2, [pc, #60]	; (800bf24 <delay_us+0x60>)
 800bee8:	f043 0301 	orr.w	r3, r3, #1
 800beec:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800beee:	4b0d      	ldr	r3, [pc, #52]	; (800bf24 <delay_us+0x60>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <delay_us+0x44>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0f2      	beq.n	800beee <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <delay_us+0x60>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800bf0e:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <delay_us+0x60>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	609a      	str	r2, [r3, #8]
}
 800bf14:	bf00      	nop
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	200000bc 	.word	0x200000bc
 800bf24:	e000e010 	.word	0xe000e010

0800bf28 <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 800bf28:	b480      	push	{r7}
 800bf2a:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 800bf2c:	4b03      	ldr	r3, [pc, #12]	; (800bf3c <TM_Delay_Init+0x14>)
 800bf2e:	221e      	movs	r2, #30
 800bf30:	601a      	str	r2, [r3, #0]
}
 800bf32:	bf00      	nop
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	20059d24 	.word	0x20059d24

0800bf40 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 800bf48:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <TM_DelayMicros+0x30>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	fb02 f303 	mul.w	r3, r2, r3
 800bf52:	3b0a      	subs	r3, #10
 800bf54:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 800bf56:	bf00      	nop
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	607a      	str	r2, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1fa      	bne.n	800bf58 <TM_DelayMicros+0x18>
}
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20059d24 	.word	0x20059d24

0800bf74 <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 800bf7c:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <TM_DelayMillis+0x38>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	fb02 f303 	mul.w	r3, r2, r3
 800bf86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf8a:	fb02 f303 	mul.w	r3, r2, r3
 800bf8e:	3b0a      	subs	r3, #10
 800bf90:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 800bf92:	bf00      	nop
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	1e5a      	subs	r2, r3, #1
 800bf98:	607a      	str	r2, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1fa      	bne.n	800bf94 <TM_DelayMillis+0x20>
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20059d24 	.word	0x20059d24

0800bfb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4a07      	ldr	r2, [pc, #28]	; (800bfdc <vApplicationGetIdleTaskMemory+0x2c>)
 800bfc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	4a06      	ldr	r2, [pc, #24]	; (800bfe0 <vApplicationGetIdleTaskMemory+0x30>)
 800bfc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2280      	movs	r2, #128	; 0x80
 800bfcc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800bfce:	bf00      	nop
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	200000c0 	.word	0x200000c0
 800bfe0:	20000114 	.word	0x20000114

0800bfe4 <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 800bfea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bfee:	9302      	str	r3, [sp, #8]
 800bff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	4b05      	ldr	r3, [pc, #20]	; (800c00c <readIICEEPROM_2402C+0x28>)
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	2302      	movs	r3, #2
 800bffc:	2200      	movs	r2, #0
 800bffe:	21a1      	movs	r1, #161	; 0xa1
 800c000:	4803      	ldr	r0, [pc, #12]	; (800c010 <readIICEEPROM_2402C+0x2c>)
 800c002:	f003 fdfb 	bl	800fbfc <HAL_I2C_Mem_Read>
}
 800c006:	bf00      	nop
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20059ea4 	.word	0x20059ea4
 800c010:	20059e58 	.word	0x20059e58

0800c014 <initialBootloaderParameter>:


//2021/0201/George
//TODO: InitialParameter
void initialBootloaderParameter()
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
	USARTBLE.RxCount=0;
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <initialBootloaderParameter+0x1c>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 1);
 800c01e:	2201      	movs	r2, #1
 800c020:	4904      	ldr	r1, [pc, #16]	; (800c034 <initialBootloaderParameter+0x20>)
 800c022:	4805      	ldr	r0, [pc, #20]	; (800c038 <initialBootloaderParameter+0x24>)
 800c024:	f006 fb2a 	bl	801267c <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800c028:	b662      	cpsie	i
	__enable_irq();
}
 800c02a:	bf00      	nop
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	2005e020 	.word	0x2005e020
 800c034:	200662e0 	.word	0x200662e0
 800c038:	20066260 	.word	0x20066260

0800c03c <initialADS1256DataBuffer>:

//2021/0201/George
//TODO : Initialize ADS1256 data buffer size
void initialADS1256DataBuffer()
{
 800c03c:	b480      	push	{r7}
 800c03e:	af00      	add	r7, sp, #0

	  dataLength = sizeof(dataRecive)/sizeof(float);
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <initialADS1256DataBuffer+0x24>)
 800c042:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c046:	601a      	str	r2, [r3, #0]
	  ADS1256.data_index = 0;
 800c048:	4b06      	ldr	r3, [pc, #24]	; (800c064 <initialADS1256DataBuffer+0x28>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	601a      	str	r2, [r3, #0]
	  ADS1256.data_length = dataLength;
 800c04e:	4b04      	ldr	r3, [pc, #16]	; (800c060 <initialADS1256DataBuffer+0x24>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a04      	ldr	r2, [pc, #16]	; (800c064 <initialADS1256DataBuffer+0x28>)
 800c054:	6053      	str	r3, [r2, #4]
}
 800c056:	bf00      	nop
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	20000334 	.word	0x20000334
 800c064:	20055bbc 	.word	0x20055bbc

0800c068 <InitialSetFreqStatisticBand>:

//2021/0202/George
//TODO: Set freq band
void InitialSetFreqStatisticBand()
{
 800c068:	b480      	push	{r7}
 800c06a:	af00      	add	r7, sp, #0
	//2021/0204/George
	//TODO:Total 3 setting frequency broadband parameter
	freqSettingValueList.range1.Max = 700;
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <InitialSetFreqStatisticBand+0x3c>)
 800c06e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c072:	601a      	str	r2, [r3, #0]
	freqSettingValueList.range1.Min = 500;
 800c074:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <InitialSetFreqStatisticBand+0x3c>)
 800c076:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c07a:	605a      	str	r2, [r3, #4]
	freqSettingValueList.range2.Max = 1000;
 800c07c:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <InitialSetFreqStatisticBand+0x3c>)
 800c07e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c082:	609a      	str	r2, [r3, #8]
	freqSettingValueList.range2.Min = 10;
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <InitialSetFreqStatisticBand+0x3c>)
 800c086:	220a      	movs	r2, #10
 800c088:	60da      	str	r2, [r3, #12]
	freqSettingValueList.range3.Max = 5000;
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <InitialSetFreqStatisticBand+0x3c>)
 800c08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c090:	611a      	str	r2, [r3, #16]
	freqSettingValueList.range3.Min = 1000;
 800c092:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <InitialSetFreqStatisticBand+0x3c>)
 800c094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c098:	615a      	str	r2, [r3, #20]
}
 800c09a:	bf00      	nop
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	20059c00 	.word	0x20059c00

0800c0a8 <InitialDelayFunction>:

//2021/0202/George
//TODO: Initialize delay systick
void InitialDelayFunction()
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
	   delay_init(216);
 800c0ac:	20d8      	movs	r0, #216	; 0xd8
 800c0ae:	f7ff fead 	bl	800be0c <delay_init>
	   TM_Delay_Init();
 800c0b2:	f7ff ff39 	bl	800bf28 <TM_Delay_Init>
}
 800c0b6:	bf00      	nop
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <InitialADS1256Register>:

//2021/0202/George
//TODO: Initialize ADS1256 parameter
void InitialADS1256Register()
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
	//TODO: Reset ADS1256
	   writeCMD(CMD_RESET);
 800c0c2:	20fe      	movs	r0, #254	; 0xfe
 800c0c4:	f7ff f89a 	bl	800b1fc <writeCMD>
	   delay_ms(10);
 800c0c8:	200a      	movs	r0, #10
 800c0ca:	f7ff fec7 	bl	800be5c <delay_ms>
	   TM_DelayMicros(1);
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	f7ff ff36 	bl	800bf40 <TM_DelayMicros>

	   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
	   setBuffer();
 800c0d4:	f7ff f96c 	bl	800b3b0 <setBuffer>
	   setPGA(PGA_GAIN1);
 800c0d8:	2000      	movs	r0, #0
 800c0da:	f7ff f8e7 	bl	800b2ac <setPGA>
	   setDataRate(DRATE_15000);
 800c0de:	20e0      	movs	r0, #224	; 0xe0
 800c0e0:	f7ff f8ac 	bl	800b23c <setDataRate>

	   //TODO: Read chip id
	   id = readChipID();
 800c0e4:	f7ff f90e 	bl	800b304 <readChipID>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4b1e      	ldr	r3, [pc, #120]	; (800c168 <InitialADS1256Register+0xac>)
 800c0ee:	701a      	strb	r2, [r3, #0]

	   delay_ms(500);// wait for initialization
 800c0f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c0f4:	f7ff feb2 	bl	800be5c <delay_ms>

	   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 800c0f8:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <InitialADS1256Register+0xb0>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	607b      	str	r3, [r7, #4]
	   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 800c0fe:	4b1c      	ldr	r3, [pc, #112]	; (800c170 <InitialADS1256Register+0xb4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	603b      	str	r3, [r7, #0]

	   //TODO: Set differential analog input channel.
	   setDIFFChannel(posChannels[0], negChannels[0]);
 800c104:	793b      	ldrb	r3, [r7, #4]
 800c106:	783a      	ldrb	r2, [r7, #0]
 800c108:	4611      	mov	r1, r2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff f85e 	bl	800b1cc <setDIFFChannel>
	   delay_us(15);
 800c110:	200f      	movs	r0, #15
 800c112:	f7ff fed7 	bl	800bec4 <delay_us>
	   writeCMD(CMD_SYNC);    // SYNC command
 800c116:	20fc      	movs	r0, #252	; 0xfc
 800c118:	f7ff f870 	bl	800b1fc <writeCMD>
	   delay_us(10);
 800c11c:	200a      	movs	r0, #10
 800c11e:	f7ff fed1 	bl	800bec4 <delay_us>
	   writeCMD(CMD_WAKEUP);  // WAKEUP command
 800c122:	2000      	movs	r0, #0
 800c124:	f7ff f86a 	bl	800b1fc <writeCMD>
	   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 800c128:	200f      	movs	r0, #15
 800c12a:	f7ff fecb 	bl	800bec4 <delay_us>



	   //TODO: Set continuous mode.

		waitDRDY();
 800c12e:	f7ff f8cb 	bl	800b2c8 <waitDRDY>
		CS_0();
 800c132:	2200      	movs	r2, #0
 800c134:	2110      	movs	r1, #16
 800c136:	480f      	ldr	r0, [pc, #60]	; (800c174 <InitialADS1256Register+0xb8>)
 800c138:	f003 fc84 	bl	800fa44 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 800c13c:	2332      	movs	r3, #50	; 0x32
 800c13e:	2201      	movs	r2, #1
 800c140:	490d      	ldr	r1, [pc, #52]	; (800c178 <InitialADS1256Register+0xbc>)
 800c142:	480e      	ldr	r0, [pc, #56]	; (800c17c <InitialADS1256Register+0xc0>)
 800c144:	f005 fad6 	bl	80116f4 <HAL_SPI_Transmit>
		delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 800c148:	2019      	movs	r0, #25
 800c14a:	f7ff fe87 	bl	800be5c <delay_ms>
		ADS1256.data_startFlag = 1;
 800c14e:	4a0c      	ldr	r2, [pc, #48]	; (800c180 <InitialADS1256Register+0xc4>)
 800c150:	f244 0308 	movw	r3, #16392	; 0x4008
 800c154:	4413      	add	r3, r2
 800c156:	2201      	movs	r2, #1
 800c158:	701a      	strb	r2, [r3, #0]
		delay_us(1);
 800c15a:	2001      	movs	r0, #1
 800c15c:	f7ff feb2 	bl	800bec4 <delay_us>

}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20000314 	.word	0x20000314
 800c16c:	08016e3c 	.word	0x08016e3c
 800c170:	08016e40 	.word	0x08016e40
 800c174:	40020000 	.word	0x40020000
 800c178:	20000004 	.word	0x20000004
 800c17c:	200662e4 	.word	0x200662e4
 800c180:	20055bbc 	.word	0x20055bbc

0800c184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c184:	b5b0      	push	{r4, r5, r7, lr}
 800c186:	b096      	sub	sp, #88	; 0x58
 800c188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c18a:	f002 fd92 	bl	800ecb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c18e:	f000 f87f 	bl	800c290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c192:	f000 fa0d 	bl	800c5b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800c196:	f000 f9dd 	bl	800c554 <MX_DMA_Init>
  MX_SPI1_Init();
 800c19a:	f000 f96d 	bl	800c478 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800c19e:	f000 f9a9 	bl	800c4f4 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800c1a2:	f000 f90b 	bl	800c3bc <MX_I2C2_Init>
  MX_IWDG_Init();
 800c1a6:	f000 f949 	bl	800c43c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  //2021/0319/George/HTi
  //TODO:PB6 for IEPE output
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	2140      	movs	r1, #64	; 0x40
 800c1ae:	482f      	ldr	r0, [pc, #188]	; (800c26c <main+0xe8>)
 800c1b0:	f003 fc48 	bl	800fa44 <HAL_GPIO_WritePin>

  //2021/0201/George
  //TODO: InitialParameter
  initialBootloaderParameter();
 800c1b4:	f7ff ff2e 	bl	800c014 <initialBootloaderParameter>
  initialADS1256DataBuffer();
 800c1b8:	f7ff ff40 	bl	800c03c <initialADS1256DataBuffer>

   //2021/0201/George
   //TODO: Initialize Frequency range to collection to feature
   InitialSetFreqStatisticBand();
 800c1bc:	f7ff ff54 	bl	800c068 <InitialSetFreqStatisticBand>

   //2021/0202/George
   //TODO: Initialize delay systick
   InitialDelayFunction();
 800c1c0:	f7ff ff72 	bl	800c0a8 <InitialDelayFunction>

   //2021/0202/George
   //TODO: Testing EEProm
   readIICEEPROM_2402C();
 800c1c4:	f7ff ff0e 	bl	800bfe4 <readIICEEPROM_2402C>

   //2021/0202/George
   //TODO: Initialize ADS1256 parameter
   InitialADS1256Register();
 800c1c8:	f7ff ff78 	bl	800c0bc <InitialADS1256Register>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	653b      	str	r3, [r7, #80]	; 0x50
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	657b      	str	r3, [r7, #84]	; 0x54
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 800c1d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c1d8:	2101      	movs	r1, #1
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f007 facd 	bl	801377a <osSemaphoreCreate>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	4b23      	ldr	r3, [pc, #140]	; (800c270 <main+0xec>)
 800c1e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800c1ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f007 fac0 	bl	801377a <osSemaphoreCreate>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	4b1d      	ldr	r3, [pc, #116]	; (800c274 <main+0xf0>)
 800c1fe:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 800c200:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <main+0xf4>)
 800c202:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800c206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800c20c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c210:	2100      	movs	r1, #0
 800c212:	4618      	mov	r0, r3
 800c214:	f007 fae4 	bl	80137e0 <osMessageCreate>
 800c218:	4602      	mov	r2, r0
 800c21a:	4b18      	ldr	r3, [pc, #96]	; (800c27c <main+0xf8>)
 800c21c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 800c21e:	4b18      	ldr	r3, [pc, #96]	; (800c280 <main+0xfc>)
 800c220:	f107 041c 	add.w	r4, r7, #28
 800c224:	461d      	mov	r5, r3
 800c226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c22a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c22e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800c232:	f107 031c 	add.w	r3, r7, #28
 800c236:	2100      	movs	r1, #0
 800c238:	4618      	mov	r0, r3
 800c23a:	f007 fa52 	bl	80136e2 <osThreadCreate>
 800c23e:	4602      	mov	r2, r0
 800c240:	4b10      	ldr	r3, [pc, #64]	; (800c284 <main+0x100>)
 800c242:	601a      	str	r2, [r3, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 400);
 800c244:	4b10      	ldr	r3, [pc, #64]	; (800c288 <main+0x104>)
 800c246:	463c      	mov	r4, r7
 800c248:	461d      	mov	r5, r3
 800c24a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c24c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c24e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 800c256:	463b      	mov	r3, r7
 800c258:	2100      	movs	r1, #0
 800c25a:	4618      	mov	r0, r3
 800c25c:	f007 fa41 	bl	80136e2 <osThreadCreate>
 800c260:	4602      	mov	r2, r0
 800c262:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <main+0x108>)
 800c264:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800c266:	f007 fa35 	bl	80136d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c26a:	e7fe      	b.n	800c26a <main+0xe6>
 800c26c:	40020400 	.word	0x40020400
 800c270:	20059fac 	.word	0x20059fac
 800c274:	2006a410 	.word	0x2006a410
 800c278:	08016e44 	.word	0x08016e44
 800c27c:	2005e014 	.word	0x2005e014
 800c280:	08016e60 	.word	0x08016e60
 800c284:	20059fb0 	.word	0x20059fb0
 800c288:	08016e88 	.word	0x08016e88
 800c28c:	20059fa4 	.word	0x20059fa4

0800c290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b0b8      	sub	sp, #224	; 0xe0
 800c294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c296:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c29a:	2234      	movs	r2, #52	; 0x34
 800c29c:	2100      	movs	r1, #0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f009 fed3 	bl	801604a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c2a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	605a      	str	r2, [r3, #4]
 800c2ae:	609a      	str	r2, [r3, #8]
 800c2b0:	60da      	str	r2, [r3, #12]
 800c2b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c2b4:	f107 0308 	add.w	r3, r7, #8
 800c2b8:	2290      	movs	r2, #144	; 0x90
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f009 fec4 	bl	801604a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c2c2:	4b3c      	ldr	r3, [pc, #240]	; (800c3b4 <SystemClock_Config+0x124>)
 800c2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c6:	4a3b      	ldr	r2, [pc, #236]	; (800c3b4 <SystemClock_Config+0x124>)
 800c2c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2cc:	6413      	str	r3, [r2, #64]	; 0x40
 800c2ce:	4b39      	ldr	r3, [pc, #228]	; (800c3b4 <SystemClock_Config+0x124>)
 800c2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2d6:	607b      	str	r3, [r7, #4]
 800c2d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2da:	4b37      	ldr	r3, [pc, #220]	; (800c3b8 <SystemClock_Config+0x128>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a36      	ldr	r2, [pc, #216]	; (800c3b8 <SystemClock_Config+0x128>)
 800c2e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c2e4:	6013      	str	r3, [r2, #0]
 800c2e6:	4b34      	ldr	r3, [pc, #208]	; (800c3b8 <SystemClock_Config+0x128>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c2ee:	603b      	str	r3, [r7, #0]
 800c2f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800c2f2:	230a      	movs	r3, #10
 800c2f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c2fe:	2310      	movs	r3, #16
 800c300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c304:	2301      	movs	r3, #1
 800c306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c30a:	2302      	movs	r3, #2
 800c30c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c310:	2300      	movs	r3, #0
 800c312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c316:	2308      	movs	r3, #8
 800c318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800c31c:	23d8      	movs	r3, #216	; 0xd8
 800c31e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c322:	2302      	movs	r3, #2
 800c324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c328:	2302      	movs	r3, #2
 800c32a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c32e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c332:	4618      	mov	r0, r3
 800c334:	f004 f882 	bl	801043c <HAL_RCC_OscConfig>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800c33e:	f000 fee3 	bl	800d108 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c342:	f004 f82b 	bl	801039c <HAL_PWREx_EnableOverDrive>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800c34c:	f000 fedc 	bl	800d108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c350:	230f      	movs	r3, #15
 800c352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c356:	2302      	movs	r3, #2
 800c358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c35c:	2300      	movs	r3, #0
 800c35e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c362:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c36a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c36e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800c372:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c376:	2107      	movs	r1, #7
 800c378:	4618      	mov	r0, r3
 800c37a:	f004 fb0d 	bl	8010998 <HAL_RCC_ClockConfig>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800c384:	f000 fec0 	bl	800d108 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C2;
 800c388:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800c38c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800c38e:	2300      	movs	r3, #0
 800c390:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800c392:	2300      	movs	r3, #0
 800c394:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c396:	f107 0308 	add.w	r3, r7, #8
 800c39a:	4618      	mov	r0, r3
 800c39c:	f004 fcf2 	bl	8010d84 <HAL_RCCEx_PeriphCLKConfig>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800c3a6:	f000 feaf 	bl	800d108 <Error_Handler>
  }
}
 800c3aa:	bf00      	nop
 800c3ac:	37e0      	adds	r7, #224	; 0xe0
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	40023800 	.word	0x40023800
 800c3b8:	40007000 	.word	0x40007000

0800c3bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c3c0:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3c2:	4a1c      	ldr	r2, [pc, #112]	; (800c434 <MX_I2C2_Init+0x78>)
 800c3c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800c3c6:	4b1a      	ldr	r3, [pc, #104]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3c8:	4a1b      	ldr	r2, [pc, #108]	; (800c438 <MX_I2C2_Init+0x7c>)
 800c3ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 800c3cc:	4b18      	ldr	r3, [pc, #96]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3ce:	2208      	movs	r2, #8
 800c3d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c3d2:	4b17      	ldr	r3, [pc, #92]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c3d8:	4b15      	ldr	r3, [pc, #84]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c3de:	4b14      	ldr	r3, [pc, #80]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c3e4:	4b12      	ldr	r3, [pc, #72]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800c3ea:	4b11      	ldr	r3, [pc, #68]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c3f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c3f2:	4b0f      	ldr	r3, [pc, #60]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c3f8:	480d      	ldr	r0, [pc, #52]	; (800c430 <MX_I2C2_Init+0x74>)
 800c3fa:	f003 fb6f 	bl	800fadc <HAL_I2C_Init>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800c404:	f000 fe80 	bl	800d108 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c408:	2100      	movs	r1, #0
 800c40a:	4809      	ldr	r0, [pc, #36]	; (800c430 <MX_I2C2_Init+0x74>)
 800c40c:	f003 fed8 	bl	80101c0 <HAL_I2CEx_ConfigAnalogFilter>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800c416:	f000 fe77 	bl	800d108 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c41a:	2100      	movs	r1, #0
 800c41c:	4804      	ldr	r0, [pc, #16]	; (800c430 <MX_I2C2_Init+0x74>)
 800c41e:	f003 ff1a 	bl	8010256 <HAL_I2CEx_ConfigDigitalFilter>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800c428:	f000 fe6e 	bl	800d108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c42c:	bf00      	nop
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20059e58 	.word	0x20059e58
 800c434:	40005800 	.word	0x40005800
 800c438:	20404768 	.word	0x20404768

0800c43c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <MX_IWDG_Init+0x34>)
 800c442:	4a0c      	ldr	r2, [pc, #48]	; (800c474 <MX_IWDG_Init+0x38>)
 800c444:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800c446:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <MX_IWDG_Init+0x34>)
 800c448:	2205      	movs	r2, #5
 800c44a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800c44c:	4b08      	ldr	r3, [pc, #32]	; (800c470 <MX_IWDG_Init+0x34>)
 800c44e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c452:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3096;
 800c454:	4b06      	ldr	r3, [pc, #24]	; (800c470 <MX_IWDG_Init+0x34>)
 800c456:	f640 4218 	movw	r2, #3096	; 0xc18
 800c45a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800c45c:	4804      	ldr	r0, [pc, #16]	; (800c470 <MX_IWDG_Init+0x34>)
 800c45e:	f003 ff46 	bl	80102ee <HAL_IWDG_Init>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800c468:	f000 fe4e 	bl	800d108 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800c46c:	bf00      	nop
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	20059e48 	.word	0x20059e48
 800c474:	40003000 	.word	0x40003000

0800c478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c47c:	4b1b      	ldr	r3, [pc, #108]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c47e:	4a1c      	ldr	r2, [pc, #112]	; (800c4f0 <MX_SPI1_Init+0x78>)
 800c480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c482:	4b1a      	ldr	r3, [pc, #104]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c484:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c48a:	4b18      	ldr	r3, [pc, #96]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c490:	4b16      	ldr	r3, [pc, #88]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c492:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c498:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c49e:	4b13      	ldr	r3, [pc, #76]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c4a4:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4ae:	2228      	movs	r2, #40	; 0x28
 800c4b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4be:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c4c4:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4c6:	2207      	movs	r2, #7
 800c4c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c4ca:	4b08      	ldr	r3, [pc, #32]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c4d0:	4b06      	ldr	r3, [pc, #24]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c4d6:	4805      	ldr	r0, [pc, #20]	; (800c4ec <MX_SPI1_Init+0x74>)
 800c4d8:	f005 f87a 	bl	80115d0 <HAL_SPI_Init>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800c4e2:	f000 fe11 	bl	800d108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c4e6:	bf00      	nop
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	200662e4 	.word	0x200662e4
 800c4f0:	40013000 	.word	0x40013000

0800c4f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800c4f8:	4b14      	ldr	r3, [pc, #80]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c4fa:	4a15      	ldr	r2, [pc, #84]	; (800c550 <MX_USART6_UART_Init+0x5c>)
 800c4fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800c4fe:	4b13      	ldr	r3, [pc, #76]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c504:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c506:	4b11      	ldr	r3, [pc, #68]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c508:	2200      	movs	r2, #0
 800c50a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c50c:	4b0f      	ldr	r3, [pc, #60]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c50e:	2200      	movs	r2, #0
 800c510:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c512:	4b0e      	ldr	r3, [pc, #56]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c514:	2200      	movs	r2, #0
 800c516:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c518:	4b0c      	ldr	r3, [pc, #48]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c51a:	220c      	movs	r2, #12
 800c51c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c51e:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c520:	2200      	movs	r2, #0
 800c522:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c524:	4b09      	ldr	r3, [pc, #36]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c526:	2200      	movs	r2, #0
 800c528:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c52a:	4b08      	ldr	r3, [pc, #32]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c530:	4b06      	ldr	r3, [pc, #24]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c532:	2200      	movs	r2, #0
 800c534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c536:	4805      	ldr	r0, [pc, #20]	; (800c54c <MX_USART6_UART_Init+0x58>)
 800c538:	f006 f851 	bl	80125de <HAL_UART_Init>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800c542:	f000 fde1 	bl	800d108 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c546:	bf00      	nop
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20066260 	.word	0x20066260
 800c550:	40011400 	.word	0x40011400

0800c554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c55a:	4b14      	ldr	r3, [pc, #80]	; (800c5ac <MX_DMA_Init+0x58>)
 800c55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55e:	4a13      	ldr	r2, [pc, #76]	; (800c5ac <MX_DMA_Init+0x58>)
 800c560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c564:	6313      	str	r3, [r2, #48]	; 0x30
 800c566:	4b11      	ldr	r3, [pc, #68]	; (800c5ac <MX_DMA_Init+0x58>)
 800c568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c56e:	607b      	str	r3, [r7, #4]
 800c570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800c572:	2200      	movs	r2, #0
 800c574:	2105      	movs	r1, #5
 800c576:	2038      	movs	r0, #56	; 0x38
 800c578:	f002 fcd3 	bl	800ef22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c57c:	2038      	movs	r0, #56	; 0x38
 800c57e:	f002 fcec 	bl	800ef5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800c582:	2200      	movs	r2, #0
 800c584:	2105      	movs	r1, #5
 800c586:	203b      	movs	r0, #59	; 0x3b
 800c588:	f002 fccb 	bl	800ef22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c58c:	203b      	movs	r0, #59	; 0x3b
 800c58e:	f002 fce4 	bl	800ef5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800c592:	2200      	movs	r2, #0
 800c594:	2105      	movs	r1, #5
 800c596:	2045      	movs	r0, #69	; 0x45
 800c598:	f002 fcc3 	bl	800ef22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800c59c:	2045      	movs	r0, #69	; 0x45
 800c59e:	f002 fcdc 	bl	800ef5a <HAL_NVIC_EnableIRQ>

}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	40023800 	.word	0x40023800

0800c5b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08a      	sub	sp, #40	; 0x28
 800c5b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5b6:	f107 0314 	add.w	r3, r7, #20
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	605a      	str	r2, [r3, #4]
 800c5c0:	609a      	str	r2, [r3, #8]
 800c5c2:	60da      	str	r2, [r3, #12]
 800c5c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5c6:	4b41      	ldr	r3, [pc, #260]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ca:	4a40      	ldr	r2, [pc, #256]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5cc:	f043 0301 	orr.w	r3, r3, #1
 800c5d0:	6313      	str	r3, [r2, #48]	; 0x30
 800c5d2:	4b3e      	ldr	r3, [pc, #248]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c5de:	4b3b      	ldr	r3, [pc, #236]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e2:	4a3a      	ldr	r2, [pc, #232]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5e4:	f043 0302 	orr.w	r3, r3, #2
 800c5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ea:	4b38      	ldr	r3, [pc, #224]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c5f6:	4b35      	ldr	r3, [pc, #212]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fa:	4a34      	ldr	r2, [pc, #208]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c5fc:	f043 0308 	orr.w	r3, r3, #8
 800c600:	6313      	str	r3, [r2, #48]	; 0x30
 800c602:	4b32      	ldr	r3, [pc, #200]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c606:	f003 0308 	and.w	r3, r3, #8
 800c60a:	60bb      	str	r3, [r7, #8]
 800c60c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c60e:	4b2f      	ldr	r3, [pc, #188]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c612:	4a2e      	ldr	r2, [pc, #184]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c614:	f043 0304 	orr.w	r3, r3, #4
 800c618:	6313      	str	r3, [r2, #48]	; 0x30
 800c61a:	4b2c      	ldr	r3, [pc, #176]	; (800c6cc <MX_GPIO_Init+0x11c>)
 800c61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c61e:	f003 0304 	and.w	r3, r3, #4
 800c622:	607b      	str	r3, [r7, #4]
 800c624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800c626:	2200      	movs	r2, #0
 800c628:	2110      	movs	r1, #16
 800c62a:	4829      	ldr	r0, [pc, #164]	; (800c6d0 <MX_GPIO_Init+0x120>)
 800c62c:	f003 fa0a 	bl	800fa44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800c630:	2200      	movs	r2, #0
 800c632:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800c636:	4827      	ldr	r0, [pc, #156]	; (800c6d4 <MX_GPIO_Init+0x124>)
 800c638:	f003 fa04 	bl	800fa44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800c63c:	2200      	movs	r2, #0
 800c63e:	2140      	movs	r1, #64	; 0x40
 800c640:	4825      	ldr	r0, [pc, #148]	; (800c6d8 <MX_GPIO_Init+0x128>)
 800c642:	f003 f9ff 	bl	800fa44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c646:	2308      	movs	r3, #8
 800c648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c64a:	4b24      	ldr	r3, [pc, #144]	; (800c6dc <MX_GPIO_Init+0x12c>)
 800c64c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c652:	f107 0314 	add.w	r3, r7, #20
 800c656:	4619      	mov	r1, r3
 800c658:	481d      	ldr	r0, [pc, #116]	; (800c6d0 <MX_GPIO_Init+0x120>)
 800c65a:	f003 f831 	bl	800f6c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c65e:	2310      	movs	r3, #16
 800c660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c662:	2301      	movs	r3, #1
 800c664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c666:	2301      	movs	r3, #1
 800c668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c66a:	2303      	movs	r3, #3
 800c66c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c66e:	f107 0314 	add.w	r3, r7, #20
 800c672:	4619      	mov	r1, r3
 800c674:	4816      	ldr	r0, [pc, #88]	; (800c6d0 <MX_GPIO_Init+0x120>)
 800c676:	f003 f823 	bl	800f6c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800c67a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c67e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c680:	2301      	movs	r3, #1
 800c682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c684:	2300      	movs	r3, #0
 800c686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c688:	2300      	movs	r3, #0
 800c68a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c68c:	f107 0314 	add.w	r3, r7, #20
 800c690:	4619      	mov	r1, r3
 800c692:	4810      	ldr	r0, [pc, #64]	; (800c6d4 <MX_GPIO_Init+0x124>)
 800c694:	f003 f814 	bl	800f6c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c698:	2340      	movs	r3, #64	; 0x40
 800c69a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c69c:	2301      	movs	r3, #1
 800c69e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	480a      	ldr	r0, [pc, #40]	; (800c6d8 <MX_GPIO_Init+0x128>)
 800c6b0:	f003 f806 	bl	800f6c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2105      	movs	r1, #5
 800c6b8:	2009      	movs	r0, #9
 800c6ba:	f002 fc32 	bl	800ef22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c6be:	2009      	movs	r0, #9
 800c6c0:	f002 fc4b 	bl	800ef5a <HAL_NVIC_EnableIRQ>

}
 800c6c4:	bf00      	nop
 800c6c6:	3728      	adds	r7, #40	; 0x28
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	40023800 	.word	0x40023800
 800c6d0:	40020000 	.word	0x40020000
 800c6d4:	40020c00 	.word	0x40020c00
 800c6d8:	40020400 	.word	0x40020400
 800c6dc:	10210000 	.word	0x10210000

0800c6e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0 && stattisComputingStatus == statisticComputingNORMAL)
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	2b08      	cmp	r3, #8
 800c6ee:	f040 8089 	bne.w	800c804 <HAL_GPIO_EXTI_Callback+0x124>
 800c6f2:	4b49      	ldr	r3, [pc, #292]	; (800c818 <HAL_GPIO_EXTI_Callback+0x138>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	f040 8084 	bne.w	800c804 <HAL_GPIO_EXTI_Callback+0x124>
 800c6fc:	4a47      	ldr	r2, [pc, #284]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c6fe:	f244 0308 	movw	r3, #16392	; 0x4008
 800c702:	4413      	add	r3, r2
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d17c      	bne.n	800c804 <HAL_GPIO_EXTI_Callback+0x124>
 800c70a:	4b45      	ldr	r3, [pc, #276]	; (800c820 <HAL_GPIO_EXTI_Callback+0x140>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d178      	bne.n	800c804 <HAL_GPIO_EXTI_Callback+0x124>
 800c712:	4b44      	ldr	r3, [pc, #272]	; (800c824 <HAL_GPIO_EXTI_Callback+0x144>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d174      	bne.n	800c804 <HAL_GPIO_EXTI_Callback+0x124>
	{

		//2021/0201/George code from ADC Task.
		//TODO:SPI handshake from ADS1256 24 bit, 8bit(High), 8bit(Medium), 8bit(Low)
		HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800c71a:	2303      	movs	r3, #3
 800c71c:	4a42      	ldr	r2, [pc, #264]	; (800c828 <HAL_GPIO_EXTI_Callback+0x148>)
 800c71e:	4943      	ldr	r1, [pc, #268]	; (800c82c <HAL_GPIO_EXTI_Callback+0x14c>)
 800c720:	4843      	ldr	r0, [pc, #268]	; (800c830 <HAL_GPIO_EXTI_Callback+0x150>)
 800c722:	f005 fb61 	bl	8011de8 <HAL_SPI_TransmitReceive_DMA>

		// construct 24 bit value
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000; //8bit(High)
 800c726:	4b40      	ldr	r3, [pc, #256]	; (800c828 <HAL_GPIO_EXTI_Callback+0x148>)
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	041b      	lsls	r3, r3, #16
 800c72c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c730:	4a40      	ldr	r2, [pc, #256]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c732:	6013      	str	r3, [r2, #0]
		read |= ((int32_t)Databuffer[1] << 8); //8bit(Medium)
 800c734:	4b3c      	ldr	r3, [pc, #240]	; (800c828 <HAL_GPIO_EXTI_Callback+0x148>)
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	021a      	lsls	r2, r3, #8
 800c73a:	4b3e      	ldr	r3, [pc, #248]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4313      	orrs	r3, r2
 800c740:	4a3c      	ldr	r2, [pc, #240]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c742:	6013      	str	r3, [r2, #0]
		read |= Databuffer[2]; //8bit(Low)
 800c744:	4b38      	ldr	r3, [pc, #224]	; (800c828 <HAL_GPIO_EXTI_Callback+0x148>)
 800c746:	789b      	ldrb	r3, [r3, #2]
 800c748:	461a      	mov	r2, r3
 800c74a:	4b3a      	ldr	r3, [pc, #232]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4313      	orrs	r3, r2
 800c750:	4a38      	ldr	r2, [pc, #224]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c752:	6013      	str	r3, [r2, #0]
		if (read & 0x800000){ //Determine negative value.
 800c754:	4b37      	ldr	r3, [pc, #220]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d006      	beq.n	800c76e <HAL_GPIO_EXTI_Callback+0x8e>
			read |= 0xFF000000;
 800c760:	4b34      	ldr	r3, [pc, #208]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c768:	461a      	mov	r2, r3
 800c76a:	4b32      	ldr	r3, [pc, #200]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c76c:	601a      	str	r2, [r3, #0]
		}

		data = read;
 800c76e:	4b31      	ldr	r3, [pc, #196]	; (800c834 <HAL_GPIO_EXTI_Callback+0x154>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c77a:	4b2f      	ldr	r3, [pc, #188]	; (800c838 <HAL_GPIO_EXTI_Callback+0x158>)
 800c77c:	edc3 7a00 	vstr	s15, [r3]
		//2021/0309/George
		//data = data / 1677721;
		data = data / (1678043 * 0.496);
 800c780:	4b2d      	ldr	r3, [pc, #180]	; (800c838 <HAL_GPIO_EXTI_Callback+0x158>)
 800c782:	edd3 7a00 	vldr	s15, [r3]
 800c786:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800c78a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800c810 <HAL_GPIO_EXTI_Callback+0x130>
 800c78e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c792:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c796:	4b28      	ldr	r3, [pc, #160]	; (800c838 <HAL_GPIO_EXTI_Callback+0x158>)
 800c798:	edc3 7a00 	vstr	s15, [r3]
		ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 800c79c:	4b1f      	ldr	r3, [pc, #124]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a25      	ldr	r2, [pc, #148]	; (800c838 <HAL_GPIO_EXTI_Callback+0x158>)
 800c7a2:	6812      	ldr	r2, [r2, #0]
 800c7a4:	491d      	ldr	r1, [pc, #116]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	601a      	str	r2, [r3, #0]
		ADS1256.data_index++;
 800c7ae:	4b1b      	ldr	r3, [pc, #108]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	4a19      	ldr	r2, [pc, #100]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c7b6:	6013      	str	r3, [r2, #0]

		if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 800c7b8:	4b18      	ldr	r3, [pc, #96]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b17      	ldr	r3, [pc, #92]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d11f      	bne.n	800c804 <HAL_GPIO_EXTI_Callback+0x124>
		{
		/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken); //Wakeup High Priority Task
 800c7c8:	4b1c      	ldr	r3, [pc, #112]	; (800c83c <HAL_GPIO_EXTI_Callback+0x15c>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f107 020c 	add.w	r2, r7, #12
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f007 fb2c 	bl	8013e30 <xQueueGiveFromISR>

				if(xHigherPriorityTaskWoken == pdTRUE)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d10a      	bne.n	800c7f4 <HAL_GPIO_EXTI_Callback+0x114>
				{
					portEND_SWITCHING_ISR( xHigherPriorityTaskWoken ); //Switch high priority task from ISR
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d007      	beq.n	800c7f4 <HAL_GPIO_EXTI_Callback+0x114>
 800c7e4:	4b16      	ldr	r3, [pc, #88]	; (800c840 <HAL_GPIO_EXTI_Callback+0x160>)
 800c7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	f3bf 8f6f 	isb	sy
				}

			ADS1256.data_index = 0;
 800c7f4:	4b09      	ldr	r3, [pc, #36]	; (800c81c <HAL_GPIO_EXTI_Callback+0x13c>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800c7fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c7fe:	4811      	ldr	r0, [pc, #68]	; (800c844 <HAL_GPIO_EXTI_Callback+0x164>)
 800c800:	f003 f939 	bl	800fa76 <HAL_GPIO_TogglePin>
		}

	}
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	f3af 8000 	nop.w
 800c810:	a7ef9db2 	.word	0xa7ef9db2
 800c814:	4129666a 	.word	0x4129666a
 800c818:	20000314 	.word	0x20000314
 800c81c:	20055bbc 	.word	0x20055bbc
 800c820:	20066348 	.word	0x20066348
 800c824:	2000033c 	.word	0x2000033c
 800c828:	20000320 	.word	0x20000320
 800c82c:	20000000 	.word	0x20000000
 800c830:	200662e4 	.word	0x200662e4
 800c834:	20000318 	.word	0x20000318
 800c838:	2005e018 	.word	0x2005e018
 800c83c:	20059fac 	.word	0x20059fac
 800c840:	e000ed04 	.word	0xe000ed04
 800c844:	40020c00 	.word	0x40020c00

0800c848 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.iapbuffer[USARTBLE.RxCount++]= aRxBuffer[0];
 800c850:	4b26      	ldr	r3, [pc, #152]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	4925      	ldr	r1, [pc, #148]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c858:	604a      	str	r2, [r1, #4]
 800c85a:	4a25      	ldr	r2, [pc, #148]	; (800c8f0 <HAL_UART_RxCpltCallback+0xa8>)
 800c85c:	7811      	ldrb	r1, [r2, #0]
 800c85e:	4a23      	ldr	r2, [pc, #140]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c860:	4413      	add	r3, r2
 800c862:	460a      	mov	r2, r1
 800c864:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  if(aRxBuffer[0]==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command, Send a receive flag.
 800c868:	4b21      	ldr	r3, [pc, #132]	; (800c8f0 <HAL_UART_RxCpltCallback+0xa8>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	2b0a      	cmp	r3, #10
 800c86e:	d120      	bne.n	800c8b2 <HAL_UART_RxCpltCallback+0x6a>
  	{
	  USARTBLE.RxCount=0;
 800c870:	4b1e      	ldr	r3, [pc, #120]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c872:	2200      	movs	r2, #0
 800c874:	605a      	str	r2, [r3, #4]
	  _Bool command = checkBLECommandFromBLEGateway(USARTBLE.iapbuffer ,"request",7);
 800c876:	2207      	movs	r2, #7
 800c878:	491e      	ldr	r1, [pc, #120]	; (800c8f4 <HAL_UART_RxCpltCallback+0xac>)
 800c87a:	481f      	ldr	r0, [pc, #124]	; (800c8f8 <HAL_UART_RxCpltCallback+0xb0>)
 800c87c:	f7fe feca 	bl	800b614 <checkBLECommandFromBLEGateway>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]
	  if(command)
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00a      	beq.n	800c8a0 <HAL_UART_RxCpltCallback+0x58>
	  {
		  USARTBLE.IAPflag =1;
 800c88a:	4b18      	ldr	r3, [pc, #96]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c88c:	2201      	movs	r2, #1
 800c88e:	705a      	strb	r2, [r3, #1]
		  USARTBLE.sendflag = 0;
 800c890:	4b16      	ldr	r3, [pc, #88]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c892:	2200      	movs	r2, #0
 800c894:	701a      	strb	r2, [r3, #0]
		  BLE_USART(huart, &statistic_value);
 800c896:	4919      	ldr	r1, [pc, #100]	; (800c8fc <HAL_UART_RxCpltCallback+0xb4>)
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7fe fdc5 	bl	800b428 <BLE_USART>
 800c89e:	e008      	b.n	800c8b2 <HAL_UART_RxCpltCallback+0x6a>
	  }
	  else
	  {
		  memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) );
 800c8a0:	4815      	ldr	r0, [pc, #84]	; (800c8f8 <HAL_UART_RxCpltCallback+0xb0>)
 800c8a2:	f7fb fd2d 	bl	8008300 <strlen>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	4812      	ldr	r0, [pc, #72]	; (800c8f8 <HAL_UART_RxCpltCallback+0xb0>)
 800c8ae:	f009 fbcc 	bl	801604a <memset>
	  }

  	}
  	if(USARTBLE.RxCount>=15)//no  "\n" Line feeds string full over to 24 byte, clear data
 800c8b2:	4b0e      	ldr	r3, [pc, #56]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	2b0e      	cmp	r3, #14
 800c8b8:	dd0b      	ble.n	800c8d2 <HAL_UART_RxCpltCallback+0x8a>
  	{
  		USARTBLE.RxCount=0;
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <HAL_UART_RxCpltCallback+0xa4>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	605a      	str	r2, [r3, #4]
  		memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) ); //clear Receive data
 800c8c0:	480d      	ldr	r0, [pc, #52]	; (800c8f8 <HAL_UART_RxCpltCallback+0xb0>)
 800c8c2:	f7fb fd1d 	bl	8008300 <strlen>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	480a      	ldr	r0, [pc, #40]	; (800c8f8 <HAL_UART_RxCpltCallback+0xb0>)
 800c8ce:	f009 fbbc 	bl	801604a <memset>
  	}

  while(HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 1)==HAL_OK);
 800c8d2:	bf00      	nop
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	4906      	ldr	r1, [pc, #24]	; (800c8f0 <HAL_UART_RxCpltCallback+0xa8>)
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f005 fecf 	bl	801267c <HAL_UART_Receive_IT>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0f7      	beq.n	800c8d4 <HAL_UART_RxCpltCallback+0x8c>
}
 800c8e4:	bf00      	nop
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	2005e020 	.word	0x2005e020
 800c8f0:	200662e0 	.word	0x200662e0
 800c8f4:	08016ea4 	.word	0x08016ea4
 800c8f8:	2005e1c0 	.word	0x2005e1c0
 800c8fc:	20059c18 	.word	0x20059c18

0800c900 <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 800c908:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c90c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c90e:	4b13      	ldr	r3, [pc, #76]	; (800c95c <ADC_Thread+0x5c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	68f9      	ldr	r1, [r7, #12]
 800c914:	4618      	mov	r0, r3
 800c916:	f007 fbff 	bl	8014118 <xQueueSemaphoreTake>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d1f6      	bne.n	800c90e <ADC_Thread+0xe>
 800c920:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <ADC_Thread+0x60>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1f2      	bne.n	800c90e <ADC_Thread+0xe>

			/*TODO: send data buffer to FFT data buffer*/
			BaseType_t xStatus;
			xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 800c928:	4b0e      	ldr	r3, [pc, #56]	; (800c964 <ADC_Thread+0x64>)
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	2300      	movs	r3, #0
 800c92e:	2200      	movs	r2, #0
 800c930:	490d      	ldr	r1, [pc, #52]	; (800c968 <ADC_Thread+0x68>)
 800c932:	f007 f97b 	bl	8013c2c <xQueueGenericSend>
 800c936:	60b8      	str	r0, [r7, #8]
			queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <ADC_Thread+0x64>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f007 fcfb 	bl	8014338 <uxQueueMessagesWaiting>
 800c942:	4602      	mov	r2, r0
 800c944:	4b09      	ldr	r3, [pc, #36]	; (800c96c <ADC_Thread+0x6c>)
 800c946:	601a      	str	r2, [r3, #0]

			//TODO: wakeup FFT Task
			if(xStatus == pdPASS)
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d1df      	bne.n	800c90e <ADC_Thread+0xe>
			{
				vTaskResume(FFT_TaskHandle);
 800c94e:	4b08      	ldr	r3, [pc, #32]	; (800c970 <ADC_Thread+0x70>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4618      	mov	r0, r3
 800c954:	f008 f894 	bl	8014a80 <vTaskResume>
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c958:	e7d9      	b.n	800c90e <ADC_Thread+0xe>
 800c95a:	bf00      	nop
 800c95c:	20059fac 	.word	0x20059fac
 800c960:	20066348 	.word	0x20066348
 800c964:	2005e014 	.word	0x2005e014
 800c968:	20000014 	.word	0x20000014
 800c96c:	20059e44 	.word	0x20059e44
 800c970:	20059fa4 	.word	0x20059fa4
 800c974:	00000000 	.word	0x00000000

0800c978 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08c      	sub	sp, #48	; 0x30
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT_Thread */
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	 	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c980:	4b3a      	ldr	r3, [pc, #232]	; (800ca6c <FFT_Thread+0xf4>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4618      	mov	r0, r3
 800c986:	f007 fcd7 	bl	8014338 <uxQueueMessagesWaiting>
 800c98a:	4602      	mov	r2, r0
 800c98c:	4b38      	ldr	r3, [pc, #224]	; (800ca70 <FFT_Thread+0xf8>)
 800c98e:	601a      	str	r2, [r3, #0]
	 	  if(queueCount!=0){
 800c990:	4b37      	ldr	r3, [pc, #220]	; (800ca70 <FFT_Thread+0xf8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 83a7 	beq.w	800d0e8 <FFT_Thread+0x770>
	 			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 800c99a:	4b34      	ldr	r3, [pc, #208]	; (800ca6c <FFT_Thread+0xf4>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2264      	movs	r2, #100	; 0x64
 800c9a0:	4934      	ldr	r1, [pc, #208]	; (800ca74 <FFT_Thread+0xfc>)
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f007 fad6 	bl	8013f54 <xQueueReceive>
 800c9a8:	6278      	str	r0, [r7, #36]	; 0x24
	 			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c9aa:	4b30      	ldr	r3, [pc, #192]	; (800ca6c <FFT_Thread+0xf4>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f007 fcc2 	bl	8014338 <uxQueueMessagesWaiting>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <FFT_Thread+0xf8>)
 800c9b8:	601a      	str	r2, [r3, #0]

	 			HAL_IWDG_Refresh(&hiwdg);
 800c9ba:	482f      	ldr	r0, [pc, #188]	; (800ca78 <FFT_Thread+0x100>)
 800c9bc:	f003 fcdd 	bl	801037a <HAL_IWDG_Refresh>

	 			float32_t * rawdataBuffer;
	 			rawdataBuffer = pvPortMalloc(4096 * sizeof(float32_t));
 800c9c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c9c4:	f009 f92a 	bl	8015c1c <pvPortMalloc>
 800c9c8:	6238      	str	r0, [r7, #32]

	 			//TODO : disable collect data flag
	 			stattisComputingStatus = statisticComputingBUSY;
 800c9ca:	4b2c      	ldr	r3, [pc, #176]	; (800ca7c <FFT_Thread+0x104>)
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	701a      	strb	r2, [r3, #0]

	 			for(uint32_t i = 0; i<dataLength; i++)
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9d4:	e022      	b.n	800ca1c <FFT_Thread+0xa4>
	 			{
	 				//recivedata5 = *(dataRecive[0]+i);
	 				rawdataBuffer[i]=*(dataRecive[0]+i);
 800c9d6:	4b27      	ldr	r3, [pc, #156]	; (800ca74 <FFT_Thread+0xfc>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	441a      	add	r2, r3
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	6a39      	ldr	r1, [r7, #32]
 800c9e6:	440b      	add	r3, r1
 800c9e8:	6812      	ldr	r2, [r2, #0]
 800c9ea:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2] = *(dataRecive[0]+i);
 800c9ec:	4b21      	ldr	r3, [pc, #132]	; (800ca74 <FFT_Thread+0xfc>)
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	441a      	add	r2, r3
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	6812      	ldr	r2, [r2, #0]
 800c9fc:	4920      	ldr	r1, [pc, #128]	; (800ca80 <FFT_Thread+0x108>)
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	440b      	add	r3, r1
 800ca02:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2+1] = 0; // data format like
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	3301      	adds	r3, #1
 800ca0a:	4a1d      	ldr	r2, [pc, #116]	; (800ca80 <FFT_Thread+0x108>)
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
	 			for(uint32_t i = 0; i<dataLength; i++)
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	3301      	adds	r3, #1
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca1c:	4b19      	ldr	r3, [pc, #100]	; (800ca84 <FFT_Thread+0x10c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d3d7      	bcc.n	800c9d6 <FFT_Thread+0x5e>
	 			}

	 			if(xStatus == pdPASS)
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d1a9      	bne.n	800c980 <FFT_Thread+0x8>
	 			{

	 				/*TODO: Process the data through the CFFT/CIFFT module */
	 				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 800ca2c:	4b16      	ldr	r3, [pc, #88]	; (800ca88 <FFT_Thread+0x110>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	4b16      	ldr	r3, [pc, #88]	; (800ca8c <FFT_Thread+0x114>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	4911      	ldr	r1, [pc, #68]	; (800ca80 <FFT_Thread+0x108>)
 800ca3a:	4815      	ldr	r0, [pc, #84]	; (800ca90 <FFT_Thread+0x118>)
 800ca3c:	f7fd fb1d 	bl	800a07a <arm_cfft_f32>

	 				/*TODO: Process the data through the Complex Magnitude Module for
	 				calculating the magnitude at each bin */
	 				arm_cmplx_mag_f32(FFTdata, FFTRawData, fftSize);
 800ca40:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <FFT_Thread+0x11c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	4914      	ldr	r1, [pc, #80]	; (800ca98 <FFT_Thread+0x120>)
 800ca48:	480d      	ldr	r0, [pc, #52]	; (800ca80 <FFT_Thread+0x108>)
 800ca4a:	f7fb fe03 	bl	8008654 <arm_cmplx_mag_f32>

	 				/*TODO: Calculates maxValue and returns corresponding BIN value */
	 				arm_max_f32(FFTRawData, 2048, &FFTmaxValue, &FFTMaxValueIndex);
 800ca4e:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <FFT_Thread+0x124>)
 800ca50:	4a13      	ldr	r2, [pc, #76]	; (800caa0 <FFT_Thread+0x128>)
 800ca52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca56:	4810      	ldr	r0, [pc, #64]	; (800ca98 <FFT_Thread+0x120>)
 800ca58:	f7fb febc 	bl	80087d4 <arm_max_f32>
	 				 *
	 				 * */

	 				//2021/0218/George
	 				//TODO: Calculate displacement the max value condition is small than 20Hz
	 				FFTMaxValueIndex = ( FFTMaxValueIndex == 0 ) ? FFTMaxValueIndex+1 : FFTMaxValueIndex;
 800ca5c:	4b0f      	ldr	r3, [pc, #60]	; (800ca9c <FFT_Thread+0x124>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d11f      	bne.n	800caa4 <FFT_Thread+0x12c>
 800ca64:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <FFT_Thread+0x124>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	e01d      	b.n	800caa8 <FFT_Thread+0x130>
 800ca6c:	2005e014 	.word	0x2005e014
 800ca70:	20059e44 	.word	0x20059e44
 800ca74:	200663ac 	.word	0x200663ac
 800ca78:	20059e48 	.word	0x20059e48
 800ca7c:	2000033c 	.word	0x2000033c
 800ca80:	2005e260 	.word	0x2005e260
 800ca84:	20000334 	.word	0x20000334
 800ca88:	20000324 	.word	0x20000324
 800ca8c:	20000010 	.word	0x20000010
 800ca90:	08020e4c 	.word	0x08020e4c
 800ca94:	2000000c 	.word	0x2000000c
 800ca98:	20059fb4 	.word	0x20059fb4
 800ca9c:	20000328 	.word	0x20000328
 800caa0:	20059fa8 	.word	0x20059fa8
 800caa4:	4ba0      	ldr	r3, [pc, #640]	; (800cd28 <FFT_Thread+0x3b0>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a9f      	ldr	r2, [pc, #636]	; (800cd28 <FFT_Thread+0x3b0>)
 800caaa:	6013      	str	r3, [r2, #0]

	 				//2021/0222/George
	 				//TODO: frequency equal samplingRate / datalength
	 				float frequencyResolution = (float)samplingRate/(float)fftSize;
 800caac:	4b9f      	ldr	r3, [pc, #636]	; (800cd2c <FFT_Thread+0x3b4>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	ee07 3a90 	vmov	s15, r3
 800cab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab8:	4b9d      	ldr	r3, [pc, #628]	; (800cd30 <FFT_Thread+0x3b8>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	ee07 3a90 	vmov	s15, r3
 800cac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cac8:	edc7 7a07 	vstr	s15, [r7, #28]
	 				float integral = 2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution;
 800cacc:	4b96      	ldr	r3, [pc, #600]	; (800cd28 <FFT_Thread+0x3b0>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	ee07 3a90 	vmov	s15, r3
 800cad4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cad8:	ed9f 6b91 	vldr	d6, [pc, #580]	; 800cd20 <FFT_Thread+0x3a8>
 800cadc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cae0:	edd7 7a07 	vldr	s15, [r7, #28]
 800cae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800caec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800caf0:	edc7 7a06 	vstr	s15, [r7, #24]

	 				//TODO: max acceleration value (peak) is frequency domain *2/datalength
	 				float AccelerationFFTmaxValue = FFTmaxValue * 2 / dataLength;
 800caf4:	4b8f      	ldr	r3, [pc, #572]	; (800cd34 <FFT_Thread+0x3bc>)
 800caf6:	edd3 7a00 	vldr	s15, [r3]
 800cafa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800cafe:	4b8e      	ldr	r3, [pc, #568]	; (800cd38 <FFT_Thread+0x3c0>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	ee07 3a90 	vmov	s15, r3
 800cb06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb0e:	edc7 7a05 	vstr	s15, [r7, #20]

	 				//TODO: turn acceleration to velocity (peak), should acceleration * g / (2 * pi * f) unit is mm/s
	 				float VelocityFFTmaxValue = AccelerationFFTmaxValue * 9807 /(2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution);
 800cb12:	edd7 7a05 	vldr	s15, [r7, #20]
 800cb16:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800cd3c <FFT_Thread+0x3c4>
 800cb1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb1e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800cb22:	4b81      	ldr	r3, [pc, #516]	; (800cd28 <FFT_Thread+0x3b0>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb2e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800cd20 <FFT_Thread+0x3a8>
 800cb32:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cb36:	edd7 7a07 	vldr	s15, [r7, #28]
 800cb3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cb3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb42:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800cb46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cb4a:	edc7 7a04 	vstr	s15, [r7, #16]

	 				//TODO: turn velocity to displacement (peak), should / (2 * pi *f) unit mm
	 				float DisplacementFFTmaxValue = VelocityFFTmaxValue /(2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution);
 800cb4e:	edd7 7a04 	vldr	s15, [r7, #16]
 800cb52:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800cb56:	4b74      	ldr	r3, [pc, #464]	; (800cd28 <FFT_Thread+0x3b0>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb62:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800cd20 <FFT_Thread+0x3a8>
 800cb66:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cb6a:	edd7 7a07 	vldr	s15, [r7, #28]
 800cb6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cb72:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800cb7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cb7e:	edc7 7a03 	vstr	s15, [r7, #12]

	 				//TODO: turn displacement peak to (peak to peak)
	 				float DisplacementP2pFFTmaxValue = DisplacementFFTmaxValue * 2;
 800cb82:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb8a:	edc7 7a02 	vstr	s15, [r7, #8]
	 				//FFTmaxValue = FFTmaxValue*2 / dataLength;



	 				/*TODO: Remove DC component*/
	 				FFTRawData[1] = 0;
 800cb8e:	4b6c      	ldr	r3, [pc, #432]	; (800cd40 <FFT_Thread+0x3c8>)
 800cb90:	f04f 0200 	mov.w	r2, #0
 800cb94:	605a      	str	r2, [r3, #4]
	 				FFTRawData[2] = 0;
 800cb96:	4b6a      	ldr	r3, [pc, #424]	; (800cd40 <FFT_Thread+0x3c8>)
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	609a      	str	r2, [r3, #8]
	 				FFTRawData[3] = 0;
 800cb9e:	4b68      	ldr	r3, [pc, #416]	; (800cd40 <FFT_Thread+0x3c8>)
 800cba0:	f04f 0200 	mov.w	r2, #0
 800cba4:	60da      	str	r2, [r3, #12]
	 				FFTRawData[4] = 0;
 800cba6:	4b66      	ldr	r3, [pc, #408]	; (800cd40 <FFT_Thread+0x3c8>)
 800cba8:	f04f 0200 	mov.w	r2, #0
 800cbac:	611a      	str	r2, [r3, #16]
	 				FFTRawData[5] = 0;
 800cbae:	4b64      	ldr	r3, [pc, #400]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	615a      	str	r2, [r3, #20]
	 				FFTRawData[6] = 0;
 800cbb6:	4b62      	ldr	r3, [pc, #392]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbb8:	f04f 0200 	mov.w	r2, #0
 800cbbc:	619a      	str	r2, [r3, #24]
	 				FFTRawData[7] = 0;
 800cbbe:	4b60      	ldr	r3, [pc, #384]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	61da      	str	r2, [r3, #28]
	 				FFTRawData[8] = 0;
 800cbc6:	4b5e      	ldr	r3, [pc, #376]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbc8:	f04f 0200 	mov.w	r2, #0
 800cbcc:	621a      	str	r2, [r3, #32]
	 				/*     |                                                                   |
	 				 *     |                  |                             |                  |
	 				 *     |        |         |                             |         |        |
	 				 *  FFT[10] FFT[1000] FFT[1500] FFT[2047] FFT[2048] FFT[2596] FFT[3096] FFT[4086]
	 				 * */
	 				FFTRawData[4088] = 0;
 800cbce:	4a5c      	ldr	r2, [pc, #368]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbd0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f04f 0200 	mov.w	r2, #0
 800cbda:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4089] = 0;
 800cbdc:	4a58      	ldr	r2, [pc, #352]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbde:	f643 73e4 	movw	r3, #16356	; 0x3fe4
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4090] = 0;
 800cbea:	4a55      	ldr	r2, [pc, #340]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbec:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4091] = 0;
 800cbf8:	4a51      	ldr	r2, [pc, #324]	; (800cd40 <FFT_Thread+0x3c8>)
 800cbfa:	f643 73ec 	movw	r3, #16364	; 0x3fec
 800cbfe:	4413      	add	r3, r2
 800cc00:	f04f 0200 	mov.w	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4092] = 0;
 800cc06:	4a4e      	ldr	r2, [pc, #312]	; (800cd40 <FFT_Thread+0x3c8>)
 800cc08:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f04f 0200 	mov.w	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4093] = 0;
 800cc14:	4a4a      	ldr	r2, [pc, #296]	; (800cd40 <FFT_Thread+0x3c8>)
 800cc16:	f643 73f4 	movw	r3, #16372	; 0x3ff4
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f04f 0200 	mov.w	r2, #0
 800cc20:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4094] = 0;
 800cc22:	4a47      	ldr	r2, [pc, #284]	; (800cd40 <FFT_Thread+0x3c8>)
 800cc24:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800cc28:	4413      	add	r3, r2
 800cc2a:	f04f 0200 	mov.w	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4095] = 0;
 800cc30:	4a43      	ldr	r2, [pc, #268]	; (800cd40 <FFT_Thread+0x3c8>)
 800cc32:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 800cc36:	4413      	add	r3, r2
 800cc38:	f04f 0200 	mov.w	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]


					//2021/0319/George
	 				/*TODO: Calculate time-domain math function*/
	 				arm_max_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 800cc3e:	4b3e      	ldr	r3, [pc, #248]	; (800cd38 <FFT_Thread+0x3c0>)
 800cc40:	6819      	ldr	r1, [r3, #0]
 800cc42:	4b40      	ldr	r3, [pc, #256]	; (800cd44 <FFT_Thread+0x3cc>)
 800cc44:	4a40      	ldr	r2, [pc, #256]	; (800cd48 <FFT_Thread+0x3d0>)
 800cc46:	6a38      	ldr	r0, [r7, #32]
 800cc48:	f7fb fdc4 	bl	80087d4 <arm_max_f32>
	 				arm_min_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 800cc4c:	4b3a      	ldr	r3, [pc, #232]	; (800cd38 <FFT_Thread+0x3c0>)
 800cc4e:	6819      	ldr	r1, [r3, #0]
 800cc50:	4b3e      	ldr	r3, [pc, #248]	; (800cd4c <FFT_Thread+0x3d4>)
 800cc52:	4a3f      	ldr	r2, [pc, #252]	; (800cd50 <FFT_Thread+0x3d8>)
 800cc54:	6a38      	ldr	r0, [r7, #32]
 800cc56:	f7fb fec2 	bl	80089de <arm_min_f32>
	 				arm_var_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_var);
 800cc5a:	4b37      	ldr	r3, [pc, #220]	; (800cd38 <FFT_Thread+0x3c0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a3d      	ldr	r2, [pc, #244]	; (800cd54 <FFT_Thread+0x3dc>)
 800cc60:	4619      	mov	r1, r3
 800cc62:	6a38      	ldr	r0, [r7, #32]
 800cc64:	f7fc f902 	bl	8008e6c <arm_var_f32>
	 				arm_rms_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_rms);
 800cc68:	4b33      	ldr	r3, [pc, #204]	; (800cd38 <FFT_Thread+0x3c0>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a3a      	ldr	r2, [pc, #232]	; (800cd58 <FFT_Thread+0x3e0>)
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6a38      	ldr	r0, [r7, #32]
 800cc72:	f7fb ff6c 	bl	8008b4e <arm_rms_f32>
	 				arm_mean_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_mean);
 800cc76:	4b30      	ldr	r3, [pc, #192]	; (800cd38 <FFT_Thread+0x3c0>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a38      	ldr	r2, [pc, #224]	; (800cd5c <FFT_Thread+0x3e4>)
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6a38      	ldr	r0, [r7, #32]
 800cc80:	f7fb fe3e 	bl	8008900 <arm_mean_f32>
	 				arm_std_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_std);
 800cc84:	4b2c      	ldr	r3, [pc, #176]	; (800cd38 <FFT_Thread+0x3c0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a35      	ldr	r2, [pc, #212]	; (800cd60 <FFT_Thread+0x3e8>)
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6a38      	ldr	r0, [r7, #32]
 800cc8e:	f7fc f805 	bl	8008c9c <arm_std_f32>
	 				statistic_value.Statistic_crestFactor = statistic_value.Statistic_max/statistic_value.Statistic_rms;
 800cc92:	4b2d      	ldr	r3, [pc, #180]	; (800cd48 <FFT_Thread+0x3d0>)
 800cc94:	edd3 6a00 	vldr	s13, [r3]
 800cc98:	4b2b      	ldr	r3, [pc, #172]	; (800cd48 <FFT_Thread+0x3d0>)
 800cc9a:	ed93 7a03 	vldr	s14, [r3, #12]
 800cc9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cca2:	4b29      	ldr	r3, [pc, #164]	; (800cd48 <FFT_Thread+0x3d0>)
 800cca4:	edc3 7a07 	vstr	s15, [r3, #28]
	 				statistic_value.Statistic_p2p = statistic_value.Statistic_max - statistic_value.Statistic_min;
 800cca8:	4b27      	ldr	r3, [pc, #156]	; (800cd48 <FFT_Thread+0x3d0>)
 800ccaa:	ed93 7a00 	vldr	s14, [r3]
 800ccae:	4b26      	ldr	r3, [pc, #152]	; (800cd48 <FFT_Thread+0x3d0>)
 800ccb0:	edd3 7a01 	vldr	s15, [r3, #4]
 800ccb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccb8:	4b23      	ldr	r3, [pc, #140]	; (800cd48 <FFT_Thread+0x3d0>)
 800ccba:	edc3 7a06 	vstr	s15, [r3, #24]

	 				//2021/03/22/George
	 				//TODO: calculate Statistic_Displacementp2p using time-domain p2p
	 				//formula : speedp2p = p2p / (2*pi*f), displacement = displacementp2p = speedp2p / (2*pi*f)
	 				statistic_value.Statistic_Displacementp2p = statistic_value.Statistic_p2p*9807 / (integral * integral);
 800ccbe:	4b22      	ldr	r3, [pc, #136]	; (800cd48 <FFT_Thread+0x3d0>)
 800ccc0:	edd3 7a06 	vldr	s15, [r3, #24]
 800ccc4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cd3c <FFT_Thread+0x3c4>
 800ccc8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800cccc:	ed97 7a06 	vldr	s14, [r7, #24]
 800ccd0:	edd7 7a06 	vldr	s15, [r7, #24]
 800ccd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <FFT_Thread+0x3d0>)
 800ccde:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	 				//2021/02/01/George start compute
	 				/*TODO: Calculate skewness and kurtosis will cause delay*/
	 				statistic_value.Statistic_kurtosis = Calculate_kurtosis(rawdataBuffer, dataLength);
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <FFT_Thread+0x3c0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4619      	mov	r1, r3
 800cce8:	6a38      	ldr	r0, [r7, #32]
 800ccea:	f7fe fdd9 	bl	800b8a0 <Calculate_kurtosis>
 800ccee:	eef0 7a40 	vmov.f32	s15, s0
 800ccf2:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <FFT_Thread+0x3d0>)
 800ccf4:	edc3 7a08 	vstr	s15, [r3, #32]
	 				statistic_value.Statistic_skewness = Calculate_skewness(rawdataBuffer, dataLength);
 800ccf8:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <FFT_Thread+0x3c0>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6a38      	ldr	r0, [r7, #32]
 800cd00:	f7fe fd80 	bl	800b804 <Calculate_skewness>
 800cd04:	eef0 7a40 	vmov.f32	s15, s0
 800cd08:	4b0f      	ldr	r3, [pc, #60]	; (800cd48 <FFT_Thread+0x3d0>)
 800cd0a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	 				//2021/0319/George
	 				//TODO:free rawdataBuffer memory
	 				vPortFree(rawdataBuffer);
 800cd0e:	6a38      	ldr	r0, [r7, #32]
 800cd10:	f009 f84c 	bl	8015dac <vPortFree>

					//2021/0319/George
	 				/*TODO: Calculate frequency-domain math function*/

	 				/* focus broad band functionality */
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800cd14:	2300      	movs	r3, #0
 800cd16:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd18:	e035      	b.n	800cd86 <FFT_Thread+0x40e>
 800cd1a:	bf00      	nop
 800cd1c:	f3af 8000 	nop.w
 800cd20:	4d12d84a 	.word	0x4d12d84a
 800cd24:	401921fb 	.word	0x401921fb
 800cd28:	20000328 	.word	0x20000328
 800cd2c:	20000008 	.word	0x20000008
 800cd30:	2000000c 	.word	0x2000000c
 800cd34:	20059fa8 	.word	0x20059fa8
 800cd38:	20000334 	.word	0x20000334
 800cd3c:	46193c00 	.word	0x46193c00
 800cd40:	20059fb4 	.word	0x20059fb4
 800cd44:	2000032c 	.word	0x2000032c
 800cd48:	20059c18 	.word	0x20059c18
 800cd4c:	20000330 	.word	0x20000330
 800cd50:	20059c1c 	.word	0x20059c1c
 800cd54:	20059c20 	.word	0x20059c20
 800cd58:	20059c24 	.word	0x20059c24
 800cd5c:	20059c28 	.word	0x20059c28
 800cd60:	20059c2c 	.word	0x20059c2c
					{
						settingValue = (&freqSettingValueList.range1+i);
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	4abd      	ldr	r2, [pc, #756]	; (800d060 <FFT_Thread+0x6e8>)
 800cd6a:	4413      	add	r3, r2
 800cd6c:	4abd      	ldr	r2, [pc, #756]	; (800d064 <FFT_Thread+0x6ec>)
 800cd6e:	6013      	str	r3, [r2, #0]
						Calculate_FreqBandRMS(FFTRawData, settingValue, i);
 800cd70:	4bbc      	ldr	r3, [pc, #752]	; (800d064 <FFT_Thread+0x6ec>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd76:	b252      	sxtb	r2, r2
 800cd78:	4619      	mov	r1, r3
 800cd7a:	48bb      	ldr	r0, [pc, #748]	; (800d068 <FFT_Thread+0x6f0>)
 800cd7c:	f7fe fdbc 	bl	800b8f8 <Calculate_FreqBandRMS>
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	3301      	adds	r3, #1
 800cd84:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d9eb      	bls.n	800cd64 <FFT_Thread+0x3ec>
					}
					/* focus broad band functionality */

					//2021/0319/George
	 				/*TODO: Calculate acceleration, velocity, displacement RMS*/
	 				Calculate_FreqOverAll(FFTRawData, dataLength);
 800cd8c:	4bb7      	ldr	r3, [pc, #732]	; (800d06c <FFT_Thread+0x6f4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4619      	mov	r1, r3
 800cd92:	48b5      	ldr	r0, [pc, #724]	; (800d068 <FFT_Thread+0x6f0>)
 800cd94:	f7fe fecc 	bl	800bb30 <Calculate_FreqOverAll>



	 				/*TODO: to calculate 3 times moving average*/
	 				averageTimes++;
 800cd98:	4bb5      	ldr	r3, [pc, #724]	; (800d070 <FFT_Thread+0x6f8>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	4bb3      	ldr	r3, [pc, #716]	; (800d070 <FFT_Thread+0x6f8>)
 800cda2:	701a      	strb	r2, [r3, #0]

	 				//2021/0203/George
	 				//TODO:new parameter p2p
	 				if(averageTimes == 1)
 800cda4:	4bb2      	ldr	r3, [pc, #712]	; (800d070 <FFT_Thread+0x6f8>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d13b      	bne.n	800ce24 <FFT_Thread+0x4ac>
	 				{
	 					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 800cdac:	4bb1      	ldr	r3, [pc, #708]	; (800d074 <FFT_Thread+0x6fc>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4ab0      	ldr	r2, [pc, #704]	; (800d074 <FFT_Thread+0x6fc>)
 800cdb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	 					statistic_value.Statistic_min_Temp = statistic_value.Statistic_min;
 800cdb6:	4baf      	ldr	r3, [pc, #700]	; (800d074 <FFT_Thread+0x6fc>)
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	4aae      	ldr	r2, [pc, #696]	; (800d074 <FFT_Thread+0x6fc>)
 800cdbc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	 					statistic_value.Statistic_p2p_Temp = statistic_value.Statistic_p2p;
 800cdc0:	4bac      	ldr	r3, [pc, #688]	; (800d074 <FFT_Thread+0x6fc>)
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	4aab      	ldr	r2, [pc, #684]	; (800d074 <FFT_Thread+0x6fc>)
 800cdc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	 					statistic_value.Statistic_var_Temp = statistic_value.Statistic_var;
 800cdca:	4baa      	ldr	r3, [pc, #680]	; (800d074 <FFT_Thread+0x6fc>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	4aa9      	ldr	r2, [pc, #676]	; (800d074 <FFT_Thread+0x6fc>)
 800cdd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	 					statistic_value.Statistic_rms_Temp = statistic_value.Statistic_rms;
 800cdd4:	4ba7      	ldr	r3, [pc, #668]	; (800d074 <FFT_Thread+0x6fc>)
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	4aa6      	ldr	r2, [pc, #664]	; (800d074 <FFT_Thread+0x6fc>)
 800cdda:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	 					statistic_value.Statistic_mean_Temp = statistic_value.Statistic_mean;
 800cdde:	4ba5      	ldr	r3, [pc, #660]	; (800d074 <FFT_Thread+0x6fc>)
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	4aa4      	ldr	r2, [pc, #656]	; (800d074 <FFT_Thread+0x6fc>)
 800cde4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	 					statistic_value.Statistic_std_Temp = statistic_value.Statistic_std;
 800cde8:	4ba2      	ldr	r3, [pc, #648]	; (800d074 <FFT_Thread+0x6fc>)
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	4aa1      	ldr	r2, [pc, #644]	; (800d074 <FFT_Thread+0x6fc>)
 800cdee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
	 					statistic_value.Statistic_FreqOvall_Temp = statistic_value.Statistic_FreqOvall;
 800cdf2:	4ba0      	ldr	r3, [pc, #640]	; (800d074 <FFT_Thread+0x6fc>)
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf6:	4a9f      	ldr	r2, [pc, #636]	; (800d074 <FFT_Thread+0x6fc>)
 800cdf8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	 					statistic_value.Statistic_crestFactor_Temp = statistic_value.Statistic_crestFactor;
 800cdfc:	4b9d      	ldr	r3, [pc, #628]	; (800d074 <FFT_Thread+0x6fc>)
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	4a9c      	ldr	r2, [pc, #624]	; (800d074 <FFT_Thread+0x6fc>)
 800ce02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	 					statistic_value.Statistic_SpeedOvall_Temp = statistic_value.Statistic_SpeedOvall;
 800ce06:	4b9b      	ldr	r3, [pc, #620]	; (800d074 <FFT_Thread+0x6fc>)
 800ce08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0a:	4a9a      	ldr	r2, [pc, #616]	; (800d074 <FFT_Thread+0x6fc>)
 800ce0c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	 					statistic_value.Statistic_kurtosis_Temp = statistic_value.Statistic_kurtosis;
 800ce10:	4b98      	ldr	r3, [pc, #608]	; (800d074 <FFT_Thread+0x6fc>)
 800ce12:	6a1b      	ldr	r3, [r3, #32]
 800ce14:	4a97      	ldr	r2, [pc, #604]	; (800d074 <FFT_Thread+0x6fc>)
 800ce16:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	 					statistic_value.Statistic_skewness_Temp = statistic_value.Statistic_skewness;
 800ce1a:	4b96      	ldr	r3, [pc, #600]	; (800d074 <FFT_Thread+0x6fc>)
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1e:	4a95      	ldr	r2, [pc, #596]	; (800d074 <FFT_Thread+0x6fc>)
 800ce20:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	 				}
	 				if(averageTimes == 2)
 800ce24:	4b92      	ldr	r3, [pc, #584]	; (800d070 <FFT_Thread+0x6f8>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	f040 8084 	bne.w	800cf36 <FFT_Thread+0x5be>
	 				{
	 					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 800ce2e:	4b91      	ldr	r3, [pc, #580]	; (800d074 <FFT_Thread+0x6fc>)
 800ce30:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800ce34:	4b8f      	ldr	r3, [pc, #572]	; (800d074 <FFT_Thread+0x6fc>)
 800ce36:	edd3 7a00 	vldr	s15, [r3]
 800ce3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce3e:	4b8d      	ldr	r3, [pc, #564]	; (800d074 <FFT_Thread+0x6fc>)
 800ce40:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	 					statistic_value.Statistic_min_Temp += statistic_value.Statistic_min;
 800ce44:	4b8b      	ldr	r3, [pc, #556]	; (800d074 <FFT_Thread+0x6fc>)
 800ce46:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800ce4a:	4b8a      	ldr	r3, [pc, #552]	; (800d074 <FFT_Thread+0x6fc>)
 800ce4c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce54:	4b87      	ldr	r3, [pc, #540]	; (800d074 <FFT_Thread+0x6fc>)
 800ce56:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	 					statistic_value.Statistic_p2p_Temp += statistic_value.Statistic_p2p;
 800ce5a:	4b86      	ldr	r3, [pc, #536]	; (800d074 <FFT_Thread+0x6fc>)
 800ce5c:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800ce60:	4b84      	ldr	r3, [pc, #528]	; (800d074 <FFT_Thread+0x6fc>)
 800ce62:	edd3 7a06 	vldr	s15, [r3, #24]
 800ce66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce6a:	4b82      	ldr	r3, [pc, #520]	; (800d074 <FFT_Thread+0x6fc>)
 800ce6c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	 					statistic_value.Statistic_var_Temp += statistic_value.Statistic_var;
 800ce70:	4b80      	ldr	r3, [pc, #512]	; (800d074 <FFT_Thread+0x6fc>)
 800ce72:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800ce76:	4b7f      	ldr	r3, [pc, #508]	; (800d074 <FFT_Thread+0x6fc>)
 800ce78:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce80:	4b7c      	ldr	r3, [pc, #496]	; (800d074 <FFT_Thread+0x6fc>)
 800ce82:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
	 					statistic_value.Statistic_rms_Temp += statistic_value.Statistic_rms;
 800ce86:	4b7b      	ldr	r3, [pc, #492]	; (800d074 <FFT_Thread+0x6fc>)
 800ce88:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 800ce8c:	4b79      	ldr	r3, [pc, #484]	; (800d074 <FFT_Thread+0x6fc>)
 800ce8e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ce92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce96:	4b77      	ldr	r3, [pc, #476]	; (800d074 <FFT_Thread+0x6fc>)
 800ce98:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
	 					statistic_value.Statistic_mean_Temp += statistic_value.Statistic_mean;
 800ce9c:	4b75      	ldr	r3, [pc, #468]	; (800d074 <FFT_Thread+0x6fc>)
 800ce9e:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 800cea2:	4b74      	ldr	r3, [pc, #464]	; (800d074 <FFT_Thread+0x6fc>)
 800cea4:	edd3 7a04 	vldr	s15, [r3, #16]
 800cea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceac:	4b71      	ldr	r3, [pc, #452]	; (800d074 <FFT_Thread+0x6fc>)
 800ceae:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
	 					statistic_value.Statistic_std_Temp += statistic_value.Statistic_std;
 800ceb2:	4b70      	ldr	r3, [pc, #448]	; (800d074 <FFT_Thread+0x6fc>)
 800ceb4:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 800ceb8:	4b6e      	ldr	r3, [pc, #440]	; (800d074 <FFT_Thread+0x6fc>)
 800ceba:	edd3 7a05 	vldr	s15, [r3, #20]
 800cebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cec2:	4b6c      	ldr	r3, [pc, #432]	; (800d074 <FFT_Thread+0x6fc>)
 800cec4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	 					statistic_value.Statistic_FreqOvall_Temp += statistic_value.Statistic_FreqOvall;
 800cec8:	4b6a      	ldr	r3, [pc, #424]	; (800d074 <FFT_Thread+0x6fc>)
 800ceca:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 800cece:	4b69      	ldr	r3, [pc, #420]	; (800d074 <FFT_Thread+0x6fc>)
 800ced0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ced4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ced8:	4b66      	ldr	r3, [pc, #408]	; (800d074 <FFT_Thread+0x6fc>)
 800ceda:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
	 					statistic_value.Statistic_crestFactor_Temp += statistic_value.Statistic_crestFactor;
 800cede:	4b65      	ldr	r3, [pc, #404]	; (800d074 <FFT_Thread+0x6fc>)
 800cee0:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 800cee4:	4b63      	ldr	r3, [pc, #396]	; (800d074 <FFT_Thread+0x6fc>)
 800cee6:	edd3 7a07 	vldr	s15, [r3, #28]
 800ceea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceee:	4b61      	ldr	r3, [pc, #388]	; (800d074 <FFT_Thread+0x6fc>)
 800cef0:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
	 					statistic_value.Statistic_SpeedOvall_Temp += statistic_value.Statistic_SpeedOvall;
 800cef4:	4b5f      	ldr	r3, [pc, #380]	; (800d074 <FFT_Thread+0x6fc>)
 800cef6:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 800cefa:	4b5e      	ldr	r3, [pc, #376]	; (800d074 <FFT_Thread+0x6fc>)
 800cefc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cf00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf04:	4b5b      	ldr	r3, [pc, #364]	; (800d074 <FFT_Thread+0x6fc>)
 800cf06:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104
	 					statistic_value.Statistic_kurtosis_Temp += statistic_value.Statistic_kurtosis;
 800cf0a:	4b5a      	ldr	r3, [pc, #360]	; (800d074 <FFT_Thread+0x6fc>)
 800cf0c:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800cf10:	4b58      	ldr	r3, [pc, #352]	; (800d074 <FFT_Thread+0x6fc>)
 800cf12:	edd3 7a08 	vldr	s15, [r3, #32]
 800cf16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf1a:	4b56      	ldr	r3, [pc, #344]	; (800d074 <FFT_Thread+0x6fc>)
 800cf1c:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
	 					statistic_value.Statistic_skewness_Temp += statistic_value.Statistic_skewness;
 800cf20:	4b54      	ldr	r3, [pc, #336]	; (800d074 <FFT_Thread+0x6fc>)
 800cf22:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800cf26:	4b53      	ldr	r3, [pc, #332]	; (800d074 <FFT_Thread+0x6fc>)
 800cf28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cf2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf30:	4b50      	ldr	r3, [pc, #320]	; (800d074 <FFT_Thread+0x6fc>)
 800cf32:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
	 				}
	 				if(averageTimes == 3)
 800cf36:	4b4e      	ldr	r3, [pc, #312]	; (800d070 <FFT_Thread+0x6f8>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	f040 80cb 	bne.w	800d0d6 <FFT_Thread+0x75e>
	 				{
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800cf40:	4b4c      	ldr	r3, [pc, #304]	; (800d074 <FFT_Thread+0x6fc>)
 800cf42:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
	 							statistic_value.Statistic_max) / 3;
 800cf46:	4b4b      	ldr	r3, [pc, #300]	; (800d074 <FFT_Thread+0x6fc>)
 800cf48:	edd3 7a00 	vldr	s15, [r3]
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800cf4c:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_max) / 3;
 800cf50:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cf54:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800cf58:	4b46      	ldr	r3, [pc, #280]	; (800d074 <FFT_Thread+0x6fc>)
 800cf5a:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800cf5e:	4b45      	ldr	r3, [pc, #276]	; (800d074 <FFT_Thread+0x6fc>)
 800cf60:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
	 							statistic_value.Statistic_min) / 3;
 800cf64:	4b43      	ldr	r3, [pc, #268]	; (800d074 <FFT_Thread+0x6fc>)
 800cf66:	edd3 7a01 	vldr	s15, [r3, #4]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800cf6a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_min) / 3;
 800cf6e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cf72:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800cf76:	4b3f      	ldr	r3, [pc, #252]	; (800d074 <FFT_Thread+0x6fc>)
 800cf78:	edc3 7a01 	vstr	s15, [r3, #4]
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800cf7c:	4b3d      	ldr	r3, [pc, #244]	; (800d074 <FFT_Thread+0x6fc>)
 800cf7e:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
								statistic_value.Statistic_p2p) / 3;
 800cf82:	4b3c      	ldr	r3, [pc, #240]	; (800d074 <FFT_Thread+0x6fc>)
 800cf84:	edd3 7a06 	vldr	s15, [r3, #24]
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800cf88:	ee37 7a27 	vadd.f32	s14, s14, s15
								statistic_value.Statistic_p2p) / 3;
 800cf8c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cf90:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800cf94:	4b37      	ldr	r3, [pc, #220]	; (800d074 <FFT_Thread+0x6fc>)
 800cf96:	edc3 7a06 	vstr	s15, [r3, #24]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800cf9a:	4b36      	ldr	r3, [pc, #216]	; (800d074 <FFT_Thread+0x6fc>)
 800cf9c:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
	 							statistic_value.Statistic_var) / 3;
 800cfa0:	4b34      	ldr	r3, [pc, #208]	; (800d074 <FFT_Thread+0x6fc>)
 800cfa2:	edd3 7a02 	vldr	s15, [r3, #8]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800cfa6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_var) / 3;
 800cfaa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cfae:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800cfb2:	4b30      	ldr	r3, [pc, #192]	; (800d074 <FFT_Thread+0x6fc>)
 800cfb4:	edc3 7a02 	vstr	s15, [r3, #8]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800cfb8:	4b2e      	ldr	r3, [pc, #184]	; (800d074 <FFT_Thread+0x6fc>)
 800cfba:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
	 							statistic_value.Statistic_rms) / 3;
 800cfbe:	4b2d      	ldr	r3, [pc, #180]	; (800d074 <FFT_Thread+0x6fc>)
 800cfc0:	edd3 7a03 	vldr	s15, [r3, #12]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800cfc4:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_rms) / 3;
 800cfc8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cfcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800cfd0:	4b28      	ldr	r3, [pc, #160]	; (800d074 <FFT_Thread+0x6fc>)
 800cfd2:	edc3 7a03 	vstr	s15, [r3, #12]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800cfd6:	4b27      	ldr	r3, [pc, #156]	; (800d074 <FFT_Thread+0x6fc>)
 800cfd8:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
	 							statistic_value.Statistic_mean) / 3;
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <FFT_Thread+0x6fc>)
 800cfde:	edd3 7a04 	vldr	s15, [r3, #16]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800cfe2:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_mean) / 3;
 800cfe6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cfea:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800cfee:	4b21      	ldr	r3, [pc, #132]	; (800d074 <FFT_Thread+0x6fc>)
 800cff0:	edc3 7a04 	vstr	s15, [r3, #16]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800cff4:	4b1f      	ldr	r3, [pc, #124]	; (800d074 <FFT_Thread+0x6fc>)
 800cff6:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
	 							statistic_value.Statistic_std) / 3;
 800cffa:	4b1e      	ldr	r3, [pc, #120]	; (800d074 <FFT_Thread+0x6fc>)
 800cffc:	edd3 7a05 	vldr	s15, [r3, #20]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800d000:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_std) / 3;
 800d004:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d008:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800d00c:	4b19      	ldr	r3, [pc, #100]	; (800d074 <FFT_Thread+0x6fc>)
 800d00e:	edc3 7a05 	vstr	s15, [r3, #20]
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800d012:	4b18      	ldr	r3, [pc, #96]	; (800d074 <FFT_Thread+0x6fc>)
 800d014:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
	 							statistic_value.Statistic_FreqOvall) / 3;
 800d018:	4b16      	ldr	r3, [pc, #88]	; (800d074 <FFT_Thread+0x6fc>)
 800d01a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800d01e:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_FreqOvall) / 3;
 800d022:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d026:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800d02a:	4b12      	ldr	r3, [pc, #72]	; (800d074 <FFT_Thread+0x6fc>)
 800d02c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800d030:	4b10      	ldr	r3, [pc, #64]	; (800d074 <FFT_Thread+0x6fc>)
 800d032:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
	 							statistic_value.Statistic_crestFactor) / 3;
 800d036:	4b0f      	ldr	r3, [pc, #60]	; (800d074 <FFT_Thread+0x6fc>)
 800d038:	edd3 7a07 	vldr	s15, [r3, #28]
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800d03c:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_crestFactor) / 3;
 800d040:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d044:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800d048:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <FFT_Thread+0x6fc>)
 800d04a:	edc3 7a07 	vstr	s15, [r3, #28]
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <FFT_Thread+0x6fc>)
 800d050:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800d054:	4b07      	ldr	r3, [pc, #28]	; (800d074 <FFT_Thread+0x6fc>)
 800d056:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800d05a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d05e:	e00b      	b.n	800d078 <FFT_Thread+0x700>
 800d060:	20059c00 	.word	0x20059c00
 800d064:	20000338 	.word	0x20000338
 800d068:	20059fb4 	.word	0x20059fb4
 800d06c:	20000334 	.word	0x20000334
 800d070:	2000031c 	.word	0x2000031c
 800d074:	20059c18 	.word	0x20059c18
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800d078:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d07c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800d080:	4b1b      	ldr	r3, [pc, #108]	; (800d0f0 <FFT_Thread+0x778>)
 800d082:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800d086:	4b1a      	ldr	r3, [pc, #104]	; (800d0f0 <FFT_Thread+0x778>)
 800d088:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
	 							statistic_value.Statistic_kurtosis) / 3;
 800d08c:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <FFT_Thread+0x778>)
 800d08e:	edd3 7a08 	vldr	s15, [r3, #32]
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800d092:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_kurtosis) / 3;
 800d096:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d09a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800d09e:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <FFT_Thread+0x778>)
 800d0a0:	edc3 7a08 	vstr	s15, [r3, #32]
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800d0a4:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <FFT_Thread+0x778>)
 800d0a6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
	 							statistic_value.Statistic_skewness) / 3;
 800d0aa:	4b11      	ldr	r3, [pc, #68]	; (800d0f0 <FFT_Thread+0x778>)
 800d0ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800d0b0:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_skewness) / 3;
 800d0b4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d0b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800d0bc:	4b0c      	ldr	r3, [pc, #48]	; (800d0f0 <FFT_Thread+0x778>)
 800d0be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	 					USARTBLE.sendflag = 1;
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <FFT_Thread+0x77c>)
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	701a      	strb	r2, [r3, #0]
	 					averageTimes = 0;
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	; (800d0f8 <FFT_Thread+0x780>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	701a      	strb	r2, [r3, #0]

	 					/*TODO: BLE send data*/
	 					BLE_USART(&huart6, &statistic_value);
 800d0ce:	4908      	ldr	r1, [pc, #32]	; (800d0f0 <FFT_Thread+0x778>)
 800d0d0:	480a      	ldr	r0, [pc, #40]	; (800d0fc <FFT_Thread+0x784>)
 800d0d2:	f7fe f9a9 	bl	800b428 <BLE_USART>
	 					//TODO : Initial statistic value to zero
	 					//Initial_AllStatisticValue();

	 				}

	 				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800d0d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d0da:	4809      	ldr	r0, [pc, #36]	; (800d100 <FFT_Thread+0x788>)
 800d0dc:	f002 fccb 	bl	800fa76 <HAL_GPIO_TogglePin>

	 				//TODO : enable collect data flag
	 				stattisComputingStatus = statisticComputingNORMAL;
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <FFT_Thread+0x78c>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	e44b      	b.n	800c980 <FFT_Thread+0x8>
	 			}
	 */
	 	  }

	 	  else{
	 		 vTaskSuspend(NULL);
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	f007 fc03 	bl	80148f4 <vTaskSuspend>
  {
 800d0ee:	e447      	b.n	800c980 <FFT_Thread+0x8>
 800d0f0:	20059c18 	.word	0x20059c18
 800d0f4:	2005e020 	.word	0x2005e020
 800d0f8:	2000031c 	.word	0x2000031c
 800d0fc:	20066260 	.word	0x20066260
 800d100:	40020c00 	.word	0x40020c00
 800d104:	2000033c 	.word	0x2000033c

0800d108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d108:	b480      	push	{r7}
 800d10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d10c:	bf00      	nop
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <_out_buffer>:
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d204      	bcs.n	800d138 <_out_buffer+0x22>
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4413      	add	r3, r2
 800d134:	7bfa      	ldrb	r2, [r7, #15]
 800d136:	701a      	strb	r2, [r3, #0]
 800d138:	bf00      	nop
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <_out_null>:
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60b9      	str	r1, [r7, #8]
 800d14c:	607a      	str	r2, [r7, #4]
 800d14e:	603b      	str	r3, [r7, #0]
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]
 800d154:	bf00      	nop
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <_strnlen_s>:
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	e002      	b.n	800d176 <_strnlen_s+0x16>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3301      	adds	r3, #1
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d004      	beq.n	800d188 <_strnlen_s+0x28>
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	603a      	str	r2, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f3      	bne.n	800d170 <_strnlen_s+0x10>
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <_is_digit>:
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	71fb      	strb	r3, [r7, #7]
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b2f      	cmp	r3, #47	; 0x2f
 800d1a8:	d904      	bls.n	800d1b4 <_is_digit+0x1a>
 800d1aa:	79fb      	ldrb	r3, [r7, #7]
 800d1ac:	2b39      	cmp	r3, #57	; 0x39
 800d1ae:	d801      	bhi.n	800d1b4 <_is_digit+0x1a>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	e000      	b.n	800d1b6 <_is_digit+0x1c>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	4618      	mov	r0, r3
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <_atoi>:
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	e00e      	b.n	800d1f4 <_atoi+0x2c>
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	1c59      	adds	r1, r3, #1
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	6011      	str	r1, [r2, #0]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	4403      	add	r3, r0
 800d1f0:	3b30      	subs	r3, #48	; 0x30
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff ffcd 	bl	800d19a <_is_digit>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e7      	bne.n	800d1d6 <_atoi+0xe>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <_out_rev>:
 800d210:	b590      	push	{r4, r7, lr}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
 800d21c:	603b      	str	r3, [r7, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	613b      	str	r3, [r7, #16]
 800d222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d224:	f003 0302 	and.w	r3, r3, #2
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d125      	bne.n	800d278 <_out_rev+0x68>
 800d22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d120      	bne.n	800d278 <_out_rev+0x68>
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	617b      	str	r3, [r7, #20]
 800d23a:	e00a      	b.n	800d252 <_out_rev+0x42>
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	1c53      	adds	r3, r2, #1
 800d240:	607b      	str	r3, [r7, #4]
 800d242:	68fc      	ldr	r4, [r7, #12]
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	2020      	movs	r0, #32
 800d24a:	47a0      	blx	r4
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	3301      	adds	r3, #1
 800d250:	617b      	str	r3, [r7, #20]
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	429a      	cmp	r2, r3
 800d258:	d3f0      	bcc.n	800d23c <_out_rev+0x2c>
 800d25a:	e00d      	b.n	800d278 <_out_rev+0x68>
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	3b01      	subs	r3, #1
 800d260:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	4413      	add	r3, r2
 800d268:	7818      	ldrb	r0, [r3, #0]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	1c53      	adds	r3, r2, #1
 800d26e:	607b      	str	r3, [r7, #4]
 800d270:	68fc      	ldr	r4, [r7, #12]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	47a0      	blx	r4
 800d278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1ee      	bne.n	800d25c <_out_rev+0x4c>
 800d27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d280:	f003 0302 	and.w	r3, r3, #2
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00e      	beq.n	800d2a6 <_out_rev+0x96>
 800d288:	e007      	b.n	800d29a <_out_rev+0x8a>
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	1c53      	adds	r3, r2, #1
 800d28e:	607b      	str	r3, [r7, #4]
 800d290:	68fc      	ldr	r4, [r7, #12]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	2020      	movs	r0, #32
 800d298:	47a0      	blx	r4
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d8f1      	bhi.n	800d28a <_out_rev+0x7a>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	371c      	adds	r7, #28
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd90      	pop	{r4, r7, pc}

0800d2b0 <_ntoa_format>:
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b088      	sub	sp, #32
 800d2b4:	af04      	add	r7, sp, #16
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d136      	bne.n	800d336 <_ntoa_format+0x86>
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d018      	beq.n	800d300 <_ntoa_format+0x50>
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d013      	beq.n	800d300 <_ntoa_format+0x50>
 800d2d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d104      	bne.n	800d2ea <_ntoa_format+0x3a>
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e2:	f003 030c 	and.w	r3, r3, #12
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <_ntoa_format+0x50>
 800d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2f0:	e006      	b.n	800d300 <_ntoa_format+0x50>
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	61fa      	str	r2, [r7, #28]
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	2230      	movs	r2, #48	; 0x30
 800d2fe:	701a      	strb	r2, [r3, #0]
 800d300:	69fa      	ldr	r2, [r7, #28]
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	429a      	cmp	r2, r3
 800d306:	d20a      	bcs.n	800d31e <_ntoa_format+0x6e>
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	2b1f      	cmp	r3, #31
 800d30c:	d9f1      	bls.n	800d2f2 <_ntoa_format+0x42>
 800d30e:	e006      	b.n	800d31e <_ntoa_format+0x6e>
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	61fa      	str	r2, [r7, #28]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	4413      	add	r3, r2
 800d31a:	2230      	movs	r2, #48	; 0x30
 800d31c:	701a      	strb	r2, [r3, #0]
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	f003 0301 	and.w	r3, r3, #1
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <_ntoa_format+0x86>
 800d328:	69fa      	ldr	r2, [r7, #28]
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d202      	bcs.n	800d336 <_ntoa_format+0x86>
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	2b1f      	cmp	r3, #31
 800d334:	d9ec      	bls.n	800d310 <_ntoa_format+0x60>
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	f003 0310 	and.w	r3, r3, #16
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d058      	beq.n	800d3f2 <_ntoa_format+0x142>
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d346:	2b00      	cmp	r3, #0
 800d348:	d116      	bne.n	800d378 <_ntoa_format+0xc8>
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d013      	beq.n	800d378 <_ntoa_format+0xc8>
 800d350:	69fa      	ldr	r2, [r7, #28]
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	429a      	cmp	r2, r3
 800d356:	d003      	beq.n	800d360 <_ntoa_format+0xb0>
 800d358:	69fa      	ldr	r2, [r7, #28]
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d10b      	bne.n	800d378 <_ntoa_format+0xc8>
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	3b01      	subs	r3, #1
 800d364:	61fb      	str	r3, [r7, #28]
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d005      	beq.n	800d378 <_ntoa_format+0xc8>
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	2b10      	cmp	r3, #16
 800d370:	d102      	bne.n	800d378 <_ntoa_format+0xc8>
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	3b01      	subs	r3, #1
 800d376:	61fb      	str	r3, [r7, #28]
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	2b10      	cmp	r3, #16
 800d37c:	d10f      	bne.n	800d39e <_ntoa_format+0xee>
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	f003 0320 	and.w	r3, r3, #32
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <_ntoa_format+0xee>
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	2b1f      	cmp	r3, #31
 800d38c:	d807      	bhi.n	800d39e <_ntoa_format+0xee>
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	61fa      	str	r2, [r7, #28]
 800d394:	69ba      	ldr	r2, [r7, #24]
 800d396:	4413      	add	r3, r2
 800d398:	2278      	movs	r2, #120	; 0x78
 800d39a:	701a      	strb	r2, [r3, #0]
 800d39c:	e01f      	b.n	800d3de <_ntoa_format+0x12e>
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	2b10      	cmp	r3, #16
 800d3a2:	d10f      	bne.n	800d3c4 <_ntoa_format+0x114>
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00a      	beq.n	800d3c4 <_ntoa_format+0x114>
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	2b1f      	cmp	r3, #31
 800d3b2:	d807      	bhi.n	800d3c4 <_ntoa_format+0x114>
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	1c5a      	adds	r2, r3, #1
 800d3b8:	61fa      	str	r2, [r7, #28]
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	4413      	add	r3, r2
 800d3be:	2258      	movs	r2, #88	; 0x58
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	e00c      	b.n	800d3de <_ntoa_format+0x12e>
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d109      	bne.n	800d3de <_ntoa_format+0x12e>
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	2b1f      	cmp	r3, #31
 800d3ce:	d806      	bhi.n	800d3de <_ntoa_format+0x12e>
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	1c5a      	adds	r2, r3, #1
 800d3d4:	61fa      	str	r2, [r7, #28]
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	4413      	add	r3, r2
 800d3da:	2262      	movs	r2, #98	; 0x62
 800d3dc:	701a      	strb	r2, [r3, #0]
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	2b1f      	cmp	r3, #31
 800d3e2:	d806      	bhi.n	800d3f2 <_ntoa_format+0x142>
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	1c5a      	adds	r2, r3, #1
 800d3e8:	61fa      	str	r2, [r7, #28]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	2230      	movs	r2, #48	; 0x30
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	2b1f      	cmp	r3, #31
 800d3f6:	d824      	bhi.n	800d442 <_ntoa_format+0x192>
 800d3f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d007      	beq.n	800d410 <_ntoa_format+0x160>
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	61fa      	str	r2, [r7, #28]
 800d406:	69ba      	ldr	r2, [r7, #24]
 800d408:	4413      	add	r3, r2
 800d40a:	222d      	movs	r2, #45	; 0x2d
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	e018      	b.n	800d442 <_ntoa_format+0x192>
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	f003 0304 	and.w	r3, r3, #4
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <_ntoa_format+0x17a>
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	61fa      	str	r2, [r7, #28]
 800d420:	69ba      	ldr	r2, [r7, #24]
 800d422:	4413      	add	r3, r2
 800d424:	222b      	movs	r2, #43	; 0x2b
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	e00b      	b.n	800d442 <_ntoa_format+0x192>
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	f003 0308 	and.w	r3, r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	d006      	beq.n	800d442 <_ntoa_format+0x192>
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	61fa      	str	r2, [r7, #28]
 800d43a:	69ba      	ldr	r2, [r7, #24]
 800d43c:	4413      	add	r3, r2
 800d43e:	2220      	movs	r2, #32
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	9303      	str	r3, [sp, #12]
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	9302      	str	r3, [sp, #8]
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	68b9      	ldr	r1, [r7, #8]
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f7ff fed9 	bl	800d210 <_out_rev>
 800d45e:	4603      	mov	r3, r0
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <_ntoa_long>:
 800d468:	b580      	push	{r7, lr}
 800d46a:	b096      	sub	sp, #88	; 0x58
 800d46c:	af08      	add	r7, sp, #32
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
 800d476:	2300      	movs	r3, #0
 800d478:	637b      	str	r3, [r7, #52]	; 0x34
 800d47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d103      	bne.n	800d488 <_ntoa_long+0x20>
 800d480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d482:	f023 0310 	bic.w	r3, r3, #16
 800d486:	657b      	str	r3, [r7, #84]	; 0x54
 800d488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d48a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <_ntoa_long+0x30>
 800d492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d494:	2b00      	cmp	r3, #0
 800d496:	d033      	beq.n	800d500 <_ntoa_long+0x98>
 800d498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d49a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d49c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4a2:	fb01 f202 	mul.w	r2, r1, r2
 800d4a6:	1a9b      	subs	r3, r3, r2
 800d4a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4b0:	2b09      	cmp	r3, #9
 800d4b2:	d804      	bhi.n	800d4be <_ntoa_long+0x56>
 800d4b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4b8:	3330      	adds	r3, #48	; 0x30
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	e00d      	b.n	800d4da <_ntoa_long+0x72>
 800d4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4c0:	f003 0320 	and.w	r3, r3, #32
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <_ntoa_long+0x64>
 800d4c8:	2241      	movs	r2, #65	; 0x41
 800d4ca:	e000      	b.n	800d4ce <_ntoa_long+0x66>
 800d4cc:	2261      	movs	r2, #97	; 0x61
 800d4ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4d2:	4413      	add	r3, r2
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	3b0a      	subs	r3, #10
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	1c59      	adds	r1, r3, #1
 800d4de:	6379      	str	r1, [r7, #52]	; 0x34
 800d4e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d4e4:	440b      	add	r3, r1
 800d4e6:	f803 2c28 	strb.w	r2, [r3, #-40]
 800d4ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f2:	643b      	str	r3, [r7, #64]	; 0x40
 800d4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d002      	beq.n	800d500 <_ntoa_long+0x98>
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fc:	2b1f      	cmp	r3, #31
 800d4fe:	d9cb      	bls.n	800d498 <_ntoa_long+0x30>
 800d500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d502:	9306      	str	r3, [sp, #24]
 800d504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d506:	9305      	str	r3, [sp, #20]
 800d508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50a:	9304      	str	r3, [sp, #16]
 800d50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d50e:	9303      	str	r3, [sp, #12]
 800d510:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d514:	9302      	str	r3, [sp, #8]
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	f107 0310 	add.w	r3, r7, #16
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	68b9      	ldr	r1, [r7, #8]
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff fec2 	bl	800d2b0 <_ntoa_format>
 800d52c:	4603      	mov	r3, r0
 800d52e:	4618      	mov	r0, r3
 800d530:	3738      	adds	r7, #56	; 0x38
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <_ntoa_long_long>:
 800d536:	b590      	push	{r4, r7, lr}
 800d538:	b097      	sub	sp, #92	; 0x5c
 800d53a:	af08      	add	r7, sp, #32
 800d53c:	60f8      	str	r0, [r7, #12]
 800d53e:	60b9      	str	r1, [r7, #8]
 800d540:	607a      	str	r2, [r7, #4]
 800d542:	603b      	str	r3, [r7, #0]
 800d544:	2300      	movs	r3, #0
 800d546:	637b      	str	r3, [r7, #52]	; 0x34
 800d548:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d54c:	4323      	orrs	r3, r4
 800d54e:	d103      	bne.n	800d558 <_ntoa_long_long+0x22>
 800d550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d552:	f023 0310 	bic.w	r3, r3, #16
 800d556:	66bb      	str	r3, [r7, #104]	; 0x68
 800d558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d55a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <_ntoa_long_long+0x34>
 800d562:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d566:	4323      	orrs	r3, r4
 800d568:	d039      	beq.n	800d5de <_ntoa_long_long+0xa8>
 800d56a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d56e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d572:	f7fa fecd 	bl	8008310 <__aeabi_uldivmod>
 800d576:	461c      	mov	r4, r3
 800d578:	4613      	mov	r3, r2
 800d57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d57e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d582:	2b09      	cmp	r3, #9
 800d584:	d804      	bhi.n	800d590 <_ntoa_long_long+0x5a>
 800d586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d58a:	3330      	adds	r3, #48	; 0x30
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	e00d      	b.n	800d5ac <_ntoa_long_long+0x76>
 800d590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <_ntoa_long_long+0x68>
 800d59a:	2241      	movs	r2, #65	; 0x41
 800d59c:	e000      	b.n	800d5a0 <_ntoa_long_long+0x6a>
 800d59e:	2261      	movs	r2, #97	; 0x61
 800d5a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5a4:	4413      	add	r3, r2
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	3b0a      	subs	r3, #10
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ae:	1c59      	adds	r1, r3, #1
 800d5b0:	6379      	str	r1, [r7, #52]	; 0x34
 800d5b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d5b6:	440b      	add	r3, r1
 800d5b8:	f803 2c28 	strb.w	r2, [r3, #-40]
 800d5bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d5c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d5c4:	f7fa fea4 	bl	8008310 <__aeabi_uldivmod>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800d5d0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d5d4:	4323      	orrs	r3, r4
 800d5d6:	d002      	beq.n	800d5de <_ntoa_long_long+0xa8>
 800d5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5da:	2b1f      	cmp	r3, #31
 800d5dc:	d9c5      	bls.n	800d56a <_ntoa_long_long+0x34>
 800d5de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5e2:	9206      	str	r2, [sp, #24]
 800d5e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5e6:	9205      	str	r2, [sp, #20]
 800d5e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5ea:	9204      	str	r2, [sp, #16]
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d5f2:	9302      	str	r3, [sp, #8]
 800d5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	f107 0310 	add.w	r3, r7, #16
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f7ff fe53 	bl	800d2b0 <_ntoa_format>
 800d60a:	4603      	mov	r3, r0
 800d60c:	4618      	mov	r0, r3
 800d60e:	373c      	adds	r7, #60	; 0x3c
 800d610:	46bd      	mov	sp, r7
 800d612:	bd90      	pop	{r4, r7, pc}
 800d614:	0000      	movs	r0, r0
	...

0800d618 <_ftoa>:
 800d618:	b590      	push	{r4, r7, lr}
 800d61a:	b09d      	sub	sp, #116	; 0x74
 800d61c:	af04      	add	r7, sp, #16
 800d61e:	6178      	str	r0, [r7, #20]
 800d620:	6139      	str	r1, [r7, #16]
 800d622:	60fa      	str	r2, [r7, #12]
 800d624:	60bb      	str	r3, [r7, #8]
 800d626:	ed87 0b00 	vstr	d0, [r7]
 800d62a:	2300      	movs	r3, #0
 800d62c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d62e:	f04f 0300 	mov.w	r3, #0
 800d632:	f04f 0400 	mov.w	r4, #0
 800d636:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 800d63a:	ed97 6b00 	vldr	d6, [r7]
 800d63e:	ed97 7b00 	vldr	d7, [r7]
 800d642:	eeb4 6b47 	vcmp.f64	d6, d7
 800d646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64a:	d00f      	beq.n	800d66c <_ftoa+0x54>
 800d64c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d64e:	9303      	str	r3, [sp, #12]
 800d650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d652:	9302      	str	r3, [sp, #8]
 800d654:	2303      	movs	r3, #3
 800d656:	9301      	str	r3, [sp, #4]
 800d658:	4bb7      	ldr	r3, [pc, #732]	; (800d938 <_ftoa+0x320>)
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	6939      	ldr	r1, [r7, #16]
 800d662:	6978      	ldr	r0, [r7, #20]
 800d664:	f7ff fdd4 	bl	800d210 <_out_rev>
 800d668:	4603      	mov	r3, r0
 800d66a:	e21e      	b.n	800daaa <_ftoa+0x492>
 800d66c:	ed97 7b00 	vldr	d7, [r7]
 800d670:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800d910 <_ftoa+0x2f8>
 800d674:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67c:	d50f      	bpl.n	800d69e <_ftoa+0x86>
 800d67e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d684:	9302      	str	r3, [sp, #8]
 800d686:	2304      	movs	r3, #4
 800d688:	9301      	str	r3, [sp, #4]
 800d68a:	4bac      	ldr	r3, [pc, #688]	; (800d93c <_ftoa+0x324>)
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	6939      	ldr	r1, [r7, #16]
 800d694:	6978      	ldr	r0, [r7, #20]
 800d696:	f7ff fdbb 	bl	800d210 <_out_rev>
 800d69a:	4603      	mov	r3, r0
 800d69c:	e205      	b.n	800daaa <_ftoa+0x492>
 800d69e:	ed97 7b00 	vldr	d7, [r7]
 800d6a2:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800d918 <_ftoa+0x300>
 800d6a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ae:	dd1d      	ble.n	800d6ec <_ftoa+0xd4>
 800d6b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6b2:	f003 0304 	and.w	r3, r3, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <_ftoa+0xa6>
 800d6ba:	4ba1      	ldr	r3, [pc, #644]	; (800d940 <_ftoa+0x328>)
 800d6bc:	e000      	b.n	800d6c0 <_ftoa+0xa8>
 800d6be:	4ba1      	ldr	r3, [pc, #644]	; (800d944 <_ftoa+0x32c>)
 800d6c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d6c2:	f002 0204 	and.w	r2, r2, #4
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	d001      	beq.n	800d6ce <_ftoa+0xb6>
 800d6ca:	2204      	movs	r2, #4
 800d6cc:	e000      	b.n	800d6d0 <_ftoa+0xb8>
 800d6ce:	2203      	movs	r2, #3
 800d6d0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d6d2:	9103      	str	r1, [sp, #12]
 800d6d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d6d6:	9102      	str	r1, [sp, #8]
 800d6d8:	9201      	str	r2, [sp, #4]
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	6939      	ldr	r1, [r7, #16]
 800d6e2:	6978      	ldr	r0, [r7, #20]
 800d6e4:	f7ff fd94 	bl	800d210 <_out_rev>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	e1de      	b.n	800daaa <_ftoa+0x492>
 800d6ec:	ed97 7b00 	vldr	d7, [r7]
 800d6f0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800d920 <_ftoa+0x308>
 800d6f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fc:	dc08      	bgt.n	800d710 <_ftoa+0xf8>
 800d6fe:	ed97 7b00 	vldr	d7, [r7]
 800d702:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800d928 <_ftoa+0x310>
 800d706:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70e:	d50f      	bpl.n	800d730 <_ftoa+0x118>
 800d710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d712:	9302      	str	r3, [sp, #8]
 800d714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d716:	9301      	str	r3, [sp, #4]
 800d718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	ed97 0b00 	vldr	d0, [r7]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	6939      	ldr	r1, [r7, #16]
 800d726:	6978      	ldr	r0, [r7, #20]
 800d728:	f000 f9c6 	bl	800dab8 <_etoa>
 800d72c:	4603      	mov	r3, r0
 800d72e:	e1bc      	b.n	800daaa <_ftoa+0x492>
 800d730:	2300      	movs	r3, #0
 800d732:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800d736:	ed97 7b00 	vldr	d7, [r7]
 800d73a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	d50a      	bpl.n	800d75a <_ftoa+0x142>
 800d744:	2301      	movs	r3, #1
 800d746:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800d74a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d930 <_ftoa+0x318>
 800d74e:	ed97 7b00 	vldr	d7, [r7]
 800d752:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d756:	ed87 7b00 	vstr	d7, [r7]
 800d75a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d75c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10e      	bne.n	800d782 <_ftoa+0x16a>
 800d764:	2306      	movs	r3, #6
 800d766:	673b      	str	r3, [r7, #112]	; 0x70
 800d768:	e00b      	b.n	800d782 <_ftoa+0x16a>
 800d76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d770:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d774:	4413      	add	r3, r2
 800d776:	2230      	movs	r2, #48	; 0x30
 800d778:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d77c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d77e:	3b01      	subs	r3, #1
 800d780:	673b      	str	r3, [r7, #112]	; 0x70
 800d782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d784:	2b1f      	cmp	r3, #31
 800d786:	d802      	bhi.n	800d78e <_ftoa+0x176>
 800d788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d78a:	2b09      	cmp	r3, #9
 800d78c:	d8ed      	bhi.n	800d76a <_ftoa+0x152>
 800d78e:	ed97 7b00 	vldr	d7, [r7]
 800d792:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d796:	ee17 3a90 	vmov	r3, s15
 800d79a:	657b      	str	r3, [r7, #84]	; 0x54
 800d79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d79e:	ee07 3a90 	vmov	s15, r3
 800d7a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d7a6:	ed97 6b00 	vldr	d6, [r7]
 800d7aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d7ae:	4a66      	ldr	r2, [pc, #408]	; (800d948 <_ftoa+0x330>)
 800d7b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	ed93 7b00 	vldr	d7, [r3]
 800d7ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7be:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800d7c2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800d7c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d7ca:	ee17 3a90 	vmov	r3, s15
 800d7ce:	653b      	str	r3, [r7, #80]	; 0x50
 800d7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7d2:	ee07 3a90 	vmov	s15, r3
 800d7d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d7da:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800d7de:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d7e2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 800d7e6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d7ea:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d7ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f6:	dd18      	ble.n	800d82a <_ftoa+0x212>
 800d7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	653b      	str	r3, [r7, #80]	; 0x50
 800d7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d800:	ee07 3a90 	vmov	s15, r3
 800d804:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800d808:	4a4f      	ldr	r2, [pc, #316]	; (800d948 <_ftoa+0x330>)
 800d80a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	4413      	add	r3, r2
 800d810:	ed93 7b00 	vldr	d7, [r3]
 800d814:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d81c:	db19      	blt.n	800d852 <_ftoa+0x23a>
 800d81e:	2300      	movs	r3, #0
 800d820:	653b      	str	r3, [r7, #80]	; 0x50
 800d822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d824:	3301      	adds	r3, #1
 800d826:	657b      	str	r3, [r7, #84]	; 0x54
 800d828:	e013      	b.n	800d852 <_ftoa+0x23a>
 800d82a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d82e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83a:	d40a      	bmi.n	800d852 <_ftoa+0x23a>
 800d83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d004      	beq.n	800d84c <_ftoa+0x234>
 800d842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d844:	f003 0301 	and.w	r3, r3, #1
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <_ftoa+0x23a>
 800d84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d84e:	3301      	adds	r3, #1
 800d850:	653b      	str	r3, [r7, #80]	; 0x50
 800d852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d854:	2b00      	cmp	r3, #0
 800d856:	d12e      	bne.n	800d8b6 <_ftoa+0x29e>
 800d858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d85a:	ee07 3a90 	vmov	s15, r3
 800d85e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d862:	ed97 6b00 	vldr	d6, [r7]
 800d866:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d86a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 800d86e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d872:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d876:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87e:	bf4c      	ite	mi
 800d880:	2301      	movmi	r3, #1
 800d882:	2300      	movpl	r3, #0
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f083 0301 	eor.w	r3, r3, #1
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d108      	bne.n	800d8a2 <_ftoa+0x28a>
 800d890:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800d894:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d898:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a0:	dd73      	ble.n	800d98a <_ftoa+0x372>
 800d8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8a4:	f003 0301 	and.w	r3, r3, #1
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 8091 	beq.w	800d9d0 <_ftoa+0x3b8>
 800d8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	657b      	str	r3, [r7, #84]	; 0x54
 800d8b4:	e08c      	b.n	800d9d0 <_ftoa+0x3b8>
 800d8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8ba:	e020      	b.n	800d8fe <_ftoa+0x2e6>
 800d8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8c4:	4b21      	ldr	r3, [pc, #132]	; (800d94c <_ftoa+0x334>)
 800d8c6:	fba3 2301 	umull	r2, r3, r3, r1
 800d8ca:	08da      	lsrs	r2, r3, #3
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	4413      	add	r3, r2
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	1aca      	subs	r2, r1, r3
 800d8d6:	b2d2      	uxtb	r2, r2
 800d8d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8da:	1c59      	adds	r1, r3, #1
 800d8dc:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d8de:	3230      	adds	r2, #48	; 0x30
 800d8e0:	b2d2      	uxtb	r2, r2
 800d8e2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d8e6:	440b      	add	r3, r1
 800d8e8:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ee:	4a17      	ldr	r2, [pc, #92]	; (800d94c <_ftoa+0x334>)
 800d8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f4:	08db      	lsrs	r3, r3, #3
 800d8f6:	653b      	str	r3, [r7, #80]	; 0x50
 800d8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <_ftoa+0x2ee>
 800d8fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d900:	2b1f      	cmp	r3, #31
 800d902:	d9db      	bls.n	800d8bc <_ftoa+0x2a4>
 800d904:	e02d      	b.n	800d962 <_ftoa+0x34a>
 800d906:	bf00      	nop
 800d908:	e02b      	b.n	800d962 <_ftoa+0x34a>
 800d90a:	bf00      	nop
 800d90c:	f3af 8000 	nop.w
 800d910:	ffffffff 	.word	0xffffffff
 800d914:	ffefffff 	.word	0xffefffff
 800d918:	ffffffff 	.word	0xffffffff
 800d91c:	7fefffff 	.word	0x7fefffff
 800d920:	00000000 	.word	0x00000000
 800d924:	41cdcd65 	.word	0x41cdcd65
 800d928:	00000000 	.word	0x00000000
 800d92c:	c1cdcd65 	.word	0xc1cdcd65
	...
 800d938:	08016eac 	.word	0x08016eac
 800d93c:	08016eb0 	.word	0x08016eb0
 800d940:	08016eb8 	.word	0x08016eb8
 800d944:	08016ec0 	.word	0x08016ec0
 800d948:	08020e60 	.word	0x08020e60
 800d94c:	cccccccd 	.word	0xcccccccd
 800d950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d956:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d95a:	4413      	add	r3, r2
 800d95c:	2230      	movs	r2, #48	; 0x30
 800d95e:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d964:	2b1f      	cmp	r3, #31
 800d966:	d804      	bhi.n	800d972 <_ftoa+0x35a>
 800d968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d96a:	1e5a      	subs	r2, r3, #1
 800d96c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1ee      	bne.n	800d950 <_ftoa+0x338>
 800d972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d974:	2b1f      	cmp	r3, #31
 800d976:	d82b      	bhi.n	800d9d0 <_ftoa+0x3b8>
 800d978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d97a:	1c5a      	adds	r2, r3, #1
 800d97c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d97e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d982:	4413      	add	r3, r2
 800d984:	222e      	movs	r2, #46	; 0x2e
 800d986:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d98a:	e021      	b.n	800d9d0 <_ftoa+0x3b8>
 800d98c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d98e:	4b49      	ldr	r3, [pc, #292]	; (800dab4 <_ftoa+0x49c>)
 800d990:	fb83 1302 	smull	r1, r3, r3, r2
 800d994:	1099      	asrs	r1, r3, #2
 800d996:	17d3      	asrs	r3, r2, #31
 800d998:	1ac9      	subs	r1, r1, r3
 800d99a:	460b      	mov	r3, r1
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	440b      	add	r3, r1
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	1ad1      	subs	r1, r2, r3
 800d9a4:	b2ca      	uxtb	r2, r1
 800d9a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9a8:	1c59      	adds	r1, r3, #1
 800d9aa:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d9ac:	3230      	adds	r2, #48	; 0x30
 800d9ae:	b2d2      	uxtb	r2, r2
 800d9b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d9b4:	440b      	add	r3, r1
 800d9b6:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9bc:	4a3d      	ldr	r2, [pc, #244]	; (800dab4 <_ftoa+0x49c>)
 800d9be:	fb82 1203 	smull	r1, r2, r2, r3
 800d9c2:	1092      	asrs	r2, r2, #2
 800d9c4:	17db      	asrs	r3, r3, #31
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	657b      	str	r3, [r7, #84]	; 0x54
 800d9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <_ftoa+0x3c0>
 800d9d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9d2:	2b1f      	cmp	r3, #31
 800d9d4:	d9da      	bls.n	800d98c <_ftoa+0x374>
 800d9d6:	e000      	b.n	800d9da <_ftoa+0x3c2>
 800d9d8:	bf00      	nop
 800d9da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9dc:	f003 0302 	and.w	r3, r3, #2
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d124      	bne.n	800da2e <_ftoa+0x416>
 800d9e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9e6:	f003 0301 	and.w	r3, r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d01f      	beq.n	800da2e <_ftoa+0x416>
 800d9ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d015      	beq.n	800da20 <_ftoa+0x408>
 800d9f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d104      	bne.n	800da06 <_ftoa+0x3ee>
 800d9fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9fe:	f003 030c 	and.w	r3, r3, #12
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00c      	beq.n	800da20 <_ftoa+0x408>
 800da06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da08:	3b01      	subs	r3, #1
 800da0a:	677b      	str	r3, [r7, #116]	; 0x74
 800da0c:	e008      	b.n	800da20 <_ftoa+0x408>
 800da0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da18:	4413      	add	r3, r2
 800da1a:	2230      	movs	r2, #48	; 0x30
 800da1c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800da20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da24:	429a      	cmp	r2, r3
 800da26:	d202      	bcs.n	800da2e <_ftoa+0x416>
 800da28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da2a:	2b1f      	cmp	r3, #31
 800da2c:	d9ef      	bls.n	800da0e <_ftoa+0x3f6>
 800da2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da30:	2b1f      	cmp	r3, #31
 800da32:	d82a      	bhi.n	800da8a <_ftoa+0x472>
 800da34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d009      	beq.n	800da50 <_ftoa+0x438>
 800da3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da46:	4413      	add	r3, r2
 800da48:	222d      	movs	r2, #45	; 0x2d
 800da4a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800da4e:	e01c      	b.n	800da8a <_ftoa+0x472>
 800da50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da52:	f003 0304 	and.w	r3, r3, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	d009      	beq.n	800da6e <_ftoa+0x456>
 800da5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da64:	4413      	add	r3, r2
 800da66:	222b      	movs	r2, #43	; 0x2b
 800da68:	f803 2c48 	strb.w	r2, [r3, #-72]
 800da6c:	e00d      	b.n	800da8a <_ftoa+0x472>
 800da6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da70:	f003 0308 	and.w	r3, r3, #8
 800da74:	2b00      	cmp	r3, #0
 800da76:	d008      	beq.n	800da8a <_ftoa+0x472>
 800da78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da7a:	1c5a      	adds	r2, r3, #1
 800da7c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da7e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da82:	4413      	add	r3, r2
 800da84:	2220      	movs	r2, #32
 800da86:	f803 2c48 	strb.w	r2, [r3, #-72]
 800da8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da8c:	9303      	str	r3, [sp, #12]
 800da8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da90:	9302      	str	r3, [sp, #8]
 800da92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	f107 0318 	add.w	r3, r7, #24
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	6939      	ldr	r1, [r7, #16]
 800daa2:	6978      	ldr	r0, [r7, #20]
 800daa4:	f7ff fbb4 	bl	800d210 <_out_rev>
 800daa8:	4603      	mov	r3, r0
 800daaa:	4618      	mov	r0, r3
 800daac:	3764      	adds	r7, #100	; 0x64
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd90      	pop	{r4, r7, pc}
 800dab2:	bf00      	nop
 800dab4:	66666667 	.word	0x66666667

0800dab8 <_etoa>:
 800dab8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800dabc:	b09a      	sub	sp, #104	; 0x68
 800dabe:	af06      	add	r7, sp, #24
 800dac0:	6178      	str	r0, [r7, #20]
 800dac2:	6139      	str	r1, [r7, #16]
 800dac4:	60fa      	str	r2, [r7, #12]
 800dac6:	60bb      	str	r3, [r7, #8]
 800dac8:	ed87 0b00 	vstr	d0, [r7]
 800dacc:	ed97 6b00 	vldr	d6, [r7]
 800dad0:	ed97 7b00 	vldr	d7, [r7]
 800dad4:	eeb4 6b47 	vcmp.f64	d6, d7
 800dad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dadc:	d111      	bne.n	800db02 <_etoa+0x4a>
 800dade:	ed97 7b00 	vldr	d7, [r7]
 800dae2:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800ddf8 <_etoa+0x340>
 800dae6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800daea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daee:	dc08      	bgt.n	800db02 <_etoa+0x4a>
 800daf0:	ed97 7b00 	vldr	d7, [r7]
 800daf4:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800de00 <_etoa+0x348>
 800daf8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db00:	d50f      	bpl.n	800db22 <_etoa+0x6a>
 800db02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db04:	9302      	str	r3, [sp, #8]
 800db06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	ed97 0b00 	vldr	d0, [r7]
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	6939      	ldr	r1, [r7, #16]
 800db18:	6978      	ldr	r0, [r7, #20]
 800db1a:	f7ff fd7d 	bl	800d618 <_ftoa>
 800db1e:	4603      	mov	r3, r0
 800db20:	e1cd      	b.n	800debe <_etoa+0x406>
 800db22:	ed97 7b00 	vldr	d7, [r7]
 800db26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800db2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2e:	bf4c      	ite	mi
 800db30:	2301      	movmi	r3, #1
 800db32:	2300      	movpl	r3, #0
 800db34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <_etoa+0x94>
 800db40:	ed97 7b00 	vldr	d7, [r7]
 800db44:	eeb1 7b47 	vneg.f64	d7, d7
 800db48:	ed87 7b00 	vstr	d7, [r7]
 800db4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <_etoa+0xa2>
 800db56:	2306      	movs	r3, #6
 800db58:	663b      	str	r3, [r7, #96]	; 0x60
 800db5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800db5e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800db62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800db66:	f04f 0300 	mov.w	r3, #0
 800db6a:	f04f 0400 	mov.w	r4, #0
 800db6e:	0d13      	lsrs	r3, r2, #20
 800db70:	2400      	movs	r4, #0
 800db72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db7c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800db80:	f04f 31ff 	mov.w	r1, #4294967295
 800db84:	4ab0      	ldr	r2, [pc, #704]	; (800de48 <_etoa+0x390>)
 800db86:	ea03 0b01 	and.w	fp, r3, r1
 800db8a:	ea04 0c02 	and.w	ip, r4, r2
 800db8e:	f04f 0100 	mov.w	r1, #0
 800db92:	4aae      	ldr	r2, [pc, #696]	; (800de4c <_etoa+0x394>)
 800db94:	ea4b 0301 	orr.w	r3, fp, r1
 800db98:	ea4c 0402 	orr.w	r4, ip, r2
 800db9c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800dba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba2:	ee07 3a90 	vmov	s15, r3
 800dba6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dbaa:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800de08 <_etoa+0x350>
 800dbae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbb2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800de10 <_etoa+0x358>
 800dbb6:	ee37 6b06 	vadd.f64	d6, d7, d6
 800dbba:	ed97 7b06 	vldr	d7, [r7, #24]
 800dbbe:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800dbc2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dbc6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800de18 <_etoa+0x360>
 800dbca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dbce:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dbd2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dbd6:	ee17 3a90 	vmov	r3, s15
 800dbda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbde:	ee07 3a90 	vmov	s15, r3
 800dbe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dbe6:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800de20 <_etoa+0x368>
 800dbea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dbf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dbf6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dbfa:	ee17 3a90 	vmov	r3, s15
 800dbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc02:	ee07 3a90 	vmov	s15, r3
 800dc06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc0a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800de28 <_etoa+0x370>
 800dc0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc14:	ee07 3a90 	vmov	s15, r3
 800dc18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc1c:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800de30 <_etoa+0x378>
 800dc20:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc24:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc28:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 800dc2c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800dc30:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800dc34:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc38:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 800dc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc3e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800dc42:	4619      	mov	r1, r3
 800dc44:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800dc48:	f04f 0300 	mov.w	r3, #0
 800dc4c:	f04f 0400 	mov.w	r4, #0
 800dc50:	050c      	lsls	r4, r1, #20
 800dc52:	2300      	movs	r3, #0
 800dc54:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800dc58:	ed97 6b06 	vldr	d6, [r7, #24]
 800dc5c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800dc60:	ee37 4b07 	vadd.f64	d4, d7, d7
 800dc64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dc68:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800dc6c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dc70:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800dc74:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800dc78:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800dc7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dc80:	ee37 3b03 	vadd.f64	d3, d7, d3
 800dc84:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800dc88:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800dc8c:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800dc90:	ee37 3b03 	vadd.f64	d3, d7, d3
 800dc94:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800dc98:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800dc9c:	ee35 5b07 	vadd.f64	d5, d5, d7
 800dca0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800dca4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800dca8:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dcac:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcb0:	ed87 7b06 	vstr	d7, [r7, #24]
 800dcb4:	ed97 7b06 	vldr	d7, [r7, #24]
 800dcb8:	ed97 6b00 	vldr	d6, [r7]
 800dcbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc4:	d50a      	bpl.n	800dcdc <_etoa+0x224>
 800dcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dccc:	ed97 6b06 	vldr	d6, [r7, #24]
 800dcd0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800dcd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dcd8:	ed87 7b06 	vstr	d7, [r7, #24]
 800dcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcde:	2b63      	cmp	r3, #99	; 0x63
 800dce0:	dc05      	bgt.n	800dcee <_etoa+0x236>
 800dce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800dce8:	db01      	blt.n	800dcee <_etoa+0x236>
 800dcea:	2304      	movs	r3, #4
 800dcec:	e000      	b.n	800dcf0 <_etoa+0x238>
 800dcee:	2305      	movs	r3, #5
 800dcf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d031      	beq.n	800dd60 <_etoa+0x2a8>
 800dcfc:	ed97 7b00 	vldr	d7, [r7]
 800dd00:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800de38 <_etoa+0x380>
 800dd04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0c:	db1d      	blt.n	800dd4a <_etoa+0x292>
 800dd0e:	ed97 7b00 	vldr	d7, [r7]
 800dd12:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800de40 <_etoa+0x388>
 800dd16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1e:	d514      	bpl.n	800dd4a <_etoa+0x292>
 800dd20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd24:	429a      	cmp	r2, r3
 800dd26:	da05      	bge.n	800dd34 <_etoa+0x27c>
 800dd28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	663b      	str	r3, [r7, #96]	; 0x60
 800dd32:	e001      	b.n	800dd38 <_etoa+0x280>
 800dd34:	2300      	movs	r3, #0
 800dd36:	663b      	str	r3, [r7, #96]	; 0x60
 800dd38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd40:	2300      	movs	r3, #0
 800dd42:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd44:	2300      	movs	r3, #0
 800dd46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd48:	e00a      	b.n	800dd60 <_etoa+0x2a8>
 800dd4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <_etoa+0x2a8>
 800dd50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <_etoa+0x2a8>
 800dd5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	663b      	str	r3, [r7, #96]	; 0x60
 800dd60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd62:	647b      	str	r3, [r7, #68]	; 0x44
 800dd64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d904      	bls.n	800dd76 <_etoa+0x2be>
 800dd6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	647b      	str	r3, [r7, #68]	; 0x44
 800dd74:	e001      	b.n	800dd7a <_etoa+0x2c2>
 800dd76:	2300      	movs	r3, #0
 800dd78:	647b      	str	r3, [r7, #68]	; 0x44
 800dd7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d004      	beq.n	800dd8e <_etoa+0x2d6>
 800dd84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <_etoa+0x2d6>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	647b      	str	r3, [r7, #68]	; 0x44
 800dd8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d007      	beq.n	800dda4 <_etoa+0x2ec>
 800dd94:	ed97 6b06 	vldr	d6, [r7, #24]
 800dd98:	ed97 5b00 	vldr	d5, [r7]
 800dd9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dda0:	ed87 7b00 	vstr	d7, [r7]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	627b      	str	r3, [r7, #36]	; 0x24
 800dda8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d004      	beq.n	800ddba <_etoa+0x302>
 800ddb0:	ed97 7b00 	vldr	d7, [r7]
 800ddb4:	eeb1 7b47 	vneg.f64	d7, d7
 800ddb8:	e001      	b.n	800ddbe <_etoa+0x306>
 800ddba:	ed97 7b00 	vldr	d7, [r7]
 800ddbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddc4:	9302      	str	r3, [sp, #8]
 800ddc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	eeb0 0b47 	vmov.f64	d0, d7
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	6939      	ldr	r1, [r7, #16]
 800ddd8:	6978      	ldr	r0, [r7, #20]
 800ddda:	f7ff fc1d 	bl	800d618 <_ftoa>
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d06a      	beq.n	800debc <_etoa+0x404>
 800dde6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dde8:	f003 0320 	and.w	r3, r3, #32
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d02f      	beq.n	800de50 <_etoa+0x398>
 800ddf0:	2045      	movs	r0, #69	; 0x45
 800ddf2:	e02e      	b.n	800de52 <_etoa+0x39a>
 800ddf4:	f3af 8000 	nop.w
 800ddf8:	ffffffff 	.word	0xffffffff
 800ddfc:	7fefffff 	.word	0x7fefffff
 800de00:	ffffffff 	.word	0xffffffff
 800de04:	ffefffff 	.word	0xffefffff
 800de08:	509f79fb 	.word	0x509f79fb
 800de0c:	3fd34413 	.word	0x3fd34413
 800de10:	8b60c8b3 	.word	0x8b60c8b3
 800de14:	3fc68a28 	.word	0x3fc68a28
 800de18:	636f4361 	.word	0x636f4361
 800de1c:	3fd287a7 	.word	0x3fd287a7
 800de20:	0979a371 	.word	0x0979a371
 800de24:	400a934f 	.word	0x400a934f
 800de28:	bbb55516 	.word	0xbbb55516
 800de2c:	40026bb1 	.word	0x40026bb1
 800de30:	fefa39ef 	.word	0xfefa39ef
 800de34:	3fe62e42 	.word	0x3fe62e42
 800de38:	eb1c432d 	.word	0xeb1c432d
 800de3c:	3f1a36e2 	.word	0x3f1a36e2
 800de40:	00000000 	.word	0x00000000
 800de44:	412e8480 	.word	0x412e8480
 800de48:	000fffff 	.word	0x000fffff
 800de4c:	3ff00000 	.word	0x3ff00000
 800de50:	2065      	movs	r0, #101	; 0x65
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	1c53      	adds	r3, r2, #1
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	697c      	ldr	r4, [r7, #20]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	6939      	ldr	r1, [r7, #16]
 800de5e:	47a0      	blx	r4
 800de60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de62:	2b00      	cmp	r3, #0
 800de64:	bfb8      	it	lt
 800de66:	425b      	neglt	r3, r3
 800de68:	4618      	mov	r0, r3
 800de6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de6c:	0fdb      	lsrs	r3, r3, #31
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de72:	3a01      	subs	r2, #1
 800de74:	2105      	movs	r1, #5
 800de76:	9105      	str	r1, [sp, #20]
 800de78:	9204      	str	r2, [sp, #16]
 800de7a:	2200      	movs	r2, #0
 800de7c:	9203      	str	r2, [sp, #12]
 800de7e:	220a      	movs	r2, #10
 800de80:	9202      	str	r2, [sp, #8]
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	9000      	str	r0, [sp, #0]
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	6939      	ldr	r1, [r7, #16]
 800de8c:	6978      	ldr	r0, [r7, #20]
 800de8e:	f7ff faeb 	bl	800d468 <_ntoa_long>
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de96:	f003 0302 	and.w	r3, r3, #2
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00e      	beq.n	800debc <_etoa+0x404>
 800de9e:	e007      	b.n	800deb0 <_etoa+0x3f8>
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	1c53      	adds	r3, r2, #1
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	697c      	ldr	r4, [r7, #20]
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	6939      	ldr	r1, [r7, #16]
 800deac:	2020      	movs	r0, #32
 800deae:	47a0      	blx	r4
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800deb8:	429a      	cmp	r2, r3
 800deba:	d8f1      	bhi.n	800dea0 <_etoa+0x3e8>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4618      	mov	r0, r3
 800dec0:	3750      	adds	r7, #80	; 0x50
 800dec2:	46bd      	mov	sp, r7
 800dec4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800dec8 <_vsnprintf>:
 800dec8:	b5b0      	push	{r4, r5, r7, lr}
 800deca:	b0a0      	sub	sp, #128	; 0x80
 800decc:	af0a      	add	r7, sp, #40	; 0x28
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	603b      	str	r3, [r7, #0]
 800ded6:	2300      	movs	r3, #0
 800ded8:	647b      	str	r3, [r7, #68]	; 0x44
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f040 848e 	bne.w	800e7fe <_vsnprintf+0x936>
 800dee2:	4ba0      	ldr	r3, [pc, #640]	; (800e164 <_vsnprintf+0x29c>)
 800dee4:	60fb      	str	r3, [r7, #12]
 800dee6:	f000 bc8a 	b.w	800e7fe <_vsnprintf+0x936>
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b25      	cmp	r3, #37	; 0x25
 800def0:	d00d      	beq.n	800df0e <_vsnprintf+0x46>
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	7818      	ldrb	r0, [r3, #0]
 800def6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800def8:	1c53      	adds	r3, r2, #1
 800defa:	647b      	str	r3, [r7, #68]	; 0x44
 800defc:	68fc      	ldr	r4, [r7, #12]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68b9      	ldr	r1, [r7, #8]
 800df02:	47a0      	blx	r4
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	3301      	adds	r3, #1
 800df08:	603b      	str	r3, [r7, #0]
 800df0a:	f000 bc78 	b.w	800e7fe <_vsnprintf+0x936>
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	3301      	adds	r3, #1
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	2300      	movs	r3, #0
 800df16:	657b      	str	r3, [r7, #84]	; 0x54
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	3b20      	subs	r3, #32
 800df1e:	2b10      	cmp	r3, #16
 800df20:	d856      	bhi.n	800dfd0 <_vsnprintf+0x108>
 800df22:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <_vsnprintf+0x60>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800dfa9 	.word	0x0800dfa9
 800df2c:	0800dfd1 	.word	0x0800dfd1
 800df30:	0800dfd1 	.word	0x0800dfd1
 800df34:	0800dfbd 	.word	0x0800dfbd
 800df38:	0800dfd1 	.word	0x0800dfd1
 800df3c:	0800dfd1 	.word	0x0800dfd1
 800df40:	0800dfd1 	.word	0x0800dfd1
 800df44:	0800dfd1 	.word	0x0800dfd1
 800df48:	0800dfd1 	.word	0x0800dfd1
 800df4c:	0800dfd1 	.word	0x0800dfd1
 800df50:	0800dfd1 	.word	0x0800dfd1
 800df54:	0800df95 	.word	0x0800df95
 800df58:	0800dfd1 	.word	0x0800dfd1
 800df5c:	0800df81 	.word	0x0800df81
 800df60:	0800dfd1 	.word	0x0800dfd1
 800df64:	0800dfd1 	.word	0x0800dfd1
 800df68:	0800df6d 	.word	0x0800df6d
 800df6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df6e:	f043 0301 	orr.w	r3, r3, #1
 800df72:	657b      	str	r3, [r7, #84]	; 0x54
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	603b      	str	r3, [r7, #0]
 800df7a:	2301      	movs	r3, #1
 800df7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800df7e:	e02a      	b.n	800dfd6 <_vsnprintf+0x10e>
 800df80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df82:	f043 0302 	orr.w	r3, r3, #2
 800df86:	657b      	str	r3, [r7, #84]	; 0x54
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	3301      	adds	r3, #1
 800df8c:	603b      	str	r3, [r7, #0]
 800df8e:	2301      	movs	r3, #1
 800df90:	64bb      	str	r3, [r7, #72]	; 0x48
 800df92:	e020      	b.n	800dfd6 <_vsnprintf+0x10e>
 800df94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df96:	f043 0304 	orr.w	r3, r3, #4
 800df9a:	657b      	str	r3, [r7, #84]	; 0x54
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	603b      	str	r3, [r7, #0]
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfa6:	e016      	b.n	800dfd6 <_vsnprintf+0x10e>
 800dfa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfaa:	f043 0308 	orr.w	r3, r3, #8
 800dfae:	657b      	str	r3, [r7, #84]	; 0x54
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	603b      	str	r3, [r7, #0]
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfba:	e00c      	b.n	800dfd6 <_vsnprintf+0x10e>
 800dfbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfbe:	f043 0310 	orr.w	r3, r3, #16
 800dfc2:	657b      	str	r3, [r7, #84]	; 0x54
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	603b      	str	r3, [r7, #0]
 800dfca:	2301      	movs	r3, #1
 800dfcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfce:	e002      	b.n	800dfd6 <_vsnprintf+0x10e>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfd4:	bf00      	nop
 800dfd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d19d      	bne.n	800df18 <_vsnprintf+0x50>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	653b      	str	r3, [r7, #80]	; 0x50
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7ff f8d8 	bl	800d19a <_is_digit>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d005      	beq.n	800dffc <_vsnprintf+0x134>
 800dff0:	463b      	mov	r3, r7
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff f8e8 	bl	800d1c8 <_atoi>
 800dff8:	6538      	str	r0, [r7, #80]	; 0x50
 800dffa:	e018      	b.n	800e02e <_vsnprintf+0x166>
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	2b2a      	cmp	r3, #42	; 0x2a
 800e002:	d114      	bne.n	800e02e <_vsnprintf+0x166>
 800e004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e006:	1d1a      	adds	r2, r3, #4
 800e008:	66ba      	str	r2, [r7, #104]	; 0x68
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	633b      	str	r3, [r7, #48]	; 0x30
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	2b00      	cmp	r3, #0
 800e012:	da07      	bge.n	800e024 <_vsnprintf+0x15c>
 800e014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e016:	f043 0302 	orr.w	r3, r3, #2
 800e01a:	657b      	str	r3, [r7, #84]	; 0x54
 800e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01e:	425b      	negs	r3, r3
 800e020:	653b      	str	r3, [r7, #80]	; 0x50
 800e022:	e001      	b.n	800e028 <_vsnprintf+0x160>
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	653b      	str	r3, [r7, #80]	; 0x50
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	3301      	adds	r3, #1
 800e02c:	603b      	str	r3, [r7, #0]
 800e02e:	2300      	movs	r3, #0
 800e030:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b2e      	cmp	r3, #46	; 0x2e
 800e038:	d124      	bne.n	800e084 <_vsnprintf+0x1bc>
 800e03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e03c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e040:	657b      	str	r3, [r7, #84]	; 0x54
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff f8a4 	bl	800d19a <_is_digit>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <_vsnprintf+0x19c>
 800e058:	463b      	mov	r3, r7
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff f8b4 	bl	800d1c8 <_atoi>
 800e060:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e062:	e00f      	b.n	800e084 <_vsnprintf+0x1bc>
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b2a      	cmp	r3, #42	; 0x2a
 800e06a:	d10b      	bne.n	800e084 <_vsnprintf+0x1bc>
 800e06c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	66ba      	str	r2, [r7, #104]	; 0x68
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e07c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	3301      	adds	r3, #1
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	3b68      	subs	r3, #104	; 0x68
 800e08a:	2b12      	cmp	r3, #18
 800e08c:	d866      	bhi.n	800e15c <_vsnprintf+0x294>
 800e08e:	a201      	add	r2, pc, #4	; (adr r2, 800e094 <_vsnprintf+0x1cc>)
 800e090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e094:	0800e107 	.word	0x0800e107
 800e098:	0800e15d 	.word	0x0800e15d
 800e09c:	0800e13d 	.word	0x0800e13d
 800e0a0:	0800e15d 	.word	0x0800e15d
 800e0a4:	0800e0e1 	.word	0x0800e0e1
 800e0a8:	0800e15d 	.word	0x0800e15d
 800e0ac:	0800e15d 	.word	0x0800e15d
 800e0b0:	0800e15d 	.word	0x0800e15d
 800e0b4:	0800e15d 	.word	0x0800e15d
 800e0b8:	0800e15d 	.word	0x0800e15d
 800e0bc:	0800e15d 	.word	0x0800e15d
 800e0c0:	0800e15d 	.word	0x0800e15d
 800e0c4:	0800e12d 	.word	0x0800e12d
 800e0c8:	0800e15d 	.word	0x0800e15d
 800e0cc:	0800e15d 	.word	0x0800e15d
 800e0d0:	0800e15d 	.word	0x0800e15d
 800e0d4:	0800e15d 	.word	0x0800e15d
 800e0d8:	0800e15d 	.word	0x0800e15d
 800e0dc:	0800e14d 	.word	0x0800e14d
 800e0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0e6:	657b      	str	r3, [r7, #84]	; 0x54
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	603b      	str	r3, [r7, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b6c      	cmp	r3, #108	; 0x6c
 800e0f4:	d134      	bne.n	800e160 <_vsnprintf+0x298>
 800e0f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e0fc:	657b      	str	r3, [r7, #84]	; 0x54
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	3301      	adds	r3, #1
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	e02c      	b.n	800e160 <_vsnprintf+0x298>
 800e106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e10c:	657b      	str	r3, [r7, #84]	; 0x54
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	3301      	adds	r3, #1
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	2b68      	cmp	r3, #104	; 0x68
 800e11a:	d125      	bne.n	800e168 <_vsnprintf+0x2a0>
 800e11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e122:	657b      	str	r3, [r7, #84]	; 0x54
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	3301      	adds	r3, #1
 800e128:	603b      	str	r3, [r7, #0]
 800e12a:	e01d      	b.n	800e168 <_vsnprintf+0x2a0>
 800e12c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e12e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e132:	657b      	str	r3, [r7, #84]	; 0x54
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	603b      	str	r3, [r7, #0]
 800e13a:	e016      	b.n	800e16a <_vsnprintf+0x2a2>
 800e13c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e13e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e142:	657b      	str	r3, [r7, #84]	; 0x54
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	3301      	adds	r3, #1
 800e148:	603b      	str	r3, [r7, #0]
 800e14a:	e00e      	b.n	800e16a <_vsnprintf+0x2a2>
 800e14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e14e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e152:	657b      	str	r3, [r7, #84]	; 0x54
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	3301      	adds	r3, #1
 800e158:	603b      	str	r3, [r7, #0]
 800e15a:	e006      	b.n	800e16a <_vsnprintf+0x2a2>
 800e15c:	bf00      	nop
 800e15e:	e004      	b.n	800e16a <_vsnprintf+0x2a2>
 800e160:	bf00      	nop
 800e162:	e002      	b.n	800e16a <_vsnprintf+0x2a2>
 800e164:	0800d145 	.word	0x0800d145
 800e168:	bf00      	nop
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	3b25      	subs	r3, #37	; 0x25
 800e170:	2b53      	cmp	r3, #83	; 0x53
 800e172:	f200 8337 	bhi.w	800e7e4 <_vsnprintf+0x91c>
 800e176:	a201      	add	r2, pc, #4	; (adr r2, 800e17c <_vsnprintf+0x2b4>)
 800e178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e17c:	0800e7cd 	.word	0x0800e7cd
 800e180:	0800e7e5 	.word	0x0800e7e5
 800e184:	0800e7e5 	.word	0x0800e7e5
 800e188:	0800e7e5 	.word	0x0800e7e5
 800e18c:	0800e7e5 	.word	0x0800e7e5
 800e190:	0800e7e5 	.word	0x0800e7e5
 800e194:	0800e7e5 	.word	0x0800e7e5
 800e198:	0800e7e5 	.word	0x0800e7e5
 800e19c:	0800e7e5 	.word	0x0800e7e5
 800e1a0:	0800e7e5 	.word	0x0800e7e5
 800e1a4:	0800e7e5 	.word	0x0800e7e5
 800e1a8:	0800e7e5 	.word	0x0800e7e5
 800e1ac:	0800e7e5 	.word	0x0800e7e5
 800e1b0:	0800e7e5 	.word	0x0800e7e5
 800e1b4:	0800e7e5 	.word	0x0800e7e5
 800e1b8:	0800e7e5 	.word	0x0800e7e5
 800e1bc:	0800e7e5 	.word	0x0800e7e5
 800e1c0:	0800e7e5 	.word	0x0800e7e5
 800e1c4:	0800e7e5 	.word	0x0800e7e5
 800e1c8:	0800e7e5 	.word	0x0800e7e5
 800e1cc:	0800e7e5 	.word	0x0800e7e5
 800e1d0:	0800e7e5 	.word	0x0800e7e5
 800e1d4:	0800e7e5 	.word	0x0800e7e5
 800e1d8:	0800e7e5 	.word	0x0800e7e5
 800e1dc:	0800e7e5 	.word	0x0800e7e5
 800e1e0:	0800e7e5 	.word	0x0800e7e5
 800e1e4:	0800e7e5 	.word	0x0800e7e5
 800e1e8:	0800e7e5 	.word	0x0800e7e5
 800e1ec:	0800e7e5 	.word	0x0800e7e5
 800e1f0:	0800e7e5 	.word	0x0800e7e5
 800e1f4:	0800e7e5 	.word	0x0800e7e5
 800e1f8:	0800e7e5 	.word	0x0800e7e5
 800e1fc:	0800e5a1 	.word	0x0800e5a1
 800e200:	0800e559 	.word	0x0800e559
 800e204:	0800e5a1 	.word	0x0800e5a1
 800e208:	0800e7e5 	.word	0x0800e7e5
 800e20c:	0800e7e5 	.word	0x0800e7e5
 800e210:	0800e7e5 	.word	0x0800e7e5
 800e214:	0800e7e5 	.word	0x0800e7e5
 800e218:	0800e7e5 	.word	0x0800e7e5
 800e21c:	0800e7e5 	.word	0x0800e7e5
 800e220:	0800e7e5 	.word	0x0800e7e5
 800e224:	0800e7e5 	.word	0x0800e7e5
 800e228:	0800e7e5 	.word	0x0800e7e5
 800e22c:	0800e7e5 	.word	0x0800e7e5
 800e230:	0800e7e5 	.word	0x0800e7e5
 800e234:	0800e7e5 	.word	0x0800e7e5
 800e238:	0800e7e5 	.word	0x0800e7e5
 800e23c:	0800e7e5 	.word	0x0800e7e5
 800e240:	0800e7e5 	.word	0x0800e7e5
 800e244:	0800e7e5 	.word	0x0800e7e5
 800e248:	0800e2cd 	.word	0x0800e2cd
 800e24c:	0800e7e5 	.word	0x0800e7e5
 800e250:	0800e7e5 	.word	0x0800e7e5
 800e254:	0800e7e5 	.word	0x0800e7e5
 800e258:	0800e7e5 	.word	0x0800e7e5
 800e25c:	0800e7e5 	.word	0x0800e7e5
 800e260:	0800e7e5 	.word	0x0800e7e5
 800e264:	0800e7e5 	.word	0x0800e7e5
 800e268:	0800e7e5 	.word	0x0800e7e5
 800e26c:	0800e7e5 	.word	0x0800e7e5
 800e270:	0800e2cd 	.word	0x0800e2cd
 800e274:	0800e609 	.word	0x0800e609
 800e278:	0800e2cd 	.word	0x0800e2cd
 800e27c:	0800e5a1 	.word	0x0800e5a1
 800e280:	0800e559 	.word	0x0800e559
 800e284:	0800e5a1 	.word	0x0800e5a1
 800e288:	0800e7e5 	.word	0x0800e7e5
 800e28c:	0800e2cd 	.word	0x0800e2cd
 800e290:	0800e7e5 	.word	0x0800e7e5
 800e294:	0800e7e5 	.word	0x0800e7e5
 800e298:	0800e7e5 	.word	0x0800e7e5
 800e29c:	0800e7e5 	.word	0x0800e7e5
 800e2a0:	0800e7e5 	.word	0x0800e7e5
 800e2a4:	0800e2cd 	.word	0x0800e2cd
 800e2a8:	0800e741 	.word	0x0800e741
 800e2ac:	0800e7e5 	.word	0x0800e7e5
 800e2b0:	0800e7e5 	.word	0x0800e7e5
 800e2b4:	0800e67d 	.word	0x0800e67d
 800e2b8:	0800e7e5 	.word	0x0800e7e5
 800e2bc:	0800e2cd 	.word	0x0800e2cd
 800e2c0:	0800e7e5 	.word	0x0800e7e5
 800e2c4:	0800e7e5 	.word	0x0800e7e5
 800e2c8:	0800e2cd 	.word	0x0800e2cd
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b78      	cmp	r3, #120	; 0x78
 800e2d2:	d003      	beq.n	800e2dc <_vsnprintf+0x414>
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	2b58      	cmp	r3, #88	; 0x58
 800e2da:	d102      	bne.n	800e2e2 <_vsnprintf+0x41a>
 800e2dc:	2310      	movs	r3, #16
 800e2de:	643b      	str	r3, [r7, #64]	; 0x40
 800e2e0:	e013      	b.n	800e30a <_vsnprintf+0x442>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b6f      	cmp	r3, #111	; 0x6f
 800e2e8:	d102      	bne.n	800e2f0 <_vsnprintf+0x428>
 800e2ea:	2308      	movs	r3, #8
 800e2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800e2ee:	e00c      	b.n	800e30a <_vsnprintf+0x442>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b62      	cmp	r3, #98	; 0x62
 800e2f6:	d102      	bne.n	800e2fe <_vsnprintf+0x436>
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	643b      	str	r3, [r7, #64]	; 0x40
 800e2fc:	e005      	b.n	800e30a <_vsnprintf+0x442>
 800e2fe:	230a      	movs	r3, #10
 800e300:	643b      	str	r3, [r7, #64]	; 0x40
 800e302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e304:	f023 0310 	bic.w	r3, r3, #16
 800e308:	657b      	str	r3, [r7, #84]	; 0x54
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	2b58      	cmp	r3, #88	; 0x58
 800e310:	d103      	bne.n	800e31a <_vsnprintf+0x452>
 800e312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e314:	f043 0320 	orr.w	r3, r3, #32
 800e318:	657b      	str	r3, [r7, #84]	; 0x54
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	2b69      	cmp	r3, #105	; 0x69
 800e320:	d007      	beq.n	800e332 <_vsnprintf+0x46a>
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	2b64      	cmp	r3, #100	; 0x64
 800e328:	d003      	beq.n	800e332 <_vsnprintf+0x46a>
 800e32a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e32c:	f023 030c 	bic.w	r3, r3, #12
 800e330:	657b      	str	r3, [r7, #84]	; 0x54
 800e332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d003      	beq.n	800e344 <_vsnprintf+0x47c>
 800e33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e33e:	f023 0301 	bic.w	r3, r3, #1
 800e342:	657b      	str	r3, [r7, #84]	; 0x54
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	2b69      	cmp	r3, #105	; 0x69
 800e34a:	d004      	beq.n	800e356 <_vsnprintf+0x48e>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b64      	cmp	r3, #100	; 0x64
 800e352:	f040 808d 	bne.w	800e470 <_vsnprintf+0x5a8>
 800e356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d02e      	beq.n	800e3be <_vsnprintf+0x4f6>
 800e360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e362:	3307      	adds	r3, #7
 800e364:	f023 0307 	bic.w	r3, r3, #7
 800e368:	f103 0208 	add.w	r2, r3, #8
 800e36c:	66ba      	str	r2, [r7, #104]	; 0x68
 800e36e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e372:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800e376:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f174 0200 	sbcs.w	r2, r4, #0
 800e380:	da02      	bge.n	800e388 <_vsnprintf+0x4c0>
 800e382:	425b      	negs	r3, r3
 800e384:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800e388:	4619      	mov	r1, r3
 800e38a:	4622      	mov	r2, r4
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	0fdb      	lsrs	r3, r3, #31
 800e390:	b2d8      	uxtb	r0, r3
 800e392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e394:	f04f 0400 	mov.w	r4, #0
 800e398:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800e39a:	9508      	str	r5, [sp, #32]
 800e39c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800e39e:	9507      	str	r5, [sp, #28]
 800e3a0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800e3a2:	9506      	str	r5, [sp, #24]
 800e3a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e3a8:	9002      	str	r0, [sp, #8]
 800e3aa:	e9cd 1200 	strd	r1, r2, [sp]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3b2:	68b9      	ldr	r1, [r7, #8]
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f7ff f8be 	bl	800d536 <_ntoa_long_long>
 800e3ba:	6478      	str	r0, [r7, #68]	; 0x44
 800e3bc:	e0c8      	b.n	800e550 <_vsnprintf+0x688>
 800e3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d01e      	beq.n	800e406 <_vsnprintf+0x53e>
 800e3c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3ca:	1d1a      	adds	r2, r3, #4
 800e3cc:	66ba      	str	r2, [r7, #104]	; 0x68
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	61fb      	str	r3, [r7, #28]
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	bfb8      	it	lt
 800e3d8:	425b      	neglt	r3, r3
 800e3da:	4619      	mov	r1, r3
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	0fdb      	lsrs	r3, r3, #31
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3e4:	9205      	str	r2, [sp, #20]
 800e3e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3e8:	9204      	str	r2, [sp, #16]
 800e3ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3ec:	9203      	str	r2, [sp, #12]
 800e3ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3f0:	9202      	str	r2, [sp, #8]
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	9100      	str	r1, [sp, #0]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3fa:	68b9      	ldr	r1, [r7, #8]
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7ff f833 	bl	800d468 <_ntoa_long>
 800e402:	6478      	str	r0, [r7, #68]	; 0x44
 800e404:	e0a4      	b.n	800e550 <_vsnprintf+0x688>
 800e406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <_vsnprintf+0x554>
 800e410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e412:	1d1a      	adds	r2, r3, #4
 800e414:	66ba      	str	r2, [r7, #104]	; 0x68
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	e00e      	b.n	800e43a <_vsnprintf+0x572>
 800e41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e422:	2b00      	cmp	r3, #0
 800e424:	d005      	beq.n	800e432 <_vsnprintf+0x56a>
 800e426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e428:	1d1a      	adds	r2, r3, #4
 800e42a:	66ba      	str	r2, [r7, #104]	; 0x68
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	b21b      	sxth	r3, r3
 800e430:	e003      	b.n	800e43a <_vsnprintf+0x572>
 800e432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e434:	1d1a      	adds	r2, r3, #4
 800e436:	66ba      	str	r2, [r7, #104]	; 0x68
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	623b      	str	r3, [r7, #32]
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	bfb8      	it	lt
 800e442:	425b      	neglt	r3, r3
 800e444:	4619      	mov	r1, r3
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	0fdb      	lsrs	r3, r3, #31
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e44e:	9205      	str	r2, [sp, #20]
 800e450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e452:	9204      	str	r2, [sp, #16]
 800e454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e456:	9203      	str	r2, [sp, #12]
 800e458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e45a:	9202      	str	r2, [sp, #8]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	9100      	str	r1, [sp, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e464:	68b9      	ldr	r1, [r7, #8]
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f7fe fffe 	bl	800d468 <_ntoa_long>
 800e46c:	6478      	str	r0, [r7, #68]	; 0x44
 800e46e:	e06f      	b.n	800e550 <_vsnprintf+0x688>
 800e470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e476:	2b00      	cmp	r3, #0
 800e478:	d020      	beq.n	800e4bc <_vsnprintf+0x5f4>
 800e47a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e47c:	3307      	adds	r3, #7
 800e47e:	f023 0307 	bic.w	r3, r3, #7
 800e482:	f103 0208 	add.w	r2, r3, #8
 800e486:	66ba      	str	r2, [r7, #104]	; 0x68
 800e488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e48c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e48e:	4611      	mov	r1, r2
 800e490:	f04f 0200 	mov.w	r2, #0
 800e494:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e496:	9008      	str	r0, [sp, #32]
 800e498:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e49a:	9007      	str	r0, [sp, #28]
 800e49c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e49e:	9006      	str	r0, [sp, #24]
 800e4a0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	9202      	str	r2, [sp, #8]
 800e4a8:	e9cd 3400 	strd	r3, r4, [sp]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7ff f83f 	bl	800d536 <_ntoa_long_long>
 800e4b8:	6478      	str	r0, [r7, #68]	; 0x44
 800e4ba:	e049      	b.n	800e550 <_vsnprintf+0x688>
 800e4bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d016      	beq.n	800e4f4 <_vsnprintf+0x62c>
 800e4c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4c8:	1d1a      	adds	r2, r3, #4
 800e4ca:	66ba      	str	r2, [r7, #104]	; 0x68
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4d0:	9205      	str	r2, [sp, #20]
 800e4d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4d4:	9204      	str	r2, [sp, #16]
 800e4d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4d8:	9203      	str	r2, [sp, #12]
 800e4da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4dc:	9202      	str	r2, [sp, #8]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	9201      	str	r2, [sp, #4]
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4e8:	68b9      	ldr	r1, [r7, #8]
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7fe ffbc 	bl	800d468 <_ntoa_long>
 800e4f0:	6478      	str	r0, [r7, #68]	; 0x44
 800e4f2:	e02d      	b.n	800e550 <_vsnprintf+0x688>
 800e4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d005      	beq.n	800e50a <_vsnprintf+0x642>
 800e4fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e500:	1d1a      	adds	r2, r3, #4
 800e502:	66ba      	str	r2, [r7, #104]	; 0x68
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	b2db      	uxtb	r3, r3
 800e508:	e00e      	b.n	800e528 <_vsnprintf+0x660>
 800e50a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e510:	2b00      	cmp	r3, #0
 800e512:	d005      	beq.n	800e520 <_vsnprintf+0x658>
 800e514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e516:	1d1a      	adds	r2, r3, #4
 800e518:	66ba      	str	r2, [r7, #104]	; 0x68
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	e003      	b.n	800e528 <_vsnprintf+0x660>
 800e520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e522:	1d1a      	adds	r2, r3, #4
 800e524:	66ba      	str	r2, [r7, #104]	; 0x68
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	627b      	str	r3, [r7, #36]	; 0x24
 800e52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e530:	9304      	str	r3, [sp, #16]
 800e532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e538:	9302      	str	r3, [sp, #8]
 800e53a:	2300      	movs	r3, #0
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e546:	68b9      	ldr	r1, [r7, #8]
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f7fe ff8d 	bl	800d468 <_ntoa_long>
 800e54e:	6478      	str	r0, [r7, #68]	; 0x44
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	603b      	str	r3, [r7, #0]
 800e556:	e152      	b.n	800e7fe <_vsnprintf+0x936>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	2b46      	cmp	r3, #70	; 0x46
 800e55e:	d103      	bne.n	800e568 <_vsnprintf+0x6a0>
 800e560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e562:	f043 0320 	orr.w	r3, r3, #32
 800e566:	657b      	str	r3, [r7, #84]	; 0x54
 800e568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e56a:	3307      	adds	r3, #7
 800e56c:	f023 0307 	bic.w	r3, r3, #7
 800e570:	f103 0208 	add.w	r2, r3, #8
 800e574:	66ba      	str	r2, [r7, #104]	; 0x68
 800e576:	ed93 7b00 	vldr	d7, [r3]
 800e57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e57c:	9302      	str	r3, [sp, #8]
 800e57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e580:	9301      	str	r3, [sp, #4]
 800e582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e584:	9300      	str	r3, [sp, #0]
 800e586:	eeb0 0b47 	vmov.f64	d0, d7
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e58e:	68b9      	ldr	r1, [r7, #8]
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f7ff f841 	bl	800d618 <_ftoa>
 800e596:	6478      	str	r0, [r7, #68]	; 0x44
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	603b      	str	r3, [r7, #0]
 800e59e:	e12e      	b.n	800e7fe <_vsnprintf+0x936>
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	2b67      	cmp	r3, #103	; 0x67
 800e5a6:	d003      	beq.n	800e5b0 <_vsnprintf+0x6e8>
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2b47      	cmp	r3, #71	; 0x47
 800e5ae:	d103      	bne.n	800e5b8 <_vsnprintf+0x6f0>
 800e5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e5b6:	657b      	str	r3, [r7, #84]	; 0x54
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	2b45      	cmp	r3, #69	; 0x45
 800e5be:	d003      	beq.n	800e5c8 <_vsnprintf+0x700>
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	2b47      	cmp	r3, #71	; 0x47
 800e5c6:	d103      	bne.n	800e5d0 <_vsnprintf+0x708>
 800e5c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ca:	f043 0320 	orr.w	r3, r3, #32
 800e5ce:	657b      	str	r3, [r7, #84]	; 0x54
 800e5d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5d2:	3307      	adds	r3, #7
 800e5d4:	f023 0307 	bic.w	r3, r3, #7
 800e5d8:	f103 0208 	add.w	r2, r3, #8
 800e5dc:	66ba      	str	r2, [r7, #104]	; 0x68
 800e5de:	ed93 7b00 	vldr	d7, [r3]
 800e5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e4:	9302      	str	r3, [sp, #8]
 800e5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	eeb0 0b47 	vmov.f64	d0, d7
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5f6:	68b9      	ldr	r1, [r7, #8]
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f7ff fa5d 	bl	800dab8 <_etoa>
 800e5fe:	6478      	str	r0, [r7, #68]	; 0x44
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	603b      	str	r3, [r7, #0]
 800e606:	e0fa      	b.n	800e7fe <_vsnprintf+0x936>
 800e608:	2301      	movs	r3, #1
 800e60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e60c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e60e:	f003 0302 	and.w	r3, r3, #2
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10e      	bne.n	800e634 <_vsnprintf+0x76c>
 800e616:	e007      	b.n	800e628 <_vsnprintf+0x760>
 800e618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e61a:	1c53      	adds	r3, r2, #1
 800e61c:	647b      	str	r3, [r7, #68]	; 0x44
 800e61e:	68fc      	ldr	r4, [r7, #12]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	68b9      	ldr	r1, [r7, #8]
 800e624:	2020      	movs	r0, #32
 800e626:	47a0      	blx	r4
 800e628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e62e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e630:	429a      	cmp	r2, r3
 800e632:	d8f1      	bhi.n	800e618 <_vsnprintf+0x750>
 800e634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e636:	1d1a      	adds	r2, r3, #4
 800e638:	66ba      	str	r2, [r7, #104]	; 0x68
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	b2d8      	uxtb	r0, r3
 800e63e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e640:	1c53      	adds	r3, r2, #1
 800e642:	647b      	str	r3, [r7, #68]	; 0x44
 800e644:	68fc      	ldr	r4, [r7, #12]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68b9      	ldr	r1, [r7, #8]
 800e64a:	47a0      	blx	r4
 800e64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e64e:	f003 0302 	and.w	r3, r3, #2
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00e      	beq.n	800e674 <_vsnprintf+0x7ac>
 800e656:	e007      	b.n	800e668 <_vsnprintf+0x7a0>
 800e658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e65a:	1c53      	adds	r3, r2, #1
 800e65c:	647b      	str	r3, [r7, #68]	; 0x44
 800e65e:	68fc      	ldr	r4, [r7, #12]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	68b9      	ldr	r1, [r7, #8]
 800e664:	2020      	movs	r0, #32
 800e666:	47a0      	blx	r4
 800e668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e66e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e670:	429a      	cmp	r2, r3
 800e672:	d8f1      	bhi.n	800e658 <_vsnprintf+0x790>
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	3301      	adds	r3, #1
 800e678:	603b      	str	r3, [r7, #0]
 800e67a:	e0c0      	b.n	800e7fe <_vsnprintf+0x936>
 800e67c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e67e:	1d1a      	adds	r2, r3, #4
 800e680:	66ba      	str	r2, [r7, #104]	; 0x68
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	63bb      	str	r3, [r7, #56]	; 0x38
 800e686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <_vsnprintf+0x7c8>
 800e68c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e68e:	e001      	b.n	800e694 <_vsnprintf+0x7cc>
 800e690:	f04f 33ff 	mov.w	r3, #4294967295
 800e694:	4619      	mov	r1, r3
 800e696:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e698:	f7fe fd62 	bl	800d160 <_strnlen_s>
 800e69c:	6378      	str	r0, [r7, #52]	; 0x34
 800e69e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d005      	beq.n	800e6b4 <_vsnprintf+0x7ec>
 800e6a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	bf28      	it	cs
 800e6b0:	4613      	movcs	r3, r2
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e6b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6b6:	f003 0302 	and.w	r3, r3, #2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d11a      	bne.n	800e6f4 <_vsnprintf+0x82c>
 800e6be:	e007      	b.n	800e6d0 <_vsnprintf+0x808>
 800e6c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6c2:	1c53      	adds	r3, r2, #1
 800e6c4:	647b      	str	r3, [r7, #68]	; 0x44
 800e6c6:	68fc      	ldr	r4, [r7, #12]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	68b9      	ldr	r1, [r7, #8]
 800e6cc:	2020      	movs	r0, #32
 800e6ce:	47a0      	blx	r4
 800e6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	637a      	str	r2, [r7, #52]	; 0x34
 800e6d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d8f1      	bhi.n	800e6c0 <_vsnprintf+0x7f8>
 800e6dc:	e00a      	b.n	800e6f4 <_vsnprintf+0x82c>
 800e6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	63ba      	str	r2, [r7, #56]	; 0x38
 800e6e4:	7818      	ldrb	r0, [r3, #0]
 800e6e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e8:	1c53      	adds	r3, r2, #1
 800e6ea:	647b      	str	r3, [r7, #68]	; 0x44
 800e6ec:	68fc      	ldr	r4, [r7, #12]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68b9      	ldr	r1, [r7, #8]
 800e6f2:	47a0      	blx	r4
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d009      	beq.n	800e710 <_vsnprintf+0x848>
 800e6fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e702:	2b00      	cmp	r3, #0
 800e704:	d0eb      	beq.n	800e6de <_vsnprintf+0x816>
 800e706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e708:	1e5a      	subs	r2, r3, #1
 800e70a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d1e6      	bne.n	800e6de <_vsnprintf+0x816>
 800e710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e712:	f003 0302 	and.w	r3, r3, #2
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00e      	beq.n	800e738 <_vsnprintf+0x870>
 800e71a:	e007      	b.n	800e72c <_vsnprintf+0x864>
 800e71c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e71e:	1c53      	adds	r3, r2, #1
 800e720:	647b      	str	r3, [r7, #68]	; 0x44
 800e722:	68fc      	ldr	r4, [r7, #12]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68b9      	ldr	r1, [r7, #8]
 800e728:	2020      	movs	r0, #32
 800e72a:	47a0      	blx	r4
 800e72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	637a      	str	r2, [r7, #52]	; 0x34
 800e732:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e734:	429a      	cmp	r2, r3
 800e736:	d8f1      	bhi.n	800e71c <_vsnprintf+0x854>
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	3301      	adds	r3, #1
 800e73c:	603b      	str	r3, [r7, #0]
 800e73e:	e05e      	b.n	800e7fe <_vsnprintf+0x936>
 800e740:	2308      	movs	r3, #8
 800e742:	653b      	str	r3, [r7, #80]	; 0x50
 800e744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e746:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800e74a:	657b      	str	r3, [r7, #84]	; 0x54
 800e74c:	2300      	movs	r3, #0
 800e74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e756:	2b00      	cmp	r3, #0
 800e758:	d01d      	beq.n	800e796 <_vsnprintf+0x8ce>
 800e75a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e75c:	1d1a      	adds	r2, r3, #4
 800e75e:	66ba      	str	r2, [r7, #104]	; 0x68
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f04f 0400 	mov.w	r4, #0
 800e766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e768:	9208      	str	r2, [sp, #32]
 800e76a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e76c:	9207      	str	r2, [sp, #28]
 800e76e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e770:	9206      	str	r2, [sp, #24]
 800e772:	f04f 0110 	mov.w	r1, #16
 800e776:	f04f 0200 	mov.w	r2, #0
 800e77a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e77e:	2200      	movs	r2, #0
 800e780:	9202      	str	r2, [sp, #8]
 800e782:	e9cd 3400 	strd	r3, r4, [sp]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e78a:	68b9      	ldr	r1, [r7, #8]
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f7fe fed2 	bl	800d536 <_ntoa_long_long>
 800e792:	6478      	str	r0, [r7, #68]	; 0x44
 800e794:	e016      	b.n	800e7c4 <_vsnprintf+0x8fc>
 800e796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e798:	1d1a      	adds	r2, r3, #4
 800e79a:	66ba      	str	r2, [r7, #104]	; 0x68
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7a2:	9305      	str	r3, [sp, #20]
 800e7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a6:	9304      	str	r3, [sp, #16]
 800e7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7aa:	9303      	str	r3, [sp, #12]
 800e7ac:	2310      	movs	r3, #16
 800e7ae:	9302      	str	r3, [sp, #8]
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	9200      	str	r2, [sp, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7fe fe53 	bl	800d468 <_ntoa_long>
 800e7c2:	6478      	str	r0, [r7, #68]	; 0x44
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	603b      	str	r3, [r7, #0]
 800e7ca:	e018      	b.n	800e7fe <_vsnprintf+0x936>
 800e7cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ce:	1c53      	adds	r3, r2, #1
 800e7d0:	647b      	str	r3, [r7, #68]	; 0x44
 800e7d2:	68fc      	ldr	r4, [r7, #12]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	2025      	movs	r0, #37	; 0x25
 800e7da:	47a0      	blx	r4
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	603b      	str	r3, [r7, #0]
 800e7e2:	e00c      	b.n	800e7fe <_vsnprintf+0x936>
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	7818      	ldrb	r0, [r3, #0]
 800e7e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ea:	1c53      	adds	r3, r2, #1
 800e7ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e7ee:	68fc      	ldr	r4, [r7, #12]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	68b9      	ldr	r1, [r7, #8]
 800e7f4:	47a0      	blx	r4
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	603b      	str	r3, [r7, #0]
 800e7fc:	bf00      	nop
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	f47f ab71 	bne.w	800deea <_vsnprintf+0x22>
 800e808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d302      	bcc.n	800e816 <_vsnprintf+0x94e>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	1e5a      	subs	r2, r3, #1
 800e814:	e000      	b.n	800e818 <_vsnprintf+0x950>
 800e816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e818:	68fc      	ldr	r4, [r7, #12]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	2000      	movs	r0, #0
 800e820:	47a0      	blx	r4
 800e822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e824:	4618      	mov	r0, r3
 800e826:	3758      	adds	r7, #88	; 0x58
 800e828:	46bd      	mov	sp, r7
 800e82a:	bdb0      	pop	{r4, r5, r7, pc}

0800e82c <snprintf_>:
 800e82c:	b40c      	push	{r2, r3}
 800e82e:	b580      	push	{r7, lr}
 800e830:	b086      	sub	sp, #24
 800e832:	af02      	add	r7, sp, #8
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	6039      	str	r1, [r7, #0]
 800e838:	f107 031c 	add.w	r3, r7, #28
 800e83c:	60bb      	str	r3, [r7, #8]
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	6879      	ldr	r1, [r7, #4]
 800e848:	4805      	ldr	r0, [pc, #20]	; (800e860 <snprintf_+0x34>)
 800e84a:	f7ff fb3d 	bl	800dec8 <_vsnprintf>
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e85c:	b002      	add	sp, #8
 800e85e:	4770      	bx	lr
 800e860:	0800d117 	.word	0x0800d117

0800e864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e86a:	4b11      	ldr	r3, [pc, #68]	; (800e8b0 <HAL_MspInit+0x4c>)
 800e86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86e:	4a10      	ldr	r2, [pc, #64]	; (800e8b0 <HAL_MspInit+0x4c>)
 800e870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e874:	6413      	str	r3, [r2, #64]	; 0x40
 800e876:	4b0e      	ldr	r3, [pc, #56]	; (800e8b0 <HAL_MspInit+0x4c>)
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e87e:	607b      	str	r3, [r7, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e882:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <HAL_MspInit+0x4c>)
 800e884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e886:	4a0a      	ldr	r2, [pc, #40]	; (800e8b0 <HAL_MspInit+0x4c>)
 800e888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e88c:	6453      	str	r3, [r2, #68]	; 0x44
 800e88e:	4b08      	ldr	r3, [pc, #32]	; (800e8b0 <HAL_MspInit+0x4c>)
 800e890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e896:	603b      	str	r3, [r7, #0]
 800e898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e89a:	2200      	movs	r2, #0
 800e89c:	210f      	movs	r1, #15
 800e89e:	f06f 0001 	mvn.w	r0, #1
 800e8a2:	f000 fb3e 	bl	800ef22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e8a6:	bf00      	nop
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	40023800 	.word	0x40023800

0800e8b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	; 0x28
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8bc:	f107 0314 	add.w	r3, r7, #20
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	605a      	str	r2, [r3, #4]
 800e8c6:	609a      	str	r2, [r3, #8]
 800e8c8:	60da      	str	r2, [r3, #12]
 800e8ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a17      	ldr	r2, [pc, #92]	; (800e930 <HAL_I2C_MspInit+0x7c>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d128      	bne.n	800e928 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e8d6:	4b17      	ldr	r3, [pc, #92]	; (800e934 <HAL_I2C_MspInit+0x80>)
 800e8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8da:	4a16      	ldr	r2, [pc, #88]	; (800e934 <HAL_I2C_MspInit+0x80>)
 800e8dc:	f043 0302 	orr.w	r3, r3, #2
 800e8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800e8e2:	4b14      	ldr	r3, [pc, #80]	; (800e934 <HAL_I2C_MspInit+0x80>)
 800e8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e6:	f003 0302 	and.w	r3, r3, #2
 800e8ea:	613b      	str	r3, [r7, #16]
 800e8ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e8ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e8f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e8f4:	2312      	movs	r3, #18
 800e8f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e900:	2304      	movs	r3, #4
 800e902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e904:	f107 0314 	add.w	r3, r7, #20
 800e908:	4619      	mov	r1, r3
 800e90a:	480b      	ldr	r0, [pc, #44]	; (800e938 <HAL_I2C_MspInit+0x84>)
 800e90c:	f000 fed8 	bl	800f6c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e910:	4b08      	ldr	r3, [pc, #32]	; (800e934 <HAL_I2C_MspInit+0x80>)
 800e912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e914:	4a07      	ldr	r2, [pc, #28]	; (800e934 <HAL_I2C_MspInit+0x80>)
 800e916:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e91a:	6413      	str	r3, [r2, #64]	; 0x40
 800e91c:	4b05      	ldr	r3, [pc, #20]	; (800e934 <HAL_I2C_MspInit+0x80>)
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e924:	60fb      	str	r3, [r7, #12]
 800e926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800e928:	bf00      	nop
 800e92a:	3728      	adds	r7, #40	; 0x28
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	40005800 	.word	0x40005800
 800e934:	40023800 	.word	0x40023800
 800e938:	40020400 	.word	0x40020400

0800e93c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08a      	sub	sp, #40	; 0x28
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e944:	f107 0314 	add.w	r3, r7, #20
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	605a      	str	r2, [r3, #4]
 800e94e:	609a      	str	r2, [r3, #8]
 800e950:	60da      	str	r2, [r3, #12]
 800e952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a45      	ldr	r2, [pc, #276]	; (800ea70 <HAL_SPI_MspInit+0x134>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	f040 8084 	bne.w	800ea68 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e960:	4b44      	ldr	r3, [pc, #272]	; (800ea74 <HAL_SPI_MspInit+0x138>)
 800e962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e964:	4a43      	ldr	r2, [pc, #268]	; (800ea74 <HAL_SPI_MspInit+0x138>)
 800e966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e96a:	6453      	str	r3, [r2, #68]	; 0x44
 800e96c:	4b41      	ldr	r3, [pc, #260]	; (800ea74 <HAL_SPI_MspInit+0x138>)
 800e96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e974:	613b      	str	r3, [r7, #16]
 800e976:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e978:	4b3e      	ldr	r3, [pc, #248]	; (800ea74 <HAL_SPI_MspInit+0x138>)
 800e97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97c:	4a3d      	ldr	r2, [pc, #244]	; (800ea74 <HAL_SPI_MspInit+0x138>)
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	6313      	str	r3, [r2, #48]	; 0x30
 800e984:	4b3b      	ldr	r3, [pc, #236]	; (800ea74 <HAL_SPI_MspInit+0x138>)
 800e986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	60fb      	str	r3, [r7, #12]
 800e98e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e990:	23e0      	movs	r3, #224	; 0xe0
 800e992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e994:	2302      	movs	r3, #2
 800e996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e998:	2300      	movs	r3, #0
 800e99a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e99c:	2303      	movs	r3, #3
 800e99e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e9a0:	2305      	movs	r3, #5
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9a4:	f107 0314 	add.w	r3, r7, #20
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	4833      	ldr	r0, [pc, #204]	; (800ea78 <HAL_SPI_MspInit+0x13c>)
 800e9ac:	f000 fe88 	bl	800f6c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800e9b0:	4b32      	ldr	r3, [pc, #200]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9b2:	4a33      	ldr	r2, [pc, #204]	; (800ea80 <HAL_SPI_MspInit+0x144>)
 800e9b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800e9b6:	4b31      	ldr	r3, [pc, #196]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e9bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e9be:	4b2f      	ldr	r3, [pc, #188]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e9c4:	4b2d      	ldr	r3, [pc, #180]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e9ca:	4b2c      	ldr	r3, [pc, #176]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e9d2:	4b2a      	ldr	r3, [pc, #168]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e9d8:	4b28      	ldr	r3, [pc, #160]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9da:	2200      	movs	r2, #0
 800e9dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800e9de:	4b27      	ldr	r3, [pc, #156]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e9e4:	4b25      	ldr	r3, [pc, #148]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e9ea:	4b24      	ldr	r3, [pc, #144]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800e9f0:	4822      	ldr	r0, [pc, #136]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800e9f2:	f000 facd 	bl	800ef90 <HAL_DMA_Init>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800e9fc:	f7fe fb84 	bl	800d108 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a1e      	ldr	r2, [pc, #120]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800ea04:	659a      	str	r2, [r3, #88]	; 0x58
 800ea06:	4a1d      	ldr	r2, [pc, #116]	; (800ea7c <HAL_SPI_MspInit+0x140>)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800ea0c:	4b1d      	ldr	r3, [pc, #116]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea0e:	4a1e      	ldr	r2, [pc, #120]	; (800ea88 <HAL_SPI_MspInit+0x14c>)
 800ea10:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800ea12:	4b1c      	ldr	r3, [pc, #112]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea14:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800ea18:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ea1a:	4b1a      	ldr	r3, [pc, #104]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea1c:	2240      	movs	r2, #64	; 0x40
 800ea1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ea20:	4b18      	ldr	r3, [pc, #96]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ea26:	4b17      	ldr	r3, [pc, #92]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ea2e:	4b15      	ldr	r3, [pc, #84]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ea34:	4b13      	ldr	r3, [pc, #76]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800ea3a:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ea40:	4b10      	ldr	r3, [pc, #64]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ea46:	4b0f      	ldr	r3, [pc, #60]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800ea4c:	480d      	ldr	r0, [pc, #52]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea4e:	f000 fa9f 	bl	800ef90 <HAL_DMA_Init>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800ea58:	f7fe fb56 	bl	800d108 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a09      	ldr	r2, [pc, #36]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea60:	655a      	str	r2, [r3, #84]	; 0x54
 800ea62:	4a08      	ldr	r2, [pc, #32]	; (800ea84 <HAL_SPI_MspInit+0x148>)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ea68:	bf00      	nop
 800ea6a:	3728      	adds	r7, #40	; 0x28
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	40013000 	.word	0x40013000
 800ea74:	40023800 	.word	0x40023800
 800ea78:	40020000 	.word	0x40020000
 800ea7c:	2006634c 	.word	0x2006634c
 800ea80:	40026410 	.word	0x40026410
 800ea84:	2006a3ac 	.word	0x2006a3ac
 800ea88:	40026458 	.word	0x40026458

0800ea8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b08a      	sub	sp, #40	; 0x28
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea94:	f107 0314 	add.w	r3, r7, #20
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	605a      	str	r2, [r3, #4]
 800ea9e:	609a      	str	r2, [r3, #8]
 800eaa0:	60da      	str	r2, [r3, #12]
 800eaa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a32      	ldr	r2, [pc, #200]	; (800eb74 <HAL_UART_MspInit+0xe8>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d15d      	bne.n	800eb6a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800eaae:	4b32      	ldr	r3, [pc, #200]	; (800eb78 <HAL_UART_MspInit+0xec>)
 800eab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab2:	4a31      	ldr	r2, [pc, #196]	; (800eb78 <HAL_UART_MspInit+0xec>)
 800eab4:	f043 0320 	orr.w	r3, r3, #32
 800eab8:	6453      	str	r3, [r2, #68]	; 0x44
 800eaba:	4b2f      	ldr	r3, [pc, #188]	; (800eb78 <HAL_UART_MspInit+0xec>)
 800eabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eabe:	f003 0320 	and.w	r3, r3, #32
 800eac2:	613b      	str	r3, [r7, #16]
 800eac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eac6:	4b2c      	ldr	r3, [pc, #176]	; (800eb78 <HAL_UART_MspInit+0xec>)
 800eac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaca:	4a2b      	ldr	r2, [pc, #172]	; (800eb78 <HAL_UART_MspInit+0xec>)
 800eacc:	f043 0304 	orr.w	r3, r3, #4
 800ead0:	6313      	str	r3, [r2, #48]	; 0x30
 800ead2:	4b29      	ldr	r3, [pc, #164]	; (800eb78 <HAL_UART_MspInit+0xec>)
 800ead4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ead6:	f003 0304 	and.w	r3, r3, #4
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800eade:	23c0      	movs	r3, #192	; 0xc0
 800eae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eae2:	2302      	movs	r3, #2
 800eae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eaea:	2303      	movs	r3, #3
 800eaec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800eaee:	2308      	movs	r3, #8
 800eaf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eaf2:	f107 0314 	add.w	r3, r7, #20
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4820      	ldr	r0, [pc, #128]	; (800eb7c <HAL_UART_MspInit+0xf0>)
 800eafa:	f000 fde1 	bl	800f6c0 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800eafe:	4b20      	ldr	r3, [pc, #128]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb00:	4a20      	ldr	r2, [pc, #128]	; (800eb84 <HAL_UART_MspInit+0xf8>)
 800eb02:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800eb04:	4b1e      	ldr	r3, [pc, #120]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb06:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800eb0a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eb0c:	4b1c      	ldr	r3, [pc, #112]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb0e:	2240      	movs	r2, #64	; 0x40
 800eb10:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb12:	4b1b      	ldr	r3, [pc, #108]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eb18:	4b19      	ldr	r3, [pc, #100]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb1e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb20:	4b17      	ldr	r3, [pc, #92]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb26:	4b16      	ldr	r3, [pc, #88]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800eb2c:	4b14      	ldr	r3, [pc, #80]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800eb32:	4b13      	ldr	r3, [pc, #76]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb38:	4b11      	ldr	r3, [pc, #68]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800eb3e:	4810      	ldr	r0, [pc, #64]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb40:	f000 fa26 	bl	800ef90 <HAL_DMA_Init>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800eb4a:	f7fe fadd 	bl	800d108 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a0b      	ldr	r2, [pc, #44]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb52:	669a      	str	r2, [r3, #104]	; 0x68
 800eb54:	4a0a      	ldr	r2, [pc, #40]	; (800eb80 <HAL_UART_MspInit+0xf4>)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	2103      	movs	r1, #3
 800eb5e:	2047      	movs	r0, #71	; 0x47
 800eb60:	f000 f9df 	bl	800ef22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800eb64:	2047      	movs	r0, #71	; 0x47
 800eb66:	f000 f9f8 	bl	800ef5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800eb6a:	bf00      	nop
 800eb6c:	3728      	adds	r7, #40	; 0x28
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	40011400 	.word	0x40011400
 800eb78:	40023800 	.word	0x40023800
 800eb7c:	40020800 	.word	0x40020800
 800eb80:	2005dfb4 	.word	0x2005dfb4
 800eb84:	400264a0 	.word	0x400264a0

0800eb88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800eb8c:	bf00      	nop
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800eb96:	b480      	push	{r7}
 800eb98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800eb9a:	e7fe      	b.n	800eb9a <HardFault_Handler+0x4>

0800eb9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800eba0:	e7fe      	b.n	800eba0 <MemManage_Handler+0x4>

0800eba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800eba2:	b480      	push	{r7}
 800eba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800eba6:	e7fe      	b.n	800eba6 <BusFault_Handler+0x4>

0800eba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ebac:	e7fe      	b.n	800ebac <UsageFault_Handler+0x4>

0800ebae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ebb2:	bf00      	nop
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ebc0:	f000 f8b4 	bl	800ed2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ebc4:	f006 fbc2 	bl	801534c <xTaskGetSchedulerState>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d001      	beq.n	800ebd2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ebce:	f006 ff93 	bl	8015af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ebd2:	bf00      	nop
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800ebda:	2008      	movs	r0, #8
 800ebdc:	f000 ff66 	bl	800faac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800ebe0:	bf00      	nop
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800ebe8:	4802      	ldr	r0, [pc, #8]	; (800ebf4 <DMA2_Stream0_IRQHandler+0x10>)
 800ebea:	f000 fb01 	bl	800f1f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ebee:	bf00      	nop
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2006634c 	.word	0x2006634c

0800ebf8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800ebfc:	4802      	ldr	r0, [pc, #8]	; (800ec08 <DMA2_Stream3_IRQHandler+0x10>)
 800ebfe:	f000 faf7 	bl	800f1f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800ec02:	bf00      	nop
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	2006a3ac 	.word	0x2006a3ac

0800ec0c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800ec10:	4802      	ldr	r0, [pc, #8]	; (800ec1c <DMA2_Stream6_IRQHandler+0x10>)
 800ec12:	f000 faed 	bl	800f1f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800ec16:	bf00      	nop
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	2005dfb4 	.word	0x2005dfb4

0800ec20 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800ec24:	4802      	ldr	r0, [pc, #8]	; (800ec30 <USART6_IRQHandler+0x10>)
 800ec26:	f003 fe47 	bl	80128b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800ec2a:	bf00      	nop
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20066260 	.word	0x20066260

0800ec34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ec34:	b480      	push	{r7}
 800ec36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ec38:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <SystemInit+0x24>)
 800ec3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec3e:	4a06      	ldr	r2, [pc, #24]	; (800ec58 <SystemInit+0x24>)
 800ec40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800ec48:	4b03      	ldr	r3, [pc, #12]	; (800ec58 <SystemInit+0x24>)
 800ec4a:	4a04      	ldr	r2, [pc, #16]	; (800ec5c <SystemInit+0x28>)
 800ec4c:	609a      	str	r2, [r3, #8]
#endif
}
 800ec4e:	bf00      	nop
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	e000ed00 	.word	0xe000ed00
 800ec5c:	08008000 	.word	0x08008000

0800ec60 <Reset_Handler>:
 800ec60:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ec98 <LoopFillZerobss+0x14>
 800ec64:	2100      	movs	r1, #0
 800ec66:	e003      	b.n	800ec70 <LoopCopyDataInit>

0800ec68 <CopyDataInit>:
 800ec68:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <LoopFillZerobss+0x18>)
 800ec6a:	585b      	ldr	r3, [r3, r1]
 800ec6c:	5043      	str	r3, [r0, r1]
 800ec6e:	3104      	adds	r1, #4

0800ec70 <LoopCopyDataInit>:
 800ec70:	480b      	ldr	r0, [pc, #44]	; (800eca0 <LoopFillZerobss+0x1c>)
 800ec72:	4b0c      	ldr	r3, [pc, #48]	; (800eca4 <LoopFillZerobss+0x20>)
 800ec74:	1842      	adds	r2, r0, r1
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d3f6      	bcc.n	800ec68 <CopyDataInit>
 800ec7a:	4a0b      	ldr	r2, [pc, #44]	; (800eca8 <LoopFillZerobss+0x24>)
 800ec7c:	e002      	b.n	800ec84 <LoopFillZerobss>

0800ec7e <FillZerobss>:
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f842 3b04 	str.w	r3, [r2], #4

0800ec84 <LoopFillZerobss>:
 800ec84:	4b09      	ldr	r3, [pc, #36]	; (800ecac <LoopFillZerobss+0x28>)
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d3f9      	bcc.n	800ec7e <FillZerobss>
 800ec8a:	f7ff ffd3 	bl	800ec34 <SystemInit>
 800ec8e:	f007 f9ad 	bl	8015fec <__libc_init_array>
 800ec92:	f7fd fa77 	bl	800c184 <main>
 800ec96:	4770      	bx	lr
 800ec98:	20080000 	.word	0x20080000
 800ec9c:	08020f30 	.word	0x08020f30
 800eca0:	20000000 	.word	0x20000000
 800eca4:	20000090 	.word	0x20000090
 800eca8:	200000a0 	.word	0x200000a0
 800ecac:	2006a41c 	.word	0x2006a41c

0800ecb0 <ADC_IRQHandler>:
 800ecb0:	e7fe      	b.n	800ecb0 <ADC_IRQHandler>

0800ecb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ecb6:	2003      	movs	r0, #3
 800ecb8:	f000 f928 	bl	800ef0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ecbc:	200f      	movs	r0, #15
 800ecbe:	f000 f805 	bl	800eccc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800ecc2:	f7ff fdcf 	bl	800e864 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ecd4:	4b12      	ldr	r3, [pc, #72]	; (800ed20 <HAL_InitTick+0x54>)
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	4b12      	ldr	r3, [pc, #72]	; (800ed24 <HAL_InitTick+0x58>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	4619      	mov	r1, r3
 800ecde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ece2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ece6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 f943 	bl	800ef76 <HAL_SYSTICK_Config>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e00e      	b.n	800ed18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2b0f      	cmp	r3, #15
 800ecfe:	d80a      	bhi.n	800ed16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed00:	2200      	movs	r2, #0
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	f04f 30ff 	mov.w	r0, #4294967295
 800ed08:	f000 f90b 	bl	800ef22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed0c:	4a06      	ldr	r2, [pc, #24]	; (800ed28 <HAL_InitTick+0x5c>)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	e000      	b.n	800ed18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ed16:	2301      	movs	r3, #1
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20000018 	.word	0x20000018
 800ed24:	20000020 	.word	0x20000020
 800ed28:	2000001c 	.word	0x2000001c

0800ed2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed30:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <HAL_IncTick+0x20>)
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	461a      	mov	r2, r3
 800ed36:	4b06      	ldr	r3, [pc, #24]	; (800ed50 <HAL_IncTick+0x24>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	4a04      	ldr	r2, [pc, #16]	; (800ed50 <HAL_IncTick+0x24>)
 800ed3e:	6013      	str	r3, [r2, #0]
}
 800ed40:	bf00      	nop
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20000020 	.word	0x20000020
 800ed50:	2006a418 	.word	0x2006a418

0800ed54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ed54:	b480      	push	{r7}
 800ed56:	af00      	add	r7, sp, #0
  return uwTick;
 800ed58:	4b03      	ldr	r3, [pc, #12]	; (800ed68 <HAL_GetTick+0x14>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	2006a418 	.word	0x2006a418

0800ed6c <__NVIC_SetPriorityGrouping>:
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ed7c:	4b0b      	ldr	r3, [pc, #44]	; (800edac <__NVIC_SetPriorityGrouping+0x40>)
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ed88:	4013      	ands	r3, r2
 800ed8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ed94:	4b06      	ldr	r3, [pc, #24]	; (800edb0 <__NVIC_SetPriorityGrouping+0x44>)
 800ed96:	4313      	orrs	r3, r2
 800ed98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ed9a:	4a04      	ldr	r2, [pc, #16]	; (800edac <__NVIC_SetPriorityGrouping+0x40>)
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	60d3      	str	r3, [r2, #12]
}
 800eda0:	bf00      	nop
 800eda2:	3714      	adds	r7, #20
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr
 800edac:	e000ed00 	.word	0xe000ed00
 800edb0:	05fa0000 	.word	0x05fa0000

0800edb4 <__NVIC_GetPriorityGrouping>:
{
 800edb4:	b480      	push	{r7}
 800edb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800edb8:	4b04      	ldr	r3, [pc, #16]	; (800edcc <__NVIC_GetPriorityGrouping+0x18>)
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	0a1b      	lsrs	r3, r3, #8
 800edbe:	f003 0307 	and.w	r3, r3, #7
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	e000ed00 	.word	0xe000ed00

0800edd0 <__NVIC_EnableIRQ>:
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	4603      	mov	r3, r0
 800edd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800edda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	db0b      	blt.n	800edfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	f003 021f 	and.w	r2, r3, #31
 800ede8:	4907      	ldr	r1, [pc, #28]	; (800ee08 <__NVIC_EnableIRQ+0x38>)
 800edea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edee:	095b      	lsrs	r3, r3, #5
 800edf0:	2001      	movs	r0, #1
 800edf2:	fa00 f202 	lsl.w	r2, r0, r2
 800edf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800edfa:	bf00      	nop
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	e000e100 	.word	0xe000e100

0800ee0c <__NVIC_SetPriority>:
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4603      	mov	r3, r0
 800ee14:	6039      	str	r1, [r7, #0]
 800ee16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	db0a      	blt.n	800ee36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	490c      	ldr	r1, [pc, #48]	; (800ee58 <__NVIC_SetPriority+0x4c>)
 800ee26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee2a:	0112      	lsls	r2, r2, #4
 800ee2c:	b2d2      	uxtb	r2, r2
 800ee2e:	440b      	add	r3, r1
 800ee30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ee34:	e00a      	b.n	800ee4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	4908      	ldr	r1, [pc, #32]	; (800ee5c <__NVIC_SetPriority+0x50>)
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	f003 030f 	and.w	r3, r3, #15
 800ee42:	3b04      	subs	r3, #4
 800ee44:	0112      	lsls	r2, r2, #4
 800ee46:	b2d2      	uxtb	r2, r2
 800ee48:	440b      	add	r3, r1
 800ee4a:	761a      	strb	r2, [r3, #24]
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	e000e100 	.word	0xe000e100
 800ee5c:	e000ed00 	.word	0xe000ed00

0800ee60 <NVIC_EncodePriority>:
{
 800ee60:	b480      	push	{r7}
 800ee62:	b089      	sub	sp, #36	; 0x24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f003 0307 	and.w	r3, r3, #7
 800ee72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	f1c3 0307 	rsb	r3, r3, #7
 800ee7a:	2b04      	cmp	r3, #4
 800ee7c:	bf28      	it	cs
 800ee7e:	2304      	movcs	r3, #4
 800ee80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	3304      	adds	r3, #4
 800ee86:	2b06      	cmp	r3, #6
 800ee88:	d902      	bls.n	800ee90 <NVIC_EncodePriority+0x30>
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	3b03      	subs	r3, #3
 800ee8e:	e000      	b.n	800ee92 <NVIC_EncodePriority+0x32>
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ee94:	f04f 32ff 	mov.w	r2, #4294967295
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee9e:	43da      	mvns	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	401a      	ands	r2, r3
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800eea8:	f04f 31ff 	mov.w	r1, #4294967295
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	fa01 f303 	lsl.w	r3, r1, r3
 800eeb2:	43d9      	mvns	r1, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800eeb8:	4313      	orrs	r3, r2
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3724      	adds	r7, #36	; 0x24
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
	...

0800eec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3b01      	subs	r3, #1
 800eed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eed8:	d301      	bcc.n	800eede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800eeda:	2301      	movs	r3, #1
 800eedc:	e00f      	b.n	800eefe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800eede:	4a0a      	ldr	r2, [pc, #40]	; (800ef08 <SysTick_Config+0x40>)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	3b01      	subs	r3, #1
 800eee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800eee6:	210f      	movs	r1, #15
 800eee8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeec:	f7ff ff8e 	bl	800ee0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800eef0:	4b05      	ldr	r3, [pc, #20]	; (800ef08 <SysTick_Config+0x40>)
 800eef2:	2200      	movs	r2, #0
 800eef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800eef6:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <SysTick_Config+0x40>)
 800eef8:	2207      	movs	r2, #7
 800eefa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3708      	adds	r7, #8
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	e000e010 	.word	0xe000e010

0800ef0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7ff ff29 	bl	800ed6c <__NVIC_SetPriorityGrouping>
}
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b086      	sub	sp, #24
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	4603      	mov	r3, r0
 800ef2a:	60b9      	str	r1, [r7, #8]
 800ef2c:	607a      	str	r2, [r7, #4]
 800ef2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ef30:	2300      	movs	r3, #0
 800ef32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ef34:	f7ff ff3e 	bl	800edb4 <__NVIC_GetPriorityGrouping>
 800ef38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	68b9      	ldr	r1, [r7, #8]
 800ef3e:	6978      	ldr	r0, [r7, #20]
 800ef40:	f7ff ff8e 	bl	800ee60 <NVIC_EncodePriority>
 800ef44:	4602      	mov	r2, r0
 800ef46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7ff ff5d 	bl	800ee0c <__NVIC_SetPriority>
}
 800ef52:	bf00      	nop
 800ef54:	3718      	adds	r7, #24
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b082      	sub	sp, #8
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	4603      	mov	r3, r0
 800ef62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ef64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7ff ff31 	bl	800edd0 <__NVIC_EnableIRQ>
}
 800ef6e:	bf00      	nop
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b082      	sub	sp, #8
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7ff ffa2 	bl	800eec8 <SysTick_Config>
 800ef84:	4603      	mov	r3, r0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
	...

0800ef90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ef9c:	f7ff feda 	bl	800ed54 <HAL_GetTick>
 800efa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d101      	bne.n	800efac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e099      	b.n	800f0e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2202      	movs	r2, #2
 800efb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f022 0201 	bic.w	r2, r2, #1
 800efca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800efcc:	e00f      	b.n	800efee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800efce:	f7ff fec1 	bl	800ed54 <HAL_GetTick>
 800efd2:	4602      	mov	r2, r0
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	1ad3      	subs	r3, r2, r3
 800efd8:	2b05      	cmp	r3, #5
 800efda:	d908      	bls.n	800efee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2220      	movs	r2, #32
 800efe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2203      	movs	r2, #3
 800efe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800efea:	2303      	movs	r3, #3
 800efec:	e078      	b.n	800f0e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d1e8      	bne.n	800efce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f004:	697a      	ldr	r2, [r7, #20]
 800f006:	4b38      	ldr	r3, [pc, #224]	; (800f0e8 <HAL_DMA_Init+0x158>)
 800f008:	4013      	ands	r3, r2
 800f00a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685a      	ldr	r2, [r3, #4]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f01a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	699b      	ldr	r3, [r3, #24]
 800f02c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a1b      	ldr	r3, [r3, #32]
 800f038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	4313      	orrs	r3, r2
 800f03e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f044:	2b04      	cmp	r3, #4
 800f046:	d107      	bne.n	800f058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f050:	4313      	orrs	r3, r2
 800f052:	697a      	ldr	r2, [r7, #20]
 800f054:	4313      	orrs	r3, r2
 800f056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f023 0307 	bic.w	r3, r3, #7
 800f06e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	4313      	orrs	r3, r2
 800f078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07e:	2b04      	cmp	r3, #4
 800f080:	d117      	bne.n	800f0b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	4313      	orrs	r3, r2
 800f08a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00e      	beq.n	800f0b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 fa99 	bl	800f5cc <DMA_CheckFifoParam>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d008      	beq.n	800f0b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2240      	movs	r2, #64	; 0x40
 800f0a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e016      	b.n	800f0e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fa50 	bl	800f560 <DMA_CalcBaseAndBitshift>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0c8:	223f      	movs	r2, #63	; 0x3f
 800f0ca:	409a      	lsls	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3718      	adds	r7, #24
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	e010803f 	.word	0xe010803f

0800f0ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d101      	bne.n	800f112 <HAL_DMA_Start_IT+0x26>
 800f10e:	2302      	movs	r3, #2
 800f110:	e048      	b.n	800f1a4 <HAL_DMA_Start_IT+0xb8>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2201      	movs	r2, #1
 800f116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b01      	cmp	r3, #1
 800f124:	d137      	bne.n	800f196 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2202      	movs	r2, #2
 800f12a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f000 f9e2 	bl	800f504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f144:	223f      	movs	r2, #63	; 0x3f
 800f146:	409a      	lsls	r2, r3
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f042 0216 	orr.w	r2, r2, #22
 800f15a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	695a      	ldr	r2, [r3, #20]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f16a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d007      	beq.n	800f184 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f042 0208 	orr.w	r2, r2, #8
 800f182:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f042 0201 	orr.w	r2, r2, #1
 800f192:	601a      	str	r2, [r3, #0]
 800f194:	e005      	b.n	800f1a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f19e:	2302      	movs	r3, #2
 800f1a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3718      	adds	r7, #24
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	d004      	beq.n	800f1ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2280      	movs	r2, #128	; 0x80
 800f1c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e00c      	b.n	800f1e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2205      	movs	r2, #5
 800f1ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f022 0201 	bic.w	r2, r2, #1
 800f1e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800f1fc:	4b92      	ldr	r3, [pc, #584]	; (800f448 <HAL_DMA_IRQHandler+0x258>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a92      	ldr	r2, [pc, #584]	; (800f44c <HAL_DMA_IRQHandler+0x25c>)
 800f202:	fba2 2303 	umull	r2, r3, r2, r3
 800f206:	0a9b      	lsrs	r3, r3, #10
 800f208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f20e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f21a:	2208      	movs	r2, #8
 800f21c:	409a      	lsls	r2, r3
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	4013      	ands	r3, r2
 800f222:	2b00      	cmp	r3, #0
 800f224:	d01a      	beq.n	800f25c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f003 0304 	and.w	r3, r3, #4
 800f230:	2b00      	cmp	r3, #0
 800f232:	d013      	beq.n	800f25c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f022 0204 	bic.w	r2, r2, #4
 800f242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f248:	2208      	movs	r2, #8
 800f24a:	409a      	lsls	r2, r3
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f254:	f043 0201 	orr.w	r2, r3, #1
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f260:	2201      	movs	r2, #1
 800f262:	409a      	lsls	r2, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	4013      	ands	r3, r2
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d012      	beq.n	800f292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00b      	beq.n	800f292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f27e:	2201      	movs	r2, #1
 800f280:	409a      	lsls	r2, r3
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f28a:	f043 0202 	orr.w	r2, r3, #2
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f296:	2204      	movs	r2, #4
 800f298:	409a      	lsls	r2, r3
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	4013      	ands	r3, r2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d012      	beq.n	800f2c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 0302 	and.w	r3, r3, #2
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00b      	beq.n	800f2c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2b4:	2204      	movs	r2, #4
 800f2b6:	409a      	lsls	r2, r3
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2c0:	f043 0204 	orr.w	r2, r3, #4
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2cc:	2210      	movs	r2, #16
 800f2ce:	409a      	lsls	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d043      	beq.n	800f360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f003 0308 	and.w	r3, r3, #8
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d03c      	beq.n	800f360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2ea:	2210      	movs	r2, #16
 800f2ec:	409a      	lsls	r2, r3
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d018      	beq.n	800f332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d108      	bne.n	800f320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f312:	2b00      	cmp	r3, #0
 800f314:	d024      	beq.n	800f360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	4798      	blx	r3
 800f31e:	e01f      	b.n	800f360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f324:	2b00      	cmp	r3, #0
 800f326:	d01b      	beq.n	800f360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	4798      	blx	r3
 800f330:	e016      	b.n	800f360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d107      	bne.n	800f350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f022 0208 	bic.w	r2, r2, #8
 800f34e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f364:	2220      	movs	r2, #32
 800f366:	409a      	lsls	r2, r3
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	4013      	ands	r3, r2
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f000 808e 	beq.w	800f48e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f003 0310 	and.w	r3, r3, #16
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f000 8086 	beq.w	800f48e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f386:	2220      	movs	r2, #32
 800f388:	409a      	lsls	r2, r3
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b05      	cmp	r3, #5
 800f398:	d136      	bne.n	800f408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f022 0216 	bic.w	r2, r2, #22
 800f3a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	695a      	ldr	r2, [r3, #20]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d103      	bne.n	800f3ca <HAL_DMA_IRQHandler+0x1da>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f022 0208 	bic.w	r2, r2, #8
 800f3d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3de:	223f      	movs	r2, #63	; 0x3f
 800f3e0:	409a      	lsls	r2, r3
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d07d      	beq.n	800f4fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	4798      	blx	r3
        }
        return;
 800f406:	e078      	b.n	800f4fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f412:	2b00      	cmp	r3, #0
 800f414:	d01c      	beq.n	800f450 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f420:	2b00      	cmp	r3, #0
 800f422:	d108      	bne.n	800f436 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d030      	beq.n	800f48e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	4798      	blx	r3
 800f434:	e02b      	b.n	800f48e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d027      	beq.n	800f48e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	4798      	blx	r3
 800f446:	e022      	b.n	800f48e <HAL_DMA_IRQHandler+0x29e>
 800f448:	20000018 	.word	0x20000018
 800f44c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10f      	bne.n	800f47e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0210 	bic.w	r2, r2, #16
 800f46c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f492:	2b00      	cmp	r3, #0
 800f494:	d032      	beq.n	800f4fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d022      	beq.n	800f4e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2205      	movs	r2, #5
 800f4a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f022 0201 	bic.w	r2, r2, #1
 800f4b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	60bb      	str	r3, [r7, #8]
 800f4c0:	697a      	ldr	r2, [r7, #20]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d307      	bcc.n	800f4d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f003 0301 	and.w	r3, r3, #1
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1f2      	bne.n	800f4ba <HAL_DMA_IRQHandler+0x2ca>
 800f4d4:	e000      	b.n	800f4d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f4d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d005      	beq.n	800f4fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	4798      	blx	r3
 800f4f8:	e000      	b.n	800f4fc <HAL_DMA_IRQHandler+0x30c>
        return;
 800f4fa:	bf00      	nop
    }
  }
}
 800f4fc:	3718      	adds	r7, #24
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop

0800f504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	2b40      	cmp	r3, #64	; 0x40
 800f530:	d108      	bne.n	800f544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f542:	e007      	b.n	800f554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68ba      	ldr	r2, [r7, #8]
 800f54a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	60da      	str	r2, [r3, #12]
}
 800f554:	bf00      	nop
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	3b10      	subs	r3, #16
 800f570:	4a13      	ldr	r2, [pc, #76]	; (800f5c0 <DMA_CalcBaseAndBitshift+0x60>)
 800f572:	fba2 2303 	umull	r2, r3, r2, r3
 800f576:	091b      	lsrs	r3, r3, #4
 800f578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f57a:	4a12      	ldr	r2, [pc, #72]	; (800f5c4 <DMA_CalcBaseAndBitshift+0x64>)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	4413      	add	r3, r2
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2b03      	cmp	r3, #3
 800f58c:	d908      	bls.n	800f5a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	4b0c      	ldr	r3, [pc, #48]	; (800f5c8 <DMA_CalcBaseAndBitshift+0x68>)
 800f596:	4013      	ands	r3, r2
 800f598:	1d1a      	adds	r2, r3, #4
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	659a      	str	r2, [r3, #88]	; 0x58
 800f59e:	e006      	b.n	800f5ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4b08      	ldr	r3, [pc, #32]	; (800f5c8 <DMA_CalcBaseAndBitshift+0x68>)
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3714      	adds	r7, #20
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	aaaaaaab 	.word	0xaaaaaaab
 800f5c4:	08020ec8 	.word	0x08020ec8
 800f5c8:	fffffc00 	.word	0xfffffc00

0800f5cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	699b      	ldr	r3, [r3, #24]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d11f      	bne.n	800f626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2b03      	cmp	r3, #3
 800f5ea:	d855      	bhi.n	800f698 <DMA_CheckFifoParam+0xcc>
 800f5ec:	a201      	add	r2, pc, #4	; (adr r2, 800f5f4 <DMA_CheckFifoParam+0x28>)
 800f5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f2:	bf00      	nop
 800f5f4:	0800f605 	.word	0x0800f605
 800f5f8:	0800f617 	.word	0x0800f617
 800f5fc:	0800f605 	.word	0x0800f605
 800f600:	0800f699 	.word	0x0800f699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d045      	beq.n	800f69c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800f610:	2301      	movs	r3, #1
 800f612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f614:	e042      	b.n	800f69c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f61e:	d13f      	bne.n	800f6a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f624:	e03c      	b.n	800f6a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	699b      	ldr	r3, [r3, #24]
 800f62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f62e:	d121      	bne.n	800f674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b03      	cmp	r3, #3
 800f634:	d836      	bhi.n	800f6a4 <DMA_CheckFifoParam+0xd8>
 800f636:	a201      	add	r2, pc, #4	; (adr r2, 800f63c <DMA_CheckFifoParam+0x70>)
 800f638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63c:	0800f64d 	.word	0x0800f64d
 800f640:	0800f653 	.word	0x0800f653
 800f644:	0800f64d 	.word	0x0800f64d
 800f648:	0800f665 	.word	0x0800f665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	73fb      	strb	r3, [r7, #15]
      break;
 800f650:	e02f      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d024      	beq.n	800f6a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f662:	e021      	b.n	800f6a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f66c:	d11e      	bne.n	800f6ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f672:	e01b      	b.n	800f6ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b02      	cmp	r3, #2
 800f678:	d902      	bls.n	800f680 <DMA_CheckFifoParam+0xb4>
 800f67a:	2b03      	cmp	r3, #3
 800f67c:	d003      	beq.n	800f686 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f67e:	e018      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800f680:	2301      	movs	r3, #1
 800f682:	73fb      	strb	r3, [r7, #15]
      break;
 800f684:	e015      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00e      	beq.n	800f6b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800f692:	2301      	movs	r3, #1
 800f694:	73fb      	strb	r3, [r7, #15]
      break;
 800f696:	e00b      	b.n	800f6b0 <DMA_CheckFifoParam+0xe4>
      break;
 800f698:	bf00      	nop
 800f69a:	e00a      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      break;
 800f69c:	bf00      	nop
 800f69e:	e008      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6a0:	bf00      	nop
 800f6a2:	e006      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6a4:	bf00      	nop
 800f6a6:	e004      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6a8:	bf00      	nop
 800f6aa:	e002      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      break;   
 800f6ac:	bf00      	nop
 800f6ae:	e000      	b.n	800f6b2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6b0:	bf00      	nop
    }
  } 
  
  return status; 
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3714      	adds	r7, #20
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b089      	sub	sp, #36	; 0x24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800f6da:	2300      	movs	r3, #0
 800f6dc:	61fb      	str	r3, [r7, #28]
 800f6de:	e175      	b.n	800f9cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f6e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f6f4:	693a      	ldr	r2, [r7, #16]
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	f040 8164 	bne.w	800f9c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d00b      	beq.n	800f71e <HAL_GPIO_Init+0x5e>
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d007      	beq.n	800f71e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f712:	2b11      	cmp	r3, #17
 800f714:	d003      	beq.n	800f71e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	2b12      	cmp	r3, #18
 800f71c:	d130      	bne.n	800f780 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	2203      	movs	r2, #3
 800f72a:	fa02 f303 	lsl.w	r3, r2, r3
 800f72e:	43db      	mvns	r3, r3
 800f730:	69ba      	ldr	r2, [r7, #24]
 800f732:	4013      	ands	r3, r2
 800f734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	68da      	ldr	r2, [r3, #12]
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	005b      	lsls	r3, r3, #1
 800f73e:	fa02 f303 	lsl.w	r3, r2, r3
 800f742:	69ba      	ldr	r2, [r7, #24]
 800f744:	4313      	orrs	r3, r2
 800f746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	69ba      	ldr	r2, [r7, #24]
 800f74c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f754:	2201      	movs	r2, #1
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	fa02 f303 	lsl.w	r3, r2, r3
 800f75c:	43db      	mvns	r3, r3
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	4013      	ands	r3, r2
 800f762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	091b      	lsrs	r3, r3, #4
 800f76a:	f003 0201 	and.w	r2, r3, #1
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	fa02 f303 	lsl.w	r3, r2, r3
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	4313      	orrs	r3, r2
 800f778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	69ba      	ldr	r2, [r7, #24]
 800f77e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	2203      	movs	r2, #3
 800f78c:	fa02 f303 	lsl.w	r3, r2, r3
 800f790:	43db      	mvns	r3, r3
 800f792:	69ba      	ldr	r2, [r7, #24]
 800f794:	4013      	ands	r3, r2
 800f796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	689a      	ldr	r2, [r3, #8]
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	005b      	lsls	r3, r3, #1
 800f7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a4:	69ba      	ldr	r2, [r7, #24]
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	69ba      	ldr	r2, [r7, #24]
 800f7ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d003      	beq.n	800f7c0 <HAL_GPIO_Init+0x100>
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	2b12      	cmp	r3, #18
 800f7be:	d123      	bne.n	800f808 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	08da      	lsrs	r2, r3, #3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3208      	adds	r2, #8
 800f7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	f003 0307 	and.w	r3, r3, #7
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	220f      	movs	r2, #15
 800f7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f7dc:	43db      	mvns	r3, r3
 800f7de:	69ba      	ldr	r2, [r7, #24]
 800f7e0:	4013      	ands	r3, r2
 800f7e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	691a      	ldr	r2, [r3, #16]
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	f003 0307 	and.w	r3, r3, #7
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7f4:	69ba      	ldr	r2, [r7, #24]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	08da      	lsrs	r2, r3, #3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	3208      	adds	r2, #8
 800f802:	69b9      	ldr	r1, [r7, #24]
 800f804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	005b      	lsls	r3, r3, #1
 800f812:	2203      	movs	r2, #3
 800f814:	fa02 f303 	lsl.w	r3, r2, r3
 800f818:	43db      	mvns	r3, r3
 800f81a:	69ba      	ldr	r2, [r7, #24]
 800f81c:	4013      	ands	r3, r2
 800f81e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	f003 0203 	and.w	r2, r3, #3
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	fa02 f303 	lsl.w	r3, r2, r3
 800f830:	69ba      	ldr	r2, [r7, #24]
 800f832:	4313      	orrs	r3, r2
 800f834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	69ba      	ldr	r2, [r7, #24]
 800f83a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f844:	2b00      	cmp	r3, #0
 800f846:	f000 80be 	beq.w	800f9c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f84a:	4b65      	ldr	r3, [pc, #404]	; (800f9e0 <HAL_GPIO_Init+0x320>)
 800f84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f84e:	4a64      	ldr	r2, [pc, #400]	; (800f9e0 <HAL_GPIO_Init+0x320>)
 800f850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f854:	6453      	str	r3, [r2, #68]	; 0x44
 800f856:	4b62      	ldr	r3, [pc, #392]	; (800f9e0 <HAL_GPIO_Init+0x320>)
 800f858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f85a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800f862:	4a60      	ldr	r2, [pc, #384]	; (800f9e4 <HAL_GPIO_Init+0x324>)
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	089b      	lsrs	r3, r3, #2
 800f868:	3302      	adds	r3, #2
 800f86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f86e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	f003 0303 	and.w	r3, r3, #3
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	220f      	movs	r2, #15
 800f87a:	fa02 f303 	lsl.w	r3, r2, r3
 800f87e:	43db      	mvns	r3, r3
 800f880:	69ba      	ldr	r2, [r7, #24]
 800f882:	4013      	ands	r3, r2
 800f884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a57      	ldr	r2, [pc, #348]	; (800f9e8 <HAL_GPIO_Init+0x328>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d037      	beq.n	800f8fe <HAL_GPIO_Init+0x23e>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4a56      	ldr	r2, [pc, #344]	; (800f9ec <HAL_GPIO_Init+0x32c>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d031      	beq.n	800f8fa <HAL_GPIO_Init+0x23a>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a55      	ldr	r2, [pc, #340]	; (800f9f0 <HAL_GPIO_Init+0x330>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d02b      	beq.n	800f8f6 <HAL_GPIO_Init+0x236>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a54      	ldr	r2, [pc, #336]	; (800f9f4 <HAL_GPIO_Init+0x334>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d025      	beq.n	800f8f2 <HAL_GPIO_Init+0x232>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a53      	ldr	r2, [pc, #332]	; (800f9f8 <HAL_GPIO_Init+0x338>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d01f      	beq.n	800f8ee <HAL_GPIO_Init+0x22e>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a52      	ldr	r2, [pc, #328]	; (800f9fc <HAL_GPIO_Init+0x33c>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d019      	beq.n	800f8ea <HAL_GPIO_Init+0x22a>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a51      	ldr	r2, [pc, #324]	; (800fa00 <HAL_GPIO_Init+0x340>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d013      	beq.n	800f8e6 <HAL_GPIO_Init+0x226>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a50      	ldr	r2, [pc, #320]	; (800fa04 <HAL_GPIO_Init+0x344>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d00d      	beq.n	800f8e2 <HAL_GPIO_Init+0x222>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a4f      	ldr	r2, [pc, #316]	; (800fa08 <HAL_GPIO_Init+0x348>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d007      	beq.n	800f8de <HAL_GPIO_Init+0x21e>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a4e      	ldr	r2, [pc, #312]	; (800fa0c <HAL_GPIO_Init+0x34c>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d101      	bne.n	800f8da <HAL_GPIO_Init+0x21a>
 800f8d6:	2309      	movs	r3, #9
 800f8d8:	e012      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8da:	230a      	movs	r3, #10
 800f8dc:	e010      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8de:	2308      	movs	r3, #8
 800f8e0:	e00e      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8e2:	2307      	movs	r3, #7
 800f8e4:	e00c      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8e6:	2306      	movs	r3, #6
 800f8e8:	e00a      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8ea:	2305      	movs	r3, #5
 800f8ec:	e008      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8ee:	2304      	movs	r3, #4
 800f8f0:	e006      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	e004      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	e002      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e000      	b.n	800f900 <HAL_GPIO_Init+0x240>
 800f8fe:	2300      	movs	r3, #0
 800f900:	69fa      	ldr	r2, [r7, #28]
 800f902:	f002 0203 	and.w	r2, r2, #3
 800f906:	0092      	lsls	r2, r2, #2
 800f908:	4093      	lsls	r3, r2
 800f90a:	69ba      	ldr	r2, [r7, #24]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800f910:	4934      	ldr	r1, [pc, #208]	; (800f9e4 <HAL_GPIO_Init+0x324>)
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	089b      	lsrs	r3, r3, #2
 800f916:	3302      	adds	r3, #2
 800f918:	69ba      	ldr	r2, [r7, #24]
 800f91a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f91e:	4b3c      	ldr	r3, [pc, #240]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	43db      	mvns	r3, r3
 800f928:	69ba      	ldr	r2, [r7, #24]
 800f92a:	4013      	ands	r3, r2
 800f92c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f936:	2b00      	cmp	r3, #0
 800f938:	d003      	beq.n	800f942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800f93a:	69ba      	ldr	r2, [r7, #24]
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	4313      	orrs	r3, r2
 800f940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f942:	4a33      	ldr	r2, [pc, #204]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f948:	4b31      	ldr	r3, [pc, #196]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	43db      	mvns	r3, r3
 800f952:	69ba      	ldr	r2, [r7, #24]
 800f954:	4013      	ands	r3, r2
 800f956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f960:	2b00      	cmp	r3, #0
 800f962:	d003      	beq.n	800f96c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800f964:	69ba      	ldr	r2, [r7, #24]
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	4313      	orrs	r3, r2
 800f96a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f96c:	4a28      	ldr	r2, [pc, #160]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f972:	4b27      	ldr	r3, [pc, #156]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	43db      	mvns	r3, r3
 800f97c:	69ba      	ldr	r2, [r7, #24]
 800f97e:	4013      	ands	r3, r2
 800f980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800f98e:	69ba      	ldr	r2, [r7, #24]
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	4313      	orrs	r3, r2
 800f994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f996:	4a1e      	ldr	r2, [pc, #120]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f99c:	4b1c      	ldr	r3, [pc, #112]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	43db      	mvns	r3, r3
 800f9a6:	69ba      	ldr	r2, [r7, #24]
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800f9b8:	69ba      	ldr	r2, [r7, #24]
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f9c0:	4a13      	ldr	r2, [pc, #76]	; (800fa10 <HAL_GPIO_Init+0x350>)
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	61fb      	str	r3, [r7, #28]
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	2b0f      	cmp	r3, #15
 800f9d0:	f67f ae86 	bls.w	800f6e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800f9d4:	bf00      	nop
 800f9d6:	3724      	adds	r7, #36	; 0x24
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr
 800f9e0:	40023800 	.word	0x40023800
 800f9e4:	40013800 	.word	0x40013800
 800f9e8:	40020000 	.word	0x40020000
 800f9ec:	40020400 	.word	0x40020400
 800f9f0:	40020800 	.word	0x40020800
 800f9f4:	40020c00 	.word	0x40020c00
 800f9f8:	40021000 	.word	0x40021000
 800f9fc:	40021400 	.word	0x40021400
 800fa00:	40021800 	.word	0x40021800
 800fa04:	40021c00 	.word	0x40021c00
 800fa08:	40022000 	.word	0x40022000
 800fa0c:	40022400 	.word	0x40022400
 800fa10:	40013c00 	.word	0x40013c00

0800fa14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	691a      	ldr	r2, [r3, #16]
 800fa24:	887b      	ldrh	r3, [r7, #2]
 800fa26:	4013      	ands	r3, r2
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d002      	beq.n	800fa32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	73fb      	strb	r3, [r7, #15]
 800fa30:	e001      	b.n	800fa36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800fa32:	2300      	movs	r3, #0
 800fa34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fa36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3714      	adds	r7, #20
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	807b      	strh	r3, [r7, #2]
 800fa50:	4613      	mov	r3, r2
 800fa52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fa54:	787b      	ldrb	r3, [r7, #1]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fa5a:	887a      	ldrh	r2, [r7, #2]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800fa60:	e003      	b.n	800fa6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800fa62:	887b      	ldrh	r3, [r7, #2]
 800fa64:	041a      	lsls	r2, r3, #16
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	619a      	str	r2, [r3, #24]
}
 800fa6a:	bf00      	nop
 800fa6c:	370c      	adds	r7, #12
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr

0800fa76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fa76:	b480      	push	{r7}
 800fa78:	b083      	sub	sp, #12
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	460b      	mov	r3, r1
 800fa80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	695a      	ldr	r2, [r3, #20]
 800fa86:	887b      	ldrh	r3, [r7, #2]
 800fa88:	4013      	ands	r3, r2
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d004      	beq.n	800fa98 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800fa8e:	887b      	ldrh	r3, [r7, #2]
 800fa90:	041a      	lsls	r2, r3, #16
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800fa96:	e002      	b.n	800fa9e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800fa98:	887a      	ldrh	r2, [r7, #2]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	619a      	str	r2, [r3, #24]
}
 800fa9e:	bf00      	nop
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
	...

0800faac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	4603      	mov	r3, r0
 800fab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fab6:	4b08      	ldr	r3, [pc, #32]	; (800fad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800fab8:	695a      	ldr	r2, [r3, #20]
 800faba:	88fb      	ldrh	r3, [r7, #6]
 800fabc:	4013      	ands	r3, r2
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d006      	beq.n	800fad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fac2:	4a05      	ldr	r2, [pc, #20]	; (800fad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800fac4:	88fb      	ldrh	r3, [r7, #6]
 800fac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fac8:	88fb      	ldrh	r3, [r7, #6]
 800faca:	4618      	mov	r0, r3
 800facc:	f7fc fe08 	bl	800c6e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	40013c00 	.word	0x40013c00

0800fadc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	e07f      	b.n	800fbee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d106      	bne.n	800fb08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7fe fed6 	bl	800e8b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2224      	movs	r2, #36	; 0x24
 800fb0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f022 0201 	bic.w	r2, r2, #1
 800fb1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	685a      	ldr	r2, [r3, #4]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fb2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	689a      	ldr	r2, [r3, #8]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fb3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	d107      	bne.n	800fb56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	689a      	ldr	r2, [r3, #8]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb52:	609a      	str	r2, [r3, #8]
 800fb54:	e006      	b.n	800fb64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	689a      	ldr	r2, [r3, #8]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800fb62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d104      	bne.n	800fb76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	6859      	ldr	r1, [r3, #4]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	4b1d      	ldr	r3, [pc, #116]	; (800fbf8 <HAL_I2C_Init+0x11c>)
 800fb82:	430b      	orrs	r3, r1
 800fb84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	68da      	ldr	r2, [r3, #12]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fb94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	691a      	ldr	r2, [r3, #16]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	695b      	ldr	r3, [r3, #20]
 800fb9e:	ea42 0103 	orr.w	r1, r2, r3
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	021a      	lsls	r2, r3, #8
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	430a      	orrs	r2, r1
 800fbae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	69d9      	ldr	r1, [r3, #28]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6a1a      	ldr	r2, [r3, #32]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f042 0201 	orr.w	r2, r2, #1
 800fbce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2220      	movs	r2, #32
 800fbda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3708      	adds	r7, #8
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	02008000 	.word	0x02008000

0800fbfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b088      	sub	sp, #32
 800fc00:	af02      	add	r7, sp, #8
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	4608      	mov	r0, r1
 800fc06:	4611      	mov	r1, r2
 800fc08:	461a      	mov	r2, r3
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	817b      	strh	r3, [r7, #10]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	813b      	strh	r3, [r7, #8]
 800fc12:	4613      	mov	r3, r2
 800fc14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	2b20      	cmp	r3, #32
 800fc20:	f040 80fd 	bne.w	800fe1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <HAL_I2C_Mem_Read+0x34>
 800fc2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d105      	bne.n	800fc3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	e0f1      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d101      	bne.n	800fc4a <HAL_I2C_Mem_Read+0x4e>
 800fc46:	2302      	movs	r3, #2
 800fc48:	e0ea      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fc52:	f7ff f87f 	bl	800ed54 <HAL_GetTick>
 800fc56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	2319      	movs	r3, #25
 800fc5e:	2201      	movs	r2, #1
 800fc60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 f95b 	bl	800ff20 <I2C_WaitOnFlagUntilTimeout>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d001      	beq.n	800fc74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800fc70:	2301      	movs	r3, #1
 800fc72:	e0d5      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2222      	movs	r2, #34	; 0x22
 800fc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2240      	movs	r2, #64	; 0x40
 800fc80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2200      	movs	r2, #0
 800fc88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6a3a      	ldr	r2, [r7, #32]
 800fc8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fc9c:	88f8      	ldrh	r0, [r7, #6]
 800fc9e:	893a      	ldrh	r2, [r7, #8]
 800fca0:	8979      	ldrh	r1, [r7, #10]
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	9301      	str	r3, [sp, #4]
 800fca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	4603      	mov	r3, r0
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	f000 f8bf 	bl	800fe30 <I2C_RequestMemoryRead>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d005      	beq.n	800fcc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e0ad      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	2bff      	cmp	r3, #255	; 0xff
 800fccc:	d90e      	bls.n	800fcec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	22ff      	movs	r2, #255	; 0xff
 800fcd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcd8:	b2da      	uxtb	r2, r3
 800fcda:	8979      	ldrh	r1, [r7, #10]
 800fcdc:	4b52      	ldr	r3, [pc, #328]	; (800fe28 <HAL_I2C_Mem_Read+0x22c>)
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 fa3d 	bl	8010164 <I2C_TransferConfig>
 800fcea:	e00f      	b.n	800fd0c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcfa:	b2da      	uxtb	r2, r3
 800fcfc:	8979      	ldrh	r1, [r7, #10]
 800fcfe:	4b4a      	ldr	r3, [pc, #296]	; (800fe28 <HAL_I2C_Mem_Read+0x22c>)
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f000 fa2c 	bl	8010164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd12:	2200      	movs	r2, #0
 800fd14:	2104      	movs	r1, #4
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f000 f902 	bl	800ff20 <I2C_WaitOnFlagUntilTimeout>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800fd22:	2301      	movs	r3, #1
 800fd24:	e07c      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd30:	b2d2      	uxtb	r2, r2
 800fd32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd38:	1c5a      	adds	r2, r3, #1
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd42:	3b01      	subs	r3, #1
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	3b01      	subs	r3, #1
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d034      	beq.n	800fdcc <HAL_I2C_Mem_Read+0x1d0>
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d130      	bne.n	800fdcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd70:	2200      	movs	r2, #0
 800fd72:	2180      	movs	r1, #128	; 0x80
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 f8d3 	bl	800ff20 <I2C_WaitOnFlagUntilTimeout>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d001      	beq.n	800fd84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800fd80:	2301      	movs	r3, #1
 800fd82:	e04d      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	2bff      	cmp	r3, #255	; 0xff
 800fd8c:	d90e      	bls.n	800fdac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	22ff      	movs	r2, #255	; 0xff
 800fd92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	8979      	ldrh	r1, [r7, #10]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f000 f9dd 	bl	8010164 <I2C_TransferConfig>
 800fdaa:	e00f      	b.n	800fdcc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdba:	b2da      	uxtb	r2, r3
 800fdbc:	8979      	ldrh	r1, [r7, #10]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f000 f9cc 	bl	8010164 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d19a      	bne.n	800fd0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fdd6:	697a      	ldr	r2, [r7, #20]
 800fdd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f000 f920 	bl	8010020 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d001      	beq.n	800fdea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800fde6:	2301      	movs	r3, #1
 800fde8:	e01a      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6859      	ldr	r1, [r3, #4]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	4b0b      	ldr	r3, [pc, #44]	; (800fe2c <HAL_I2C_Mem_Read+0x230>)
 800fdfe:	400b      	ands	r3, r1
 800fe00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2220      	movs	r2, #32
 800fe06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e000      	b.n	800fe20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800fe1e:	2302      	movs	r3, #2
  }
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3718      	adds	r7, #24
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	80002400 	.word	0x80002400
 800fe2c:	fe00e800 	.word	0xfe00e800

0800fe30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	4608      	mov	r0, r1
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	4603      	mov	r3, r0
 800fe40:	817b      	strh	r3, [r7, #10]
 800fe42:	460b      	mov	r3, r1
 800fe44:	813b      	strh	r3, [r7, #8]
 800fe46:	4613      	mov	r3, r2
 800fe48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fe4a:	88fb      	ldrh	r3, [r7, #6]
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	8979      	ldrh	r1, [r7, #10]
 800fe50:	4b20      	ldr	r3, [pc, #128]	; (800fed4 <I2C_RequestMemoryRead+0xa4>)
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	2300      	movs	r3, #0
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f000 f984 	bl	8010164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe5c:	69fa      	ldr	r2, [r7, #28]
 800fe5e:	69b9      	ldr	r1, [r7, #24]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 f89d 	bl	800ffa0 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e02c      	b.n	800feca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fe70:	88fb      	ldrh	r3, [r7, #6]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d105      	bne.n	800fe82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe76:	893b      	ldrh	r3, [r7, #8]
 800fe78:	b2da      	uxtb	r2, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	629a      	str	r2, [r3, #40]	; 0x28
 800fe80:	e015      	b.n	800feae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fe82:	893b      	ldrh	r3, [r7, #8]
 800fe84:	0a1b      	lsrs	r3, r3, #8
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	b2da      	uxtb	r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe90:	69fa      	ldr	r2, [r7, #28]
 800fe92:	69b9      	ldr	r1, [r7, #24]
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f000 f883 	bl	800ffa0 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fea0:	2301      	movs	r3, #1
 800fea2:	e012      	b.n	800feca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fea4:	893b      	ldrh	r3, [r7, #8]
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	2200      	movs	r2, #0
 800feb6:	2140      	movs	r1, #64	; 0x40
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f000 f831 	bl	800ff20 <I2C_WaitOnFlagUntilTimeout>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d001      	beq.n	800fec8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fec4:	2301      	movs	r3, #1
 800fec6:	e000      	b.n	800feca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	80002000 	.word	0x80002000

0800fed8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	699b      	ldr	r3, [r3, #24]
 800fee6:	f003 0302 	and.w	r3, r3, #2
 800feea:	2b02      	cmp	r3, #2
 800feec:	d103      	bne.n	800fef6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2200      	movs	r2, #0
 800fef4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	699b      	ldr	r3, [r3, #24]
 800fefc:	f003 0301 	and.w	r3, r3, #1
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d007      	beq.n	800ff14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	699a      	ldr	r2, [r3, #24]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f042 0201 	orr.w	r2, r2, #1
 800ff12:	619a      	str	r2, [r3, #24]
  }
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	603b      	str	r3, [r7, #0]
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ff30:	e022      	b.n	800ff78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff38:	d01e      	beq.n	800ff78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff3a:	f7fe ff0b 	bl	800ed54 <HAL_GetTick>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	683a      	ldr	r2, [r7, #0]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d302      	bcc.n	800ff50 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d113      	bne.n	800ff78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff54:	f043 0220 	orr.w	r2, r3, #32
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2220      	movs	r2, #32
 800ff60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2200      	movs	r2, #0
 800ff68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	e00f      	b.n	800ff98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	699a      	ldr	r2, [r3, #24]
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	4013      	ands	r3, r2
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	bf0c      	ite	eq
 800ff88:	2301      	moveq	r3, #1
 800ff8a:	2300      	movne	r3, #0
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	461a      	mov	r2, r3
 800ff90:	79fb      	ldrb	r3, [r7, #7]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d0cd      	beq.n	800ff32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ff96:	2300      	movs	r3, #0
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ffac:	e02c      	b.n	8010008 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	68b9      	ldr	r1, [r7, #8]
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f000 f870 	bl	8010098 <I2C_IsAcknowledgeFailed>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d001      	beq.n	800ffc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e02a      	b.n	8010018 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc8:	d01e      	beq.n	8010008 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffca:	f7fe fec3 	bl	800ed54 <HAL_GetTick>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	68ba      	ldr	r2, [r7, #8]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d302      	bcc.n	800ffe0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d113      	bne.n	8010008 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe4:	f043 0220 	orr.w	r2, r3, #32
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2220      	movs	r2, #32
 800fff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	e007      	b.n	8010018 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	f003 0302 	and.w	r3, r3, #2
 8010012:	2b02      	cmp	r3, #2
 8010014:	d1cb      	bne.n	800ffae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3710      	adds	r7, #16
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801002c:	e028      	b.n	8010080 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	68b9      	ldr	r1, [r7, #8]
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f000 f830 	bl	8010098 <I2C_IsAcknowledgeFailed>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	e026      	b.n	8010090 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010042:	f7fe fe87 	bl	800ed54 <HAL_GetTick>
 8010046:	4602      	mov	r2, r0
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	429a      	cmp	r2, r3
 8010050:	d302      	bcc.n	8010058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d113      	bne.n	8010080 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801005c:	f043 0220 	orr.w	r2, r3, #32
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2220      	movs	r2, #32
 8010068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801007c:	2301      	movs	r3, #1
 801007e:	e007      	b.n	8010090 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	f003 0320 	and.w	r3, r3, #32
 801008a:	2b20      	cmp	r3, #32
 801008c:	d1cf      	bne.n	801002e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	699b      	ldr	r3, [r3, #24]
 80100aa:	f003 0310 	and.w	r3, r3, #16
 80100ae:	2b10      	cmp	r3, #16
 80100b0:	d151      	bne.n	8010156 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80100b2:	e022      	b.n	80100fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ba:	d01e      	beq.n	80100fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100bc:	f7fe fe4a 	bl	800ed54 <HAL_GetTick>
 80100c0:	4602      	mov	r2, r0
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d302      	bcc.n	80100d2 <I2C_IsAcknowledgeFailed+0x3a>
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d113      	bne.n	80100fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100d6:	f043 0220 	orr.w	r2, r3, #32
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2220      	movs	r2, #32
 80100e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	e02e      	b.n	8010158 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	699b      	ldr	r3, [r3, #24]
 8010100:	f003 0320 	and.w	r3, r3, #32
 8010104:	2b20      	cmp	r3, #32
 8010106:	d1d5      	bne.n	80100b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2210      	movs	r2, #16
 801010e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2220      	movs	r2, #32
 8010116:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f7ff fedd 	bl	800fed8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	6859      	ldr	r1, [r3, #4]
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	4b0d      	ldr	r3, [pc, #52]	; (8010160 <I2C_IsAcknowledgeFailed+0xc8>)
 801012a:	400b      	ands	r3, r1
 801012c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010132:	f043 0204 	orr.w	r2, r3, #4
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2220      	movs	r2, #32
 801013e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2200      	movs	r2, #0
 8010146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8010152:	2301      	movs	r3, #1
 8010154:	e000      	b.n	8010158 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3710      	adds	r7, #16
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	fe00e800 	.word	0xfe00e800

08010164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	607b      	str	r3, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	817b      	strh	r3, [r7, #10]
 8010172:	4613      	mov	r3, r2
 8010174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	685a      	ldr	r2, [r3, #4]
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	0d5b      	lsrs	r3, r3, #21
 8010180:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8010184:	4b0d      	ldr	r3, [pc, #52]	; (80101bc <I2C_TransferConfig+0x58>)
 8010186:	430b      	orrs	r3, r1
 8010188:	43db      	mvns	r3, r3
 801018a:	ea02 0103 	and.w	r1, r2, r3
 801018e:	897b      	ldrh	r3, [r7, #10]
 8010190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8010194:	7a7b      	ldrb	r3, [r7, #9]
 8010196:	041b      	lsls	r3, r3, #16
 8010198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801019c:	431a      	orrs	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	431a      	orrs	r2, r3
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	431a      	orrs	r2, r3
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	430a      	orrs	r2, r1
 80101ac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80101ae:	bf00      	nop
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	03ff63ff 	.word	0x03ff63ff

080101c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b20      	cmp	r3, #32
 80101d4:	d138      	bne.n	8010248 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d101      	bne.n	80101e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80101e0:	2302      	movs	r3, #2
 80101e2:	e032      	b.n	801024a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2224      	movs	r2, #36	; 0x24
 80101f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f022 0201 	bic.w	r2, r2, #1
 8010202:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010212:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6819      	ldr	r1, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	683a      	ldr	r2, [r7, #0]
 8010220:	430a      	orrs	r2, r1
 8010222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f042 0201 	orr.w	r2, r2, #1
 8010232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2220      	movs	r2, #32
 8010238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010244:	2300      	movs	r3, #0
 8010246:	e000      	b.n	801024a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010248:	2302      	movs	r3, #2
  }
}
 801024a:	4618      	mov	r0, r3
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010256:	b480      	push	{r7}
 8010258:	b085      	sub	sp, #20
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010266:	b2db      	uxtb	r3, r3
 8010268:	2b20      	cmp	r3, #32
 801026a:	d139      	bne.n	80102e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010272:	2b01      	cmp	r3, #1
 8010274:	d101      	bne.n	801027a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010276:	2302      	movs	r3, #2
 8010278:	e033      	b.n	80102e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2224      	movs	r2, #36	; 0x24
 8010286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f022 0201 	bic.w	r2, r2, #1
 8010298:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80102a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	021b      	lsls	r3, r3, #8
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	4313      	orrs	r3, r2
 80102b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f042 0201 	orr.w	r2, r2, #1
 80102ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2220      	movs	r2, #32
 80102d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80102dc:	2300      	movs	r3, #0
 80102de:	e000      	b.n	80102e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80102e0:	2302      	movs	r3, #2
  }
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3714      	adds	r7, #20
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b084      	sub	sp, #16
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	e038      	b.n	8010372 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8010308:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f245 5255 	movw	r2, #21845	; 0x5555
 8010312:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	6852      	ldr	r2, [r2, #4]
 801031c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	6892      	ldr	r2, [r2, #8]
 8010326:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8010328:	f7fe fd14 	bl	800ed54 <HAL_GetTick>
 801032c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 801032e:	e008      	b.n	8010342 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8010330:	f7fe fd10 	bl	800ed54 <HAL_GetTick>
 8010334:	4602      	mov	r2, r0
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	1ad3      	subs	r3, r2, r3
 801033a:	2b30      	cmp	r3, #48	; 0x30
 801033c:	d901      	bls.n	8010342 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 801033e:	2303      	movs	r3, #3
 8010340:	e017      	b.n	8010372 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d1f1      	bne.n	8010330 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	691a      	ldr	r2, [r3, #16]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	429a      	cmp	r2, r3
 8010358:	d005      	beq.n	8010366 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	68d2      	ldr	r2, [r2, #12]
 8010362:	611a      	str	r2, [r3, #16]
 8010364:	e004      	b.n	8010370 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801036e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801037a:	b480      	push	{r7}
 801037c:	b083      	sub	sp, #12
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801038a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
	...

0801039c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80103a6:	4b23      	ldr	r3, [pc, #140]	; (8010434 <HAL_PWREx_EnableOverDrive+0x98>)
 80103a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103aa:	4a22      	ldr	r2, [pc, #136]	; (8010434 <HAL_PWREx_EnableOverDrive+0x98>)
 80103ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103b0:	6413      	str	r3, [r2, #64]	; 0x40
 80103b2:	4b20      	ldr	r3, [pc, #128]	; (8010434 <HAL_PWREx_EnableOverDrive+0x98>)
 80103b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80103be:	4b1e      	ldr	r3, [pc, #120]	; (8010438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4a1d      	ldr	r2, [pc, #116]	; (8010438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80103c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80103c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80103ca:	f7fe fcc3 	bl	800ed54 <HAL_GetTick>
 80103ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80103d0:	e009      	b.n	80103e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80103d2:	f7fe fcbf 	bl	800ed54 <HAL_GetTick>
 80103d6:	4602      	mov	r2, r0
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	1ad3      	subs	r3, r2, r3
 80103dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80103e0:	d901      	bls.n	80103e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e022      	b.n	801042c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80103e6:	4b14      	ldr	r3, [pc, #80]	; (8010438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80103ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103f2:	d1ee      	bne.n	80103d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80103f4:	4b10      	ldr	r3, [pc, #64]	; (8010438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a0f      	ldr	r2, [pc, #60]	; (8010438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80103fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010400:	f7fe fca8 	bl	800ed54 <HAL_GetTick>
 8010404:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010406:	e009      	b.n	801041c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010408:	f7fe fca4 	bl	800ed54 <HAL_GetTick>
 801040c:	4602      	mov	r2, r0
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010416:	d901      	bls.n	801041c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8010418:	2303      	movs	r3, #3
 801041a:	e007      	b.n	801042c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801041c:	4b06      	ldr	r3, [pc, #24]	; (8010438 <HAL_PWREx_EnableOverDrive+0x9c>)
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010428:	d1ee      	bne.n	8010408 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	40023800 	.word	0x40023800
 8010438:	40007000 	.word	0x40007000

0801043c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b086      	sub	sp, #24
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010444:	2300      	movs	r3, #0
 8010446:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d101      	bne.n	8010452 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801044e:	2301      	movs	r3, #1
 8010450:	e29b      	b.n	801098a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f003 0301 	and.w	r3, r3, #1
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 8087 	beq.w	801056e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010460:	4b96      	ldr	r3, [pc, #600]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	f003 030c 	and.w	r3, r3, #12
 8010468:	2b04      	cmp	r3, #4
 801046a:	d00c      	beq.n	8010486 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801046c:	4b93      	ldr	r3, [pc, #588]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	f003 030c 	and.w	r3, r3, #12
 8010474:	2b08      	cmp	r3, #8
 8010476:	d112      	bne.n	801049e <HAL_RCC_OscConfig+0x62>
 8010478:	4b90      	ldr	r3, [pc, #576]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010484:	d10b      	bne.n	801049e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010486:	4b8d      	ldr	r3, [pc, #564]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801048e:	2b00      	cmp	r3, #0
 8010490:	d06c      	beq.n	801056c <HAL_RCC_OscConfig+0x130>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d168      	bne.n	801056c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801049a:	2301      	movs	r3, #1
 801049c:	e275      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104a6:	d106      	bne.n	80104b6 <HAL_RCC_OscConfig+0x7a>
 80104a8:	4b84      	ldr	r3, [pc, #528]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a83      	ldr	r2, [pc, #524]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104b2:	6013      	str	r3, [r2, #0]
 80104b4:	e02e      	b.n	8010514 <HAL_RCC_OscConfig+0xd8>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10c      	bne.n	80104d8 <HAL_RCC_OscConfig+0x9c>
 80104be:	4b7f      	ldr	r3, [pc, #508]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a7e      	ldr	r2, [pc, #504]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	4b7c      	ldr	r3, [pc, #496]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a7b      	ldr	r2, [pc, #492]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80104d4:	6013      	str	r3, [r2, #0]
 80104d6:	e01d      	b.n	8010514 <HAL_RCC_OscConfig+0xd8>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80104e0:	d10c      	bne.n	80104fc <HAL_RCC_OscConfig+0xc0>
 80104e2:	4b76      	ldr	r3, [pc, #472]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a75      	ldr	r2, [pc, #468]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	4b73      	ldr	r3, [pc, #460]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4a72      	ldr	r2, [pc, #456]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104f8:	6013      	str	r3, [r2, #0]
 80104fa:	e00b      	b.n	8010514 <HAL_RCC_OscConfig+0xd8>
 80104fc:	4b6f      	ldr	r3, [pc, #444]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a6e      	ldr	r2, [pc, #440]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010506:	6013      	str	r3, [r2, #0]
 8010508:	4b6c      	ldr	r3, [pc, #432]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a6b      	ldr	r2, [pc, #428]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801050e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d013      	beq.n	8010544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801051c:	f7fe fc1a 	bl	800ed54 <HAL_GetTick>
 8010520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010522:	e008      	b.n	8010536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010524:	f7fe fc16 	bl	800ed54 <HAL_GetTick>
 8010528:	4602      	mov	r2, r0
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	2b64      	cmp	r3, #100	; 0x64
 8010530:	d901      	bls.n	8010536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010532:	2303      	movs	r3, #3
 8010534:	e229      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010536:	4b61      	ldr	r3, [pc, #388]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801053e:	2b00      	cmp	r3, #0
 8010540:	d0f0      	beq.n	8010524 <HAL_RCC_OscConfig+0xe8>
 8010542:	e014      	b.n	801056e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010544:	f7fe fc06 	bl	800ed54 <HAL_GetTick>
 8010548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801054a:	e008      	b.n	801055e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801054c:	f7fe fc02 	bl	800ed54 <HAL_GetTick>
 8010550:	4602      	mov	r2, r0
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	2b64      	cmp	r3, #100	; 0x64
 8010558:	d901      	bls.n	801055e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801055a:	2303      	movs	r3, #3
 801055c:	e215      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801055e:	4b57      	ldr	r3, [pc, #348]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1f0      	bne.n	801054c <HAL_RCC_OscConfig+0x110>
 801056a:	e000      	b.n	801056e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801056c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f003 0302 	and.w	r3, r3, #2
 8010576:	2b00      	cmp	r3, #0
 8010578:	d069      	beq.n	801064e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801057a:	4b50      	ldr	r3, [pc, #320]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f003 030c 	and.w	r3, r3, #12
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00b      	beq.n	801059e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010586:	4b4d      	ldr	r3, [pc, #308]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	f003 030c 	and.w	r3, r3, #12
 801058e:	2b08      	cmp	r3, #8
 8010590:	d11c      	bne.n	80105cc <HAL_RCC_OscConfig+0x190>
 8010592:	4b4a      	ldr	r3, [pc, #296]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801059a:	2b00      	cmp	r3, #0
 801059c:	d116      	bne.n	80105cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801059e:	4b47      	ldr	r3, [pc, #284]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f003 0302 	and.w	r3, r3, #2
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d005      	beq.n	80105b6 <HAL_RCC_OscConfig+0x17a>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d001      	beq.n	80105b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
 80105b4:	e1e9      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80105b6:	4b41      	ldr	r3, [pc, #260]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	691b      	ldr	r3, [r3, #16]
 80105c2:	00db      	lsls	r3, r3, #3
 80105c4:	493d      	ldr	r1, [pc, #244]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80105c6:	4313      	orrs	r3, r2
 80105c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80105ca:	e040      	b.n	801064e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d023      	beq.n	801061c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80105d4:	4b39      	ldr	r3, [pc, #228]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a38      	ldr	r2, [pc, #224]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80105da:	f043 0301 	orr.w	r3, r3, #1
 80105de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105e0:	f7fe fbb8 	bl	800ed54 <HAL_GetTick>
 80105e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80105e6:	e008      	b.n	80105fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80105e8:	f7fe fbb4 	bl	800ed54 <HAL_GetTick>
 80105ec:	4602      	mov	r2, r0
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	2b02      	cmp	r3, #2
 80105f4:	d901      	bls.n	80105fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80105f6:	2303      	movs	r3, #3
 80105f8:	e1c7      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80105fa:	4b30      	ldr	r3, [pc, #192]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f003 0302 	and.w	r3, r3, #2
 8010602:	2b00      	cmp	r3, #0
 8010604:	d0f0      	beq.n	80105e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010606:	4b2d      	ldr	r3, [pc, #180]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	4929      	ldr	r1, [pc, #164]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010616:	4313      	orrs	r3, r2
 8010618:	600b      	str	r3, [r1, #0]
 801061a:	e018      	b.n	801064e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801061c:	4b27      	ldr	r3, [pc, #156]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4a26      	ldr	r2, [pc, #152]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010622:	f023 0301 	bic.w	r3, r3, #1
 8010626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010628:	f7fe fb94 	bl	800ed54 <HAL_GetTick>
 801062c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801062e:	e008      	b.n	8010642 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010630:	f7fe fb90 	bl	800ed54 <HAL_GetTick>
 8010634:	4602      	mov	r2, r0
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	2b02      	cmp	r3, #2
 801063c:	d901      	bls.n	8010642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801063e:	2303      	movs	r3, #3
 8010640:	e1a3      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010642:	4b1e      	ldr	r3, [pc, #120]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f003 0302 	and.w	r3, r3, #2
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1f0      	bne.n	8010630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f003 0308 	and.w	r3, r3, #8
 8010656:	2b00      	cmp	r3, #0
 8010658:	d038      	beq.n	80106cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	695b      	ldr	r3, [r3, #20]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d019      	beq.n	8010696 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010662:	4b16      	ldr	r3, [pc, #88]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010666:	4a15      	ldr	r2, [pc, #84]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010668:	f043 0301 	orr.w	r3, r3, #1
 801066c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801066e:	f7fe fb71 	bl	800ed54 <HAL_GetTick>
 8010672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010674:	e008      	b.n	8010688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010676:	f7fe fb6d 	bl	800ed54 <HAL_GetTick>
 801067a:	4602      	mov	r2, r0
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	1ad3      	subs	r3, r2, r3
 8010680:	2b02      	cmp	r3, #2
 8010682:	d901      	bls.n	8010688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010684:	2303      	movs	r3, #3
 8010686:	e180      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010688:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801068a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801068c:	f003 0302 	and.w	r3, r3, #2
 8010690:	2b00      	cmp	r3, #0
 8010692:	d0f0      	beq.n	8010676 <HAL_RCC_OscConfig+0x23a>
 8010694:	e01a      	b.n	80106cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010696:	4b09      	ldr	r3, [pc, #36]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 8010698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801069a:	4a08      	ldr	r2, [pc, #32]	; (80106bc <HAL_RCC_OscConfig+0x280>)
 801069c:	f023 0301 	bic.w	r3, r3, #1
 80106a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80106a2:	f7fe fb57 	bl	800ed54 <HAL_GetTick>
 80106a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80106a8:	e00a      	b.n	80106c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80106aa:	f7fe fb53 	bl	800ed54 <HAL_GetTick>
 80106ae:	4602      	mov	r2, r0
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	2b02      	cmp	r3, #2
 80106b6:	d903      	bls.n	80106c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80106b8:	2303      	movs	r3, #3
 80106ba:	e166      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
 80106bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80106c0:	4b92      	ldr	r3, [pc, #584]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80106c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106c4:	f003 0302 	and.w	r3, r3, #2
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1ee      	bne.n	80106aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f003 0304 	and.w	r3, r3, #4
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 80a4 	beq.w	8010822 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80106da:	4b8c      	ldr	r3, [pc, #560]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80106dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d10d      	bne.n	8010702 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80106e6:	4b89      	ldr	r3, [pc, #548]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80106e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ea:	4a88      	ldr	r2, [pc, #544]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80106ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106f0:	6413      	str	r3, [r2, #64]	; 0x40
 80106f2:	4b86      	ldr	r3, [pc, #536]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80106f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106fa:	60bb      	str	r3, [r7, #8]
 80106fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80106fe:	2301      	movs	r3, #1
 8010700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010702:	4b83      	ldr	r3, [pc, #524]	; (8010910 <HAL_RCC_OscConfig+0x4d4>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801070a:	2b00      	cmp	r3, #0
 801070c:	d118      	bne.n	8010740 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801070e:	4b80      	ldr	r3, [pc, #512]	; (8010910 <HAL_RCC_OscConfig+0x4d4>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a7f      	ldr	r2, [pc, #508]	; (8010910 <HAL_RCC_OscConfig+0x4d4>)
 8010714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801071a:	f7fe fb1b 	bl	800ed54 <HAL_GetTick>
 801071e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010720:	e008      	b.n	8010734 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010722:	f7fe fb17 	bl	800ed54 <HAL_GetTick>
 8010726:	4602      	mov	r2, r0
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	2b64      	cmp	r3, #100	; 0x64
 801072e:	d901      	bls.n	8010734 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8010730:	2303      	movs	r3, #3
 8010732:	e12a      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010734:	4b76      	ldr	r3, [pc, #472]	; (8010910 <HAL_RCC_OscConfig+0x4d4>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801073c:	2b00      	cmp	r3, #0
 801073e:	d0f0      	beq.n	8010722 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	2b01      	cmp	r3, #1
 8010746:	d106      	bne.n	8010756 <HAL_RCC_OscConfig+0x31a>
 8010748:	4b70      	ldr	r3, [pc, #448]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801074a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801074c:	4a6f      	ldr	r2, [pc, #444]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801074e:	f043 0301 	orr.w	r3, r3, #1
 8010752:	6713      	str	r3, [r2, #112]	; 0x70
 8010754:	e02d      	b.n	80107b2 <HAL_RCC_OscConfig+0x376>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	689b      	ldr	r3, [r3, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10c      	bne.n	8010778 <HAL_RCC_OscConfig+0x33c>
 801075e:	4b6b      	ldr	r3, [pc, #428]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010762:	4a6a      	ldr	r2, [pc, #424]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010764:	f023 0301 	bic.w	r3, r3, #1
 8010768:	6713      	str	r3, [r2, #112]	; 0x70
 801076a:	4b68      	ldr	r3, [pc, #416]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801076c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801076e:	4a67      	ldr	r2, [pc, #412]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010770:	f023 0304 	bic.w	r3, r3, #4
 8010774:	6713      	str	r3, [r2, #112]	; 0x70
 8010776:	e01c      	b.n	80107b2 <HAL_RCC_OscConfig+0x376>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	2b05      	cmp	r3, #5
 801077e:	d10c      	bne.n	801079a <HAL_RCC_OscConfig+0x35e>
 8010780:	4b62      	ldr	r3, [pc, #392]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010784:	4a61      	ldr	r2, [pc, #388]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010786:	f043 0304 	orr.w	r3, r3, #4
 801078a:	6713      	str	r3, [r2, #112]	; 0x70
 801078c:	4b5f      	ldr	r3, [pc, #380]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801078e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010790:	4a5e      	ldr	r2, [pc, #376]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010792:	f043 0301 	orr.w	r3, r3, #1
 8010796:	6713      	str	r3, [r2, #112]	; 0x70
 8010798:	e00b      	b.n	80107b2 <HAL_RCC_OscConfig+0x376>
 801079a:	4b5c      	ldr	r3, [pc, #368]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801079c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801079e:	4a5b      	ldr	r2, [pc, #364]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80107a0:	f023 0301 	bic.w	r3, r3, #1
 80107a4:	6713      	str	r3, [r2, #112]	; 0x70
 80107a6:	4b59      	ldr	r3, [pc, #356]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80107a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107aa:	4a58      	ldr	r2, [pc, #352]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80107ac:	f023 0304 	bic.w	r3, r3, #4
 80107b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d015      	beq.n	80107e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107ba:	f7fe facb 	bl	800ed54 <HAL_GetTick>
 80107be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107c0:	e00a      	b.n	80107d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107c2:	f7fe fac7 	bl	800ed54 <HAL_GetTick>
 80107c6:	4602      	mov	r2, r0
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d901      	bls.n	80107d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80107d4:	2303      	movs	r3, #3
 80107d6:	e0d8      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107d8:	4b4c      	ldr	r3, [pc, #304]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80107da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107dc:	f003 0302 	and.w	r3, r3, #2
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d0ee      	beq.n	80107c2 <HAL_RCC_OscConfig+0x386>
 80107e4:	e014      	b.n	8010810 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107e6:	f7fe fab5 	bl	800ed54 <HAL_GetTick>
 80107ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80107ec:	e00a      	b.n	8010804 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107ee:	f7fe fab1 	bl	800ed54 <HAL_GetTick>
 80107f2:	4602      	mov	r2, r0
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d901      	bls.n	8010804 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8010800:	2303      	movs	r3, #3
 8010802:	e0c2      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010804:	4b41      	ldr	r3, [pc, #260]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010808:	f003 0302 	and.w	r3, r3, #2
 801080c:	2b00      	cmp	r3, #0
 801080e:	d1ee      	bne.n	80107ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010810:	7dfb      	ldrb	r3, [r7, #23]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d105      	bne.n	8010822 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010816:	4b3d      	ldr	r3, [pc, #244]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801081a:	4a3c      	ldr	r2, [pc, #240]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801081c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	699b      	ldr	r3, [r3, #24]
 8010826:	2b00      	cmp	r3, #0
 8010828:	f000 80ae 	beq.w	8010988 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801082c:	4b37      	ldr	r3, [pc, #220]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	f003 030c 	and.w	r3, r3, #12
 8010834:	2b08      	cmp	r3, #8
 8010836:	d06d      	beq.n	8010914 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	699b      	ldr	r3, [r3, #24]
 801083c:	2b02      	cmp	r3, #2
 801083e:	d14b      	bne.n	80108d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010840:	4b32      	ldr	r3, [pc, #200]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4a31      	ldr	r2, [pc, #196]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801084a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801084c:	f7fe fa82 	bl	800ed54 <HAL_GetTick>
 8010850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010852:	e008      	b.n	8010866 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010854:	f7fe fa7e 	bl	800ed54 <HAL_GetTick>
 8010858:	4602      	mov	r2, r0
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	2b02      	cmp	r3, #2
 8010860:	d901      	bls.n	8010866 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8010862:	2303      	movs	r3, #3
 8010864:	e091      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010866:	4b29      	ldr	r3, [pc, #164]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1f0      	bne.n	8010854 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	69da      	ldr	r2, [r3, #28]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a1b      	ldr	r3, [r3, #32]
 801087a:	431a      	orrs	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010880:	019b      	lsls	r3, r3, #6
 8010882:	431a      	orrs	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010888:	085b      	lsrs	r3, r3, #1
 801088a:	3b01      	subs	r3, #1
 801088c:	041b      	lsls	r3, r3, #16
 801088e:	431a      	orrs	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010894:	061b      	lsls	r3, r3, #24
 8010896:	431a      	orrs	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801089c:	071b      	lsls	r3, r3, #28
 801089e:	491b      	ldr	r1, [pc, #108]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80108a0:	4313      	orrs	r3, r2
 80108a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80108a4:	4b19      	ldr	r3, [pc, #100]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a18      	ldr	r2, [pc, #96]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80108aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80108ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108b0:	f7fe fa50 	bl	800ed54 <HAL_GetTick>
 80108b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80108b6:	e008      	b.n	80108ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80108b8:	f7fe fa4c 	bl	800ed54 <HAL_GetTick>
 80108bc:	4602      	mov	r2, r0
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d901      	bls.n	80108ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80108c6:	2303      	movs	r3, #3
 80108c8:	e05f      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80108ca:	4b10      	ldr	r3, [pc, #64]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d0f0      	beq.n	80108b8 <HAL_RCC_OscConfig+0x47c>
 80108d6:	e057      	b.n	8010988 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80108d8:	4b0c      	ldr	r3, [pc, #48]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a0b      	ldr	r2, [pc, #44]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 80108de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80108e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108e4:	f7fe fa36 	bl	800ed54 <HAL_GetTick>
 80108e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80108ea:	e008      	b.n	80108fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80108ec:	f7fe fa32 	bl	800ed54 <HAL_GetTick>
 80108f0:	4602      	mov	r2, r0
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	1ad3      	subs	r3, r2, r3
 80108f6:	2b02      	cmp	r3, #2
 80108f8:	d901      	bls.n	80108fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80108fa:	2303      	movs	r3, #3
 80108fc:	e045      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80108fe:	4b03      	ldr	r3, [pc, #12]	; (801090c <HAL_RCC_OscConfig+0x4d0>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010906:	2b00      	cmp	r3, #0
 8010908:	d1f0      	bne.n	80108ec <HAL_RCC_OscConfig+0x4b0>
 801090a:	e03d      	b.n	8010988 <HAL_RCC_OscConfig+0x54c>
 801090c:	40023800 	.word	0x40023800
 8010910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8010914:	4b1f      	ldr	r3, [pc, #124]	; (8010994 <HAL_RCC_OscConfig+0x558>)
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	2b01      	cmp	r3, #1
 8010920:	d030      	beq.n	8010984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801092c:	429a      	cmp	r2, r3
 801092e:	d129      	bne.n	8010984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801093a:	429a      	cmp	r2, r3
 801093c:	d122      	bne.n	8010984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010944:	4013      	ands	r3, r2
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801094a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801094c:	4293      	cmp	r3, r2
 801094e:	d119      	bne.n	8010984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801095a:	085b      	lsrs	r3, r3, #1
 801095c:	3b01      	subs	r3, #1
 801095e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010960:	429a      	cmp	r2, r3
 8010962:	d10f      	bne.n	8010984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801096e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010970:	429a      	cmp	r2, r3
 8010972:	d107      	bne.n	8010984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801097e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010980:	429a      	cmp	r2, r3
 8010982:	d001      	beq.n	8010988 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8010984:	2301      	movs	r3, #1
 8010986:	e000      	b.n	801098a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3718      	adds	r7, #24
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	40023800 	.word	0x40023800

08010998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80109a2:	2300      	movs	r3, #0
 80109a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	e0d0      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80109b0:	4b6a      	ldr	r3, [pc, #424]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f003 030f 	and.w	r3, r3, #15
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d910      	bls.n	80109e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80109be:	4b67      	ldr	r3, [pc, #412]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f023 020f 	bic.w	r2, r3, #15
 80109c6:	4965      	ldr	r1, [pc, #404]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	4313      	orrs	r3, r2
 80109cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80109ce:	4b63      	ldr	r3, [pc, #396]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f003 030f 	and.w	r3, r3, #15
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d001      	beq.n	80109e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80109dc:	2301      	movs	r3, #1
 80109de:	e0b8      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f003 0302 	and.w	r3, r3, #2
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d020      	beq.n	8010a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f003 0304 	and.w	r3, r3, #4
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d005      	beq.n	8010a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80109f8:	4b59      	ldr	r3, [pc, #356]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	4a58      	ldr	r2, [pc, #352]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 80109fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f003 0308 	and.w	r3, r3, #8
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d005      	beq.n	8010a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010a10:	4b53      	ldr	r3, [pc, #332]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	4a52      	ldr	r2, [pc, #328]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010a1c:	4b50      	ldr	r3, [pc, #320]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	689b      	ldr	r3, [r3, #8]
 8010a28:	494d      	ldr	r1, [pc, #308]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f003 0301 	and.w	r3, r3, #1
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d040      	beq.n	8010abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d107      	bne.n	8010a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010a42:	4b47      	ldr	r3, [pc, #284]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d115      	bne.n	8010a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e07f      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d107      	bne.n	8010a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a5a:	4b41      	ldr	r3, [pc, #260]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d109      	bne.n	8010a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010a66:	2301      	movs	r3, #1
 8010a68:	e073      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010a6a:	4b3d      	ldr	r3, [pc, #244]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f003 0302 	and.w	r3, r3, #2
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010a76:	2301      	movs	r3, #1
 8010a78:	e06b      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010a7a:	4b39      	ldr	r3, [pc, #228]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	f023 0203 	bic.w	r2, r3, #3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	4936      	ldr	r1, [pc, #216]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010a8c:	f7fe f962 	bl	800ed54 <HAL_GetTick>
 8010a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a92:	e00a      	b.n	8010aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010a94:	f7fe f95e 	bl	800ed54 <HAL_GetTick>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d901      	bls.n	8010aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	e053      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010aaa:	4b2d      	ldr	r3, [pc, #180]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	f003 020c 	and.w	r2, r3, #12
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d1eb      	bne.n	8010a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010abc:	4b27      	ldr	r3, [pc, #156]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f003 030f 	and.w	r3, r3, #15
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d210      	bcs.n	8010aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010aca:	4b24      	ldr	r3, [pc, #144]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f023 020f 	bic.w	r2, r3, #15
 8010ad2:	4922      	ldr	r1, [pc, #136]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010ada:	4b20      	ldr	r3, [pc, #128]	; (8010b5c <HAL_RCC_ClockConfig+0x1c4>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f003 030f 	and.w	r3, r3, #15
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d001      	beq.n	8010aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	e032      	b.n	8010b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f003 0304 	and.w	r3, r3, #4
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d008      	beq.n	8010b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010af8:	4b19      	ldr	r3, [pc, #100]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	4916      	ldr	r1, [pc, #88]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010b06:	4313      	orrs	r3, r2
 8010b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f003 0308 	and.w	r3, r3, #8
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d009      	beq.n	8010b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010b16:	4b12      	ldr	r3, [pc, #72]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010b18:	689b      	ldr	r3, [r3, #8]
 8010b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	490e      	ldr	r1, [pc, #56]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010b26:	4313      	orrs	r3, r2
 8010b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010b2a:	f000 f821 	bl	8010b70 <HAL_RCC_GetSysClockFreq>
 8010b2e:	4601      	mov	r1, r0
 8010b30:	4b0b      	ldr	r3, [pc, #44]	; (8010b60 <HAL_RCC_ClockConfig+0x1c8>)
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	091b      	lsrs	r3, r3, #4
 8010b36:	f003 030f 	and.w	r3, r3, #15
 8010b3a:	4a0a      	ldr	r2, [pc, #40]	; (8010b64 <HAL_RCC_ClockConfig+0x1cc>)
 8010b3c:	5cd3      	ldrb	r3, [r2, r3]
 8010b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8010b42:	4a09      	ldr	r2, [pc, #36]	; (8010b68 <HAL_RCC_ClockConfig+0x1d0>)
 8010b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8010b46:	4b09      	ldr	r3, [pc, #36]	; (8010b6c <HAL_RCC_ClockConfig+0x1d4>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fe f8be 	bl	800eccc <HAL_InitTick>

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	40023c00 	.word	0x40023c00
 8010b60:	40023800 	.word	0x40023800
 8010b64:	08020eb0 	.word	0x08020eb0
 8010b68:	20000018 	.word	0x20000018
 8010b6c:	2000001c 	.word	0x2000001c

08010b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	607b      	str	r3, [r7, #4]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	2300      	movs	r3, #0
 8010b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010b86:	4b63      	ldr	r3, [pc, #396]	; (8010d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	f003 030c 	and.w	r3, r3, #12
 8010b8e:	2b04      	cmp	r3, #4
 8010b90:	d007      	beq.n	8010ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8010b92:	2b08      	cmp	r3, #8
 8010b94:	d008      	beq.n	8010ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f040 80b4 	bne.w	8010d04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010b9c:	4b5e      	ldr	r3, [pc, #376]	; (8010d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010b9e:	60bb      	str	r3, [r7, #8]
      break;
 8010ba0:	e0b3      	b.n	8010d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010ba2:	4b5d      	ldr	r3, [pc, #372]	; (8010d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010ba4:	60bb      	str	r3, [r7, #8]
      break;
 8010ba6:	e0b0      	b.n	8010d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010ba8:	4b5a      	ldr	r3, [pc, #360]	; (8010d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bb0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8010bb2:	4b58      	ldr	r3, [pc, #352]	; (8010d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d04a      	beq.n	8010c54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010bbe:	4b55      	ldr	r3, [pc, #340]	; (8010d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	099b      	lsrs	r3, r3, #6
 8010bc4:	f04f 0400 	mov.w	r4, #0
 8010bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010bcc:	f04f 0200 	mov.w	r2, #0
 8010bd0:	ea03 0501 	and.w	r5, r3, r1
 8010bd4:	ea04 0602 	and.w	r6, r4, r2
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4632      	mov	r2, r6
 8010bdc:	f04f 0300 	mov.w	r3, #0
 8010be0:	f04f 0400 	mov.w	r4, #0
 8010be4:	0154      	lsls	r4, r2, #5
 8010be6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010bea:	014b      	lsls	r3, r1, #5
 8010bec:	4619      	mov	r1, r3
 8010bee:	4622      	mov	r2, r4
 8010bf0:	1b49      	subs	r1, r1, r5
 8010bf2:	eb62 0206 	sbc.w	r2, r2, r6
 8010bf6:	f04f 0300 	mov.w	r3, #0
 8010bfa:	f04f 0400 	mov.w	r4, #0
 8010bfe:	0194      	lsls	r4, r2, #6
 8010c00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010c04:	018b      	lsls	r3, r1, #6
 8010c06:	1a5b      	subs	r3, r3, r1
 8010c08:	eb64 0402 	sbc.w	r4, r4, r2
 8010c0c:	f04f 0100 	mov.w	r1, #0
 8010c10:	f04f 0200 	mov.w	r2, #0
 8010c14:	00e2      	lsls	r2, r4, #3
 8010c16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010c1a:	00d9      	lsls	r1, r3, #3
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	4614      	mov	r4, r2
 8010c20:	195b      	adds	r3, r3, r5
 8010c22:	eb44 0406 	adc.w	r4, r4, r6
 8010c26:	f04f 0100 	mov.w	r1, #0
 8010c2a:	f04f 0200 	mov.w	r2, #0
 8010c2e:	02a2      	lsls	r2, r4, #10
 8010c30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010c34:	0299      	lsls	r1, r3, #10
 8010c36:	460b      	mov	r3, r1
 8010c38:	4614      	mov	r4, r2
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	4621      	mov	r1, r4
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f04f 0400 	mov.w	r4, #0
 8010c44:	461a      	mov	r2, r3
 8010c46:	4623      	mov	r3, r4
 8010c48:	f7f7 fb62 	bl	8008310 <__aeabi_uldivmod>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	460c      	mov	r4, r1
 8010c50:	60fb      	str	r3, [r7, #12]
 8010c52:	e049      	b.n	8010ce8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010c54:	4b2f      	ldr	r3, [pc, #188]	; (8010d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	099b      	lsrs	r3, r3, #6
 8010c5a:	f04f 0400 	mov.w	r4, #0
 8010c5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010c62:	f04f 0200 	mov.w	r2, #0
 8010c66:	ea03 0501 	and.w	r5, r3, r1
 8010c6a:	ea04 0602 	and.w	r6, r4, r2
 8010c6e:	4629      	mov	r1, r5
 8010c70:	4632      	mov	r2, r6
 8010c72:	f04f 0300 	mov.w	r3, #0
 8010c76:	f04f 0400 	mov.w	r4, #0
 8010c7a:	0154      	lsls	r4, r2, #5
 8010c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010c80:	014b      	lsls	r3, r1, #5
 8010c82:	4619      	mov	r1, r3
 8010c84:	4622      	mov	r2, r4
 8010c86:	1b49      	subs	r1, r1, r5
 8010c88:	eb62 0206 	sbc.w	r2, r2, r6
 8010c8c:	f04f 0300 	mov.w	r3, #0
 8010c90:	f04f 0400 	mov.w	r4, #0
 8010c94:	0194      	lsls	r4, r2, #6
 8010c96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010c9a:	018b      	lsls	r3, r1, #6
 8010c9c:	1a5b      	subs	r3, r3, r1
 8010c9e:	eb64 0402 	sbc.w	r4, r4, r2
 8010ca2:	f04f 0100 	mov.w	r1, #0
 8010ca6:	f04f 0200 	mov.w	r2, #0
 8010caa:	00e2      	lsls	r2, r4, #3
 8010cac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010cb0:	00d9      	lsls	r1, r3, #3
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	4614      	mov	r4, r2
 8010cb6:	195b      	adds	r3, r3, r5
 8010cb8:	eb44 0406 	adc.w	r4, r4, r6
 8010cbc:	f04f 0100 	mov.w	r1, #0
 8010cc0:	f04f 0200 	mov.w	r2, #0
 8010cc4:	02a2      	lsls	r2, r4, #10
 8010cc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010cca:	0299      	lsls	r1, r3, #10
 8010ccc:	460b      	mov	r3, r1
 8010cce:	4614      	mov	r4, r2
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	4621      	mov	r1, r4
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f04f 0400 	mov.w	r4, #0
 8010cda:	461a      	mov	r2, r3
 8010cdc:	4623      	mov	r3, r4
 8010cde:	f7f7 fb17 	bl	8008310 <__aeabi_uldivmod>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8010ce8:	4b0a      	ldr	r3, [pc, #40]	; (8010d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	0c1b      	lsrs	r3, r3, #16
 8010cee:	f003 0303 	and.w	r3, r3, #3
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	005b      	lsls	r3, r3, #1
 8010cf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8010cf8:	68fa      	ldr	r2, [r7, #12]
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d00:	60bb      	str	r3, [r7, #8]
      break;
 8010d02:	e002      	b.n	8010d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010d04:	4b04      	ldr	r3, [pc, #16]	; (8010d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010d06:	60bb      	str	r3, [r7, #8]
      break;
 8010d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010d0a:	68bb      	ldr	r3, [r7, #8]
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3714      	adds	r7, #20
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d14:	40023800 	.word	0x40023800
 8010d18:	00f42400 	.word	0x00f42400

08010d1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010d20:	4b03      	ldr	r3, [pc, #12]	; (8010d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8010d22:	681b      	ldr	r3, [r3, #0]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	20000018 	.word	0x20000018

08010d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010d38:	f7ff fff0 	bl	8010d1c <HAL_RCC_GetHCLKFreq>
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	4b05      	ldr	r3, [pc, #20]	; (8010d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010d40:	689b      	ldr	r3, [r3, #8]
 8010d42:	0a9b      	lsrs	r3, r3, #10
 8010d44:	f003 0307 	and.w	r3, r3, #7
 8010d48:	4a03      	ldr	r2, [pc, #12]	; (8010d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010d4a:	5cd3      	ldrb	r3, [r2, r3]
 8010d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	40023800 	.word	0x40023800
 8010d58:	08020ec0 	.word	0x08020ec0

08010d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010d60:	f7ff ffdc 	bl	8010d1c <HAL_RCC_GetHCLKFreq>
 8010d64:	4601      	mov	r1, r0
 8010d66:	4b05      	ldr	r3, [pc, #20]	; (8010d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8010d68:	689b      	ldr	r3, [r3, #8]
 8010d6a:	0b5b      	lsrs	r3, r3, #13
 8010d6c:	f003 0307 	and.w	r3, r3, #7
 8010d70:	4a03      	ldr	r2, [pc, #12]	; (8010d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010d72:	5cd3      	ldrb	r3, [r2, r3]
 8010d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	40023800 	.word	0x40023800
 8010d80:	08020ec0 	.word	0x08020ec0

08010d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f003 0301 	and.w	r3, r3, #1
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d012      	beq.n	8010dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8010dac:	4b69      	ldr	r3, [pc, #420]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010dae:	689b      	ldr	r3, [r3, #8]
 8010db0:	4a68      	ldr	r2, [pc, #416]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010db2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010db6:	6093      	str	r3, [r2, #8]
 8010db8:	4b66      	ldr	r3, [pc, #408]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010dba:	689a      	ldr	r2, [r3, #8]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc0:	4964      	ldr	r1, [pc, #400]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d101      	bne.n	8010dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d017      	beq.n	8010e0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010dde:	4b5d      	ldr	r3, [pc, #372]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dec:	4959      	ldr	r1, [pc, #356]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010dee:	4313      	orrs	r3, r2
 8010df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010dfc:	d101      	bne.n	8010e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d101      	bne.n	8010e0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d017      	beq.n	8010e4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010e1a:	4b4e      	ldr	r3, [pc, #312]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e28:	494a      	ldr	r1, [pc, #296]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e38:	d101      	bne.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8010e46:	2301      	movs	r3, #1
 8010e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8010e56:	2301      	movs	r3, #1
 8010e58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f003 0320 	and.w	r3, r3, #32
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 808b 	beq.w	8010f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8010e68:	4b3a      	ldr	r3, [pc, #232]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e6c:	4a39      	ldr	r2, [pc, #228]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e72:	6413      	str	r3, [r2, #64]	; 0x40
 8010e74:	4b37      	ldr	r3, [pc, #220]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e7c:	60bb      	str	r3, [r7, #8]
 8010e7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010e80:	4b35      	ldr	r3, [pc, #212]	; (8010f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4a34      	ldr	r2, [pc, #208]	; (8010f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010e8c:	f7fd ff62 	bl	800ed54 <HAL_GetTick>
 8010e90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8010e92:	e008      	b.n	8010ea6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010e94:	f7fd ff5e 	bl	800ed54 <HAL_GetTick>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	2b64      	cmp	r3, #100	; 0x64
 8010ea0:	d901      	bls.n	8010ea6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8010ea2:	2303      	movs	r3, #3
 8010ea4:	e38d      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8010ea6:	4b2c      	ldr	r3, [pc, #176]	; (8010f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d0f0      	beq.n	8010e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8010eb2:	4b28      	ldr	r3, [pc, #160]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010eba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d035      	beq.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010eca:	693a      	ldr	r2, [r7, #16]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d02e      	beq.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010ed0:	4b20      	ldr	r3, [pc, #128]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ed8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010eda:	4b1e      	ldr	r3, [pc, #120]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ede:	4a1d      	ldr	r2, [pc, #116]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010ee4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010ee6:	4b1b      	ldr	r3, [pc, #108]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eea:	4a1a      	ldr	r2, [pc, #104]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8010ef2:	4a18      	ldr	r2, [pc, #96]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8010ef8:	4b16      	ldr	r3, [pc, #88]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d114      	bne.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f04:	f7fd ff26 	bl	800ed54 <HAL_GetTick>
 8010f08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010f0a:	e00a      	b.n	8010f22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010f0c:	f7fd ff22 	bl	800ed54 <HAL_GetTick>
 8010f10:	4602      	mov	r2, r0
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	1ad3      	subs	r3, r2, r3
 8010f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d901      	bls.n	8010f22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e34f      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010f22:	4b0c      	ldr	r3, [pc, #48]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f26:	f003 0302 	and.w	r3, r3, #2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0ee      	beq.n	8010f0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010f3a:	d111      	bne.n	8010f60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8010f3c:	4b05      	ldr	r3, [pc, #20]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010f48:	4b04      	ldr	r3, [pc, #16]	; (8010f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8010f4a:	400b      	ands	r3, r1
 8010f4c:	4901      	ldr	r1, [pc, #4]	; (8010f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	608b      	str	r3, [r1, #8]
 8010f52:	e00b      	b.n	8010f6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8010f54:	40023800 	.word	0x40023800
 8010f58:	40007000 	.word	0x40007000
 8010f5c:	0ffffcff 	.word	0x0ffffcff
 8010f60:	4bb3      	ldr	r3, [pc, #716]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f62:	689b      	ldr	r3, [r3, #8]
 8010f64:	4ab2      	ldr	r2, [pc, #712]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8010f6a:	6093      	str	r3, [r2, #8]
 8010f6c:	4bb0      	ldr	r3, [pc, #704]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f78:	49ad      	ldr	r1, [pc, #692]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f7a:	4313      	orrs	r3, r2
 8010f7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f003 0310 	and.w	r3, r3, #16
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d010      	beq.n	8010fac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010f8a:	4ba9      	ldr	r3, [pc, #676]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f90:	4aa7      	ldr	r2, [pc, #668]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010f96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8010f9a:	4ba5      	ldr	r3, [pc, #660]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010f9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa4:	49a2      	ldr	r1, [pc, #648]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d00a      	beq.n	8010fce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010fb8:	4b9d      	ldr	r3, [pc, #628]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fc6:	499a      	ldr	r1, [pc, #616]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00a      	beq.n	8010ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010fda:	4b95      	ldr	r3, [pc, #596]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fe8:	4991      	ldr	r1, [pc, #580]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010fea:	4313      	orrs	r3, r2
 8010fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00a      	beq.n	8011012 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010ffc:	4b8c      	ldr	r3, [pc, #560]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8010ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801100a:	4989      	ldr	r1, [pc, #548]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801100c:	4313      	orrs	r3, r2
 801100e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00a      	beq.n	8011034 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801101e:	4b84      	ldr	r3, [pc, #528]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011024:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801102c:	4980      	ldr	r1, [pc, #512]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801102e:	4313      	orrs	r3, r2
 8011030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00a      	beq.n	8011056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011040:	4b7b      	ldr	r3, [pc, #492]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011046:	f023 0203 	bic.w	r2, r3, #3
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801104e:	4978      	ldr	r1, [pc, #480]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011050:	4313      	orrs	r3, r2
 8011052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00a      	beq.n	8011078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011062:	4b73      	ldr	r3, [pc, #460]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011068:	f023 020c 	bic.w	r2, r3, #12
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011070:	496f      	ldr	r1, [pc, #444]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011072:	4313      	orrs	r3, r2
 8011074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00a      	beq.n	801109a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011084:	4b6a      	ldr	r3, [pc, #424]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801108a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011092:	4967      	ldr	r1, [pc, #412]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011094:	4313      	orrs	r3, r2
 8011096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00a      	beq.n	80110bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80110a6:	4b62      	ldr	r3, [pc, #392]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80110a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110b4:	495e      	ldr	r1, [pc, #376]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80110b6:	4313      	orrs	r3, r2
 80110b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d00a      	beq.n	80110de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80110c8:	4b59      	ldr	r3, [pc, #356]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80110ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110d6:	4956      	ldr	r1, [pc, #344]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80110d8:	4313      	orrs	r3, r2
 80110da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d00a      	beq.n	8011100 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80110ea:	4b51      	ldr	r3, [pc, #324]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80110ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110f8:	494d      	ldr	r1, [pc, #308]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80110fa:	4313      	orrs	r3, r2
 80110fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00a      	beq.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801110c:	4b48      	ldr	r3, [pc, #288]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011112:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801111a:	4945      	ldr	r1, [pc, #276]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801111c:	4313      	orrs	r3, r2
 801111e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00a      	beq.n	8011144 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801112e:	4b40      	ldr	r3, [pc, #256]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011134:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801113c:	493c      	ldr	r1, [pc, #240]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801113e:	4313      	orrs	r3, r2
 8011140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011150:	4b37      	ldr	r3, [pc, #220]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011156:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801115e:	4934      	ldr	r1, [pc, #208]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011160:	4313      	orrs	r3, r2
 8011162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801116e:	2b00      	cmp	r3, #0
 8011170:	d011      	beq.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8011172:	4b2f      	ldr	r3, [pc, #188]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011178:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011180:	492b      	ldr	r1, [pc, #172]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011182:	4313      	orrs	r3, r2
 8011184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801118c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011190:	d101      	bne.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8011192:	2301      	movs	r3, #1
 8011194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 0308 	and.w	r3, r3, #8
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d001      	beq.n	80111a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80111a2:	2301      	movs	r3, #1
 80111a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00a      	beq.n	80111c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80111b2:	4b1f      	ldr	r3, [pc, #124]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80111b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111c0:	491b      	ldr	r1, [pc, #108]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80111c2:	4313      	orrs	r3, r2
 80111c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00b      	beq.n	80111ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80111d4:	4b16      	ldr	r3, [pc, #88]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80111d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111e4:	4912      	ldr	r1, [pc, #72]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80111e6:	4313      	orrs	r3, r2
 80111e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00b      	beq.n	8011210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80111f8:	4b0d      	ldr	r3, [pc, #52]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80111fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011208:	4909      	ldr	r1, [pc, #36]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801120a:	4313      	orrs	r3, r2
 801120c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00f      	beq.n	801123c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801121c:	4b04      	ldr	r3, [pc, #16]	; (8011230 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801121e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011222:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801122c:	e002      	b.n	8011234 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 801122e:	bf00      	nop
 8011230:	40023800 	.word	0x40023800
 8011234:	4985      	ldr	r1, [pc, #532]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011236:	4313      	orrs	r3, r2
 8011238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00b      	beq.n	8011260 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8011248:	4b80      	ldr	r3, [pc, #512]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801124a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801124e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011258:	497c      	ldr	r1, [pc, #496]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801125a:	4313      	orrs	r3, r2
 801125c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	2b01      	cmp	r3, #1
 8011264:	d005      	beq.n	8011272 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801126e:	f040 80d6 	bne.w	801141e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011272:	4b76      	ldr	r3, [pc, #472]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4a75      	ldr	r2, [pc, #468]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011278:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801127c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801127e:	f7fd fd69 	bl	800ed54 <HAL_GetTick>
 8011282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011284:	e008      	b.n	8011298 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011286:	f7fd fd65 	bl	800ed54 <HAL_GetTick>
 801128a:	4602      	mov	r2, r0
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	2b64      	cmp	r3, #100	; 0x64
 8011292:	d901      	bls.n	8011298 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e194      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011298:	4b6c      	ldr	r3, [pc, #432]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d1f0      	bne.n	8011286 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f003 0301 	and.w	r3, r3, #1
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d021      	beq.n	80112f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d11d      	bne.n	80112f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80112b8:	4b64      	ldr	r3, [pc, #400]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80112ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112be:	0c1b      	lsrs	r3, r3, #16
 80112c0:	f003 0303 	and.w	r3, r3, #3
 80112c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80112c6:	4b61      	ldr	r3, [pc, #388]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80112c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112cc:	0e1b      	lsrs	r3, r3, #24
 80112ce:	f003 030f 	and.w	r3, r3, #15
 80112d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	685b      	ldr	r3, [r3, #4]
 80112d8:	019a      	lsls	r2, r3, #6
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	041b      	lsls	r3, r3, #16
 80112de:	431a      	orrs	r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	061b      	lsls	r3, r3, #24
 80112e4:	431a      	orrs	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	071b      	lsls	r3, r3, #28
 80112ec:	4957      	ldr	r1, [pc, #348]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80112ee:	4313      	orrs	r3, r2
 80112f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d004      	beq.n	801130a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011308:	d00a      	beq.n	8011320 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011312:	2b00      	cmp	r3, #0
 8011314:	d02e      	beq.n	8011374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801131e:	d129      	bne.n	8011374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011320:	4b4a      	ldr	r3, [pc, #296]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011326:	0c1b      	lsrs	r3, r3, #16
 8011328:	f003 0303 	and.w	r3, r3, #3
 801132c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801132e:	4b47      	ldr	r3, [pc, #284]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011334:	0f1b      	lsrs	r3, r3, #28
 8011336:	f003 0307 	and.w	r3, r3, #7
 801133a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	019a      	lsls	r2, r3, #6
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	041b      	lsls	r3, r3, #16
 8011346:	431a      	orrs	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	061b      	lsls	r3, r3, #24
 801134e:	431a      	orrs	r2, r3
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	071b      	lsls	r3, r3, #28
 8011354:	493d      	ldr	r1, [pc, #244]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011356:	4313      	orrs	r3, r2
 8011358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801135c:	4b3b      	ldr	r3, [pc, #236]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801135e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011362:	f023 021f 	bic.w	r2, r3, #31
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801136a:	3b01      	subs	r3, #1
 801136c:	4937      	ldr	r1, [pc, #220]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801136e:	4313      	orrs	r3, r2
 8011370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801137c:	2b00      	cmp	r3, #0
 801137e:	d01d      	beq.n	80113bc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011380:	4b32      	ldr	r3, [pc, #200]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011386:	0e1b      	lsrs	r3, r3, #24
 8011388:	f003 030f 	and.w	r3, r3, #15
 801138c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801138e:	4b2f      	ldr	r3, [pc, #188]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011394:	0f1b      	lsrs	r3, r3, #28
 8011396:	f003 0307 	and.w	r3, r3, #7
 801139a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	019a      	lsls	r2, r3, #6
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	041b      	lsls	r3, r3, #16
 80113a8:	431a      	orrs	r2, r3
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	061b      	lsls	r3, r3, #24
 80113ae:	431a      	orrs	r2, r3
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	071b      	lsls	r3, r3, #28
 80113b4:	4925      	ldr	r1, [pc, #148]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80113b6:	4313      	orrs	r3, r2
 80113b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d011      	beq.n	80113ec <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	019a      	lsls	r2, r3, #6
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	041b      	lsls	r3, r3, #16
 80113d4:	431a      	orrs	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	061b      	lsls	r3, r3, #24
 80113dc:	431a      	orrs	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	071b      	lsls	r3, r3, #28
 80113e4:	4919      	ldr	r1, [pc, #100]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80113e6:	4313      	orrs	r3, r2
 80113e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80113ec:	4b17      	ldr	r3, [pc, #92]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a16      	ldr	r2, [pc, #88]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80113f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80113f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113f8:	f7fd fcac 	bl	800ed54 <HAL_GetTick>
 80113fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80113fe:	e008      	b.n	8011412 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011400:	f7fd fca8 	bl	800ed54 <HAL_GetTick>
 8011404:	4602      	mov	r2, r0
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	1ad3      	subs	r3, r2, r3
 801140a:	2b64      	cmp	r3, #100	; 0x64
 801140c:	d901      	bls.n	8011412 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801140e:	2303      	movs	r3, #3
 8011410:	e0d7      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011412:	4b0e      	ldr	r3, [pc, #56]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801141a:	2b00      	cmp	r3, #0
 801141c:	d0f0      	beq.n	8011400 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	2b01      	cmp	r3, #1
 8011422:	f040 80cd 	bne.w	80115c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8011426:	4b09      	ldr	r3, [pc, #36]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a08      	ldr	r2, [pc, #32]	; (801144c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801142c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011432:	f7fd fc8f 	bl	800ed54 <HAL_GetTick>
 8011436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011438:	e00a      	b.n	8011450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801143a:	f7fd fc8b 	bl	800ed54 <HAL_GetTick>
 801143e:	4602      	mov	r2, r0
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	1ad3      	subs	r3, r2, r3
 8011444:	2b64      	cmp	r3, #100	; 0x64
 8011446:	d903      	bls.n	8011450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011448:	2303      	movs	r3, #3
 801144a:	e0ba      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 801144c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011450:	4b5e      	ldr	r3, [pc, #376]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801145c:	d0ed      	beq.n	801143a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011466:	2b00      	cmp	r3, #0
 8011468:	d003      	beq.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801146e:	2b00      	cmp	r3, #0
 8011470:	d009      	beq.n	8011486 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801147a:	2b00      	cmp	r3, #0
 801147c:	d02e      	beq.n	80114dc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011482:	2b00      	cmp	r3, #0
 8011484:	d12a      	bne.n	80114dc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011486:	4b51      	ldr	r3, [pc, #324]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801148c:	0c1b      	lsrs	r3, r3, #16
 801148e:	f003 0303 	and.w	r3, r3, #3
 8011492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011494:	4b4d      	ldr	r3, [pc, #308]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801149a:	0f1b      	lsrs	r3, r3, #28
 801149c:	f003 0307 	and.w	r3, r3, #7
 80114a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	695b      	ldr	r3, [r3, #20]
 80114a6:	019a      	lsls	r2, r3, #6
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	041b      	lsls	r3, r3, #16
 80114ac:	431a      	orrs	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	699b      	ldr	r3, [r3, #24]
 80114b2:	061b      	lsls	r3, r3, #24
 80114b4:	431a      	orrs	r2, r3
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	071b      	lsls	r3, r3, #28
 80114ba:	4944      	ldr	r1, [pc, #272]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80114bc:	4313      	orrs	r3, r2
 80114be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80114c2:	4b42      	ldr	r3, [pc, #264]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80114c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d0:	3b01      	subs	r3, #1
 80114d2:	021b      	lsls	r3, r3, #8
 80114d4:	493d      	ldr	r1, [pc, #244]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80114d6:	4313      	orrs	r3, r2
 80114d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d022      	beq.n	801152e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80114f0:	d11d      	bne.n	801152e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80114f2:	4b36      	ldr	r3, [pc, #216]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80114f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114f8:	0e1b      	lsrs	r3, r3, #24
 80114fa:	f003 030f 	and.w	r3, r3, #15
 80114fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011500:	4b32      	ldr	r3, [pc, #200]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011506:	0f1b      	lsrs	r3, r3, #28
 8011508:	f003 0307 	and.w	r3, r3, #7
 801150c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	695b      	ldr	r3, [r3, #20]
 8011512:	019a      	lsls	r2, r3, #6
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a1b      	ldr	r3, [r3, #32]
 8011518:	041b      	lsls	r3, r3, #16
 801151a:	431a      	orrs	r2, r3
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	061b      	lsls	r3, r3, #24
 8011520:	431a      	orrs	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	071b      	lsls	r3, r3, #28
 8011526:	4929      	ldr	r1, [pc, #164]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011528:	4313      	orrs	r3, r2
 801152a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	f003 0308 	and.w	r3, r3, #8
 8011536:	2b00      	cmp	r3, #0
 8011538:	d028      	beq.n	801158c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801153a:	4b24      	ldr	r3, [pc, #144]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801153c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011540:	0e1b      	lsrs	r3, r3, #24
 8011542:	f003 030f 	and.w	r3, r3, #15
 8011546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011548:	4b20      	ldr	r3, [pc, #128]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801154e:	0c1b      	lsrs	r3, r3, #16
 8011550:	f003 0303 	and.w	r3, r3, #3
 8011554:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	695b      	ldr	r3, [r3, #20]
 801155a:	019a      	lsls	r2, r3, #6
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	041b      	lsls	r3, r3, #16
 8011560:	431a      	orrs	r2, r3
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	061b      	lsls	r3, r3, #24
 8011566:	431a      	orrs	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	69db      	ldr	r3, [r3, #28]
 801156c:	071b      	lsls	r3, r3, #28
 801156e:	4917      	ldr	r1, [pc, #92]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011570:	4313      	orrs	r3, r2
 8011572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011576:	4b15      	ldr	r3, [pc, #84]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801157c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011584:	4911      	ldr	r1, [pc, #68]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011586:	4313      	orrs	r3, r2
 8011588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801158c:	4b0f      	ldr	r3, [pc, #60]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	4a0e      	ldr	r2, [pc, #56]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8011592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011598:	f7fd fbdc 	bl	800ed54 <HAL_GetTick>
 801159c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801159e:	e008      	b.n	80115b2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80115a0:	f7fd fbd8 	bl	800ed54 <HAL_GetTick>
 80115a4:	4602      	mov	r2, r0
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	2b64      	cmp	r3, #100	; 0x64
 80115ac:	d901      	bls.n	80115b2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80115ae:	2303      	movs	r3, #3
 80115b0:	e007      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80115b2:	4b06      	ldr	r3, [pc, #24]	; (80115cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80115be:	d1ef      	bne.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3720      	adds	r7, #32
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	40023800 	.word	0x40023800

080115d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d101      	bne.n	80115e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80115de:	2301      	movs	r3, #1
 80115e0:	e084      	b.n	80116ec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d106      	bne.n	8011602 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2200      	movs	r2, #0
 80115f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7fd f99d 	bl	800e93c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2202      	movs	r2, #2
 8011606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011618:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011622:	d902      	bls.n	801162a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011624:	2300      	movs	r3, #0
 8011626:	60fb      	str	r3, [r7, #12]
 8011628:	e002      	b.n	8011630 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801162e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011638:	d007      	beq.n	801164a <HAL_SPI_Init+0x7a>
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011642:	d002      	beq.n	801164a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2200      	movs	r2, #0
 8011648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801164e:	2b00      	cmp	r3, #0
 8011650:	d10b      	bne.n	801166a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801165a:	d903      	bls.n	8011664 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2202      	movs	r2, #2
 8011660:	631a      	str	r2, [r3, #48]	; 0x30
 8011662:	e002      	b.n	801166a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685a      	ldr	r2, [r3, #4]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	431a      	orrs	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	431a      	orrs	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	695b      	ldr	r3, [r3, #20]
 801167e:	431a      	orrs	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	699b      	ldr	r3, [r3, #24]
 8011684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011688:	431a      	orrs	r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	69db      	ldr	r3, [r3, #28]
 801168e:	431a      	orrs	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6a1b      	ldr	r3, [r3, #32]
 8011694:	ea42 0103 	orr.w	r1, r2, r3
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	430a      	orrs	r2, r1
 80116a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	0c1b      	lsrs	r3, r3, #16
 80116aa:	f003 0204 	and.w	r2, r3, #4
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b2:	431a      	orrs	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116b8:	431a      	orrs	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	ea42 0103 	orr.w	r1, r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	68fa      	ldr	r2, [r7, #12]
 80116c8:	430a      	orrs	r2, r1
 80116ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	69da      	ldr	r2, [r3, #28]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80116da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2201      	movs	r2, #1
 80116e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3710      	adds	r7, #16
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b088      	sub	sp, #32
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	603b      	str	r3, [r7, #0]
 8011700:	4613      	mov	r3, r2
 8011702:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011704:	2300      	movs	r3, #0
 8011706:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801170e:	2b01      	cmp	r3, #1
 8011710:	d101      	bne.n	8011716 <HAL_SPI_Transmit+0x22>
 8011712:	2302      	movs	r3, #2
 8011714:	e150      	b.n	80119b8 <HAL_SPI_Transmit+0x2c4>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2201      	movs	r2, #1
 801171a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801171e:	f7fd fb19 	bl	800ed54 <HAL_GetTick>
 8011722:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011724:	88fb      	ldrh	r3, [r7, #6]
 8011726:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801172e:	b2db      	uxtb	r3, r3
 8011730:	2b01      	cmp	r3, #1
 8011732:	d002      	beq.n	801173a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011734:	2302      	movs	r3, #2
 8011736:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011738:	e135      	b.n	80119a6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <HAL_SPI_Transmit+0x52>
 8011740:	88fb      	ldrh	r3, [r7, #6]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d102      	bne.n	801174c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011746:	2301      	movs	r3, #1
 8011748:	77fb      	strb	r3, [r7, #31]
    goto error;
 801174a:	e12c      	b.n	80119a6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2203      	movs	r2, #3
 8011750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2200      	movs	r2, #0
 8011758:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	88fa      	ldrh	r2, [r7, #6]
 8011764:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	88fa      	ldrh	r2, [r7, #6]
 801176a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2200      	movs	r2, #0
 8011770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2200      	movs	r2, #0
 8011776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2200      	movs	r2, #0
 801177e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2200      	movs	r2, #0
 801178c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011796:	d107      	bne.n	80117a8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80117a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117b2:	2b40      	cmp	r3, #64	; 0x40
 80117b4:	d007      	beq.n	80117c6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	68db      	ldr	r3, [r3, #12]
 80117ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80117ce:	d94b      	bls.n	8011868 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d002      	beq.n	80117de <HAL_SPI_Transmit+0xea>
 80117d8:	8afb      	ldrh	r3, [r7, #22]
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d13e      	bne.n	801185c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117e2:	881a      	ldrh	r2, [r3, #0]
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ee:	1c9a      	adds	r2, r3, #2
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	3b01      	subs	r3, #1
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011802:	e02b      	b.n	801185c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	f003 0302 	and.w	r3, r3, #2
 801180e:	2b02      	cmp	r3, #2
 8011810:	d112      	bne.n	8011838 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011816:	881a      	ldrh	r2, [r3, #0]
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011822:	1c9a      	adds	r2, r3, #2
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801182c:	b29b      	uxth	r3, r3
 801182e:	3b01      	subs	r3, #1
 8011830:	b29a      	uxth	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011836:	e011      	b.n	801185c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011838:	f7fd fa8c 	bl	800ed54 <HAL_GetTick>
 801183c:	4602      	mov	r2, r0
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	429a      	cmp	r2, r3
 8011846:	d803      	bhi.n	8011850 <HAL_SPI_Transmit+0x15c>
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184e:	d102      	bne.n	8011856 <HAL_SPI_Transmit+0x162>
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8011856:	2303      	movs	r3, #3
 8011858:	77fb      	strb	r3, [r7, #31]
          goto error;
 801185a:	e0a4      	b.n	80119a6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011860:	b29b      	uxth	r3, r3
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1ce      	bne.n	8011804 <HAL_SPI_Transmit+0x110>
 8011866:	e07c      	b.n	8011962 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <HAL_SPI_Transmit+0x182>
 8011870:	8afb      	ldrh	r3, [r7, #22]
 8011872:	2b01      	cmp	r3, #1
 8011874:	d170      	bne.n	8011958 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801187a:	b29b      	uxth	r3, r3
 801187c:	2b01      	cmp	r3, #1
 801187e:	d912      	bls.n	80118a6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011884:	881a      	ldrh	r2, [r3, #0]
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011890:	1c9a      	adds	r2, r3, #2
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801189a:	b29b      	uxth	r3, r3
 801189c:	3b02      	subs	r3, #2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80118a4:	e058      	b.n	8011958 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	330c      	adds	r3, #12
 80118b0:	7812      	ldrb	r2, [r2, #0]
 80118b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118b8:	1c5a      	adds	r2, r3, #1
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	3b01      	subs	r3, #1
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80118cc:	e044      	b.n	8011958 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	f003 0302 	and.w	r3, r3, #2
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d12b      	bne.n	8011934 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d912      	bls.n	801190c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ea:	881a      	ldrh	r2, [r3, #0]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118f6:	1c9a      	adds	r2, r3, #2
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011900:	b29b      	uxth	r3, r3
 8011902:	3b02      	subs	r3, #2
 8011904:	b29a      	uxth	r2, r3
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	87da      	strh	r2, [r3, #62]	; 0x3e
 801190a:	e025      	b.n	8011958 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	330c      	adds	r3, #12
 8011916:	7812      	ldrb	r2, [r2, #0]
 8011918:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011928:	b29b      	uxth	r3, r3
 801192a:	3b01      	subs	r3, #1
 801192c:	b29a      	uxth	r2, r3
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011932:	e011      	b.n	8011958 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011934:	f7fd fa0e 	bl	800ed54 <HAL_GetTick>
 8011938:	4602      	mov	r2, r0
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	429a      	cmp	r2, r3
 8011942:	d803      	bhi.n	801194c <HAL_SPI_Transmit+0x258>
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801194a:	d102      	bne.n	8011952 <HAL_SPI_Transmit+0x25e>
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d102      	bne.n	8011958 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8011952:	2303      	movs	r3, #3
 8011954:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011956:	e026      	b.n	80119a6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801195c:	b29b      	uxth	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1b5      	bne.n	80118ce <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011962:	69ba      	ldr	r2, [r7, #24]
 8011964:	6839      	ldr	r1, [r7, #0]
 8011966:	68f8      	ldr	r0, [r7, #12]
 8011968:	f000 fdf3 	bl	8012552 <SPI_EndRxTxTransaction>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d002      	beq.n	8011978 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2220      	movs	r2, #32
 8011976:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	689b      	ldr	r3, [r3, #8]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d10a      	bne.n	8011996 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011980:	2300      	movs	r3, #0
 8011982:	613b      	str	r3, [r7, #16]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	613b      	str	r3, [r7, #16]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	613b      	str	r3, [r7, #16]
 8011994:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801199a:	2b00      	cmp	r3, #0
 801199c:	d002      	beq.n	80119a4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 801199e:	2301      	movs	r3, #1
 80119a0:	77fb      	strb	r3, [r7, #31]
 80119a2:	e000      	b.n	80119a6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80119a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2201      	movs	r2, #1
 80119aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2200      	movs	r2, #0
 80119b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80119b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3720      	adds	r7, #32
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08a      	sub	sp, #40	; 0x28
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	607a      	str	r2, [r7, #4]
 80119cc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80119ce:	2301      	movs	r3, #1
 80119d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80119d2:	2300      	movs	r3, #0
 80119d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d101      	bne.n	80119e6 <HAL_SPI_TransmitReceive+0x26>
 80119e2:	2302      	movs	r3, #2
 80119e4:	e1fb      	b.n	8011dde <HAL_SPI_TransmitReceive+0x41e>
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2201      	movs	r2, #1
 80119ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80119ee:	f7fd f9b1 	bl	800ed54 <HAL_GetTick>
 80119f2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80119fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8011a02:	887b      	ldrh	r3, [r7, #2]
 8011a04:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8011a06:	887b      	ldrh	r3, [r7, #2]
 8011a08:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011a0a:	7efb      	ldrb	r3, [r7, #27]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d00e      	beq.n	8011a2e <HAL_SPI_TransmitReceive+0x6e>
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011a16:	d106      	bne.n	8011a26 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d102      	bne.n	8011a26 <HAL_SPI_TransmitReceive+0x66>
 8011a20:	7efb      	ldrb	r3, [r7, #27]
 8011a22:	2b04      	cmp	r3, #4
 8011a24:	d003      	beq.n	8011a2e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8011a26:	2302      	movs	r3, #2
 8011a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011a2c:	e1cd      	b.n	8011dca <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d005      	beq.n	8011a40 <HAL_SPI_TransmitReceive+0x80>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d002      	beq.n	8011a40 <HAL_SPI_TransmitReceive+0x80>
 8011a3a:	887b      	ldrh	r3, [r7, #2]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d103      	bne.n	8011a48 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8011a40:	2301      	movs	r3, #1
 8011a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011a46:	e1c0      	b.n	8011dca <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	2b04      	cmp	r3, #4
 8011a52:	d003      	beq.n	8011a5c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2205      	movs	r2, #5
 8011a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	887a      	ldrh	r2, [r7, #2]
 8011a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	887a      	ldrh	r2, [r7, #2]
 8011a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	887a      	ldrh	r2, [r7, #2]
 8011a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	887a      	ldrh	r2, [r7, #2]
 8011a88:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011a9e:	d802      	bhi.n	8011aa6 <HAL_SPI_TransmitReceive+0xe6>
 8011aa0:	8a3b      	ldrh	r3, [r7, #16]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d908      	bls.n	8011ab8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	685a      	ldr	r2, [r3, #4]
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011ab4:	605a      	str	r2, [r3, #4]
 8011ab6:	e007      	b.n	8011ac8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	685a      	ldr	r2, [r3, #4]
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011ac6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ad2:	2b40      	cmp	r3, #64	; 0x40
 8011ad4:	d007      	beq.n	8011ae6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011aee:	d97c      	bls.n	8011bea <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <HAL_SPI_TransmitReceive+0x13e>
 8011af8:	8a7b      	ldrh	r3, [r7, #18]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d169      	bne.n	8011bd2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b02:	881a      	ldrh	r2, [r3, #0]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b0e:	1c9a      	adds	r2, r3, #2
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	3b01      	subs	r3, #1
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b22:	e056      	b.n	8011bd2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	f003 0302 	and.w	r3, r3, #2
 8011b2e:	2b02      	cmp	r3, #2
 8011b30:	d11b      	bne.n	8011b6a <HAL_SPI_TransmitReceive+0x1aa>
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d016      	beq.n	8011b6a <HAL_SPI_TransmitReceive+0x1aa>
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d113      	bne.n	8011b6a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b46:	881a      	ldrh	r2, [r3, #0]
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b52:	1c9a      	adds	r2, r3, #2
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011b66:	2300      	movs	r3, #0
 8011b68:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	689b      	ldr	r3, [r3, #8]
 8011b70:	f003 0301 	and.w	r3, r3, #1
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d11c      	bne.n	8011bb2 <HAL_SPI_TransmitReceive+0x1f2>
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d016      	beq.n	8011bb2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	68da      	ldr	r2, [r3, #12]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b8e:	b292      	uxth	r2, r2
 8011b90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b96:	1c9a      	adds	r2, r3, #2
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011bb2:	f7fd f8cf 	bl	800ed54 <HAL_GetTick>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d807      	bhi.n	8011bd2 <HAL_SPI_TransmitReceive+0x212>
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc8:	d003      	beq.n	8011bd2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011bca:	2303      	movs	r3, #3
 8011bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011bd0:	e0fb      	b.n	8011dca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d1a3      	bne.n	8011b24 <HAL_SPI_TransmitReceive+0x164>
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d19d      	bne.n	8011b24 <HAL_SPI_TransmitReceive+0x164>
 8011be8:	e0df      	b.n	8011daa <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <HAL_SPI_TransmitReceive+0x23a>
 8011bf2:	8a7b      	ldrh	r3, [r7, #18]
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	f040 80cb 	bne.w	8011d90 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d912      	bls.n	8011c2a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c08:	881a      	ldrh	r2, [r3, #0]
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c14:	1c9a      	adds	r2, r3, #2
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	3b02      	subs	r3, #2
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c28:	e0b2      	b.n	8011d90 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	330c      	adds	r3, #12
 8011c34:	7812      	ldrb	r2, [r2, #0]
 8011c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c3c:	1c5a      	adds	r2, r3, #1
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c50:	e09e      	b.n	8011d90 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	f003 0302 	and.w	r3, r3, #2
 8011c5c:	2b02      	cmp	r3, #2
 8011c5e:	d134      	bne.n	8011cca <HAL_SPI_TransmitReceive+0x30a>
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d02f      	beq.n	8011cca <HAL_SPI_TransmitReceive+0x30a>
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d12c      	bne.n	8011cca <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d912      	bls.n	8011ca0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c7e:	881a      	ldrh	r2, [r3, #0]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c8a:	1c9a      	adds	r2, r3, #2
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	3b02      	subs	r3, #2
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c9e:	e012      	b.n	8011cc6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	330c      	adds	r3, #12
 8011caa:	7812      	ldrb	r2, [r2, #0]
 8011cac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cb2:	1c5a      	adds	r2, r3, #1
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	3b01      	subs	r3, #1
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	f003 0301 	and.w	r3, r3, #1
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d148      	bne.n	8011d6a <HAL_SPI_TransmitReceive+0x3aa>
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d042      	beq.n	8011d6a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	2b01      	cmp	r3, #1
 8011cee:	d923      	bls.n	8011d38 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	68da      	ldr	r2, [r3, #12]
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfa:	b292      	uxth	r2, r2
 8011cfc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d02:	1c9a      	adds	r2, r3, #2
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	3b02      	subs	r3, #2
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d81f      	bhi.n	8011d66 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	685a      	ldr	r2, [r3, #4]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011d34:	605a      	str	r2, [r3, #4]
 8011d36:	e016      	b.n	8011d66 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f103 020c 	add.w	r2, r3, #12
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d44:	7812      	ldrb	r2, [r2, #0]
 8011d46:	b2d2      	uxtb	r2, r2
 8011d48:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d4e:	1c5a      	adds	r2, r3, #1
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	3b01      	subs	r3, #1
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011d66:	2301      	movs	r3, #1
 8011d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011d6a:	f7fc fff3 	bl	800ed54 <HAL_GetTick>
 8011d6e:	4602      	mov	r2, r0
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d803      	bhi.n	8011d82 <HAL_SPI_TransmitReceive+0x3c2>
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d80:	d102      	bne.n	8011d88 <HAL_SPI_TransmitReceive+0x3c8>
 8011d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d103      	bne.n	8011d90 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8011d88:	2303      	movs	r3, #3
 8011d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011d8e:	e01c      	b.n	8011dca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f47f af5b 	bne.w	8011c52 <HAL_SPI_TransmitReceive+0x292>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	f47f af54 	bne.w	8011c52 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011daa:	69fa      	ldr	r2, [r7, #28]
 8011dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f000 fbcf 	bl	8012552 <SPI_EndRxTxTransaction>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d006      	beq.n	8011dc8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2220      	movs	r2, #32
 8011dc4:	661a      	str	r2, [r3, #96]	; 0x60
 8011dc6:	e000      	b.n	8011dca <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011dc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3728      	adds	r7, #40	; 0x28
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
	...

08011de8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b086      	sub	sp, #24
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d101      	bne.n	8011e08 <HAL_SPI_TransmitReceive_DMA+0x20>
 8011e04:	2302      	movs	r3, #2
 8011e06:	e16c      	b.n	80120e2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8011e1e:	7dbb      	ldrb	r3, [r7, #22]
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d00d      	beq.n	8011e40 <HAL_SPI_TransmitReceive_DMA+0x58>
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011e2a:	d106      	bne.n	8011e3a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d102      	bne.n	8011e3a <HAL_SPI_TransmitReceive_DMA+0x52>
 8011e34:	7dbb      	ldrb	r3, [r7, #22]
 8011e36:	2b04      	cmp	r3, #4
 8011e38:	d002      	beq.n	8011e40 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8011e3a:	2302      	movs	r3, #2
 8011e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011e3e:	e14b      	b.n	80120d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d005      	beq.n	8011e52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d002      	beq.n	8011e52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8011e4c:	887b      	ldrh	r3, [r7, #2]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d102      	bne.n	8011e58 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8011e52:	2301      	movs	r3, #1
 8011e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011e56:	e13f      	b.n	80120d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	2b04      	cmp	r3, #4
 8011e62:	d003      	beq.n	8011e6c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2205      	movs	r2, #5
 8011e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	68ba      	ldr	r2, [r7, #8]
 8011e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	887a      	ldrh	r2, [r7, #2]
 8011e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	887a      	ldrh	r2, [r7, #2]
 8011e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	887a      	ldrh	r2, [r7, #2]
 8011e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	887a      	ldrh	r2, [r7, #2]
 8011e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	685a      	ldr	r2, [r3, #4]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8011eb4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011ebe:	d908      	bls.n	8011ed2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011ece:	605a      	str	r2, [r3, #4]
 8011ed0:	e06f      	b.n	8011fb2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	685a      	ldr	r2, [r3, #4]
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011ee0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ee6:	699b      	ldr	r3, [r3, #24]
 8011ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011eec:	d126      	bne.n	8011f3c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011ef2:	f003 0301 	and.w	r3, r3, #1
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d10f      	bne.n	8011f1a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	685a      	ldr	r2, [r3, #4]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011f08:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	085b      	lsrs	r3, r3, #1
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011f18:	e010      	b.n	8011f3c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	685a      	ldr	r2, [r3, #4]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011f28:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	085b      	lsrs	r3, r3, #1
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	3301      	adds	r3, #1
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f46:	d134      	bne.n	8011fb2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	685a      	ldr	r2, [r3, #4]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011f56:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	f003 0301 	and.w	r3, r3, #1
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d111      	bne.n	8011f8c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	685a      	ldr	r2, [r3, #4]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011f76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	085b      	lsrs	r3, r3, #1
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011f8a:	e012      	b.n	8011fb2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	685a      	ldr	r2, [r3, #4]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011f9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	085b      	lsrs	r3, r3, #1
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	3301      	adds	r3, #1
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	2b04      	cmp	r3, #4
 8011fbc:	d108      	bne.n	8011fd0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fc2:	4a4a      	ldr	r2, [pc, #296]	; (80120ec <HAL_SPI_TransmitReceive_DMA+0x304>)
 8011fc4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fca:	4a49      	ldr	r2, [pc, #292]	; (80120f0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8011fcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8011fce:	e007      	b.n	8011fe0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fd4:	4a47      	ldr	r2, [pc, #284]	; (80120f4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8011fd6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fdc:	4a46      	ldr	r2, [pc, #280]	; (80120f8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8011fde:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fe4:	4a45      	ldr	r2, [pc, #276]	; (80120fc <HAL_SPI_TransmitReceive_DMA+0x314>)
 8011fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fec:	2200      	movs	r2, #0
 8011fee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	330c      	adds	r3, #12
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012000:	461a      	mov	r2, r3
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012008:	b29b      	uxth	r3, r3
 801200a:	f7fd f86f 	bl	800f0ec <HAL_DMA_Start_IT>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00c      	beq.n	801202e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012018:	f043 0210 	orr.w	r2, r3, #16
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8012020:	2301      	movs	r3, #1
 8012022:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2201      	movs	r2, #1
 8012028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 801202c:	e054      	b.n	80120d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	685a      	ldr	r2, [r3, #4]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f042 0201 	orr.w	r2, r2, #1
 801203c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012042:	2200      	movs	r2, #0
 8012044:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801204a:	2200      	movs	r2, #0
 801204c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012052:	2200      	movs	r2, #0
 8012054:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801205a:	2200      	movs	r2, #0
 801205c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012066:	4619      	mov	r1, r3
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	330c      	adds	r3, #12
 801206e:	461a      	mov	r2, r3
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012074:	b29b      	uxth	r3, r3
 8012076:	f7fd f839 	bl	800f0ec <HAL_DMA_Start_IT>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00c      	beq.n	801209a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012084:	f043 0210 	orr.w	r2, r3, #16
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 801208c:	2301      	movs	r3, #1
 801208e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2201      	movs	r2, #1
 8012094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8012098:	e01e      	b.n	80120d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120a4:	2b40      	cmp	r3, #64	; 0x40
 80120a6:	d007      	beq.n	80120b8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120b6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	685a      	ldr	r2, [r3, #4]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f042 0220 	orr.w	r2, r2, #32
 80120c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	685a      	ldr	r2, [r3, #4]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f042 0202 	orr.w	r2, r2, #2
 80120d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3718      	adds	r7, #24
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	0801227d 	.word	0x0801227d
 80120f0:	08012165 	.word	0x08012165
 80120f4:	08012299 	.word	0x08012299
 80120f8:	080121eb 	.word	0x080121eb
 80120fc:	080122b5 	.word	0x080122b5

08012100 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012108:	bf00      	nop
 801210a:	370c      	adds	r7, #12
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr

08012114 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801211c:	bf00      	nop
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012130:	bf00      	nop
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012170:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012172:	f7fc fdef 	bl	800ed54 <HAL_GetTick>
 8012176:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012186:	d02a      	beq.n	80121de <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685a      	ldr	r2, [r3, #4]
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f022 0220 	bic.w	r2, r2, #32
 8012196:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	685a      	ldr	r2, [r3, #4]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f022 0203 	bic.w	r2, r2, #3
 80121a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80121a8:	68ba      	ldr	r2, [r7, #8]
 80121aa:	2164      	movs	r1, #100	; 0x64
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f000 f978 	bl	80124a2 <SPI_EndRxTransaction>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2220      	movs	r2, #32
 80121bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2200      	movs	r2, #0
 80121c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2201      	movs	r2, #1
 80121ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d003      	beq.n	80121de <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f7ff ffba 	bl	8012150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80121dc:	e002      	b.n	80121e4 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80121de:	68f8      	ldr	r0, [r7, #12]
 80121e0:	f7ff ff8e 	bl	8012100 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b084      	sub	sp, #16
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80121f8:	f7fc fdac 	bl	800ed54 <HAL_GetTick>
 80121fc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801220c:	d030      	beq.n	8012270 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	685a      	ldr	r2, [r3, #4]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f022 0220 	bic.w	r2, r2, #32
 801221c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	2164      	movs	r1, #100	; 0x64
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	f000 f995 	bl	8012552 <SPI_EndRxTxTransaction>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d005      	beq.n	801223a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012232:	f043 0220 	orr.w	r2, r3, #32
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	685a      	ldr	r2, [r3, #4]
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f022 0203 	bic.w	r2, r2, #3
 8012248:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2200      	movs	r2, #0
 801224e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2200      	movs	r2, #0
 8012254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2201      	movs	r2, #1
 801225c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012264:	2b00      	cmp	r3, #0
 8012266:	d003      	beq.n	8012270 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f7ff ff71 	bl	8012150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801226e:	e002      	b.n	8012276 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8012270:	68f8      	ldr	r0, [r7, #12]
 8012272:	f7ff ff4f 	bl	8012114 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012276:	3710      	adds	r7, #16
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}

0801227c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012288:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f7ff ff4c 	bl	8012128 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012290:	bf00      	nop
 8012292:	3710      	adds	r7, #16
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff ff48 	bl	801213c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80122ac:	bf00      	nop
 80122ae:	3710      	adds	r7, #16
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f022 0203 	bic.w	r2, r2, #3
 80122d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80122d6:	f043 0210 	orr.w	r2, r3, #16
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2201      	movs	r2, #1
 80122e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f7ff ff32 	bl	8012150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80122ec:	bf00      	nop
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b084      	sub	sp, #16
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	603b      	str	r3, [r7, #0]
 8012300:	4613      	mov	r3, r2
 8012302:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012304:	e04c      	b.n	80123a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801230c:	d048      	beq.n	80123a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801230e:	f7fc fd21 	bl	800ed54 <HAL_GetTick>
 8012312:	4602      	mov	r2, r0
 8012314:	69bb      	ldr	r3, [r7, #24]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	683a      	ldr	r2, [r7, #0]
 801231a:	429a      	cmp	r2, r3
 801231c:	d902      	bls.n	8012324 <SPI_WaitFlagStateUntilTimeout+0x30>
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d13d      	bne.n	80123a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	685a      	ldr	r2, [r3, #4]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012332:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801233c:	d111      	bne.n	8012362 <SPI_WaitFlagStateUntilTimeout+0x6e>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	689b      	ldr	r3, [r3, #8]
 8012342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012346:	d004      	beq.n	8012352 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012350:	d107      	bne.n	8012362 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012360:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801236a:	d10f      	bne.n	801238c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801238a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2201      	movs	r2, #1
 8012390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2200      	movs	r2, #0
 8012398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801239c:	2303      	movs	r3, #3
 801239e:	e00f      	b.n	80123c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	689a      	ldr	r2, [r3, #8]
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	4013      	ands	r3, r2
 80123aa:	68ba      	ldr	r2, [r7, #8]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	bf0c      	ite	eq
 80123b0:	2301      	moveq	r3, #1
 80123b2:	2300      	movne	r3, #0
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	461a      	mov	r2, r3
 80123b8:	79fb      	ldrb	r3, [r7, #7]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d1a3      	bne.n	8012306 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80123be:	2300      	movs	r3, #0
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3710      	adds	r7, #16
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
 80123d4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80123d6:	e057      	b.n	8012488 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80123de:	d106      	bne.n	80123ee <SPI_WaitFifoStateUntilTimeout+0x26>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d103      	bne.n	80123ee <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	330c      	adds	r3, #12
 80123ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f4:	d048      	beq.n	8012488 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80123f6:	f7fc fcad 	bl	800ed54 <HAL_GetTick>
 80123fa:	4602      	mov	r2, r0
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	1ad3      	subs	r3, r2, r3
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	429a      	cmp	r2, r3
 8012404:	d902      	bls.n	801240c <SPI_WaitFifoStateUntilTimeout+0x44>
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d13d      	bne.n	8012488 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	685a      	ldr	r2, [r3, #4]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801241a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012424:	d111      	bne.n	801244a <SPI_WaitFifoStateUntilTimeout+0x82>
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	689b      	ldr	r3, [r3, #8]
 801242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801242e:	d004      	beq.n	801243a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012438:	d107      	bne.n	801244a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012448:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801244e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012452:	d10f      	bne.n	8012474 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012462:	601a      	str	r2, [r3, #0]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012472:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2201      	movs	r2, #1
 8012478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2200      	movs	r2, #0
 8012480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8012484:	2303      	movs	r3, #3
 8012486:	e008      	b.n	801249a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	689a      	ldr	r2, [r3, #8]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	4013      	ands	r3, r2
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	429a      	cmp	r2, r3
 8012496:	d19f      	bne.n	80123d8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b086      	sub	sp, #24
 80124a6:	af02      	add	r7, sp, #8
 80124a8:	60f8      	str	r0, [r7, #12]
 80124aa:	60b9      	str	r1, [r7, #8]
 80124ac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80124b6:	d111      	bne.n	80124dc <SPI_EndRxTransaction+0x3a>
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124c0:	d004      	beq.n	80124cc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124ca:	d107      	bne.n	80124dc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80124da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	2200      	movs	r2, #0
 80124e4:	2180      	movs	r1, #128	; 0x80
 80124e6:	68f8      	ldr	r0, [r7, #12]
 80124e8:	f7ff ff04 	bl	80122f4 <SPI_WaitFlagStateUntilTimeout>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d007      	beq.n	8012502 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80124f6:	f043 0220 	orr.w	r2, r3, #32
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80124fe:	2303      	movs	r3, #3
 8012500:	e023      	b.n	801254a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	685b      	ldr	r3, [r3, #4]
 8012506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801250a:	d11d      	bne.n	8012548 <SPI_EndRxTransaction+0xa6>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012514:	d004      	beq.n	8012520 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	689b      	ldr	r3, [r3, #8]
 801251a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801251e:	d113      	bne.n	8012548 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2200      	movs	r2, #0
 8012528:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7ff ff4b 	bl	80123c8 <SPI_WaitFifoStateUntilTimeout>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d007      	beq.n	8012548 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801253c:	f043 0220 	orr.w	r2, r3, #32
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8012544:	2303      	movs	r3, #3
 8012546:	e000      	b.n	801254a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	3710      	adds	r7, #16
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b086      	sub	sp, #24
 8012556:	af02      	add	r7, sp, #8
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	60b9      	str	r1, [r7, #8]
 801255c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	2200      	movs	r2, #0
 8012566:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7ff ff2c 	bl	80123c8 <SPI_WaitFifoStateUntilTimeout>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d007      	beq.n	8012586 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801257a:	f043 0220 	orr.w	r2, r3, #32
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012582:	2303      	movs	r3, #3
 8012584:	e027      	b.n	80125d6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	2200      	movs	r2, #0
 801258e:	2180      	movs	r1, #128	; 0x80
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f7ff feaf 	bl	80122f4 <SPI_WaitFlagStateUntilTimeout>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d007      	beq.n	80125ac <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125a0:	f043 0220 	orr.w	r2, r3, #32
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80125a8:	2303      	movs	r3, #3
 80125aa:	e014      	b.n	80125d6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	2200      	movs	r2, #0
 80125b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80125b8:	68f8      	ldr	r0, [r7, #12]
 80125ba:	f7ff ff05 	bl	80123c8 <SPI_WaitFifoStateUntilTimeout>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d007      	beq.n	80125d4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125c8:	f043 0220 	orr.w	r2, r3, #32
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80125d0:	2303      	movs	r3, #3
 80125d2:	e000      	b.n	80125d6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3710      	adds	r7, #16
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b082      	sub	sp, #8
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d101      	bne.n	80125f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80125ec:	2301      	movs	r3, #1
 80125ee:	e040      	b.n	8012672 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d106      	bne.n	8012606 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2200      	movs	r2, #0
 80125fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7fc fa43 	bl	800ea8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2224      	movs	r2, #36	; 0x24
 801260a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f022 0201 	bic.w	r2, r2, #1
 801261a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f000 fab9 	bl	8012b94 <UART_SetConfig>
 8012622:	4603      	mov	r3, r0
 8012624:	2b01      	cmp	r3, #1
 8012626:	d101      	bne.n	801262c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8012628:	2301      	movs	r3, #1
 801262a:	e022      	b.n	8012672 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012630:	2b00      	cmp	r3, #0
 8012632:	d002      	beq.n	801263a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 fd57 	bl	80130e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	685a      	ldr	r2, [r3, #4]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012648:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	689a      	ldr	r2, [r3, #8]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012658:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f042 0201 	orr.w	r2, r2, #1
 8012668:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fdde 	bl	801322c <UART_CheckIdleState>
 8012670:	4603      	mov	r3, r0
}
 8012672:	4618      	mov	r0, r3
 8012674:	3708      	adds	r7, #8
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
	...

0801267c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	4613      	mov	r3, r2
 8012688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801268e:	2b20      	cmp	r3, #32
 8012690:	f040 808a 	bne.w	80127a8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d002      	beq.n	80126a0 <HAL_UART_Receive_IT+0x24>
 801269a:	88fb      	ldrh	r3, [r7, #6]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d101      	bne.n	80126a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80126a0:	2301      	movs	r3, #1
 80126a2:	e082      	b.n	80127aa <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d101      	bne.n	80126b2 <HAL_UART_Receive_IT+0x36>
 80126ae:	2302      	movs	r3, #2
 80126b0:	e07b      	b.n	80127aa <HAL_UART_Receive_IT+0x12e>
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2201      	movs	r2, #1
 80126b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	68ba      	ldr	r2, [r7, #8]
 80126be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	88fa      	ldrh	r2, [r7, #6]
 80126c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	88fa      	ldrh	r2, [r7, #6]
 80126cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2200      	movs	r2, #0
 80126d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	689b      	ldr	r3, [r3, #8]
 80126da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126de:	d10e      	bne.n	80126fe <HAL_UART_Receive_IT+0x82>
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	691b      	ldr	r3, [r3, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d105      	bne.n	80126f4 <HAL_UART_Receive_IT+0x78>
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80126ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80126f2:	e02d      	b.n	8012750 <HAL_UART_Receive_IT+0xd4>
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	22ff      	movs	r2, #255	; 0xff
 80126f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80126fc:	e028      	b.n	8012750 <HAL_UART_Receive_IT+0xd4>
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d10d      	bne.n	8012722 <HAL_UART_Receive_IT+0xa6>
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	691b      	ldr	r3, [r3, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d104      	bne.n	8012718 <HAL_UART_Receive_IT+0x9c>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	22ff      	movs	r2, #255	; 0xff
 8012712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012716:	e01b      	b.n	8012750 <HAL_UART_Receive_IT+0xd4>
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	227f      	movs	r2, #127	; 0x7f
 801271c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012720:	e016      	b.n	8012750 <HAL_UART_Receive_IT+0xd4>
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	689b      	ldr	r3, [r3, #8]
 8012726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801272a:	d10d      	bne.n	8012748 <HAL_UART_Receive_IT+0xcc>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d104      	bne.n	801273e <HAL_UART_Receive_IT+0xc2>
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	227f      	movs	r2, #127	; 0x7f
 8012738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801273c:	e008      	b.n	8012750 <HAL_UART_Receive_IT+0xd4>
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	223f      	movs	r2, #63	; 0x3f
 8012742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012746:	e003      	b.n	8012750 <HAL_UART_Receive_IT+0xd4>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2200      	movs	r2, #0
 801274c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2200      	movs	r2, #0
 8012754:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2222      	movs	r2, #34	; 0x22
 801275a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	689a      	ldr	r2, [r3, #8]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f042 0201 	orr.w	r2, r2, #1
 801276a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012774:	d107      	bne.n	8012786 <HAL_UART_Receive_IT+0x10a>
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	691b      	ldr	r3, [r3, #16]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d103      	bne.n	8012786 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	4a0d      	ldr	r2, [pc, #52]	; (80127b8 <HAL_UART_Receive_IT+0x13c>)
 8012782:	661a      	str	r2, [r3, #96]	; 0x60
 8012784:	e002      	b.n	801278c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	4a0c      	ldr	r2, [pc, #48]	; (80127bc <HAL_UART_Receive_IT+0x140>)
 801278a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2200      	movs	r2, #0
 8012790:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80127a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80127a4:	2300      	movs	r3, #0
 80127a6:	e000      	b.n	80127aa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80127a8:	2302      	movs	r3, #2
  }
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3714      	adds	r7, #20
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop
 80127b8:	080135ff 	.word	0x080135ff
 80127bc:	08013559 	.word	0x08013559

080127c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	60b9      	str	r1, [r7, #8]
 80127ca:	4613      	mov	r3, r2
 80127cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127d2:	2b20      	cmp	r3, #32
 80127d4:	d164      	bne.n	80128a0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d002      	beq.n	80127e2 <HAL_UART_Transmit_DMA+0x22>
 80127dc:	88fb      	ldrh	r3, [r7, #6]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d101      	bne.n	80127e6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80127e2:	2301      	movs	r3, #1
 80127e4:	e05d      	b.n	80128a2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d101      	bne.n	80127f4 <HAL_UART_Transmit_DMA+0x34>
 80127f0:	2302      	movs	r3, #2
 80127f2:	e056      	b.n	80128a2 <HAL_UART_Transmit_DMA+0xe2>
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2201      	movs	r2, #1
 80127f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	68ba      	ldr	r2, [r7, #8]
 8012800:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	88fa      	ldrh	r2, [r7, #6]
 8012806:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	88fa      	ldrh	r2, [r7, #6]
 801280e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2200      	movs	r2, #0
 8012816:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2221      	movs	r2, #33	; 0x21
 801281c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012822:	2b00      	cmp	r3, #0
 8012824:	d02a      	beq.n	801287c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801282a:	4a20      	ldr	r2, [pc, #128]	; (80128ac <HAL_UART_Transmit_DMA+0xec>)
 801282c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012832:	4a1f      	ldr	r2, [pc, #124]	; (80128b0 <HAL_UART_Transmit_DMA+0xf0>)
 8012834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801283a:	4a1e      	ldr	r2, [pc, #120]	; (80128b4 <HAL_UART_Transmit_DMA+0xf4>)
 801283c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012842:	2200      	movs	r2, #0
 8012844:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801284e:	4619      	mov	r1, r3
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	3328      	adds	r3, #40	; 0x28
 8012856:	461a      	mov	r2, r3
 8012858:	88fb      	ldrh	r3, [r7, #6]
 801285a:	f7fc fc47 	bl	800f0ec <HAL_DMA_Start_IT>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00b      	beq.n	801287c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	2210      	movs	r2, #16
 8012868:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2200      	movs	r2, #0
 801286e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	2220      	movs	r2, #32
 8012876:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8012878:	2301      	movs	r3, #1
 801287a:	e012      	b.n	80128a2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2240      	movs	r2, #64	; 0x40
 8012882:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2200      	movs	r2, #0
 8012888:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	689a      	ldr	r2, [r3, #8]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801289a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	e000      	b.n	80128a2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80128a0:	2302      	movs	r3, #2
  }
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	08013417 	.word	0x08013417
 80128b0:	08013467 	.word	0x08013467
 80128b4:	08013483 	.word	0x08013483

080128b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	69db      	ldr	r3, [r3, #28]
 80128c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80128d8:	69fa      	ldr	r2, [r7, #28]
 80128da:	f640 030f 	movw	r3, #2063	; 0x80f
 80128de:	4013      	ands	r3, r2
 80128e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d113      	bne.n	8012910 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	f003 0320 	and.w	r3, r3, #32
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00e      	beq.n	8012910 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	f003 0320 	and.w	r3, r3, #32
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d009      	beq.n	8012910 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012900:	2b00      	cmp	r3, #0
 8012902:	f000 8114 	beq.w	8012b2e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	4798      	blx	r3
      }
      return;
 801290e:	e10e      	b.n	8012b2e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	2b00      	cmp	r3, #0
 8012914:	f000 80d6 	beq.w	8012ac4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f003 0301 	and.w	r3, r3, #1
 801291e:	2b00      	cmp	r3, #0
 8012920:	d105      	bne.n	801292e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012928:	2b00      	cmp	r3, #0
 801292a:	f000 80cb 	beq.w	8012ac4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	f003 0301 	and.w	r3, r3, #1
 8012934:	2b00      	cmp	r3, #0
 8012936:	d00e      	beq.n	8012956 <HAL_UART_IRQHandler+0x9e>
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801293e:	2b00      	cmp	r3, #0
 8012940:	d009      	beq.n	8012956 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2201      	movs	r2, #1
 8012948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801294e:	f043 0201 	orr.w	r2, r3, #1
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	f003 0302 	and.w	r3, r3, #2
 801295c:	2b00      	cmp	r3, #0
 801295e:	d00e      	beq.n	801297e <HAL_UART_IRQHandler+0xc6>
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	f003 0301 	and.w	r3, r3, #1
 8012966:	2b00      	cmp	r3, #0
 8012968:	d009      	beq.n	801297e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2202      	movs	r2, #2
 8012970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012976:	f043 0204 	orr.w	r2, r3, #4
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801297e:	69fb      	ldr	r3, [r7, #28]
 8012980:	f003 0304 	and.w	r3, r3, #4
 8012984:	2b00      	cmp	r3, #0
 8012986:	d00e      	beq.n	80129a6 <HAL_UART_IRQHandler+0xee>
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	d009      	beq.n	80129a6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2204      	movs	r2, #4
 8012998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801299e:	f043 0202 	orr.w	r2, r3, #2
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	f003 0308 	and.w	r3, r3, #8
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d013      	beq.n	80129d8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80129b0:	69bb      	ldr	r3, [r7, #24]
 80129b2:	f003 0320 	and.w	r3, r3, #32
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d104      	bne.n	80129c4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d009      	beq.n	80129d8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2208      	movs	r2, #8
 80129ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129d0:	f043 0208 	orr.w	r2, r3, #8
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d00f      	beq.n	8012a02 <HAL_UART_IRQHandler+0x14a>
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00a      	beq.n	8012a02 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80129f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129fa:	f043 0220 	orr.w	r2, r3, #32
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	f000 8093 	beq.w	8012b32 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	f003 0320 	and.w	r3, r3, #32
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00c      	beq.n	8012a30 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	f003 0320 	and.w	r3, r3, #32
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d007      	beq.n	8012a30 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d003      	beq.n	8012a30 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a40:	2b40      	cmp	r3, #64	; 0x40
 8012a42:	d004      	beq.n	8012a4e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d031      	beq.n	8012ab2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 fcc1 	bl	80133d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a5e:	2b40      	cmp	r3, #64	; 0x40
 8012a60:	d123      	bne.n	8012aaa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	689a      	ldr	r2, [r3, #8]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d013      	beq.n	8012aa2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a7e:	4a30      	ldr	r2, [pc, #192]	; (8012b40 <HAL_UART_IRQHandler+0x288>)
 8012a80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fc fb90 	bl	800f1ac <HAL_DMA_Abort_IT>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d016      	beq.n	8012ac0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012aa0:	e00e      	b.n	8012ac0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f000 f862 	bl	8012b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012aa8:	e00a      	b.n	8012ac0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f000 f85e 	bl	8012b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ab0:	e006      	b.n	8012ac0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 f85a 	bl	8012b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2200      	movs	r2, #0
 8012abc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8012abe:	e038      	b.n	8012b32 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ac0:	bf00      	nop
    return;
 8012ac2:	e036      	b.n	8012b32 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00d      	beq.n	8012aea <HAL_UART_IRQHandler+0x232>
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d008      	beq.n	8012aea <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012ae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 f84c 	bl	8012b80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012ae8:	e026      	b.n	8012b38 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00d      	beq.n	8012b10 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d008      	beq.n	8012b10 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d017      	beq.n	8012b36 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	4798      	blx	r3
    }
    return;
 8012b0e:	e012      	b.n	8012b36 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d00e      	beq.n	8012b38 <HAL_UART_IRQHandler+0x280>
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d009      	beq.n	8012b38 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f000 fcfe 	bl	8013526 <UART_EndTransmit_IT>
    return;
 8012b2a:	bf00      	nop
 8012b2c:	e004      	b.n	8012b38 <HAL_UART_IRQHandler+0x280>
      return;
 8012b2e:	bf00      	nop
 8012b30:	e002      	b.n	8012b38 <HAL_UART_IRQHandler+0x280>
    return;
 8012b32:	bf00      	nop
 8012b34:	e000      	b.n	8012b38 <HAL_UART_IRQHandler+0x280>
    return;
 8012b36:	bf00      	nop
  }

}
 8012b38:	3720      	adds	r7, #32
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	080134fb 	.word	0x080134fb

08012b44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012b4c:	bf00      	nop
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b083      	sub	sp, #12
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012b60:	bf00      	nop
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012b74:	bf00      	nop
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr

08012b80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b88:	bf00      	nop
 8012b8a:	370c      	adds	r7, #12
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr

08012b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b088      	sub	sp, #32
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	689a      	ldr	r2, [r3, #8]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	431a      	orrs	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	695b      	ldr	r3, [r3, #20]
 8012bb2:	431a      	orrs	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	69db      	ldr	r3, [r3, #28]
 8012bb8:	4313      	orrs	r3, r2
 8012bba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	681a      	ldr	r2, [r3, #0]
 8012bc2:	4bb1      	ldr	r3, [pc, #708]	; (8012e88 <UART_SetConfig+0x2f4>)
 8012bc4:	4013      	ands	r3, r2
 8012bc6:	687a      	ldr	r2, [r7, #4]
 8012bc8:	6812      	ldr	r2, [r2, #0]
 8012bca:	6939      	ldr	r1, [r7, #16]
 8012bcc:	430b      	orrs	r3, r1
 8012bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	68da      	ldr	r2, [r3, #12]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	430a      	orrs	r2, r1
 8012be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	699b      	ldr	r3, [r3, #24]
 8012bea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6a1b      	ldr	r3, [r3, #32]
 8012bf0:	693a      	ldr	r2, [r7, #16]
 8012bf2:	4313      	orrs	r3, r2
 8012bf4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	693a      	ldr	r2, [r7, #16]
 8012c06:	430a      	orrs	r2, r1
 8012c08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4a9f      	ldr	r2, [pc, #636]	; (8012e8c <UART_SetConfig+0x2f8>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d121      	bne.n	8012c58 <UART_SetConfig+0xc4>
 8012c14:	4b9e      	ldr	r3, [pc, #632]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c1a:	f003 0303 	and.w	r3, r3, #3
 8012c1e:	2b03      	cmp	r3, #3
 8012c20:	d816      	bhi.n	8012c50 <UART_SetConfig+0xbc>
 8012c22:	a201      	add	r2, pc, #4	; (adr r2, 8012c28 <UART_SetConfig+0x94>)
 8012c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c28:	08012c39 	.word	0x08012c39
 8012c2c:	08012c45 	.word	0x08012c45
 8012c30:	08012c3f 	.word	0x08012c3f
 8012c34:	08012c4b 	.word	0x08012c4b
 8012c38:	2301      	movs	r3, #1
 8012c3a:	77fb      	strb	r3, [r7, #31]
 8012c3c:	e151      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012c3e:	2302      	movs	r3, #2
 8012c40:	77fb      	strb	r3, [r7, #31]
 8012c42:	e14e      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012c44:	2304      	movs	r3, #4
 8012c46:	77fb      	strb	r3, [r7, #31]
 8012c48:	e14b      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012c4a:	2308      	movs	r3, #8
 8012c4c:	77fb      	strb	r3, [r7, #31]
 8012c4e:	e148      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012c50:	2310      	movs	r3, #16
 8012c52:	77fb      	strb	r3, [r7, #31]
 8012c54:	bf00      	nop
 8012c56:	e144      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	4a8d      	ldr	r2, [pc, #564]	; (8012e94 <UART_SetConfig+0x300>)
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d134      	bne.n	8012ccc <UART_SetConfig+0x138>
 8012c62:	4b8b      	ldr	r3, [pc, #556]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c68:	f003 030c 	and.w	r3, r3, #12
 8012c6c:	2b0c      	cmp	r3, #12
 8012c6e:	d829      	bhi.n	8012cc4 <UART_SetConfig+0x130>
 8012c70:	a201      	add	r2, pc, #4	; (adr r2, 8012c78 <UART_SetConfig+0xe4>)
 8012c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c76:	bf00      	nop
 8012c78:	08012cad 	.word	0x08012cad
 8012c7c:	08012cc5 	.word	0x08012cc5
 8012c80:	08012cc5 	.word	0x08012cc5
 8012c84:	08012cc5 	.word	0x08012cc5
 8012c88:	08012cb9 	.word	0x08012cb9
 8012c8c:	08012cc5 	.word	0x08012cc5
 8012c90:	08012cc5 	.word	0x08012cc5
 8012c94:	08012cc5 	.word	0x08012cc5
 8012c98:	08012cb3 	.word	0x08012cb3
 8012c9c:	08012cc5 	.word	0x08012cc5
 8012ca0:	08012cc5 	.word	0x08012cc5
 8012ca4:	08012cc5 	.word	0x08012cc5
 8012ca8:	08012cbf 	.word	0x08012cbf
 8012cac:	2300      	movs	r3, #0
 8012cae:	77fb      	strb	r3, [r7, #31]
 8012cb0:	e117      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012cb2:	2302      	movs	r3, #2
 8012cb4:	77fb      	strb	r3, [r7, #31]
 8012cb6:	e114      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012cb8:	2304      	movs	r3, #4
 8012cba:	77fb      	strb	r3, [r7, #31]
 8012cbc:	e111      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012cbe:	2308      	movs	r3, #8
 8012cc0:	77fb      	strb	r3, [r7, #31]
 8012cc2:	e10e      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012cc4:	2310      	movs	r3, #16
 8012cc6:	77fb      	strb	r3, [r7, #31]
 8012cc8:	bf00      	nop
 8012cca:	e10a      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a71      	ldr	r2, [pc, #452]	; (8012e98 <UART_SetConfig+0x304>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d120      	bne.n	8012d18 <UART_SetConfig+0x184>
 8012cd6:	4b6e      	ldr	r3, [pc, #440]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012ce0:	2b10      	cmp	r3, #16
 8012ce2:	d00f      	beq.n	8012d04 <UART_SetConfig+0x170>
 8012ce4:	2b10      	cmp	r3, #16
 8012ce6:	d802      	bhi.n	8012cee <UART_SetConfig+0x15a>
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d005      	beq.n	8012cf8 <UART_SetConfig+0x164>
 8012cec:	e010      	b.n	8012d10 <UART_SetConfig+0x17c>
 8012cee:	2b20      	cmp	r3, #32
 8012cf0:	d005      	beq.n	8012cfe <UART_SetConfig+0x16a>
 8012cf2:	2b30      	cmp	r3, #48	; 0x30
 8012cf4:	d009      	beq.n	8012d0a <UART_SetConfig+0x176>
 8012cf6:	e00b      	b.n	8012d10 <UART_SetConfig+0x17c>
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	77fb      	strb	r3, [r7, #31]
 8012cfc:	e0f1      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012cfe:	2302      	movs	r3, #2
 8012d00:	77fb      	strb	r3, [r7, #31]
 8012d02:	e0ee      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d04:	2304      	movs	r3, #4
 8012d06:	77fb      	strb	r3, [r7, #31]
 8012d08:	e0eb      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d0a:	2308      	movs	r3, #8
 8012d0c:	77fb      	strb	r3, [r7, #31]
 8012d0e:	e0e8      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d10:	2310      	movs	r3, #16
 8012d12:	77fb      	strb	r3, [r7, #31]
 8012d14:	bf00      	nop
 8012d16:	e0e4      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a5f      	ldr	r2, [pc, #380]	; (8012e9c <UART_SetConfig+0x308>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d120      	bne.n	8012d64 <UART_SetConfig+0x1d0>
 8012d22:	4b5b      	ldr	r3, [pc, #364]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012d2c:	2b40      	cmp	r3, #64	; 0x40
 8012d2e:	d00f      	beq.n	8012d50 <UART_SetConfig+0x1bc>
 8012d30:	2b40      	cmp	r3, #64	; 0x40
 8012d32:	d802      	bhi.n	8012d3a <UART_SetConfig+0x1a6>
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d005      	beq.n	8012d44 <UART_SetConfig+0x1b0>
 8012d38:	e010      	b.n	8012d5c <UART_SetConfig+0x1c8>
 8012d3a:	2b80      	cmp	r3, #128	; 0x80
 8012d3c:	d005      	beq.n	8012d4a <UART_SetConfig+0x1b6>
 8012d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8012d40:	d009      	beq.n	8012d56 <UART_SetConfig+0x1c2>
 8012d42:	e00b      	b.n	8012d5c <UART_SetConfig+0x1c8>
 8012d44:	2300      	movs	r3, #0
 8012d46:	77fb      	strb	r3, [r7, #31]
 8012d48:	e0cb      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d4a:	2302      	movs	r3, #2
 8012d4c:	77fb      	strb	r3, [r7, #31]
 8012d4e:	e0c8      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d50:	2304      	movs	r3, #4
 8012d52:	77fb      	strb	r3, [r7, #31]
 8012d54:	e0c5      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d56:	2308      	movs	r3, #8
 8012d58:	77fb      	strb	r3, [r7, #31]
 8012d5a:	e0c2      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d5c:	2310      	movs	r3, #16
 8012d5e:	77fb      	strb	r3, [r7, #31]
 8012d60:	bf00      	nop
 8012d62:	e0be      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4a4d      	ldr	r2, [pc, #308]	; (8012ea0 <UART_SetConfig+0x30c>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d124      	bne.n	8012db8 <UART_SetConfig+0x224>
 8012d6e:	4b48      	ldr	r3, [pc, #288]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d7c:	d012      	beq.n	8012da4 <UART_SetConfig+0x210>
 8012d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d82:	d802      	bhi.n	8012d8a <UART_SetConfig+0x1f6>
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d007      	beq.n	8012d98 <UART_SetConfig+0x204>
 8012d88:	e012      	b.n	8012db0 <UART_SetConfig+0x21c>
 8012d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d8e:	d006      	beq.n	8012d9e <UART_SetConfig+0x20a>
 8012d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012d94:	d009      	beq.n	8012daa <UART_SetConfig+0x216>
 8012d96:	e00b      	b.n	8012db0 <UART_SetConfig+0x21c>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	77fb      	strb	r3, [r7, #31]
 8012d9c:	e0a1      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012d9e:	2302      	movs	r3, #2
 8012da0:	77fb      	strb	r3, [r7, #31]
 8012da2:	e09e      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012da4:	2304      	movs	r3, #4
 8012da6:	77fb      	strb	r3, [r7, #31]
 8012da8:	e09b      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012daa:	2308      	movs	r3, #8
 8012dac:	77fb      	strb	r3, [r7, #31]
 8012dae:	e098      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012db0:	2310      	movs	r3, #16
 8012db2:	77fb      	strb	r3, [r7, #31]
 8012db4:	bf00      	nop
 8012db6:	e094      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	4a39      	ldr	r2, [pc, #228]	; (8012ea4 <UART_SetConfig+0x310>)
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	d124      	bne.n	8012e0c <UART_SetConfig+0x278>
 8012dc2:	4b33      	ldr	r3, [pc, #204]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012dd0:	d012      	beq.n	8012df8 <UART_SetConfig+0x264>
 8012dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012dd6:	d802      	bhi.n	8012dde <UART_SetConfig+0x24a>
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d007      	beq.n	8012dec <UART_SetConfig+0x258>
 8012ddc:	e012      	b.n	8012e04 <UART_SetConfig+0x270>
 8012dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012de2:	d006      	beq.n	8012df2 <UART_SetConfig+0x25e>
 8012de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012de8:	d009      	beq.n	8012dfe <UART_SetConfig+0x26a>
 8012dea:	e00b      	b.n	8012e04 <UART_SetConfig+0x270>
 8012dec:	2301      	movs	r3, #1
 8012dee:	77fb      	strb	r3, [r7, #31]
 8012df0:	e077      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012df2:	2302      	movs	r3, #2
 8012df4:	77fb      	strb	r3, [r7, #31]
 8012df6:	e074      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012df8:	2304      	movs	r3, #4
 8012dfa:	77fb      	strb	r3, [r7, #31]
 8012dfc:	e071      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012dfe:	2308      	movs	r3, #8
 8012e00:	77fb      	strb	r3, [r7, #31]
 8012e02:	e06e      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e04:	2310      	movs	r3, #16
 8012e06:	77fb      	strb	r3, [r7, #31]
 8012e08:	bf00      	nop
 8012e0a:	e06a      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a25      	ldr	r2, [pc, #148]	; (8012ea8 <UART_SetConfig+0x314>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d124      	bne.n	8012e60 <UART_SetConfig+0x2cc>
 8012e16:	4b1e      	ldr	r3, [pc, #120]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e24:	d012      	beq.n	8012e4c <UART_SetConfig+0x2b8>
 8012e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e2a:	d802      	bhi.n	8012e32 <UART_SetConfig+0x29e>
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d007      	beq.n	8012e40 <UART_SetConfig+0x2ac>
 8012e30:	e012      	b.n	8012e58 <UART_SetConfig+0x2c4>
 8012e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e36:	d006      	beq.n	8012e46 <UART_SetConfig+0x2b2>
 8012e38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012e3c:	d009      	beq.n	8012e52 <UART_SetConfig+0x2be>
 8012e3e:	e00b      	b.n	8012e58 <UART_SetConfig+0x2c4>
 8012e40:	2300      	movs	r3, #0
 8012e42:	77fb      	strb	r3, [r7, #31]
 8012e44:	e04d      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e46:	2302      	movs	r3, #2
 8012e48:	77fb      	strb	r3, [r7, #31]
 8012e4a:	e04a      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e4c:	2304      	movs	r3, #4
 8012e4e:	77fb      	strb	r3, [r7, #31]
 8012e50:	e047      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e52:	2308      	movs	r3, #8
 8012e54:	77fb      	strb	r3, [r7, #31]
 8012e56:	e044      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e58:	2310      	movs	r3, #16
 8012e5a:	77fb      	strb	r3, [r7, #31]
 8012e5c:	bf00      	nop
 8012e5e:	e040      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a11      	ldr	r2, [pc, #68]	; (8012eac <UART_SetConfig+0x318>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d139      	bne.n	8012ede <UART_SetConfig+0x34a>
 8012e6a:	4b09      	ldr	r3, [pc, #36]	; (8012e90 <UART_SetConfig+0x2fc>)
 8012e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e78:	d027      	beq.n	8012eca <UART_SetConfig+0x336>
 8012e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e7e:	d817      	bhi.n	8012eb0 <UART_SetConfig+0x31c>
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d01c      	beq.n	8012ebe <UART_SetConfig+0x32a>
 8012e84:	e027      	b.n	8012ed6 <UART_SetConfig+0x342>
 8012e86:	bf00      	nop
 8012e88:	efff69f3 	.word	0xefff69f3
 8012e8c:	40011000 	.word	0x40011000
 8012e90:	40023800 	.word	0x40023800
 8012e94:	40004400 	.word	0x40004400
 8012e98:	40004800 	.word	0x40004800
 8012e9c:	40004c00 	.word	0x40004c00
 8012ea0:	40005000 	.word	0x40005000
 8012ea4:	40011400 	.word	0x40011400
 8012ea8:	40007800 	.word	0x40007800
 8012eac:	40007c00 	.word	0x40007c00
 8012eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012eb4:	d006      	beq.n	8012ec4 <UART_SetConfig+0x330>
 8012eb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012eba:	d009      	beq.n	8012ed0 <UART_SetConfig+0x33c>
 8012ebc:	e00b      	b.n	8012ed6 <UART_SetConfig+0x342>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	77fb      	strb	r3, [r7, #31]
 8012ec2:	e00e      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012ec4:	2302      	movs	r3, #2
 8012ec6:	77fb      	strb	r3, [r7, #31]
 8012ec8:	e00b      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012eca:	2304      	movs	r3, #4
 8012ecc:	77fb      	strb	r3, [r7, #31]
 8012ece:	e008      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012ed0:	2308      	movs	r3, #8
 8012ed2:	77fb      	strb	r3, [r7, #31]
 8012ed4:	e005      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012ed6:	2310      	movs	r3, #16
 8012ed8:	77fb      	strb	r3, [r7, #31]
 8012eda:	bf00      	nop
 8012edc:	e001      	b.n	8012ee2 <UART_SetConfig+0x34e>
 8012ede:	2310      	movs	r3, #16
 8012ee0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	69db      	ldr	r3, [r3, #28]
 8012ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012eea:	d17f      	bne.n	8012fec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8012eec:	7ffb      	ldrb	r3, [r7, #31]
 8012eee:	2b08      	cmp	r3, #8
 8012ef0:	d85c      	bhi.n	8012fac <UART_SetConfig+0x418>
 8012ef2:	a201      	add	r2, pc, #4	; (adr r2, 8012ef8 <UART_SetConfig+0x364>)
 8012ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef8:	08012f1d 	.word	0x08012f1d
 8012efc:	08012f3d 	.word	0x08012f3d
 8012f00:	08012f5d 	.word	0x08012f5d
 8012f04:	08012fad 	.word	0x08012fad
 8012f08:	08012f75 	.word	0x08012f75
 8012f0c:	08012fad 	.word	0x08012fad
 8012f10:	08012fad 	.word	0x08012fad
 8012f14:	08012fad 	.word	0x08012fad
 8012f18:	08012f95 	.word	0x08012f95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012f1c:	f7fd ff0a 	bl	8010d34 <HAL_RCC_GetPCLK1Freq>
 8012f20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	005a      	lsls	r2, r3, #1
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	085b      	lsrs	r3, r3, #1
 8012f2c:	441a      	add	r2, r3
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	61bb      	str	r3, [r7, #24]
        break;
 8012f3a:	e03a      	b.n	8012fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012f3c:	f7fd ff0e 	bl	8010d5c <HAL_RCC_GetPCLK2Freq>
 8012f40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	005a      	lsls	r2, r3, #1
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	085b      	lsrs	r3, r3, #1
 8012f4c:	441a      	add	r2, r3
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	61bb      	str	r3, [r7, #24]
        break;
 8012f5a:	e02a      	b.n	8012fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	085a      	lsrs	r2, r3, #1
 8012f62:	4b5f      	ldr	r3, [pc, #380]	; (80130e0 <UART_SetConfig+0x54c>)
 8012f64:	4413      	add	r3, r2
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	6852      	ldr	r2, [r2, #4]
 8012f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	61bb      	str	r3, [r7, #24]
        break;
 8012f72:	e01e      	b.n	8012fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012f74:	f7fd fdfc 	bl	8010b70 <HAL_RCC_GetSysClockFreq>
 8012f78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	005a      	lsls	r2, r3, #1
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	085b      	lsrs	r3, r3, #1
 8012f84:	441a      	add	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	61bb      	str	r3, [r7, #24]
        break;
 8012f92:	e00e      	b.n	8012fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	085b      	lsrs	r3, r3, #1
 8012f9a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	61bb      	str	r3, [r7, #24]
        break;
 8012faa:	e002      	b.n	8012fb2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8012fac:	2301      	movs	r3, #1
 8012fae:	75fb      	strb	r3, [r7, #23]
        break;
 8012fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	2b0f      	cmp	r3, #15
 8012fb6:	d916      	bls.n	8012fe6 <UART_SetConfig+0x452>
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fbe:	d212      	bcs.n	8012fe6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	f023 030f 	bic.w	r3, r3, #15
 8012fc8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	085b      	lsrs	r3, r3, #1
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	f003 0307 	and.w	r3, r3, #7
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	897b      	ldrh	r3, [r7, #10]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	897a      	ldrh	r2, [r7, #10]
 8012fe2:	60da      	str	r2, [r3, #12]
 8012fe4:	e070      	b.n	80130c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	75fb      	strb	r3, [r7, #23]
 8012fea:	e06d      	b.n	80130c8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8012fec:	7ffb      	ldrb	r3, [r7, #31]
 8012fee:	2b08      	cmp	r3, #8
 8012ff0:	d859      	bhi.n	80130a6 <UART_SetConfig+0x512>
 8012ff2:	a201      	add	r2, pc, #4	; (adr r2, 8012ff8 <UART_SetConfig+0x464>)
 8012ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff8:	0801301d 	.word	0x0801301d
 8012ffc:	0801303b 	.word	0x0801303b
 8013000:	08013059 	.word	0x08013059
 8013004:	080130a7 	.word	0x080130a7
 8013008:	08013071 	.word	0x08013071
 801300c:	080130a7 	.word	0x080130a7
 8013010:	080130a7 	.word	0x080130a7
 8013014:	080130a7 	.word	0x080130a7
 8013018:	0801308f 	.word	0x0801308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801301c:	f7fd fe8a 	bl	8010d34 <HAL_RCC_GetPCLK1Freq>
 8013020:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	085a      	lsrs	r2, r3, #1
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	441a      	add	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	fbb2 f3f3 	udiv	r3, r2, r3
 8013034:	b29b      	uxth	r3, r3
 8013036:	61bb      	str	r3, [r7, #24]
        break;
 8013038:	e038      	b.n	80130ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801303a:	f7fd fe8f 	bl	8010d5c <HAL_RCC_GetPCLK2Freq>
 801303e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	085a      	lsrs	r2, r3, #1
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	441a      	add	r2, r3
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013052:	b29b      	uxth	r3, r3
 8013054:	61bb      	str	r3, [r7, #24]
        break;
 8013056:	e029      	b.n	80130ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	085a      	lsrs	r2, r3, #1
 801305e:	4b21      	ldr	r3, [pc, #132]	; (80130e4 <UART_SetConfig+0x550>)
 8013060:	4413      	add	r3, r2
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	6852      	ldr	r2, [r2, #4]
 8013066:	fbb3 f3f2 	udiv	r3, r3, r2
 801306a:	b29b      	uxth	r3, r3
 801306c:	61bb      	str	r3, [r7, #24]
        break;
 801306e:	e01d      	b.n	80130ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013070:	f7fd fd7e 	bl	8010b70 <HAL_RCC_GetSysClockFreq>
 8013074:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	085a      	lsrs	r2, r3, #1
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	441a      	add	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	fbb2 f3f3 	udiv	r3, r2, r3
 8013088:	b29b      	uxth	r3, r3
 801308a:	61bb      	str	r3, [r7, #24]
        break;
 801308c:	e00e      	b.n	80130ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	085b      	lsrs	r3, r3, #1
 8013094:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	61bb      	str	r3, [r7, #24]
        break;
 80130a4:	e002      	b.n	80130ac <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80130a6:	2301      	movs	r3, #1
 80130a8:	75fb      	strb	r3, [r7, #23]
        break;
 80130aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	2b0f      	cmp	r3, #15
 80130b0:	d908      	bls.n	80130c4 <UART_SetConfig+0x530>
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130b8:	d204      	bcs.n	80130c4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	69ba      	ldr	r2, [r7, #24]
 80130c0:	60da      	str	r2, [r3, #12]
 80130c2:	e001      	b.n	80130c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80130c4:	2301      	movs	r3, #1
 80130c6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2200      	movs	r2, #0
 80130d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3720      	adds	r7, #32
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	01e84800 	.word	0x01e84800
 80130e4:	00f42400 	.word	0x00f42400

080130e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f4:	f003 0301 	and.w	r3, r3, #1
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d00a      	beq.n	8013112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	430a      	orrs	r2, r1
 8013110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013116:	f003 0302 	and.w	r3, r3, #2
 801311a:	2b00      	cmp	r3, #0
 801311c:	d00a      	beq.n	8013134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	430a      	orrs	r2, r1
 8013132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013138:	f003 0304 	and.w	r3, r3, #4
 801313c:	2b00      	cmp	r3, #0
 801313e:	d00a      	beq.n	8013156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	430a      	orrs	r2, r1
 8013154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801315a:	f003 0308 	and.w	r3, r3, #8
 801315e:	2b00      	cmp	r3, #0
 8013160:	d00a      	beq.n	8013178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	430a      	orrs	r2, r1
 8013176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801317c:	f003 0310 	and.w	r3, r3, #16
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00a      	beq.n	801319a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	689b      	ldr	r3, [r3, #8]
 801318a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	430a      	orrs	r2, r1
 8013198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801319e:	f003 0320 	and.w	r3, r3, #32
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d00a      	beq.n	80131bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	430a      	orrs	r2, r1
 80131ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d01a      	beq.n	80131fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	430a      	orrs	r2, r1
 80131dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131e6:	d10a      	bne.n	80131fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	430a      	orrs	r2, r1
 80131fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00a      	beq.n	8013220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	430a      	orrs	r2, r1
 801321e:	605a      	str	r2, [r3, #4]
  }
}
 8013220:	bf00      	nop
 8013222:	370c      	adds	r7, #12
 8013224:	46bd      	mov	sp, r7
 8013226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322a:	4770      	bx	lr

0801322c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b086      	sub	sp, #24
 8013230:	af02      	add	r7, sp, #8
 8013232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2200      	movs	r2, #0
 8013238:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801323a:	f7fb fd8b 	bl	800ed54 <HAL_GetTick>
 801323e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f003 0308 	and.w	r3, r3, #8
 801324a:	2b08      	cmp	r3, #8
 801324c:	d10e      	bne.n	801326c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801324e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013252:	9300      	str	r3, [sp, #0]
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2200      	movs	r2, #0
 8013258:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 f82a 	bl	80132b6 <UART_WaitOnFlagUntilTimeout>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d001      	beq.n	801326c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013268:	2303      	movs	r3, #3
 801326a:	e020      	b.n	80132ae <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f003 0304 	and.w	r3, r3, #4
 8013276:	2b04      	cmp	r3, #4
 8013278:	d10e      	bne.n	8013298 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801327a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2200      	movs	r2, #0
 8013284:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f000 f814 	bl	80132b6 <UART_WaitOnFlagUntilTimeout>
 801328e:	4603      	mov	r3, r0
 8013290:	2b00      	cmp	r3, #0
 8013292:	d001      	beq.n	8013298 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013294:	2303      	movs	r3, #3
 8013296:	e00a      	b.n	80132ae <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2220      	movs	r2, #32
 801329c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2220      	movs	r2, #32
 80132a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b084      	sub	sp, #16
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	60f8      	str	r0, [r7, #12]
 80132be:	60b9      	str	r1, [r7, #8]
 80132c0:	603b      	str	r3, [r7, #0]
 80132c2:	4613      	mov	r3, r2
 80132c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80132c6:	e05d      	b.n	8013384 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ce:	d059      	beq.n	8013384 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80132d0:	f7fb fd40 	bl	800ed54 <HAL_GetTick>
 80132d4:	4602      	mov	r2, r0
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	69ba      	ldr	r2, [r7, #24]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d302      	bcc.n	80132e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d11b      	bne.n	801331e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	681a      	ldr	r2, [r3, #0]
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80132f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	689a      	ldr	r2, [r3, #8]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f022 0201 	bic.w	r2, r2, #1
 8013304:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2220      	movs	r2, #32
 801330a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2220      	movs	r2, #32
 8013310:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	2200      	movs	r2, #0
 8013316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 801331a:	2303      	movs	r3, #3
 801331c:	e042      	b.n	80133a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f003 0304 	and.w	r3, r3, #4
 8013328:	2b00      	cmp	r3, #0
 801332a:	d02b      	beq.n	8013384 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	69db      	ldr	r3, [r3, #28]
 8013332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801333a:	d123      	bne.n	8013384 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013344:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	681a      	ldr	r2, [r3, #0]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013354:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	689a      	ldr	r2, [r3, #8]
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f022 0201 	bic.w	r2, r2, #1
 8013364:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	2220      	movs	r2, #32
 801336a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2220      	movs	r2, #32
 8013370:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2220      	movs	r2, #32
 8013376:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8013380:	2303      	movs	r3, #3
 8013382:	e00f      	b.n	80133a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	69da      	ldr	r2, [r3, #28]
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	4013      	ands	r3, r2
 801338e:	68ba      	ldr	r2, [r7, #8]
 8013390:	429a      	cmp	r2, r3
 8013392:	bf0c      	ite	eq
 8013394:	2301      	moveq	r3, #1
 8013396:	2300      	movne	r3, #0
 8013398:	b2db      	uxtb	r3, r3
 801339a:	461a      	mov	r2, r3
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d092      	beq.n	80132c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80133a2:	2300      	movs	r3, #0
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}

080133ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	681a      	ldr	r2, [r3, #0]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80133c2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2220      	movs	r2, #32
 80133c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80133ca:	bf00      	nop
 80133cc:	370c      	adds	r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr

080133d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80133d6:	b480      	push	{r7}
 80133d8:	b083      	sub	sp, #12
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80133ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	689a      	ldr	r2, [r3, #8]
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f022 0201 	bic.w	r2, r2, #1
 80133fc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2220      	movs	r2, #32
 8013402:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2200      	movs	r2, #0
 8013408:	661a      	str	r2, [r3, #96]	; 0x60
}
 801340a:	bf00      	nop
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr

08013416 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013416:	b580      	push	{r7, lr}
 8013418:	b084      	sub	sp, #16
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013422:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	69db      	ldr	r3, [r3, #28]
 8013428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801342c:	d014      	beq.n	8013458 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	689a      	ldr	r2, [r3, #8]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013444:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013454:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013456:	e002      	b.n	801345e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f7ff fb73 	bl	8012b44 <HAL_UART_TxCpltCallback>
}
 801345e:	bf00      	nop
 8013460:	3710      	adds	r7, #16
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013466:	b580      	push	{r7, lr}
 8013468:	b084      	sub	sp, #16
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013472:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f7ff fb6f 	bl	8012b58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801347a:	bf00      	nop
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b086      	sub	sp, #24
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801348e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013494:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801349a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134a6:	2b80      	cmp	r3, #128	; 0x80
 80134a8:	d109      	bne.n	80134be <UART_DMAError+0x3c>
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	2b21      	cmp	r3, #33	; 0x21
 80134ae:	d106      	bne.n	80134be <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2200      	movs	r2, #0
 80134b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80134b8:	6978      	ldr	r0, [r7, #20]
 80134ba:	f7ff ff77 	bl	80133ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134c8:	2b40      	cmp	r3, #64	; 0x40
 80134ca:	d109      	bne.n	80134e0 <UART_DMAError+0x5e>
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2b22      	cmp	r3, #34	; 0x22
 80134d0:	d106      	bne.n	80134e0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	2200      	movs	r2, #0
 80134d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80134da:	6978      	ldr	r0, [r7, #20]
 80134dc:	f7ff ff7b 	bl	80133d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134e4:	f043 0210 	orr.w	r2, r3, #16
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80134ec:	6978      	ldr	r0, [r7, #20]
 80134ee:	f7ff fb3d 	bl	8012b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80134f2:	bf00      	nop
 80134f4:	3718      	adds	r7, #24
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}

080134fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b084      	sub	sp, #16
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2200      	movs	r2, #0
 801350c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2200      	movs	r2, #0
 8013514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013518:	68f8      	ldr	r0, [r7, #12]
 801351a:	f7ff fb27 	bl	8012b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801351e:	bf00      	nop
 8013520:	3710      	adds	r7, #16
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}

08013526 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013526:	b580      	push	{r7, lr}
 8013528:	b082      	sub	sp, #8
 801352a:	af00      	add	r7, sp, #0
 801352c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801353c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2220      	movs	r2, #32
 8013542:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff fafa 	bl	8012b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013550:	bf00      	nop
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b084      	sub	sp, #16
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013566:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801356c:	2b22      	cmp	r3, #34	; 0x22
 801356e:	d13a      	bne.n	80135e6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013576:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013578:	89bb      	ldrh	r3, [r7, #12]
 801357a:	b2d9      	uxtb	r1, r3
 801357c:	89fb      	ldrh	r3, [r7, #14]
 801357e:	b2da      	uxtb	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013584:	400a      	ands	r2, r1
 8013586:	b2d2      	uxtb	r2, r2
 8013588:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801358e:	1c5a      	adds	r2, r3, #1
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801359a:	b29b      	uxth	r3, r3
 801359c:	3b01      	subs	r3, #1
 801359e:	b29a      	uxth	r2, r3
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d121      	bne.n	80135f6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80135c0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	689a      	ldr	r2, [r3, #8]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f022 0201 	bic.w	r2, r2, #1
 80135d0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2220      	movs	r2, #32
 80135d6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7f9 f932 	bl	800c848 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80135e4:	e007      	b.n	80135f6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	699a      	ldr	r2, [r3, #24]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	f042 0208 	orr.w	r2, r2, #8
 80135f4:	619a      	str	r2, [r3, #24]
}
 80135f6:	bf00      	nop
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80135fe:	b580      	push	{r7, lr}
 8013600:	b084      	sub	sp, #16
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801360c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013612:	2b22      	cmp	r3, #34	; 0x22
 8013614:	d13a      	bne.n	801368c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801361c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013622:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8013624:	89ba      	ldrh	r2, [r7, #12]
 8013626:	89fb      	ldrh	r3, [r7, #14]
 8013628:	4013      	ands	r3, r2
 801362a:	b29a      	uxth	r2, r3
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013634:	1c9a      	adds	r2, r3, #2
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013640:	b29b      	uxth	r3, r3
 8013642:	3b01      	subs	r3, #1
 8013644:	b29a      	uxth	r2, r3
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013652:	b29b      	uxth	r3, r3
 8013654:	2b00      	cmp	r3, #0
 8013656:	d121      	bne.n	801369c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013666:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	689a      	ldr	r2, [r3, #8]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f022 0201 	bic.w	r2, r2, #1
 8013676:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2220      	movs	r2, #32
 801367c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2200      	movs	r2, #0
 8013682:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7f9 f8df 	bl	800c848 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801368a:	e007      	b.n	801369c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	699a      	ldr	r2, [r3, #24]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	f042 0208 	orr.w	r2, r2, #8
 801369a:	619a      	str	r2, [r3, #24]
}
 801369c:	bf00      	nop
 801369e:	3710      	adds	r7, #16
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	4603      	mov	r3, r0
 80136ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80136ae:	2300      	movs	r3, #0
 80136b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80136b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80136b6:	2b84      	cmp	r3, #132	; 0x84
 80136b8:	d005      	beq.n	80136c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80136ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	4413      	add	r3, r2
 80136c2:	3303      	adds	r3, #3
 80136c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80136c6:	68fb      	ldr	r3, [r7, #12]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3714      	adds	r7, #20
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80136d8:	f001 fa30 	bl	8014b3c <vTaskStartScheduler>
  
  return osOK;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	bd80      	pop	{r7, pc}

080136e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80136e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136e4:	b089      	sub	sp, #36	; 0x24
 80136e6:	af04      	add	r7, sp, #16
 80136e8:	6078      	str	r0, [r7, #4]
 80136ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	695b      	ldr	r3, [r3, #20]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d020      	beq.n	8013736 <osThreadCreate+0x54>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	699b      	ldr	r3, [r3, #24]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01c      	beq.n	8013736 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	685c      	ldr	r4, [r3, #4]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681d      	ldr	r5, [r3, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	691e      	ldr	r6, [r3, #16]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801370e:	4618      	mov	r0, r3
 8013710:	f7ff ffc8 	bl	80136a4 <makeFreeRtosPriority>
 8013714:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	695b      	ldr	r3, [r3, #20]
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801371e:	9202      	str	r2, [sp, #8]
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	9100      	str	r1, [sp, #0]
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	4632      	mov	r2, r6
 8013728:	4629      	mov	r1, r5
 801372a:	4620      	mov	r0, r4
 801372c:	f000 ff4b 	bl	80145c6 <xTaskCreateStatic>
 8013730:	4603      	mov	r3, r0
 8013732:	60fb      	str	r3, [r7, #12]
 8013734:	e01c      	b.n	8013770 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	685c      	ldr	r4, [r3, #4]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013742:	b29e      	uxth	r6, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff ffaa 	bl	80136a4 <makeFreeRtosPriority>
 8013750:	4602      	mov	r2, r0
 8013752:	f107 030c 	add.w	r3, r7, #12
 8013756:	9301      	str	r3, [sp, #4]
 8013758:	9200      	str	r2, [sp, #0]
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	4632      	mov	r2, r6
 801375e:	4629      	mov	r1, r5
 8013760:	4620      	mov	r0, r4
 8013762:	f000 ff90 	bl	8014686 <xTaskCreate>
 8013766:	4603      	mov	r3, r0
 8013768:	2b01      	cmp	r3, #1
 801376a:	d001      	beq.n	8013770 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801376c:	2300      	movs	r3, #0
 801376e:	e000      	b.n	8013772 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013770:	68fb      	ldr	r3, [r7, #12]
}
 8013772:	4618      	mov	r0, r3
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801377a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801377a:	b580      	push	{r7, lr}
 801377c:	b086      	sub	sp, #24
 801377e:	af02      	add	r7, sp, #8
 8013780:	6078      	str	r0, [r7, #4]
 8013782:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d010      	beq.n	80137ae <osSemaphoreCreate+0x34>
    if (count == 1) {
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	2b01      	cmp	r3, #1
 8013790:	d10b      	bne.n	80137aa <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	685a      	ldr	r2, [r3, #4]
 8013796:	2303      	movs	r3, #3
 8013798:	9300      	str	r3, [sp, #0]
 801379a:	4613      	mov	r3, r2
 801379c:	2200      	movs	r2, #0
 801379e:	2100      	movs	r1, #0
 80137a0:	2001      	movs	r0, #1
 80137a2:	f000 f965 	bl	8013a70 <xQueueGenericCreateStatic>
 80137a6:	4603      	mov	r3, r0
 80137a8:	e016      	b.n	80137d8 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80137aa:	2300      	movs	r3, #0
 80137ac:	e014      	b.n	80137d8 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	d110      	bne.n	80137d6 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80137b4:	2203      	movs	r2, #3
 80137b6:	2100      	movs	r1, #0
 80137b8:	2001      	movs	r0, #1
 80137ba:	f000 f9d6 	bl	8013b6a <xQueueGenericCreate>
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d005      	beq.n	80137d2 <osSemaphoreCreate+0x58>
 80137c6:	2300      	movs	r3, #0
 80137c8:	2200      	movs	r2, #0
 80137ca:	2100      	movs	r1, #0
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 fa2d 	bl	8013c2c <xQueueGenericSend>
      return sema;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	e000      	b.n	80137d8 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80137d6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80137e0:	b590      	push	{r4, r7, lr}
 80137e2:	b085      	sub	sp, #20
 80137e4:	af02      	add	r7, sp, #8
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	689b      	ldr	r3, [r3, #8]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d012      	beq.n	8013818 <osMessageCreate+0x38>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00e      	beq.n	8013818 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6859      	ldr	r1, [r3, #4]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	689a      	ldr	r2, [r3, #8]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	68dc      	ldr	r4, [r3, #12]
 801380a:	2300      	movs	r3, #0
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	4623      	mov	r3, r4
 8013810:	f000 f92e 	bl	8013a70 <xQueueGenericCreateStatic>
 8013814:	4603      	mov	r3, r0
 8013816:	e008      	b.n	801382a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6818      	ldr	r0, [r3, #0]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	2200      	movs	r2, #0
 8013822:	4619      	mov	r1, r3
 8013824:	f000 f9a1 	bl	8013b6a <xQueueGenericCreate>
 8013828:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801382a:	4618      	mov	r0, r3
 801382c:	370c      	adds	r7, #12
 801382e:	46bd      	mov	sp, r7
 8013830:	bd90      	pop	{r4, r7, pc}

08013832 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013832:	b480      	push	{r7}
 8013834:	b083      	sub	sp, #12
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f103 0208 	add.w	r2, r3, #8
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f04f 32ff 	mov.w	r2, #4294967295
 801384a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f103 0208 	add.w	r2, r3, #8
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f103 0208 	add.w	r2, r3, #8
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2200      	movs	r2, #0
 8013864:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013866:	bf00      	nop
 8013868:	370c      	adds	r7, #12
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr

08013872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013872:	b480      	push	{r7}
 8013874:	b083      	sub	sp, #12
 8013876:	af00      	add	r7, sp, #0
 8013878:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2200      	movs	r2, #0
 801387e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013880:	bf00      	nop
 8013882:	370c      	adds	r7, #12
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr

0801388c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801388c:	b480      	push	{r7}
 801388e:	b085      	sub	sp, #20
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	68fa      	ldr	r2, [r7, #12]
 80138a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	689a      	ldr	r2, [r3, #8]
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	683a      	ldr	r2, [r7, #0]
 80138b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	683a      	ldr	r2, [r7, #0]
 80138b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	601a      	str	r2, [r3, #0]
}
 80138c8:	bf00      	nop
 80138ca:	3714      	adds	r7, #20
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138d4:	b480      	push	{r7}
 80138d6:	b085      	sub	sp, #20
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ea:	d103      	bne.n	80138f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	691b      	ldr	r3, [r3, #16]
 80138f0:	60fb      	str	r3, [r7, #12]
 80138f2:	e00c      	b.n	801390e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	3308      	adds	r3, #8
 80138f8:	60fb      	str	r3, [r7, #12]
 80138fa:	e002      	b.n	8013902 <vListInsert+0x2e>
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	60fb      	str	r3, [r7, #12]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	68ba      	ldr	r2, [r7, #8]
 801390a:	429a      	cmp	r2, r3
 801390c:	d2f6      	bcs.n	80138fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	685a      	ldr	r2, [r3, #4]
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	683a      	ldr	r2, [r7, #0]
 801391c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	68fa      	ldr	r2, [r7, #12]
 8013922:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	683a      	ldr	r2, [r7, #0]
 8013928:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	1c5a      	adds	r2, r3, #1
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	601a      	str	r2, [r3, #0]
}
 801393a:	bf00      	nop
 801393c:	3714      	adds	r7, #20
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013946:	b480      	push	{r7}
 8013948:	b085      	sub	sp, #20
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	6892      	ldr	r2, [r2, #8]
 801395c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	6852      	ldr	r2, [r2, #4]
 8013966:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	687a      	ldr	r2, [r7, #4]
 801396e:	429a      	cmp	r2, r3
 8013970:	d103      	bne.n	801397a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	689a      	ldr	r2, [r3, #8]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2200      	movs	r2, #0
 801397e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	1e5a      	subs	r2, r3, #1
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
}
 801398e:	4618      	mov	r0, r3
 8013990:	3714      	adds	r7, #20
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr
	...

0801399c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d10b      	bne.n	80139c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80139b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b4:	b672      	cpsid	i
 80139b6:	f383 8811 	msr	BASEPRI, r3
 80139ba:	f3bf 8f6f 	isb	sy
 80139be:	f3bf 8f4f 	dsb	sy
 80139c2:	b662      	cpsie	i
 80139c4:	60bb      	str	r3, [r7, #8]
 80139c6:	e7fe      	b.n	80139c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80139c8:	f002 f806 	bl	80159d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139d4:	68f9      	ldr	r1, [r7, #12]
 80139d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139d8:	fb01 f303 	mul.w	r3, r1, r3
 80139dc:	441a      	add	r2, r3
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2200      	movs	r2, #0
 80139e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139f8:	3b01      	subs	r3, #1
 80139fa:	68f9      	ldr	r1, [r7, #12]
 80139fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139fe:	fb01 f303 	mul.w	r3, r1, r3
 8013a02:	441a      	add	r2, r3
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	22ff      	movs	r2, #255	; 0xff
 8013a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	22ff      	movs	r2, #255	; 0xff
 8013a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d114      	bne.n	8013a48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	691b      	ldr	r3, [r3, #16]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d01a      	beq.n	8013a5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	3310      	adds	r3, #16
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f001 fad0 	bl	8014fd0 <xTaskRemoveFromEventList>
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d012      	beq.n	8013a5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013a36:	4b0d      	ldr	r3, [pc, #52]	; (8013a6c <xQueueGenericReset+0xd0>)
 8013a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a3c:	601a      	str	r2, [r3, #0]
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	f3bf 8f6f 	isb	sy
 8013a46:	e009      	b.n	8013a5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	3310      	adds	r3, #16
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff fef0 	bl	8013832 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	3324      	adds	r3, #36	; 0x24
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7ff feeb 	bl	8013832 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013a5c:	f001 ffee 	bl	8015a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013a60:	2301      	movs	r3, #1
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	e000ed04 	.word	0xe000ed04

08013a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b08e      	sub	sp, #56	; 0x38
 8013a74:	af02      	add	r7, sp, #8
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	607a      	str	r2, [r7, #4]
 8013a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d10b      	bne.n	8013a9c <xQueueGenericCreateStatic+0x2c>
 8013a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a88:	b672      	cpsid	i
 8013a8a:	f383 8811 	msr	BASEPRI, r3
 8013a8e:	f3bf 8f6f 	isb	sy
 8013a92:	f3bf 8f4f 	dsb	sy
 8013a96:	b662      	cpsie	i
 8013a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a9a:	e7fe      	b.n	8013a9a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d10b      	bne.n	8013aba <xQueueGenericCreateStatic+0x4a>
 8013aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa6:	b672      	cpsid	i
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	b662      	cpsie	i
 8013ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8013ab8:	e7fe      	b.n	8013ab8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d002      	beq.n	8013ac6 <xQueueGenericCreateStatic+0x56>
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d001      	beq.n	8013aca <xQueueGenericCreateStatic+0x5a>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e000      	b.n	8013acc <xQueueGenericCreateStatic+0x5c>
 8013aca:	2300      	movs	r3, #0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10b      	bne.n	8013ae8 <xQueueGenericCreateStatic+0x78>
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	b672      	cpsid	i
 8013ad6:	f383 8811 	msr	BASEPRI, r3
 8013ada:	f3bf 8f6f 	isb	sy
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	b662      	cpsie	i
 8013ae4:	623b      	str	r3, [r7, #32]
 8013ae6:	e7fe      	b.n	8013ae6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d102      	bne.n	8013af4 <xQueueGenericCreateStatic+0x84>
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d101      	bne.n	8013af8 <xQueueGenericCreateStatic+0x88>
 8013af4:	2301      	movs	r3, #1
 8013af6:	e000      	b.n	8013afa <xQueueGenericCreateStatic+0x8a>
 8013af8:	2300      	movs	r3, #0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d10b      	bne.n	8013b16 <xQueueGenericCreateStatic+0xa6>
 8013afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b02:	b672      	cpsid	i
 8013b04:	f383 8811 	msr	BASEPRI, r3
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	f3bf 8f4f 	dsb	sy
 8013b10:	b662      	cpsie	i
 8013b12:	61fb      	str	r3, [r7, #28]
 8013b14:	e7fe      	b.n	8013b14 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013b16:	2348      	movs	r3, #72	; 0x48
 8013b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	2b48      	cmp	r3, #72	; 0x48
 8013b1e:	d00b      	beq.n	8013b38 <xQueueGenericCreateStatic+0xc8>
 8013b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b24:	b672      	cpsid	i
 8013b26:	f383 8811 	msr	BASEPRI, r3
 8013b2a:	f3bf 8f6f 	isb	sy
 8013b2e:	f3bf 8f4f 	dsb	sy
 8013b32:	b662      	cpsie	i
 8013b34:	61bb      	str	r3, [r7, #24]
 8013b36:	e7fe      	b.n	8013b36 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013b38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00d      	beq.n	8013b60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b46:	2201      	movs	r2, #1
 8013b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b52:	9300      	str	r3, [sp, #0]
 8013b54:	4613      	mov	r3, r2
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	68b9      	ldr	r1, [r7, #8]
 8013b5a:	68f8      	ldr	r0, [r7, #12]
 8013b5c:	f000 f846 	bl	8013bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3730      	adds	r7, #48	; 0x30
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b08a      	sub	sp, #40	; 0x28
 8013b6e:	af02      	add	r7, sp, #8
 8013b70:	60f8      	str	r0, [r7, #12]
 8013b72:	60b9      	str	r1, [r7, #8]
 8013b74:	4613      	mov	r3, r2
 8013b76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d10b      	bne.n	8013b96 <xQueueGenericCreate+0x2c>
 8013b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b82:	b672      	cpsid	i
 8013b84:	f383 8811 	msr	BASEPRI, r3
 8013b88:	f3bf 8f6f 	isb	sy
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	b662      	cpsie	i
 8013b92:	613b      	str	r3, [r7, #16]
 8013b94:	e7fe      	b.n	8013b94 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d102      	bne.n	8013ba2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	61fb      	str	r3, [r7, #28]
 8013ba0:	e004      	b.n	8013bac <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	68ba      	ldr	r2, [r7, #8]
 8013ba6:	fb02 f303 	mul.w	r3, r2, r3
 8013baa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	3348      	adds	r3, #72	; 0x48
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f002 f833 	bl	8015c1c <pvPortMalloc>
 8013bb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013bb8:	69bb      	ldr	r3, [r7, #24]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d011      	beq.n	8013be2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	3348      	adds	r3, #72	; 0x48
 8013bc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013bd0:	79fa      	ldrb	r2, [r7, #7]
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	697a      	ldr	r2, [r7, #20]
 8013bda:	68b9      	ldr	r1, [r7, #8]
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f000 f805 	bl	8013bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013be2:	69bb      	ldr	r3, [r7, #24]
	}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3720      	adds	r7, #32
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
 8013bf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d103      	bne.n	8013c08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	69ba      	ldr	r2, [r7, #24]
 8013c04:	601a      	str	r2, [r3, #0]
 8013c06:	e002      	b.n	8013c0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	68fa      	ldr	r2, [r7, #12]
 8013c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	68ba      	ldr	r2, [r7, #8]
 8013c18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013c1a:	2101      	movs	r1, #1
 8013c1c:	69b8      	ldr	r0, [r7, #24]
 8013c1e:	f7ff febd 	bl	801399c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013c22:	bf00      	nop
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
	...

08013c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b08e      	sub	sp, #56	; 0x38
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d10b      	bne.n	8013c60 <xQueueGenericSend+0x34>
 8013c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4c:	b672      	cpsid	i
 8013c4e:	f383 8811 	msr	BASEPRI, r3
 8013c52:	f3bf 8f6f 	isb	sy
 8013c56:	f3bf 8f4f 	dsb	sy
 8013c5a:	b662      	cpsie	i
 8013c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c5e:	e7fe      	b.n	8013c5e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d103      	bne.n	8013c6e <xQueueGenericSend+0x42>
 8013c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d101      	bne.n	8013c72 <xQueueGenericSend+0x46>
 8013c6e:	2301      	movs	r3, #1
 8013c70:	e000      	b.n	8013c74 <xQueueGenericSend+0x48>
 8013c72:	2300      	movs	r3, #0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d10b      	bne.n	8013c90 <xQueueGenericSend+0x64>
 8013c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c7c:	b672      	cpsid	i
 8013c7e:	f383 8811 	msr	BASEPRI, r3
 8013c82:	f3bf 8f6f 	isb	sy
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	b662      	cpsie	i
 8013c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8013c8e:	e7fe      	b.n	8013c8e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	2b02      	cmp	r3, #2
 8013c94:	d103      	bne.n	8013c9e <xQueueGenericSend+0x72>
 8013c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	d101      	bne.n	8013ca2 <xQueueGenericSend+0x76>
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	e000      	b.n	8013ca4 <xQueueGenericSend+0x78>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d10b      	bne.n	8013cc0 <xQueueGenericSend+0x94>
 8013ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cac:	b672      	cpsid	i
 8013cae:	f383 8811 	msr	BASEPRI, r3
 8013cb2:	f3bf 8f6f 	isb	sy
 8013cb6:	f3bf 8f4f 	dsb	sy
 8013cba:	b662      	cpsie	i
 8013cbc:	623b      	str	r3, [r7, #32]
 8013cbe:	e7fe      	b.n	8013cbe <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013cc0:	f001 fb44 	bl	801534c <xTaskGetSchedulerState>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d102      	bne.n	8013cd0 <xQueueGenericSend+0xa4>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d101      	bne.n	8013cd4 <xQueueGenericSend+0xa8>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e000      	b.n	8013cd6 <xQueueGenericSend+0xaa>
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d10b      	bne.n	8013cf2 <xQueueGenericSend+0xc6>
 8013cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cde:	b672      	cpsid	i
 8013ce0:	f383 8811 	msr	BASEPRI, r3
 8013ce4:	f3bf 8f6f 	isb	sy
 8013ce8:	f3bf 8f4f 	dsb	sy
 8013cec:	b662      	cpsie	i
 8013cee:	61fb      	str	r3, [r7, #28]
 8013cf0:	e7fe      	b.n	8013cf0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013cf2:	f001 fe71 	bl	80159d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d302      	bcc.n	8013d08 <xQueueGenericSend+0xdc>
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	2b02      	cmp	r3, #2
 8013d06:	d129      	bne.n	8013d5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013d08:	683a      	ldr	r2, [r7, #0]
 8013d0a:	68b9      	ldr	r1, [r7, #8]
 8013d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d0e:	f000 fb4a 	bl	80143a6 <prvCopyDataToQueue>
 8013d12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d010      	beq.n	8013d3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1e:	3324      	adds	r3, #36	; 0x24
 8013d20:	4618      	mov	r0, r3
 8013d22:	f001 f955 	bl	8014fd0 <xTaskRemoveFromEventList>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d013      	beq.n	8013d54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013d2c:	4b3f      	ldr	r3, [pc, #252]	; (8013e2c <xQueueGenericSend+0x200>)
 8013d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d32:	601a      	str	r2, [r3, #0]
 8013d34:	f3bf 8f4f 	dsb	sy
 8013d38:	f3bf 8f6f 	isb	sy
 8013d3c:	e00a      	b.n	8013d54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d007      	beq.n	8013d54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013d44:	4b39      	ldr	r3, [pc, #228]	; (8013e2c <xQueueGenericSend+0x200>)
 8013d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d4a:	601a      	str	r2, [r3, #0]
 8013d4c:	f3bf 8f4f 	dsb	sy
 8013d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013d54:	f001 fe72 	bl	8015a3c <vPortExitCritical>
				return pdPASS;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	e063      	b.n	8013e24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d103      	bne.n	8013d6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d62:	f001 fe6b 	bl	8015a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013d66:	2300      	movs	r3, #0
 8013d68:	e05c      	b.n	8013e24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d106      	bne.n	8013d7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d70:	f107 0314 	add.w	r3, r7, #20
 8013d74:	4618      	mov	r0, r3
 8013d76:	f001 f98f 	bl	8015098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d7e:	f001 fe5d 	bl	8015a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d82:	f000 ff3d 	bl	8014c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d86:	f001 fe27 	bl	80159d8 <vPortEnterCritical>
 8013d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d90:	b25b      	sxtb	r3, r3
 8013d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d96:	d103      	bne.n	8013da0 <xQueueGenericSend+0x174>
 8013d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013da6:	b25b      	sxtb	r3, r3
 8013da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dac:	d103      	bne.n	8013db6 <xQueueGenericSend+0x18a>
 8013dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db0:	2200      	movs	r2, #0
 8013db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013db6:	f001 fe41 	bl	8015a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013dba:	1d3a      	adds	r2, r7, #4
 8013dbc:	f107 0314 	add.w	r3, r7, #20
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f001 f97e 	bl	80150c4 <xTaskCheckForTimeOut>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d124      	bne.n	8013e18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dd0:	f000 fbe1 	bl	8014596 <prvIsQueueFull>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d018      	beq.n	8013e0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ddc:	3310      	adds	r3, #16
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	4611      	mov	r1, r2
 8013de2:	4618      	mov	r0, r3
 8013de4:	f001 f8ce 	bl	8014f84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dea:	f000 fb6c 	bl	80144c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013dee:	f000 ff15 	bl	8014c1c <xTaskResumeAll>
 8013df2:	4603      	mov	r3, r0
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f47f af7c 	bne.w	8013cf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013dfa:	4b0c      	ldr	r3, [pc, #48]	; (8013e2c <xQueueGenericSend+0x200>)
 8013dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e00:	601a      	str	r2, [r3, #0]
 8013e02:	f3bf 8f4f 	dsb	sy
 8013e06:	f3bf 8f6f 	isb	sy
 8013e0a:	e772      	b.n	8013cf2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e0e:	f000 fb5a 	bl	80144c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013e12:	f000 ff03 	bl	8014c1c <xTaskResumeAll>
 8013e16:	e76c      	b.n	8013cf2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e1a:	f000 fb54 	bl	80144c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013e1e:	f000 fefd 	bl	8014c1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3738      	adds	r7, #56	; 0x38
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	e000ed04 	.word	0xe000ed04

08013e30 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b08e      	sub	sp, #56	; 0x38
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10b      	bne.n	8013e5c <xQueueGiveFromISR+0x2c>
 8013e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e48:	b672      	cpsid	i
 8013e4a:	f383 8811 	msr	BASEPRI, r3
 8013e4e:	f3bf 8f6f 	isb	sy
 8013e52:	f3bf 8f4f 	dsb	sy
 8013e56:	b662      	cpsie	i
 8013e58:	623b      	str	r3, [r7, #32]
 8013e5a:	e7fe      	b.n	8013e5a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00b      	beq.n	8013e7c <xQueueGiveFromISR+0x4c>
 8013e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e68:	b672      	cpsid	i
 8013e6a:	f383 8811 	msr	BASEPRI, r3
 8013e6e:	f3bf 8f6f 	isb	sy
 8013e72:	f3bf 8f4f 	dsb	sy
 8013e76:	b662      	cpsie	i
 8013e78:	61fb      	str	r3, [r7, #28]
 8013e7a:	e7fe      	b.n	8013e7a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d103      	bne.n	8013e8c <xQueueGiveFromISR+0x5c>
 8013e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e86:	689b      	ldr	r3, [r3, #8]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d101      	bne.n	8013e90 <xQueueGiveFromISR+0x60>
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	e000      	b.n	8013e92 <xQueueGiveFromISR+0x62>
 8013e90:	2300      	movs	r3, #0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d10b      	bne.n	8013eae <xQueueGiveFromISR+0x7e>
 8013e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9a:	b672      	cpsid	i
 8013e9c:	f383 8811 	msr	BASEPRI, r3
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	f3bf 8f4f 	dsb	sy
 8013ea8:	b662      	cpsie	i
 8013eaa:	61bb      	str	r3, [r7, #24]
 8013eac:	e7fe      	b.n	8013eac <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013eae:	f001 fe73 	bl	8015b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8013eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eba:	b672      	cpsid	i
 8013ebc:	f383 8811 	msr	BASEPRI, r3
 8013ec0:	f3bf 8f6f 	isb	sy
 8013ec4:	f3bf 8f4f 	dsb	sy
 8013ec8:	b662      	cpsie	i
 8013eca:	617a      	str	r2, [r7, #20]
 8013ecc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013ece:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d22b      	bcs.n	8013f3a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eee:	1c5a      	adds	r2, r3, #1
 8013ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013ef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013efc:	d112      	bne.n	8013f24 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d016      	beq.n	8013f34 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f08:	3324      	adds	r3, #36	; 0x24
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f001 f860 	bl	8014fd0 <xTaskRemoveFromEventList>
 8013f10:	4603      	mov	r3, r0
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00e      	beq.n	8013f34 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d00b      	beq.n	8013f34 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	601a      	str	r2, [r3, #0]
 8013f22:	e007      	b.n	8013f34 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	b25a      	sxtb	r2, r3
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013f34:	2301      	movs	r3, #1
 8013f36:	637b      	str	r3, [r7, #52]	; 0x34
 8013f38:	e001      	b.n	8013f3e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8013f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f40:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3738      	adds	r7, #56	; 0x38
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
	...

08013f54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08c      	sub	sp, #48	; 0x30
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013f60:	2300      	movs	r3, #0
 8013f62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10b      	bne.n	8013f86 <xQueueReceive+0x32>
	__asm volatile
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	b672      	cpsid	i
 8013f74:	f383 8811 	msr	BASEPRI, r3
 8013f78:	f3bf 8f6f 	isb	sy
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	b662      	cpsie	i
 8013f82:	623b      	str	r3, [r7, #32]
 8013f84:	e7fe      	b.n	8013f84 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d103      	bne.n	8013f94 <xQueueReceive+0x40>
 8013f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d101      	bne.n	8013f98 <xQueueReceive+0x44>
 8013f94:	2301      	movs	r3, #1
 8013f96:	e000      	b.n	8013f9a <xQueueReceive+0x46>
 8013f98:	2300      	movs	r3, #0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d10b      	bne.n	8013fb6 <xQueueReceive+0x62>
 8013f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa2:	b672      	cpsid	i
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	b662      	cpsie	i
 8013fb2:	61fb      	str	r3, [r7, #28]
 8013fb4:	e7fe      	b.n	8013fb4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013fb6:	f001 f9c9 	bl	801534c <xTaskGetSchedulerState>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d102      	bne.n	8013fc6 <xQueueReceive+0x72>
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d101      	bne.n	8013fca <xQueueReceive+0x76>
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	e000      	b.n	8013fcc <xQueueReceive+0x78>
 8013fca:	2300      	movs	r3, #0
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d10b      	bne.n	8013fe8 <xQueueReceive+0x94>
 8013fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd4:	b672      	cpsid	i
 8013fd6:	f383 8811 	msr	BASEPRI, r3
 8013fda:	f3bf 8f6f 	isb	sy
 8013fde:	f3bf 8f4f 	dsb	sy
 8013fe2:	b662      	cpsie	i
 8013fe4:	61bb      	str	r3, [r7, #24]
 8013fe6:	e7fe      	b.n	8013fe6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fe8:	f001 fcf6 	bl	80159d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ff0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d01f      	beq.n	8014038 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013ff8:	68b9      	ldr	r1, [r7, #8]
 8013ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ffc:	f000 fa3d 	bl	801447a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	1e5a      	subs	r2, r3, #1
 8014004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014006:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400a:	691b      	ldr	r3, [r3, #16]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d00f      	beq.n	8014030 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014012:	3310      	adds	r3, #16
 8014014:	4618      	mov	r0, r3
 8014016:	f000 ffdb 	bl	8014fd0 <xTaskRemoveFromEventList>
 801401a:	4603      	mov	r3, r0
 801401c:	2b00      	cmp	r3, #0
 801401e:	d007      	beq.n	8014030 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014020:	4b3c      	ldr	r3, [pc, #240]	; (8014114 <xQueueReceive+0x1c0>)
 8014022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014026:	601a      	str	r2, [r3, #0]
 8014028:	f3bf 8f4f 	dsb	sy
 801402c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014030:	f001 fd04 	bl	8015a3c <vPortExitCritical>
				return pdPASS;
 8014034:	2301      	movs	r3, #1
 8014036:	e069      	b.n	801410c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d103      	bne.n	8014046 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801403e:	f001 fcfd 	bl	8015a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014042:	2300      	movs	r3, #0
 8014044:	e062      	b.n	801410c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014048:	2b00      	cmp	r3, #0
 801404a:	d106      	bne.n	801405a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801404c:	f107 0310 	add.w	r3, r7, #16
 8014050:	4618      	mov	r0, r3
 8014052:	f001 f821 	bl	8015098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014056:	2301      	movs	r3, #1
 8014058:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801405a:	f001 fcef 	bl	8015a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801405e:	f000 fdcf 	bl	8014c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014062:	f001 fcb9 	bl	80159d8 <vPortEnterCritical>
 8014066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801406c:	b25b      	sxtb	r3, r3
 801406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014072:	d103      	bne.n	801407c <xQueueReceive+0x128>
 8014074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014076:	2200      	movs	r2, #0
 8014078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014082:	b25b      	sxtb	r3, r3
 8014084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014088:	d103      	bne.n	8014092 <xQueueReceive+0x13e>
 801408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408c:	2200      	movs	r2, #0
 801408e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014092:	f001 fcd3 	bl	8015a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014096:	1d3a      	adds	r2, r7, #4
 8014098:	f107 0310 	add.w	r3, r7, #16
 801409c:	4611      	mov	r1, r2
 801409e:	4618      	mov	r0, r3
 80140a0:	f001 f810 	bl	80150c4 <xTaskCheckForTimeOut>
 80140a4:	4603      	mov	r3, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d123      	bne.n	80140f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140ac:	f000 fa5d 	bl	801456a <prvIsQueueEmpty>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d017      	beq.n	80140e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80140b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b8:	3324      	adds	r3, #36	; 0x24
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	4611      	mov	r1, r2
 80140be:	4618      	mov	r0, r3
 80140c0:	f000 ff60 	bl	8014f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80140c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140c6:	f000 f9fe 	bl	80144c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80140ca:	f000 fda7 	bl	8014c1c <xTaskResumeAll>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d189      	bne.n	8013fe8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80140d4:	4b0f      	ldr	r3, [pc, #60]	; (8014114 <xQueueReceive+0x1c0>)
 80140d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140da:	601a      	str	r2, [r3, #0]
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	e780      	b.n	8013fe8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80140e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140e8:	f000 f9ed 	bl	80144c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80140ec:	f000 fd96 	bl	8014c1c <xTaskResumeAll>
 80140f0:	e77a      	b.n	8013fe8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80140f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140f4:	f000 f9e7 	bl	80144c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140f8:	f000 fd90 	bl	8014c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140fe:	f000 fa34 	bl	801456a <prvIsQueueEmpty>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	f43f af6f 	beq.w	8013fe8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801410a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801410c:	4618      	mov	r0, r3
 801410e:	3730      	adds	r7, #48	; 0x30
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	e000ed04 	.word	0xe000ed04

08014118 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b08e      	sub	sp, #56	; 0x38
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014122:	2300      	movs	r3, #0
 8014124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801412a:	2300      	movs	r3, #0
 801412c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014130:	2b00      	cmp	r3, #0
 8014132:	d10b      	bne.n	801414c <xQueueSemaphoreTake+0x34>
 8014134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014138:	b672      	cpsid	i
 801413a:	f383 8811 	msr	BASEPRI, r3
 801413e:	f3bf 8f6f 	isb	sy
 8014142:	f3bf 8f4f 	dsb	sy
 8014146:	b662      	cpsie	i
 8014148:	623b      	str	r3, [r7, #32]
 801414a:	e7fe      	b.n	801414a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014150:	2b00      	cmp	r3, #0
 8014152:	d00b      	beq.n	801416c <xQueueSemaphoreTake+0x54>
 8014154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014158:	b672      	cpsid	i
 801415a:	f383 8811 	msr	BASEPRI, r3
 801415e:	f3bf 8f6f 	isb	sy
 8014162:	f3bf 8f4f 	dsb	sy
 8014166:	b662      	cpsie	i
 8014168:	61fb      	str	r3, [r7, #28]
 801416a:	e7fe      	b.n	801416a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801416c:	f001 f8ee 	bl	801534c <xTaskGetSchedulerState>
 8014170:	4603      	mov	r3, r0
 8014172:	2b00      	cmp	r3, #0
 8014174:	d102      	bne.n	801417c <xQueueSemaphoreTake+0x64>
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d101      	bne.n	8014180 <xQueueSemaphoreTake+0x68>
 801417c:	2301      	movs	r3, #1
 801417e:	e000      	b.n	8014182 <xQueueSemaphoreTake+0x6a>
 8014180:	2300      	movs	r3, #0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d10b      	bne.n	801419e <xQueueSemaphoreTake+0x86>
 8014186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418a:	b672      	cpsid	i
 801418c:	f383 8811 	msr	BASEPRI, r3
 8014190:	f3bf 8f6f 	isb	sy
 8014194:	f3bf 8f4f 	dsb	sy
 8014198:	b662      	cpsie	i
 801419a:	61bb      	str	r3, [r7, #24]
 801419c:	e7fe      	b.n	801419c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801419e:	f001 fc1b 	bl	80159d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80141a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141a6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80141a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d024      	beq.n	80141f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80141ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b0:	1e5a      	subs	r2, r3, #1
 80141b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80141b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d104      	bne.n	80141c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80141be:	f001 fa87 	bl	80156d0 <pvTaskIncrementMutexHeldCount>
 80141c2:	4602      	mov	r2, r0
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ca:	691b      	ldr	r3, [r3, #16]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d00f      	beq.n	80141f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d2:	3310      	adds	r3, #16
 80141d4:	4618      	mov	r0, r3
 80141d6:	f000 fefb 	bl	8014fd0 <xTaskRemoveFromEventList>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d007      	beq.n	80141f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80141e0:	4b54      	ldr	r3, [pc, #336]	; (8014334 <xQueueSemaphoreTake+0x21c>)
 80141e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141e6:	601a      	str	r2, [r3, #0]
 80141e8:	f3bf 8f4f 	dsb	sy
 80141ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80141f0:	f001 fc24 	bl	8015a3c <vPortExitCritical>
				return pdPASS;
 80141f4:	2301      	movs	r3, #1
 80141f6:	e098      	b.n	801432a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d112      	bne.n	8014224 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80141fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00b      	beq.n	801421c <xQueueSemaphoreTake+0x104>
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	b672      	cpsid	i
 801420a:	f383 8811 	msr	BASEPRI, r3
 801420e:	f3bf 8f6f 	isb	sy
 8014212:	f3bf 8f4f 	dsb	sy
 8014216:	b662      	cpsie	i
 8014218:	617b      	str	r3, [r7, #20]
 801421a:	e7fe      	b.n	801421a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801421c:	f001 fc0e 	bl	8015a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014220:	2300      	movs	r3, #0
 8014222:	e082      	b.n	801432a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014226:	2b00      	cmp	r3, #0
 8014228:	d106      	bne.n	8014238 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801422a:	f107 030c 	add.w	r3, r7, #12
 801422e:	4618      	mov	r0, r3
 8014230:	f000 ff32 	bl	8015098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014234:	2301      	movs	r3, #1
 8014236:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014238:	f001 fc00 	bl	8015a3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801423c:	f000 fce0 	bl	8014c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014240:	f001 fbca 	bl	80159d8 <vPortEnterCritical>
 8014244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801424a:	b25b      	sxtb	r3, r3
 801424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014250:	d103      	bne.n	801425a <xQueueSemaphoreTake+0x142>
 8014252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014254:	2200      	movs	r2, #0
 8014256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014260:	b25b      	sxtb	r3, r3
 8014262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014266:	d103      	bne.n	8014270 <xQueueSemaphoreTake+0x158>
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	2200      	movs	r2, #0
 801426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014270:	f001 fbe4 	bl	8015a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014274:	463a      	mov	r2, r7
 8014276:	f107 030c 	add.w	r3, r7, #12
 801427a:	4611      	mov	r1, r2
 801427c:	4618      	mov	r0, r3
 801427e:	f000 ff21 	bl	80150c4 <xTaskCheckForTimeOut>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d132      	bne.n	80142ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801428a:	f000 f96e 	bl	801456a <prvIsQueueEmpty>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d026      	beq.n	80142e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d109      	bne.n	80142b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801429c:	f001 fb9c 	bl	80159d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80142a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a2:	689b      	ldr	r3, [r3, #8]
 80142a4:	4618      	mov	r0, r3
 80142a6:	f001 f86f 	bl	8015388 <xTaskPriorityInherit>
 80142aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80142ac:	f001 fbc6 	bl	8015a3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80142b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b2:	3324      	adds	r3, #36	; 0x24
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	4611      	mov	r1, r2
 80142b8:	4618      	mov	r0, r3
 80142ba:	f000 fe63 	bl	8014f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80142be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142c0:	f000 f901 	bl	80144c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80142c4:	f000 fcaa 	bl	8014c1c <xTaskResumeAll>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f47f af67 	bne.w	801419e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80142d0:	4b18      	ldr	r3, [pc, #96]	; (8014334 <xQueueSemaphoreTake+0x21c>)
 80142d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142d6:	601a      	str	r2, [r3, #0]
 80142d8:	f3bf 8f4f 	dsb	sy
 80142dc:	f3bf 8f6f 	isb	sy
 80142e0:	e75d      	b.n	801419e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80142e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142e4:	f000 f8ef 	bl	80144c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142e8:	f000 fc98 	bl	8014c1c <xTaskResumeAll>
 80142ec:	e757      	b.n	801419e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80142ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142f0:	f000 f8e9 	bl	80144c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142f4:	f000 fc92 	bl	8014c1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142fa:	f000 f936 	bl	801456a <prvIsQueueEmpty>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	f43f af4c 	beq.w	801419e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014308:	2b00      	cmp	r3, #0
 801430a:	d00d      	beq.n	8014328 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801430c:	f001 fb64 	bl	80159d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014312:	f000 f830 	bl	8014376 <prvGetDisinheritPriorityAfterTimeout>
 8014316:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801431e:	4618      	mov	r0, r3
 8014320:	f001 f93a 	bl	8015598 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014324:	f001 fb8a 	bl	8015a3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801432a:	4618      	mov	r0, r3
 801432c:	3738      	adds	r7, #56	; 0x38
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	e000ed04 	.word	0xe000ed04

08014338 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d10b      	bne.n	801435e <uxQueueMessagesWaiting+0x26>
 8014346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801434a:	b672      	cpsid	i
 801434c:	f383 8811 	msr	BASEPRI, r3
 8014350:	f3bf 8f6f 	isb	sy
 8014354:	f3bf 8f4f 	dsb	sy
 8014358:	b662      	cpsie	i
 801435a:	60bb      	str	r3, [r7, #8]
 801435c:	e7fe      	b.n	801435c <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 801435e:	f001 fb3b 	bl	80159d8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014366:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014368:	f001 fb68 	bl	8015a3c <vPortExitCritical>

	return uxReturn;
 801436c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801436e:	4618      	mov	r0, r3
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014376:	b480      	push	{r7}
 8014378:	b085      	sub	sp, #20
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014382:	2b00      	cmp	r3, #0
 8014384:	d006      	beq.n	8014394 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f1c3 0307 	rsb	r3, r3, #7
 8014390:	60fb      	str	r3, [r7, #12]
 8014392:	e001      	b.n	8014398 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014394:	2300      	movs	r3, #0
 8014396:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014398:	68fb      	ldr	r3, [r7, #12]
	}
 801439a:	4618      	mov	r0, r3
 801439c:	3714      	adds	r7, #20
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b086      	sub	sp, #24
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	60f8      	str	r0, [r7, #12]
 80143ae:	60b9      	str	r1, [r7, #8]
 80143b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80143b2:	2300      	movs	r3, #0
 80143b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d10d      	bne.n	80143e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d14d      	bne.n	8014468 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	689b      	ldr	r3, [r3, #8]
 80143d0:	4618      	mov	r0, r3
 80143d2:	f001 f859 	bl	8015488 <xTaskPriorityDisinherit>
 80143d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2200      	movs	r2, #0
 80143dc:	609a      	str	r2, [r3, #8]
 80143de:	e043      	b.n	8014468 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d119      	bne.n	801441a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6858      	ldr	r0, [r3, #4]
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ee:	461a      	mov	r2, r3
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	f001 fe1f 	bl	8016034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	685a      	ldr	r2, [r3, #4]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143fe:	441a      	add	r2, r3
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	685a      	ldr	r2, [r3, #4]
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	429a      	cmp	r2, r3
 801440e:	d32b      	bcc.n	8014468 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	605a      	str	r2, [r3, #4]
 8014418:	e026      	b.n	8014468 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	68d8      	ldr	r0, [r3, #12]
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014422:	461a      	mov	r2, r3
 8014424:	68b9      	ldr	r1, [r7, #8]
 8014426:	f001 fe05 	bl	8016034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	68da      	ldr	r2, [r3, #12]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014432:	425b      	negs	r3, r3
 8014434:	441a      	add	r2, r3
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	68da      	ldr	r2, [r3, #12]
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	429a      	cmp	r2, r3
 8014444:	d207      	bcs.n	8014456 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	689a      	ldr	r2, [r3, #8]
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801444e:	425b      	negs	r3, r3
 8014450:	441a      	add	r2, r3
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2b02      	cmp	r3, #2
 801445a:	d105      	bne.n	8014468 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d002      	beq.n	8014468 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	3b01      	subs	r3, #1
 8014466:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	1c5a      	adds	r2, r3, #1
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014470:	697b      	ldr	r3, [r7, #20]
}
 8014472:	4618      	mov	r0, r3
 8014474:	3718      	adds	r7, #24
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}

0801447a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801447a:	b580      	push	{r7, lr}
 801447c:	b082      	sub	sp, #8
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
 8014482:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014488:	2b00      	cmp	r3, #0
 801448a:	d018      	beq.n	80144be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	68da      	ldr	r2, [r3, #12]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014494:	441a      	add	r2, r3
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	68da      	ldr	r2, [r3, #12]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	689b      	ldr	r3, [r3, #8]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d303      	bcc.n	80144ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	68d9      	ldr	r1, [r3, #12]
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144b6:	461a      	mov	r2, r3
 80144b8:	6838      	ldr	r0, [r7, #0]
 80144ba:	f001 fdbb 	bl	8016034 <memcpy>
	}
}
 80144be:	bf00      	nop
 80144c0:	3708      	adds	r7, #8
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b084      	sub	sp, #16
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80144ce:	f001 fa83 	bl	80159d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80144da:	e011      	b.n	8014500 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d012      	beq.n	801450a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	3324      	adds	r3, #36	; 0x24
 80144e8:	4618      	mov	r0, r3
 80144ea:	f000 fd71 	bl	8014fd0 <xTaskRemoveFromEventList>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d001      	beq.n	80144f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80144f4:	f000 fe4a 	bl	801518c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80144f8:	7bfb      	ldrb	r3, [r7, #15]
 80144fa:	3b01      	subs	r3, #1
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014504:	2b00      	cmp	r3, #0
 8014506:	dce9      	bgt.n	80144dc <prvUnlockQueue+0x16>
 8014508:	e000      	b.n	801450c <prvUnlockQueue+0x46>
					break;
 801450a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	22ff      	movs	r2, #255	; 0xff
 8014510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014514:	f001 fa92 	bl	8015a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014518:	f001 fa5e 	bl	80159d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014522:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014524:	e011      	b.n	801454a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d012      	beq.n	8014554 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	3310      	adds	r3, #16
 8014532:	4618      	mov	r0, r3
 8014534:	f000 fd4c 	bl	8014fd0 <xTaskRemoveFromEventList>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	d001      	beq.n	8014542 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801453e:	f000 fe25 	bl	801518c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014542:	7bbb      	ldrb	r3, [r7, #14]
 8014544:	3b01      	subs	r3, #1
 8014546:	b2db      	uxtb	r3, r3
 8014548:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801454a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801454e:	2b00      	cmp	r3, #0
 8014550:	dce9      	bgt.n	8014526 <prvUnlockQueue+0x60>
 8014552:	e000      	b.n	8014556 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014554:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	22ff      	movs	r2, #255	; 0xff
 801455a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801455e:	f001 fa6d 	bl	8015a3c <vPortExitCritical>
}
 8014562:	bf00      	nop
 8014564:	3710      	adds	r7, #16
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}

0801456a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801456a:	b580      	push	{r7, lr}
 801456c:	b084      	sub	sp, #16
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014572:	f001 fa31 	bl	80159d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801457a:	2b00      	cmp	r3, #0
 801457c:	d102      	bne.n	8014584 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801457e:	2301      	movs	r3, #1
 8014580:	60fb      	str	r3, [r7, #12]
 8014582:	e001      	b.n	8014588 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014584:	2300      	movs	r3, #0
 8014586:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014588:	f001 fa58 	bl	8015a3c <vPortExitCritical>

	return xReturn;
 801458c:	68fb      	ldr	r3, [r7, #12]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}

08014596 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014596:	b580      	push	{r7, lr}
 8014598:	b084      	sub	sp, #16
 801459a:	af00      	add	r7, sp, #0
 801459c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801459e:	f001 fa1b 	bl	80159d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d102      	bne.n	80145b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80145ae:	2301      	movs	r3, #1
 80145b0:	60fb      	str	r3, [r7, #12]
 80145b2:	e001      	b.n	80145b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80145b4:	2300      	movs	r3, #0
 80145b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80145b8:	f001 fa40 	bl	8015a3c <vPortExitCritical>

	return xReturn;
 80145bc:	68fb      	ldr	r3, [r7, #12]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}

080145c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80145c6:	b580      	push	{r7, lr}
 80145c8:	b08e      	sub	sp, #56	; 0x38
 80145ca:	af04      	add	r7, sp, #16
 80145cc:	60f8      	str	r0, [r7, #12]
 80145ce:	60b9      	str	r1, [r7, #8]
 80145d0:	607a      	str	r2, [r7, #4]
 80145d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80145d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d10b      	bne.n	80145f2 <xTaskCreateStatic+0x2c>
 80145da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145de:	b672      	cpsid	i
 80145e0:	f383 8811 	msr	BASEPRI, r3
 80145e4:	f3bf 8f6f 	isb	sy
 80145e8:	f3bf 8f4f 	dsb	sy
 80145ec:	b662      	cpsie	i
 80145ee:	623b      	str	r3, [r7, #32]
 80145f0:	e7fe      	b.n	80145f0 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80145f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10b      	bne.n	8014610 <xTaskCreateStatic+0x4a>
 80145f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fc:	b672      	cpsid	i
 80145fe:	f383 8811 	msr	BASEPRI, r3
 8014602:	f3bf 8f6f 	isb	sy
 8014606:	f3bf 8f4f 	dsb	sy
 801460a:	b662      	cpsie	i
 801460c:	61fb      	str	r3, [r7, #28]
 801460e:	e7fe      	b.n	801460e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014610:	2354      	movs	r3, #84	; 0x54
 8014612:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	2b54      	cmp	r3, #84	; 0x54
 8014618:	d00b      	beq.n	8014632 <xTaskCreateStatic+0x6c>
 801461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801461e:	b672      	cpsid	i
 8014620:	f383 8811 	msr	BASEPRI, r3
 8014624:	f3bf 8f6f 	isb	sy
 8014628:	f3bf 8f4f 	dsb	sy
 801462c:	b662      	cpsie	i
 801462e:	61bb      	str	r3, [r7, #24]
 8014630:	e7fe      	b.n	8014630 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014636:	2b00      	cmp	r3, #0
 8014638:	d01e      	beq.n	8014678 <xTaskCreateStatic+0xb2>
 801463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801463c:	2b00      	cmp	r3, #0
 801463e:	d01b      	beq.n	8014678 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801464c:	2202      	movs	r2, #2
 801464e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014652:	2300      	movs	r3, #0
 8014654:	9303      	str	r3, [sp, #12]
 8014656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014658:	9302      	str	r3, [sp, #8]
 801465a:	f107 0314 	add.w	r3, r7, #20
 801465e:	9301      	str	r3, [sp, #4]
 8014660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	68b9      	ldr	r1, [r7, #8]
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f000 f850 	bl	8014710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014672:	f000 f8d5 	bl	8014820 <prvAddNewTaskToReadyList>
 8014676:	e001      	b.n	801467c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014678:	2300      	movs	r3, #0
 801467a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801467c:	697b      	ldr	r3, [r7, #20]
	}
 801467e:	4618      	mov	r0, r3
 8014680:	3728      	adds	r7, #40	; 0x28
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014686:	b580      	push	{r7, lr}
 8014688:	b08c      	sub	sp, #48	; 0x30
 801468a:	af04      	add	r7, sp, #16
 801468c:	60f8      	str	r0, [r7, #12]
 801468e:	60b9      	str	r1, [r7, #8]
 8014690:	603b      	str	r3, [r7, #0]
 8014692:	4613      	mov	r3, r2
 8014694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014696:	88fb      	ldrh	r3, [r7, #6]
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	4618      	mov	r0, r3
 801469c:	f001 fabe 	bl	8015c1c <pvPortMalloc>
 80146a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d00e      	beq.n	80146c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80146a8:	2054      	movs	r0, #84	; 0x54
 80146aa:	f001 fab7 	bl	8015c1c <pvPortMalloc>
 80146ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d003      	beq.n	80146be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	697a      	ldr	r2, [r7, #20]
 80146ba:	631a      	str	r2, [r3, #48]	; 0x30
 80146bc:	e005      	b.n	80146ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80146be:	6978      	ldr	r0, [r7, #20]
 80146c0:	f001 fb74 	bl	8015dac <vPortFree>
 80146c4:	e001      	b.n	80146ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80146c6:	2300      	movs	r3, #0
 80146c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d017      	beq.n	8014700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80146d0:	69fb      	ldr	r3, [r7, #28]
 80146d2:	2200      	movs	r2, #0
 80146d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80146d8:	88fa      	ldrh	r2, [r7, #6]
 80146da:	2300      	movs	r3, #0
 80146dc:	9303      	str	r3, [sp, #12]
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	9302      	str	r3, [sp, #8]
 80146e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e8:	9300      	str	r3, [sp, #0]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	68b9      	ldr	r1, [r7, #8]
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f000 f80e 	bl	8014710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80146f4:	69f8      	ldr	r0, [r7, #28]
 80146f6:	f000 f893 	bl	8014820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80146fa:	2301      	movs	r3, #1
 80146fc:	61bb      	str	r3, [r7, #24]
 80146fe:	e002      	b.n	8014706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014700:	f04f 33ff 	mov.w	r3, #4294967295
 8014704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014706:	69bb      	ldr	r3, [r7, #24]
	}
 8014708:	4618      	mov	r0, r3
 801470a:	3720      	adds	r7, #32
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b088      	sub	sp, #32
 8014714:	af00      	add	r7, sp, #0
 8014716:	60f8      	str	r0, [r7, #12]
 8014718:	60b9      	str	r1, [r7, #8]
 801471a:	607a      	str	r2, [r7, #4]
 801471c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014722:	6879      	ldr	r1, [r7, #4]
 8014724:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014728:	440b      	add	r3, r1
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	4413      	add	r3, r2
 801472e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	f023 0307 	bic.w	r3, r3, #7
 8014736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	f003 0307 	and.w	r3, r3, #7
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00b      	beq.n	801475a <prvInitialiseNewTask+0x4a>
 8014742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014746:	b672      	cpsid	i
 8014748:	f383 8811 	msr	BASEPRI, r3
 801474c:	f3bf 8f6f 	isb	sy
 8014750:	f3bf 8f4f 	dsb	sy
 8014754:	b662      	cpsie	i
 8014756:	617b      	str	r3, [r7, #20]
 8014758:	e7fe      	b.n	8014758 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d01f      	beq.n	80147a0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014760:	2300      	movs	r3, #0
 8014762:	61fb      	str	r3, [r7, #28]
 8014764:	e012      	b.n	801478c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014766:	68ba      	ldr	r2, [r7, #8]
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	4413      	add	r3, r2
 801476c:	7819      	ldrb	r1, [r3, #0]
 801476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	4413      	add	r3, r2
 8014774:	3334      	adds	r3, #52	; 0x34
 8014776:	460a      	mov	r2, r1
 8014778:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801477a:	68ba      	ldr	r2, [r7, #8]
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	4413      	add	r3, r2
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d006      	beq.n	8014794 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014786:	69fb      	ldr	r3, [r7, #28]
 8014788:	3301      	adds	r3, #1
 801478a:	61fb      	str	r3, [r7, #28]
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	2b0f      	cmp	r3, #15
 8014790:	d9e9      	bls.n	8014766 <prvInitialiseNewTask+0x56>
 8014792:	e000      	b.n	8014796 <prvInitialiseNewTask+0x86>
			{
				break;
 8014794:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014798:	2200      	movs	r2, #0
 801479a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801479e:	e003      	b.n	80147a8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80147a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a2:	2200      	movs	r2, #0
 80147a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80147a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147aa:	2b06      	cmp	r3, #6
 80147ac:	d901      	bls.n	80147b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80147ae:	2306      	movs	r3, #6
 80147b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80147b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80147b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80147be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c0:	2200      	movs	r2, #0
 80147c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	3304      	adds	r3, #4
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7ff f852 	bl	8013872 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80147ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d0:	3318      	adds	r3, #24
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7ff f84d 	bl	8013872 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80147d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e0:	f1c3 0207 	rsb	r2, r3, #7
 80147e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80147e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80147ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f0:	2200      	movs	r2, #0
 80147f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f6:	2200      	movs	r2, #0
 80147f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80147fc:	683a      	ldr	r2, [r7, #0]
 80147fe:	68f9      	ldr	r1, [r7, #12]
 8014800:	69b8      	ldr	r0, [r7, #24]
 8014802:	f000 ffdf 	bl	80157c4 <pxPortInitialiseStack>
 8014806:	4602      	mov	r2, r0
 8014808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801480e:	2b00      	cmp	r3, #0
 8014810:	d002      	beq.n	8014818 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014818:	bf00      	nop
 801481a:	3720      	adds	r7, #32
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014828:	f001 f8d6 	bl	80159d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801482c:	4b2a      	ldr	r3, [pc, #168]	; (80148d8 <prvAddNewTaskToReadyList+0xb8>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	3301      	adds	r3, #1
 8014832:	4a29      	ldr	r2, [pc, #164]	; (80148d8 <prvAddNewTaskToReadyList+0xb8>)
 8014834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014836:	4b29      	ldr	r3, [pc, #164]	; (80148dc <prvAddNewTaskToReadyList+0xbc>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d109      	bne.n	8014852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801483e:	4a27      	ldr	r2, [pc, #156]	; (80148dc <prvAddNewTaskToReadyList+0xbc>)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014844:	4b24      	ldr	r3, [pc, #144]	; (80148d8 <prvAddNewTaskToReadyList+0xb8>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b01      	cmp	r3, #1
 801484a:	d110      	bne.n	801486e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801484c:	f000 fcc2 	bl	80151d4 <prvInitialiseTaskLists>
 8014850:	e00d      	b.n	801486e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014852:	4b23      	ldr	r3, [pc, #140]	; (80148e0 <prvAddNewTaskToReadyList+0xc0>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d109      	bne.n	801486e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801485a:	4b20      	ldr	r3, [pc, #128]	; (80148dc <prvAddNewTaskToReadyList+0xbc>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014864:	429a      	cmp	r2, r3
 8014866:	d802      	bhi.n	801486e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014868:	4a1c      	ldr	r2, [pc, #112]	; (80148dc <prvAddNewTaskToReadyList+0xbc>)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801486e:	4b1d      	ldr	r3, [pc, #116]	; (80148e4 <prvAddNewTaskToReadyList+0xc4>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	3301      	adds	r3, #1
 8014874:	4a1b      	ldr	r2, [pc, #108]	; (80148e4 <prvAddNewTaskToReadyList+0xc4>)
 8014876:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801487c:	2201      	movs	r2, #1
 801487e:	409a      	lsls	r2, r3
 8014880:	4b19      	ldr	r3, [pc, #100]	; (80148e8 <prvAddNewTaskToReadyList+0xc8>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	4313      	orrs	r3, r2
 8014886:	4a18      	ldr	r2, [pc, #96]	; (80148e8 <prvAddNewTaskToReadyList+0xc8>)
 8014888:	6013      	str	r3, [r2, #0]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801488e:	4613      	mov	r3, r2
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	4413      	add	r3, r2
 8014894:	009b      	lsls	r3, r3, #2
 8014896:	4a15      	ldr	r2, [pc, #84]	; (80148ec <prvAddNewTaskToReadyList+0xcc>)
 8014898:	441a      	add	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	3304      	adds	r3, #4
 801489e:	4619      	mov	r1, r3
 80148a0:	4610      	mov	r0, r2
 80148a2:	f7fe fff3 	bl	801388c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80148a6:	f001 f8c9 	bl	8015a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80148aa:	4b0d      	ldr	r3, [pc, #52]	; (80148e0 <prvAddNewTaskToReadyList+0xc0>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d00e      	beq.n	80148d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80148b2:	4b0a      	ldr	r3, [pc, #40]	; (80148dc <prvAddNewTaskToReadyList+0xbc>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148bc:	429a      	cmp	r2, r3
 80148be:	d207      	bcs.n	80148d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80148c0:	4b0b      	ldr	r3, [pc, #44]	; (80148f0 <prvAddNewTaskToReadyList+0xd0>)
 80148c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148c6:	601a      	str	r2, [r3, #0]
 80148c8:	f3bf 8f4f 	dsb	sy
 80148cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80148d0:	bf00      	nop
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	20000440 	.word	0x20000440
 80148dc:	20000340 	.word	0x20000340
 80148e0:	2000044c 	.word	0x2000044c
 80148e4:	2000045c 	.word	0x2000045c
 80148e8:	20000448 	.word	0x20000448
 80148ec:	20000344 	.word	0x20000344
 80148f0:	e000ed04 	.word	0xe000ed04

080148f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80148fc:	f001 f86c 	bl	80159d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d102      	bne.n	801490c <vTaskSuspend+0x18>
 8014906:	4b3d      	ldr	r3, [pc, #244]	; (80149fc <vTaskSuspend+0x108>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	e000      	b.n	801490e <vTaskSuspend+0x1a>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	3304      	adds	r3, #4
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff f816 	bl	8013946 <uxListRemove>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d115      	bne.n	801494c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014924:	4936      	ldr	r1, [pc, #216]	; (8014a00 <vTaskSuspend+0x10c>)
 8014926:	4613      	mov	r3, r2
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	4413      	add	r3, r2
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	440b      	add	r3, r1
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d10a      	bne.n	801494c <vTaskSuspend+0x58>
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801493a:	2201      	movs	r2, #1
 801493c:	fa02 f303 	lsl.w	r3, r2, r3
 8014940:	43da      	mvns	r2, r3
 8014942:	4b30      	ldr	r3, [pc, #192]	; (8014a04 <vTaskSuspend+0x110>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	4013      	ands	r3, r2
 8014948:	4a2e      	ldr	r2, [pc, #184]	; (8014a04 <vTaskSuspend+0x110>)
 801494a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014950:	2b00      	cmp	r3, #0
 8014952:	d004      	beq.n	801495e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	3318      	adds	r3, #24
 8014958:	4618      	mov	r0, r3
 801495a:	f7fe fff4 	bl	8013946 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	3304      	adds	r3, #4
 8014962:	4619      	mov	r1, r3
 8014964:	4828      	ldr	r0, [pc, #160]	; (8014a08 <vTaskSuspend+0x114>)
 8014966:	f7fe ff91 	bl	801388c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014970:	b2db      	uxtb	r3, r3
 8014972:	2b01      	cmp	r3, #1
 8014974:	d103      	bne.n	801497e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801497e:	f001 f85d 	bl	8015a3c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014982:	4b22      	ldr	r3, [pc, #136]	; (8014a0c <vTaskSuspend+0x118>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d005      	beq.n	8014996 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801498a:	f001 f825 	bl	80159d8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801498e:	f000 fcbd 	bl	801530c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014992:	f001 f853 	bl	8015a3c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014996:	4b19      	ldr	r3, [pc, #100]	; (80149fc <vTaskSuspend+0x108>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	429a      	cmp	r2, r3
 801499e:	d128      	bne.n	80149f2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80149a0:	4b1a      	ldr	r3, [pc, #104]	; (8014a0c <vTaskSuspend+0x118>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d018      	beq.n	80149da <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80149a8:	4b19      	ldr	r3, [pc, #100]	; (8014a10 <vTaskSuspend+0x11c>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d00b      	beq.n	80149c8 <vTaskSuspend+0xd4>
 80149b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b4:	b672      	cpsid	i
 80149b6:	f383 8811 	msr	BASEPRI, r3
 80149ba:	f3bf 8f6f 	isb	sy
 80149be:	f3bf 8f4f 	dsb	sy
 80149c2:	b662      	cpsie	i
 80149c4:	60bb      	str	r3, [r7, #8]
 80149c6:	e7fe      	b.n	80149c6 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 80149c8:	4b12      	ldr	r3, [pc, #72]	; (8014a14 <vTaskSuspend+0x120>)
 80149ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149ce:	601a      	str	r2, [r3, #0]
 80149d0:	f3bf 8f4f 	dsb	sy
 80149d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80149d8:	e00b      	b.n	80149f2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80149da:	4b0b      	ldr	r3, [pc, #44]	; (8014a08 <vTaskSuspend+0x114>)
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	4b0e      	ldr	r3, [pc, #56]	; (8014a18 <vTaskSuspend+0x124>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d103      	bne.n	80149ee <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80149e6:	4b05      	ldr	r3, [pc, #20]	; (80149fc <vTaskSuspend+0x108>)
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
	}
 80149ec:	e001      	b.n	80149f2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80149ee:	f000 fa6d 	bl	8014ecc <vTaskSwitchContext>
	}
 80149f2:	bf00      	nop
 80149f4:	3710      	adds	r7, #16
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	20000340 	.word	0x20000340
 8014a00:	20000344 	.word	0x20000344
 8014a04:	20000448 	.word	0x20000448
 8014a08:	2000042c 	.word	0x2000042c
 8014a0c:	2000044c 	.word	0x2000044c
 8014a10:	20000468 	.word	0x20000468
 8014a14:	e000ed04 	.word	0xe000ed04
 8014a18:	20000440 	.word	0x20000440

08014a1c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b087      	sub	sp, #28
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014a24:	2300      	movs	r3, #0
 8014a26:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d10b      	bne.n	8014a4a <prvTaskIsTaskSuspended+0x2e>
 8014a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a36:	b672      	cpsid	i
 8014a38:	f383 8811 	msr	BASEPRI, r3
 8014a3c:	f3bf 8f6f 	isb	sy
 8014a40:	f3bf 8f4f 	dsb	sy
 8014a44:	b662      	cpsie	i
 8014a46:	60fb      	str	r3, [r7, #12]
 8014a48:	e7fe      	b.n	8014a48 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	695b      	ldr	r3, [r3, #20]
 8014a4e:	4a0a      	ldr	r2, [pc, #40]	; (8014a78 <prvTaskIsTaskSuspended+0x5c>)
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d10a      	bne.n	8014a6a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a58:	4a08      	ldr	r2, [pc, #32]	; (8014a7c <prvTaskIsTaskSuspended+0x60>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	d005      	beq.n	8014a6a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d101      	bne.n	8014a6a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8014a66:	2301      	movs	r3, #1
 8014a68:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a6a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	371c      	adds	r7, #28
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr
 8014a78:	2000042c 	.word	0x2000042c
 8014a7c:	20000400 	.word	0x20000400

08014a80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d10b      	bne.n	8014aaa <vTaskResume+0x2a>
 8014a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a96:	b672      	cpsid	i
 8014a98:	f383 8811 	msr	BASEPRI, r3
 8014a9c:	f3bf 8f6f 	isb	sy
 8014aa0:	f3bf 8f4f 	dsb	sy
 8014aa4:	b662      	cpsie	i
 8014aa6:	60bb      	str	r3, [r7, #8]
 8014aa8:	e7fe      	b.n	8014aa8 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014aaa:	4b20      	ldr	r3, [pc, #128]	; (8014b2c <vTaskResume+0xac>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	68fa      	ldr	r2, [r7, #12]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d037      	beq.n	8014b24 <vTaskResume+0xa4>
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d034      	beq.n	8014b24 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8014aba:	f000 ff8d 	bl	80159d8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f7ff ffac 	bl	8014a1c <prvTaskIsTaskSuspended>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d02a      	beq.n	8014b20 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	3304      	adds	r3, #4
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fe ff39 	bl	8013946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ad8:	2201      	movs	r2, #1
 8014ada:	409a      	lsls	r2, r3
 8014adc:	4b14      	ldr	r3, [pc, #80]	; (8014b30 <vTaskResume+0xb0>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	4a13      	ldr	r2, [pc, #76]	; (8014b30 <vTaskResume+0xb0>)
 8014ae4:	6013      	str	r3, [r2, #0]
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aea:	4613      	mov	r3, r2
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	4a10      	ldr	r2, [pc, #64]	; (8014b34 <vTaskResume+0xb4>)
 8014af4:	441a      	add	r2, r3
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	3304      	adds	r3, #4
 8014afa:	4619      	mov	r1, r3
 8014afc:	4610      	mov	r0, r2
 8014afe:	f7fe fec5 	bl	801388c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b06:	4b09      	ldr	r3, [pc, #36]	; (8014b2c <vTaskResume+0xac>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d307      	bcc.n	8014b20 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014b10:	4b09      	ldr	r3, [pc, #36]	; (8014b38 <vTaskResume+0xb8>)
 8014b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b16:	601a      	str	r2, [r3, #0]
 8014b18:	f3bf 8f4f 	dsb	sy
 8014b1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014b20:	f000 ff8c 	bl	8015a3c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b24:	bf00      	nop
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	20000340 	.word	0x20000340
 8014b30:	20000448 	.word	0x20000448
 8014b34:	20000344 	.word	0x20000344
 8014b38:	e000ed04 	.word	0xe000ed04

08014b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b08a      	sub	sp, #40	; 0x28
 8014b40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014b42:	2300      	movs	r3, #0
 8014b44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014b46:	2300      	movs	r3, #0
 8014b48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014b4a:	463a      	mov	r2, r7
 8014b4c:	1d39      	adds	r1, r7, #4
 8014b4e:	f107 0308 	add.w	r3, r7, #8
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7f7 fa2c 	bl	800bfb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b58:	6839      	ldr	r1, [r7, #0]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	68ba      	ldr	r2, [r7, #8]
 8014b5e:	9202      	str	r2, [sp, #8]
 8014b60:	9301      	str	r3, [sp, #4]
 8014b62:	2300      	movs	r3, #0
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	2300      	movs	r3, #0
 8014b68:	460a      	mov	r2, r1
 8014b6a:	491f      	ldr	r1, [pc, #124]	; (8014be8 <vTaskStartScheduler+0xac>)
 8014b6c:	481f      	ldr	r0, [pc, #124]	; (8014bec <vTaskStartScheduler+0xb0>)
 8014b6e:	f7ff fd2a 	bl	80145c6 <xTaskCreateStatic>
 8014b72:	4602      	mov	r2, r0
 8014b74:	4b1e      	ldr	r3, [pc, #120]	; (8014bf0 <vTaskStartScheduler+0xb4>)
 8014b76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b78:	4b1d      	ldr	r3, [pc, #116]	; (8014bf0 <vTaskStartScheduler+0xb4>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b80:	2301      	movs	r3, #1
 8014b82:	617b      	str	r3, [r7, #20]
 8014b84:	e001      	b.n	8014b8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b86:	2300      	movs	r3, #0
 8014b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d117      	bne.n	8014bc0 <vTaskStartScheduler+0x84>
 8014b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b94:	b672      	cpsid	i
 8014b96:	f383 8811 	msr	BASEPRI, r3
 8014b9a:	f3bf 8f6f 	isb	sy
 8014b9e:	f3bf 8f4f 	dsb	sy
 8014ba2:	b662      	cpsie	i
 8014ba4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ba6:	4b13      	ldr	r3, [pc, #76]	; (8014bf4 <vTaskStartScheduler+0xb8>)
 8014ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8014bac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014bae:	4b12      	ldr	r3, [pc, #72]	; (8014bf8 <vTaskStartScheduler+0xbc>)
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014bb4:	4b11      	ldr	r3, [pc, #68]	; (8014bfc <vTaskStartScheduler+0xc0>)
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014bba:	f000 fe91 	bl	80158e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014bbe:	e00f      	b.n	8014be0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014bc0:	697b      	ldr	r3, [r7, #20]
 8014bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc6:	d10b      	bne.n	8014be0 <vTaskStartScheduler+0xa4>
 8014bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bcc:	b672      	cpsid	i
 8014bce:	f383 8811 	msr	BASEPRI, r3
 8014bd2:	f3bf 8f6f 	isb	sy
 8014bd6:	f3bf 8f4f 	dsb	sy
 8014bda:	b662      	cpsie	i
 8014bdc:	60fb      	str	r3, [r7, #12]
 8014bde:	e7fe      	b.n	8014bde <vTaskStartScheduler+0xa2>
}
 8014be0:	bf00      	nop
 8014be2:	3718      	adds	r7, #24
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	08016ec4 	.word	0x08016ec4
 8014bec:	080151a5 	.word	0x080151a5
 8014bf0:	20000464 	.word	0x20000464
 8014bf4:	20000460 	.word	0x20000460
 8014bf8:	2000044c 	.word	0x2000044c
 8014bfc:	20000444 	.word	0x20000444

08014c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014c00:	b480      	push	{r7}
 8014c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014c04:	4b04      	ldr	r3, [pc, #16]	; (8014c18 <vTaskSuspendAll+0x18>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	4a03      	ldr	r2, [pc, #12]	; (8014c18 <vTaskSuspendAll+0x18>)
 8014c0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014c0e:	bf00      	nop
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr
 8014c18:	20000468 	.word	0x20000468

08014c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b084      	sub	sp, #16
 8014c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014c22:	2300      	movs	r3, #0
 8014c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014c26:	2300      	movs	r3, #0
 8014c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014c2a:	4b42      	ldr	r3, [pc, #264]	; (8014d34 <xTaskResumeAll+0x118>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d10b      	bne.n	8014c4a <xTaskResumeAll+0x2e>
 8014c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c36:	b672      	cpsid	i
 8014c38:	f383 8811 	msr	BASEPRI, r3
 8014c3c:	f3bf 8f6f 	isb	sy
 8014c40:	f3bf 8f4f 	dsb	sy
 8014c44:	b662      	cpsie	i
 8014c46:	603b      	str	r3, [r7, #0]
 8014c48:	e7fe      	b.n	8014c48 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c4a:	f000 fec5 	bl	80159d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c4e:	4b39      	ldr	r3, [pc, #228]	; (8014d34 <xTaskResumeAll+0x118>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	3b01      	subs	r3, #1
 8014c54:	4a37      	ldr	r2, [pc, #220]	; (8014d34 <xTaskResumeAll+0x118>)
 8014c56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c58:	4b36      	ldr	r3, [pc, #216]	; (8014d34 <xTaskResumeAll+0x118>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d161      	bne.n	8014d24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c60:	4b35      	ldr	r3, [pc, #212]	; (8014d38 <xTaskResumeAll+0x11c>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d05d      	beq.n	8014d24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c68:	e02e      	b.n	8014cc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c6a:	4b34      	ldr	r3, [pc, #208]	; (8014d3c <xTaskResumeAll+0x120>)
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3318      	adds	r3, #24
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fe fe65 	bl	8013946 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	3304      	adds	r3, #4
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7fe fe60 	bl	8013946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	409a      	lsls	r2, r3
 8014c8e:	4b2c      	ldr	r3, [pc, #176]	; (8014d40 <xTaskResumeAll+0x124>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	4313      	orrs	r3, r2
 8014c94:	4a2a      	ldr	r2, [pc, #168]	; (8014d40 <xTaskResumeAll+0x124>)
 8014c96:	6013      	str	r3, [r2, #0]
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4413      	add	r3, r2
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	4a27      	ldr	r2, [pc, #156]	; (8014d44 <xTaskResumeAll+0x128>)
 8014ca6:	441a      	add	r2, r3
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	3304      	adds	r3, #4
 8014cac:	4619      	mov	r1, r3
 8014cae:	4610      	mov	r0, r2
 8014cb0:	f7fe fdec 	bl	801388c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cb8:	4b23      	ldr	r3, [pc, #140]	; (8014d48 <xTaskResumeAll+0x12c>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d302      	bcc.n	8014cc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014cc2:	4b22      	ldr	r3, [pc, #136]	; (8014d4c <xTaskResumeAll+0x130>)
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014cc8:	4b1c      	ldr	r3, [pc, #112]	; (8014d3c <xTaskResumeAll+0x120>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d1cc      	bne.n	8014c6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d001      	beq.n	8014cda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014cd6:	f000 fb19 	bl	801530c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014cda:	4b1d      	ldr	r3, [pc, #116]	; (8014d50 <xTaskResumeAll+0x134>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d010      	beq.n	8014d08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014ce6:	f000 f837 	bl	8014d58 <xTaskIncrementTick>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d002      	beq.n	8014cf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014cf0:	4b16      	ldr	r3, [pc, #88]	; (8014d4c <xTaskResumeAll+0x130>)
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	3b01      	subs	r3, #1
 8014cfa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d1f1      	bne.n	8014ce6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8014d02:	4b13      	ldr	r3, [pc, #76]	; (8014d50 <xTaskResumeAll+0x134>)
 8014d04:	2200      	movs	r2, #0
 8014d06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014d08:	4b10      	ldr	r3, [pc, #64]	; (8014d4c <xTaskResumeAll+0x130>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d009      	beq.n	8014d24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014d10:	2301      	movs	r3, #1
 8014d12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014d14:	4b0f      	ldr	r3, [pc, #60]	; (8014d54 <xTaskResumeAll+0x138>)
 8014d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d1a:	601a      	str	r2, [r3, #0]
 8014d1c:	f3bf 8f4f 	dsb	sy
 8014d20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d24:	f000 fe8a 	bl	8015a3c <vPortExitCritical>

	return xAlreadyYielded;
 8014d28:	68bb      	ldr	r3, [r7, #8]
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3710      	adds	r7, #16
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}
 8014d32:	bf00      	nop
 8014d34:	20000468 	.word	0x20000468
 8014d38:	20000440 	.word	0x20000440
 8014d3c:	20000400 	.word	0x20000400
 8014d40:	20000448 	.word	0x20000448
 8014d44:	20000344 	.word	0x20000344
 8014d48:	20000340 	.word	0x20000340
 8014d4c:	20000454 	.word	0x20000454
 8014d50:	20000450 	.word	0x20000450
 8014d54:	e000ed04 	.word	0xe000ed04

08014d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b086      	sub	sp, #24
 8014d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d62:	4b4f      	ldr	r3, [pc, #316]	; (8014ea0 <xTaskIncrementTick+0x148>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f040 8089 	bne.w	8014e7e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d6c:	4b4d      	ldr	r3, [pc, #308]	; (8014ea4 <xTaskIncrementTick+0x14c>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	3301      	adds	r3, #1
 8014d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014d74:	4a4b      	ldr	r2, [pc, #300]	; (8014ea4 <xTaskIncrementTick+0x14c>)
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d121      	bne.n	8014dc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014d80:	4b49      	ldr	r3, [pc, #292]	; (8014ea8 <xTaskIncrementTick+0x150>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d00b      	beq.n	8014da2 <xTaskIncrementTick+0x4a>
 8014d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8e:	b672      	cpsid	i
 8014d90:	f383 8811 	msr	BASEPRI, r3
 8014d94:	f3bf 8f6f 	isb	sy
 8014d98:	f3bf 8f4f 	dsb	sy
 8014d9c:	b662      	cpsie	i
 8014d9e:	603b      	str	r3, [r7, #0]
 8014da0:	e7fe      	b.n	8014da0 <xTaskIncrementTick+0x48>
 8014da2:	4b41      	ldr	r3, [pc, #260]	; (8014ea8 <xTaskIncrementTick+0x150>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	60fb      	str	r3, [r7, #12]
 8014da8:	4b40      	ldr	r3, [pc, #256]	; (8014eac <xTaskIncrementTick+0x154>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	4a3e      	ldr	r2, [pc, #248]	; (8014ea8 <xTaskIncrementTick+0x150>)
 8014dae:	6013      	str	r3, [r2, #0]
 8014db0:	4a3e      	ldr	r2, [pc, #248]	; (8014eac <xTaskIncrementTick+0x154>)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	6013      	str	r3, [r2, #0]
 8014db6:	4b3e      	ldr	r3, [pc, #248]	; (8014eb0 <xTaskIncrementTick+0x158>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	4a3c      	ldr	r2, [pc, #240]	; (8014eb0 <xTaskIncrementTick+0x158>)
 8014dbe:	6013      	str	r3, [r2, #0]
 8014dc0:	f000 faa4 	bl	801530c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014dc4:	4b3b      	ldr	r3, [pc, #236]	; (8014eb4 <xTaskIncrementTick+0x15c>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	693a      	ldr	r2, [r7, #16]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d348      	bcc.n	8014e60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014dce:	4b36      	ldr	r3, [pc, #216]	; (8014ea8 <xTaskIncrementTick+0x150>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d104      	bne.n	8014de2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dd8:	4b36      	ldr	r3, [pc, #216]	; (8014eb4 <xTaskIncrementTick+0x15c>)
 8014dda:	f04f 32ff 	mov.w	r2, #4294967295
 8014dde:	601a      	str	r2, [r3, #0]
					break;
 8014de0:	e03e      	b.n	8014e60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014de2:	4b31      	ldr	r3, [pc, #196]	; (8014ea8 <xTaskIncrementTick+0x150>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68db      	ldr	r3, [r3, #12]
 8014de8:	68db      	ldr	r3, [r3, #12]
 8014dea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	685b      	ldr	r3, [r3, #4]
 8014df0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014df2:	693a      	ldr	r2, [r7, #16]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d203      	bcs.n	8014e02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014dfa:	4a2e      	ldr	r2, [pc, #184]	; (8014eb4 <xTaskIncrementTick+0x15c>)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014e00:	e02e      	b.n	8014e60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	3304      	adds	r3, #4
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7fe fd9d 	bl	8013946 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d004      	beq.n	8014e1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	3318      	adds	r3, #24
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7fe fd94 	bl	8013946 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e22:	2201      	movs	r2, #1
 8014e24:	409a      	lsls	r2, r3
 8014e26:	4b24      	ldr	r3, [pc, #144]	; (8014eb8 <xTaskIncrementTick+0x160>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	4a22      	ldr	r2, [pc, #136]	; (8014eb8 <xTaskIncrementTick+0x160>)
 8014e2e:	6013      	str	r3, [r2, #0]
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e34:	4613      	mov	r3, r2
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	4413      	add	r3, r2
 8014e3a:	009b      	lsls	r3, r3, #2
 8014e3c:	4a1f      	ldr	r2, [pc, #124]	; (8014ebc <xTaskIncrementTick+0x164>)
 8014e3e:	441a      	add	r2, r3
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	3304      	adds	r3, #4
 8014e44:	4619      	mov	r1, r3
 8014e46:	4610      	mov	r0, r2
 8014e48:	f7fe fd20 	bl	801388c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e4c:	68bb      	ldr	r3, [r7, #8]
 8014e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e50:	4b1b      	ldr	r3, [pc, #108]	; (8014ec0 <xTaskIncrementTick+0x168>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d3b9      	bcc.n	8014dce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e5e:	e7b6      	b.n	8014dce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e60:	4b17      	ldr	r3, [pc, #92]	; (8014ec0 <xTaskIncrementTick+0x168>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e66:	4915      	ldr	r1, [pc, #84]	; (8014ebc <xTaskIncrementTick+0x164>)
 8014e68:	4613      	mov	r3, r2
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	4413      	add	r3, r2
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	440b      	add	r3, r1
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2b01      	cmp	r3, #1
 8014e76:	d907      	bls.n	8014e88 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	617b      	str	r3, [r7, #20]
 8014e7c:	e004      	b.n	8014e88 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014e7e:	4b11      	ldr	r3, [pc, #68]	; (8014ec4 <xTaskIncrementTick+0x16c>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	3301      	adds	r3, #1
 8014e84:	4a0f      	ldr	r2, [pc, #60]	; (8014ec4 <xTaskIncrementTick+0x16c>)
 8014e86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014e88:	4b0f      	ldr	r3, [pc, #60]	; (8014ec8 <xTaskIncrementTick+0x170>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d001      	beq.n	8014e94 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8014e90:	2301      	movs	r3, #1
 8014e92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014e94:	697b      	ldr	r3, [r7, #20]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	20000468 	.word	0x20000468
 8014ea4:	20000444 	.word	0x20000444
 8014ea8:	200003f8 	.word	0x200003f8
 8014eac:	200003fc 	.word	0x200003fc
 8014eb0:	20000458 	.word	0x20000458
 8014eb4:	20000460 	.word	0x20000460
 8014eb8:	20000448 	.word	0x20000448
 8014ebc:	20000344 	.word	0x20000344
 8014ec0:	20000340 	.word	0x20000340
 8014ec4:	20000450 	.word	0x20000450
 8014ec8:	20000454 	.word	0x20000454

08014ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b087      	sub	sp, #28
 8014ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014ed2:	4b27      	ldr	r3, [pc, #156]	; (8014f70 <vTaskSwitchContext+0xa4>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d003      	beq.n	8014ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014eda:	4b26      	ldr	r3, [pc, #152]	; (8014f74 <vTaskSwitchContext+0xa8>)
 8014edc:	2201      	movs	r2, #1
 8014ede:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ee0:	e040      	b.n	8014f64 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8014ee2:	4b24      	ldr	r3, [pc, #144]	; (8014f74 <vTaskSwitchContext+0xa8>)
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ee8:	4b23      	ldr	r3, [pc, #140]	; (8014f78 <vTaskSwitchContext+0xac>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	fab3 f383 	clz	r3, r3
 8014ef4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014ef6:	7afb      	ldrb	r3, [r7, #11]
 8014ef8:	f1c3 031f 	rsb	r3, r3, #31
 8014efc:	617b      	str	r3, [r7, #20]
 8014efe:	491f      	ldr	r1, [pc, #124]	; (8014f7c <vTaskSwitchContext+0xb0>)
 8014f00:	697a      	ldr	r2, [r7, #20]
 8014f02:	4613      	mov	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	009b      	lsls	r3, r3, #2
 8014f0a:	440b      	add	r3, r1
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10b      	bne.n	8014f2a <vTaskSwitchContext+0x5e>
	__asm volatile
 8014f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f16:	b672      	cpsid	i
 8014f18:	f383 8811 	msr	BASEPRI, r3
 8014f1c:	f3bf 8f6f 	isb	sy
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	b662      	cpsie	i
 8014f26:	607b      	str	r3, [r7, #4]
 8014f28:	e7fe      	b.n	8014f28 <vTaskSwitchContext+0x5c>
 8014f2a:	697a      	ldr	r2, [r7, #20]
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	4413      	add	r3, r2
 8014f32:	009b      	lsls	r3, r3, #2
 8014f34:	4a11      	ldr	r2, [pc, #68]	; (8014f7c <vTaskSwitchContext+0xb0>)
 8014f36:	4413      	add	r3, r2
 8014f38:	613b      	str	r3, [r7, #16]
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	685a      	ldr	r2, [r3, #4]
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	605a      	str	r2, [r3, #4]
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	3308      	adds	r3, #8
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d104      	bne.n	8014f5a <vTaskSwitchContext+0x8e>
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	685a      	ldr	r2, [r3, #4]
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	605a      	str	r2, [r3, #4]
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	68db      	ldr	r3, [r3, #12]
 8014f60:	4a07      	ldr	r2, [pc, #28]	; (8014f80 <vTaskSwitchContext+0xb4>)
 8014f62:	6013      	str	r3, [r2, #0]
}
 8014f64:	bf00      	nop
 8014f66:	371c      	adds	r7, #28
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr
 8014f70:	20000468 	.word	0x20000468
 8014f74:	20000454 	.word	0x20000454
 8014f78:	20000448 	.word	0x20000448
 8014f7c:	20000344 	.word	0x20000344
 8014f80:	20000340 	.word	0x20000340

08014f84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d10b      	bne.n	8014fac <vTaskPlaceOnEventList+0x28>
 8014f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f98:	b672      	cpsid	i
 8014f9a:	f383 8811 	msr	BASEPRI, r3
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	f3bf 8f4f 	dsb	sy
 8014fa6:	b662      	cpsie	i
 8014fa8:	60fb      	str	r3, [r7, #12]
 8014faa:	e7fe      	b.n	8014faa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fac:	4b07      	ldr	r3, [pc, #28]	; (8014fcc <vTaskPlaceOnEventList+0x48>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	3318      	adds	r3, #24
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f7fe fc8d 	bl	80138d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fba:	2101      	movs	r1, #1
 8014fbc:	6838      	ldr	r0, [r7, #0]
 8014fbe:	f000 fb9b 	bl	80156f8 <prvAddCurrentTaskToDelayedList>
}
 8014fc2:	bf00      	nop
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	20000340 	.word	0x20000340

08014fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014fe0:	693b      	ldr	r3, [r7, #16]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d10b      	bne.n	8014ffe <xTaskRemoveFromEventList+0x2e>
 8014fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fea:	b672      	cpsid	i
 8014fec:	f383 8811 	msr	BASEPRI, r3
 8014ff0:	f3bf 8f6f 	isb	sy
 8014ff4:	f3bf 8f4f 	dsb	sy
 8014ff8:	b662      	cpsie	i
 8014ffa:	60fb      	str	r3, [r7, #12]
 8014ffc:	e7fe      	b.n	8014ffc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	3318      	adds	r3, #24
 8015002:	4618      	mov	r0, r3
 8015004:	f7fe fc9f 	bl	8013946 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015008:	4b1d      	ldr	r3, [pc, #116]	; (8015080 <xTaskRemoveFromEventList+0xb0>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d11c      	bne.n	801504a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	3304      	adds	r3, #4
 8015014:	4618      	mov	r0, r3
 8015016:	f7fe fc96 	bl	8013946 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801501e:	2201      	movs	r2, #1
 8015020:	409a      	lsls	r2, r3
 8015022:	4b18      	ldr	r3, [pc, #96]	; (8015084 <xTaskRemoveFromEventList+0xb4>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	4313      	orrs	r3, r2
 8015028:	4a16      	ldr	r2, [pc, #88]	; (8015084 <xTaskRemoveFromEventList+0xb4>)
 801502a:	6013      	str	r3, [r2, #0]
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015030:	4613      	mov	r3, r2
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	4a13      	ldr	r2, [pc, #76]	; (8015088 <xTaskRemoveFromEventList+0xb8>)
 801503a:	441a      	add	r2, r3
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	3304      	adds	r3, #4
 8015040:	4619      	mov	r1, r3
 8015042:	4610      	mov	r0, r2
 8015044:	f7fe fc22 	bl	801388c <vListInsertEnd>
 8015048:	e005      	b.n	8015056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	3318      	adds	r3, #24
 801504e:	4619      	mov	r1, r3
 8015050:	480e      	ldr	r0, [pc, #56]	; (801508c <xTaskRemoveFromEventList+0xbc>)
 8015052:	f7fe fc1b 	bl	801388c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801505a:	4b0d      	ldr	r3, [pc, #52]	; (8015090 <xTaskRemoveFromEventList+0xc0>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015060:	429a      	cmp	r2, r3
 8015062:	d905      	bls.n	8015070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015064:	2301      	movs	r3, #1
 8015066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015068:	4b0a      	ldr	r3, [pc, #40]	; (8015094 <xTaskRemoveFromEventList+0xc4>)
 801506a:	2201      	movs	r2, #1
 801506c:	601a      	str	r2, [r3, #0]
 801506e:	e001      	b.n	8015074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015070:	2300      	movs	r3, #0
 8015072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015074:	697b      	ldr	r3, [r7, #20]
}
 8015076:	4618      	mov	r0, r3
 8015078:	3718      	adds	r7, #24
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	20000468 	.word	0x20000468
 8015084:	20000448 	.word	0x20000448
 8015088:	20000344 	.word	0x20000344
 801508c:	20000400 	.word	0x20000400
 8015090:	20000340 	.word	0x20000340
 8015094:	20000454 	.word	0x20000454

08015098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80150a0:	4b06      	ldr	r3, [pc, #24]	; (80150bc <vTaskInternalSetTimeOutState+0x24>)
 80150a2:	681a      	ldr	r2, [r3, #0]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80150a8:	4b05      	ldr	r3, [pc, #20]	; (80150c0 <vTaskInternalSetTimeOutState+0x28>)
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	605a      	str	r2, [r3, #4]
}
 80150b0:	bf00      	nop
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr
 80150bc:	20000458 	.word	0x20000458
 80150c0:	20000444 	.word	0x20000444

080150c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b088      	sub	sp, #32
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d10b      	bne.n	80150ec <xTaskCheckForTimeOut+0x28>
 80150d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d8:	b672      	cpsid	i
 80150da:	f383 8811 	msr	BASEPRI, r3
 80150de:	f3bf 8f6f 	isb	sy
 80150e2:	f3bf 8f4f 	dsb	sy
 80150e6:	b662      	cpsie	i
 80150e8:	613b      	str	r3, [r7, #16]
 80150ea:	e7fe      	b.n	80150ea <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10b      	bne.n	801510a <xTaskCheckForTimeOut+0x46>
 80150f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f6:	b672      	cpsid	i
 80150f8:	f383 8811 	msr	BASEPRI, r3
 80150fc:	f3bf 8f6f 	isb	sy
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	b662      	cpsie	i
 8015106:	60fb      	str	r3, [r7, #12]
 8015108:	e7fe      	b.n	8015108 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801510a:	f000 fc65 	bl	80159d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801510e:	4b1d      	ldr	r3, [pc, #116]	; (8015184 <xTaskCheckForTimeOut+0xc0>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	69ba      	ldr	r2, [r7, #24]
 801511a:	1ad3      	subs	r3, r2, r3
 801511c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015126:	d102      	bne.n	801512e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015128:	2300      	movs	r3, #0
 801512a:	61fb      	str	r3, [r7, #28]
 801512c:	e023      	b.n	8015176 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	681a      	ldr	r2, [r3, #0]
 8015132:	4b15      	ldr	r3, [pc, #84]	; (8015188 <xTaskCheckForTimeOut+0xc4>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	429a      	cmp	r2, r3
 8015138:	d007      	beq.n	801514a <xTaskCheckForTimeOut+0x86>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	69ba      	ldr	r2, [r7, #24]
 8015140:	429a      	cmp	r2, r3
 8015142:	d302      	bcc.n	801514a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015144:	2301      	movs	r3, #1
 8015146:	61fb      	str	r3, [r7, #28]
 8015148:	e015      	b.n	8015176 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	697a      	ldr	r2, [r7, #20]
 8015150:	429a      	cmp	r2, r3
 8015152:	d20b      	bcs.n	801516c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	1ad2      	subs	r2, r2, r3
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f7ff ff99 	bl	8015098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015166:	2300      	movs	r3, #0
 8015168:	61fb      	str	r3, [r7, #28]
 801516a:	e004      	b.n	8015176 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	2200      	movs	r2, #0
 8015170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015172:	2301      	movs	r3, #1
 8015174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015176:	f000 fc61 	bl	8015a3c <vPortExitCritical>

	return xReturn;
 801517a:	69fb      	ldr	r3, [r7, #28]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3720      	adds	r7, #32
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	20000444 	.word	0x20000444
 8015188:	20000458 	.word	0x20000458

0801518c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801518c:	b480      	push	{r7}
 801518e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015190:	4b03      	ldr	r3, [pc, #12]	; (80151a0 <vTaskMissedYield+0x14>)
 8015192:	2201      	movs	r2, #1
 8015194:	601a      	str	r2, [r3, #0]
}
 8015196:	bf00      	nop
 8015198:	46bd      	mov	sp, r7
 801519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519e:	4770      	bx	lr
 80151a0:	20000454 	.word	0x20000454

080151a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80151ac:	f000 f852 	bl	8015254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80151b0:	4b06      	ldr	r3, [pc, #24]	; (80151cc <prvIdleTask+0x28>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2b01      	cmp	r3, #1
 80151b6:	d9f9      	bls.n	80151ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80151b8:	4b05      	ldr	r3, [pc, #20]	; (80151d0 <prvIdleTask+0x2c>)
 80151ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151be:	601a      	str	r2, [r3, #0]
 80151c0:	f3bf 8f4f 	dsb	sy
 80151c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80151c8:	e7f0      	b.n	80151ac <prvIdleTask+0x8>
 80151ca:	bf00      	nop
 80151cc:	20000344 	.word	0x20000344
 80151d0:	e000ed04 	.word	0xe000ed04

080151d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151da:	2300      	movs	r3, #0
 80151dc:	607b      	str	r3, [r7, #4]
 80151de:	e00c      	b.n	80151fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	4613      	mov	r3, r2
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	4413      	add	r3, r2
 80151e8:	009b      	lsls	r3, r3, #2
 80151ea:	4a12      	ldr	r2, [pc, #72]	; (8015234 <prvInitialiseTaskLists+0x60>)
 80151ec:	4413      	add	r3, r2
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fe fb1f 	bl	8013832 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	3301      	adds	r3, #1
 80151f8:	607b      	str	r3, [r7, #4]
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2b06      	cmp	r3, #6
 80151fe:	d9ef      	bls.n	80151e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015200:	480d      	ldr	r0, [pc, #52]	; (8015238 <prvInitialiseTaskLists+0x64>)
 8015202:	f7fe fb16 	bl	8013832 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015206:	480d      	ldr	r0, [pc, #52]	; (801523c <prvInitialiseTaskLists+0x68>)
 8015208:	f7fe fb13 	bl	8013832 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801520c:	480c      	ldr	r0, [pc, #48]	; (8015240 <prvInitialiseTaskLists+0x6c>)
 801520e:	f7fe fb10 	bl	8013832 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015212:	480c      	ldr	r0, [pc, #48]	; (8015244 <prvInitialiseTaskLists+0x70>)
 8015214:	f7fe fb0d 	bl	8013832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015218:	480b      	ldr	r0, [pc, #44]	; (8015248 <prvInitialiseTaskLists+0x74>)
 801521a:	f7fe fb0a 	bl	8013832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801521e:	4b0b      	ldr	r3, [pc, #44]	; (801524c <prvInitialiseTaskLists+0x78>)
 8015220:	4a05      	ldr	r2, [pc, #20]	; (8015238 <prvInitialiseTaskLists+0x64>)
 8015222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015224:	4b0a      	ldr	r3, [pc, #40]	; (8015250 <prvInitialiseTaskLists+0x7c>)
 8015226:	4a05      	ldr	r2, [pc, #20]	; (801523c <prvInitialiseTaskLists+0x68>)
 8015228:	601a      	str	r2, [r3, #0]
}
 801522a:	bf00      	nop
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	20000344 	.word	0x20000344
 8015238:	200003d0 	.word	0x200003d0
 801523c:	200003e4 	.word	0x200003e4
 8015240:	20000400 	.word	0x20000400
 8015244:	20000414 	.word	0x20000414
 8015248:	2000042c 	.word	0x2000042c
 801524c:	200003f8 	.word	0x200003f8
 8015250:	200003fc 	.word	0x200003fc

08015254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801525a:	e019      	b.n	8015290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801525c:	f000 fbbc 	bl	80159d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015260:	4b0f      	ldr	r3, [pc, #60]	; (80152a0 <prvCheckTasksWaitingTermination+0x4c>)
 8015262:	68db      	ldr	r3, [r3, #12]
 8015264:	68db      	ldr	r3, [r3, #12]
 8015266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	3304      	adds	r3, #4
 801526c:	4618      	mov	r0, r3
 801526e:	f7fe fb6a 	bl	8013946 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015272:	4b0c      	ldr	r3, [pc, #48]	; (80152a4 <prvCheckTasksWaitingTermination+0x50>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	3b01      	subs	r3, #1
 8015278:	4a0a      	ldr	r2, [pc, #40]	; (80152a4 <prvCheckTasksWaitingTermination+0x50>)
 801527a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801527c:	4b0a      	ldr	r3, [pc, #40]	; (80152a8 <prvCheckTasksWaitingTermination+0x54>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	3b01      	subs	r3, #1
 8015282:	4a09      	ldr	r2, [pc, #36]	; (80152a8 <prvCheckTasksWaitingTermination+0x54>)
 8015284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015286:	f000 fbd9 	bl	8015a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f000 f80e 	bl	80152ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015290:	4b05      	ldr	r3, [pc, #20]	; (80152a8 <prvCheckTasksWaitingTermination+0x54>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1e1      	bne.n	801525c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015298:	bf00      	nop
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	20000414 	.word	0x20000414
 80152a4:	20000440 	.word	0x20000440
 80152a8:	20000428 	.word	0x20000428

080152ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b084      	sub	sp, #16
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d108      	bne.n	80152d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152c2:	4618      	mov	r0, r3
 80152c4:	f000 fd72 	bl	8015dac <vPortFree>
				vPortFree( pxTCB );
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f000 fd6f 	bl	8015dac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80152ce:	e019      	b.n	8015304 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80152d6:	2b01      	cmp	r3, #1
 80152d8:	d103      	bne.n	80152e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 fd66 	bl	8015dac <vPortFree>
	}
 80152e0:	e010      	b.n	8015304 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80152e8:	2b02      	cmp	r3, #2
 80152ea:	d00b      	beq.n	8015304 <prvDeleteTCB+0x58>
 80152ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f0:	b672      	cpsid	i
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	b662      	cpsie	i
 8015300:	60fb      	str	r3, [r7, #12]
 8015302:	e7fe      	b.n	8015302 <prvDeleteTCB+0x56>
	}
 8015304:	bf00      	nop
 8015306:	3710      	adds	r7, #16
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}

0801530c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015312:	4b0c      	ldr	r3, [pc, #48]	; (8015344 <prvResetNextTaskUnblockTime+0x38>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d104      	bne.n	8015326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801531c:	4b0a      	ldr	r3, [pc, #40]	; (8015348 <prvResetNextTaskUnblockTime+0x3c>)
 801531e:	f04f 32ff 	mov.w	r2, #4294967295
 8015322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015324:	e008      	b.n	8015338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015326:	4b07      	ldr	r3, [pc, #28]	; (8015344 <prvResetNextTaskUnblockTime+0x38>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	68db      	ldr	r3, [r3, #12]
 801532e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	4a04      	ldr	r2, [pc, #16]	; (8015348 <prvResetNextTaskUnblockTime+0x3c>)
 8015336:	6013      	str	r3, [r2, #0]
}
 8015338:	bf00      	nop
 801533a:	370c      	adds	r7, #12
 801533c:	46bd      	mov	sp, r7
 801533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015342:	4770      	bx	lr
 8015344:	200003f8 	.word	0x200003f8
 8015348:	20000460 	.word	0x20000460

0801534c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801534c:	b480      	push	{r7}
 801534e:	b083      	sub	sp, #12
 8015350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015352:	4b0b      	ldr	r3, [pc, #44]	; (8015380 <xTaskGetSchedulerState+0x34>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d102      	bne.n	8015360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801535a:	2301      	movs	r3, #1
 801535c:	607b      	str	r3, [r7, #4]
 801535e:	e008      	b.n	8015372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015360:	4b08      	ldr	r3, [pc, #32]	; (8015384 <xTaskGetSchedulerState+0x38>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d102      	bne.n	801536e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015368:	2302      	movs	r3, #2
 801536a:	607b      	str	r3, [r7, #4]
 801536c:	e001      	b.n	8015372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801536e:	2300      	movs	r3, #0
 8015370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015372:	687b      	ldr	r3, [r7, #4]
	}
 8015374:	4618      	mov	r0, r3
 8015376:	370c      	adds	r7, #12
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr
 8015380:	2000044c 	.word	0x2000044c
 8015384:	20000468 	.word	0x20000468

08015388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015394:	2300      	movs	r3, #0
 8015396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d069      	beq.n	8015472 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153a2:	4b36      	ldr	r3, [pc, #216]	; (801547c <xTaskPriorityInherit+0xf4>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d259      	bcs.n	8015460 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	699b      	ldr	r3, [r3, #24]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	db06      	blt.n	80153c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153b4:	4b31      	ldr	r3, [pc, #196]	; (801547c <xTaskPriorityInherit+0xf4>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153ba:	f1c3 0207 	rsb	r2, r3, #7
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	6959      	ldr	r1, [r3, #20]
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ca:	4613      	mov	r3, r2
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	4413      	add	r3, r2
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	4a2b      	ldr	r2, [pc, #172]	; (8015480 <xTaskPriorityInherit+0xf8>)
 80153d4:	4413      	add	r3, r2
 80153d6:	4299      	cmp	r1, r3
 80153d8:	d13a      	bne.n	8015450 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	3304      	adds	r3, #4
 80153de:	4618      	mov	r0, r3
 80153e0:	f7fe fab1 	bl	8013946 <uxListRemove>
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d115      	bne.n	8015416 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ee:	4924      	ldr	r1, [pc, #144]	; (8015480 <xTaskPriorityInherit+0xf8>)
 80153f0:	4613      	mov	r3, r2
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	4413      	add	r3, r2
 80153f6:	009b      	lsls	r3, r3, #2
 80153f8:	440b      	add	r3, r1
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d10a      	bne.n	8015416 <xTaskPriorityInherit+0x8e>
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015404:	2201      	movs	r2, #1
 8015406:	fa02 f303 	lsl.w	r3, r2, r3
 801540a:	43da      	mvns	r2, r3
 801540c:	4b1d      	ldr	r3, [pc, #116]	; (8015484 <xTaskPriorityInherit+0xfc>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	4013      	ands	r3, r2
 8015412:	4a1c      	ldr	r2, [pc, #112]	; (8015484 <xTaskPriorityInherit+0xfc>)
 8015414:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015416:	4b19      	ldr	r3, [pc, #100]	; (801547c <xTaskPriorityInherit+0xf4>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015424:	2201      	movs	r2, #1
 8015426:	409a      	lsls	r2, r3
 8015428:	4b16      	ldr	r3, [pc, #88]	; (8015484 <xTaskPriorityInherit+0xfc>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	4313      	orrs	r3, r2
 801542e:	4a15      	ldr	r2, [pc, #84]	; (8015484 <xTaskPriorityInherit+0xfc>)
 8015430:	6013      	str	r3, [r2, #0]
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015436:	4613      	mov	r3, r2
 8015438:	009b      	lsls	r3, r3, #2
 801543a:	4413      	add	r3, r2
 801543c:	009b      	lsls	r3, r3, #2
 801543e:	4a10      	ldr	r2, [pc, #64]	; (8015480 <xTaskPriorityInherit+0xf8>)
 8015440:	441a      	add	r2, r3
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	3304      	adds	r3, #4
 8015446:	4619      	mov	r1, r3
 8015448:	4610      	mov	r0, r2
 801544a:	f7fe fa1f 	bl	801388c <vListInsertEnd>
 801544e:	e004      	b.n	801545a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015450:	4b0a      	ldr	r3, [pc, #40]	; (801547c <xTaskPriorityInherit+0xf4>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801545a:	2301      	movs	r3, #1
 801545c:	60fb      	str	r3, [r7, #12]
 801545e:	e008      	b.n	8015472 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015464:	4b05      	ldr	r3, [pc, #20]	; (801547c <xTaskPriorityInherit+0xf4>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801546a:	429a      	cmp	r2, r3
 801546c:	d201      	bcs.n	8015472 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801546e:	2301      	movs	r3, #1
 8015470:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015472:	68fb      	ldr	r3, [r7, #12]
	}
 8015474:	4618      	mov	r0, r3
 8015476:	3710      	adds	r7, #16
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20000340 	.word	0x20000340
 8015480:	20000344 	.word	0x20000344
 8015484:	20000448 	.word	0x20000448

08015488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015488:	b580      	push	{r7, lr}
 801548a:	b086      	sub	sp, #24
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015494:	2300      	movs	r3, #0
 8015496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d070      	beq.n	8015580 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801549e:	4b3b      	ldr	r3, [pc, #236]	; (801558c <xTaskPriorityDisinherit+0x104>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	693a      	ldr	r2, [r7, #16]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d00b      	beq.n	80154c0 <xTaskPriorityDisinherit+0x38>
 80154a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ac:	b672      	cpsid	i
 80154ae:	f383 8811 	msr	BASEPRI, r3
 80154b2:	f3bf 8f6f 	isb	sy
 80154b6:	f3bf 8f4f 	dsb	sy
 80154ba:	b662      	cpsie	i
 80154bc:	60fb      	str	r3, [r7, #12]
 80154be:	e7fe      	b.n	80154be <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d10b      	bne.n	80154e0 <xTaskPriorityDisinherit+0x58>
 80154c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154cc:	b672      	cpsid	i
 80154ce:	f383 8811 	msr	BASEPRI, r3
 80154d2:	f3bf 8f6f 	isb	sy
 80154d6:	f3bf 8f4f 	dsb	sy
 80154da:	b662      	cpsie	i
 80154dc:	60bb      	str	r3, [r7, #8]
 80154de:	e7fe      	b.n	80154de <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154e4:	1e5a      	subs	r2, r3, #1
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d044      	beq.n	8015580 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d140      	bne.n	8015580 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	3304      	adds	r3, #4
 8015502:	4618      	mov	r0, r3
 8015504:	f7fe fa1f 	bl	8013946 <uxListRemove>
 8015508:	4603      	mov	r3, r0
 801550a:	2b00      	cmp	r3, #0
 801550c:	d115      	bne.n	801553a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015512:	491f      	ldr	r1, [pc, #124]	; (8015590 <xTaskPriorityDisinherit+0x108>)
 8015514:	4613      	mov	r3, r2
 8015516:	009b      	lsls	r3, r3, #2
 8015518:	4413      	add	r3, r2
 801551a:	009b      	lsls	r3, r3, #2
 801551c:	440b      	add	r3, r1
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d10a      	bne.n	801553a <xTaskPriorityDisinherit+0xb2>
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015528:	2201      	movs	r2, #1
 801552a:	fa02 f303 	lsl.w	r3, r2, r3
 801552e:	43da      	mvns	r2, r3
 8015530:	4b18      	ldr	r3, [pc, #96]	; (8015594 <xTaskPriorityDisinherit+0x10c>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	4013      	ands	r3, r2
 8015536:	4a17      	ldr	r2, [pc, #92]	; (8015594 <xTaskPriorityDisinherit+0x10c>)
 8015538:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015546:	f1c3 0207 	rsb	r2, r3, #7
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015552:	2201      	movs	r2, #1
 8015554:	409a      	lsls	r2, r3
 8015556:	4b0f      	ldr	r3, [pc, #60]	; (8015594 <xTaskPriorityDisinherit+0x10c>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	4313      	orrs	r3, r2
 801555c:	4a0d      	ldr	r2, [pc, #52]	; (8015594 <xTaskPriorityDisinherit+0x10c>)
 801555e:	6013      	str	r3, [r2, #0]
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015564:	4613      	mov	r3, r2
 8015566:	009b      	lsls	r3, r3, #2
 8015568:	4413      	add	r3, r2
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	4a08      	ldr	r2, [pc, #32]	; (8015590 <xTaskPriorityDisinherit+0x108>)
 801556e:	441a      	add	r2, r3
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	3304      	adds	r3, #4
 8015574:	4619      	mov	r1, r3
 8015576:	4610      	mov	r0, r2
 8015578:	f7fe f988 	bl	801388c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801557c:	2301      	movs	r3, #1
 801557e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015580:	697b      	ldr	r3, [r7, #20]
	}
 8015582:	4618      	mov	r0, r3
 8015584:	3718      	adds	r7, #24
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	20000340 	.word	0x20000340
 8015590:	20000344 	.word	0x20000344
 8015594:	20000448 	.word	0x20000448

08015598 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015598:	b580      	push	{r7, lr}
 801559a:	b088      	sub	sp, #32
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80155a6:	2301      	movs	r3, #1
 80155a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	f000 8085 	beq.w	80156bc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d10b      	bne.n	80155d2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80155ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155be:	b672      	cpsid	i
 80155c0:	f383 8811 	msr	BASEPRI, r3
 80155c4:	f3bf 8f6f 	isb	sy
 80155c8:	f3bf 8f4f 	dsb	sy
 80155cc:	b662      	cpsie	i
 80155ce:	60fb      	str	r3, [r7, #12]
 80155d0:	e7fe      	b.n	80155d0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155d6:	683a      	ldr	r2, [r7, #0]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d902      	bls.n	80155e2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	61fb      	str	r3, [r7, #28]
 80155e0:	e002      	b.n	80155e8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155ec:	69fa      	ldr	r2, [r7, #28]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d064      	beq.n	80156bc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155f6:	697a      	ldr	r2, [r7, #20]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d15f      	bne.n	80156bc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80155fc:	4b31      	ldr	r3, [pc, #196]	; (80156c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	69ba      	ldr	r2, [r7, #24]
 8015602:	429a      	cmp	r2, r3
 8015604:	d10b      	bne.n	801561e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8015606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801560a:	b672      	cpsid	i
 801560c:	f383 8811 	msr	BASEPRI, r3
 8015610:	f3bf 8f6f 	isb	sy
 8015614:	f3bf 8f4f 	dsb	sy
 8015618:	b662      	cpsie	i
 801561a:	60bb      	str	r3, [r7, #8]
 801561c:	e7fe      	b.n	801561c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015622:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	69fa      	ldr	r2, [r7, #28]
 8015628:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801562a:	69bb      	ldr	r3, [r7, #24]
 801562c:	699b      	ldr	r3, [r3, #24]
 801562e:	2b00      	cmp	r3, #0
 8015630:	db04      	blt.n	801563c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015632:	69fb      	ldr	r3, [r7, #28]
 8015634:	f1c3 0207 	rsb	r2, r3, #7
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801563c:	69bb      	ldr	r3, [r7, #24]
 801563e:	6959      	ldr	r1, [r3, #20]
 8015640:	693a      	ldr	r2, [r7, #16]
 8015642:	4613      	mov	r3, r2
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	4413      	add	r3, r2
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	4a1f      	ldr	r2, [pc, #124]	; (80156c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801564c:	4413      	add	r3, r2
 801564e:	4299      	cmp	r1, r3
 8015650:	d134      	bne.n	80156bc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	3304      	adds	r3, #4
 8015656:	4618      	mov	r0, r3
 8015658:	f7fe f975 	bl	8013946 <uxListRemove>
 801565c:	4603      	mov	r3, r0
 801565e:	2b00      	cmp	r3, #0
 8015660:	d115      	bne.n	801568e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015666:	4918      	ldr	r1, [pc, #96]	; (80156c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015668:	4613      	mov	r3, r2
 801566a:	009b      	lsls	r3, r3, #2
 801566c:	4413      	add	r3, r2
 801566e:	009b      	lsls	r3, r3, #2
 8015670:	440b      	add	r3, r1
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d10a      	bne.n	801568e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801567c:	2201      	movs	r2, #1
 801567e:	fa02 f303 	lsl.w	r3, r2, r3
 8015682:	43da      	mvns	r2, r3
 8015684:	4b11      	ldr	r3, [pc, #68]	; (80156cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	4013      	ands	r3, r2
 801568a:	4a10      	ldr	r2, [pc, #64]	; (80156cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801568c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015692:	2201      	movs	r2, #1
 8015694:	409a      	lsls	r2, r3
 8015696:	4b0d      	ldr	r3, [pc, #52]	; (80156cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	4313      	orrs	r3, r2
 801569c:	4a0b      	ldr	r2, [pc, #44]	; (80156cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801569e:	6013      	str	r3, [r2, #0]
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156a4:	4613      	mov	r3, r2
 80156a6:	009b      	lsls	r3, r3, #2
 80156a8:	4413      	add	r3, r2
 80156aa:	009b      	lsls	r3, r3, #2
 80156ac:	4a06      	ldr	r2, [pc, #24]	; (80156c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80156ae:	441a      	add	r2, r3
 80156b0:	69bb      	ldr	r3, [r7, #24]
 80156b2:	3304      	adds	r3, #4
 80156b4:	4619      	mov	r1, r3
 80156b6:	4610      	mov	r0, r2
 80156b8:	f7fe f8e8 	bl	801388c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80156bc:	bf00      	nop
 80156be:	3720      	adds	r7, #32
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	20000340 	.word	0x20000340
 80156c8:	20000344 	.word	0x20000344
 80156cc:	20000448 	.word	0x20000448

080156d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80156d0:	b480      	push	{r7}
 80156d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80156d4:	4b07      	ldr	r3, [pc, #28]	; (80156f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d004      	beq.n	80156e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80156dc:	4b05      	ldr	r3, [pc, #20]	; (80156f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80156e2:	3201      	adds	r2, #1
 80156e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80156e6:	4b03      	ldr	r3, [pc, #12]	; (80156f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80156e8:	681b      	ldr	r3, [r3, #0]
	}
 80156ea:	4618      	mov	r0, r3
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	20000340 	.word	0x20000340

080156f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015702:	4b29      	ldr	r3, [pc, #164]	; (80157a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015708:	4b28      	ldr	r3, [pc, #160]	; (80157ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	3304      	adds	r3, #4
 801570e:	4618      	mov	r0, r3
 8015710:	f7fe f919 	bl	8013946 <uxListRemove>
 8015714:	4603      	mov	r3, r0
 8015716:	2b00      	cmp	r3, #0
 8015718:	d10b      	bne.n	8015732 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801571a:	4b24      	ldr	r3, [pc, #144]	; (80157ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015720:	2201      	movs	r2, #1
 8015722:	fa02 f303 	lsl.w	r3, r2, r3
 8015726:	43da      	mvns	r2, r3
 8015728:	4b21      	ldr	r3, [pc, #132]	; (80157b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4013      	ands	r3, r2
 801572e:	4a20      	ldr	r2, [pc, #128]	; (80157b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015730:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015738:	d10a      	bne.n	8015750 <prvAddCurrentTaskToDelayedList+0x58>
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d007      	beq.n	8015750 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015740:	4b1a      	ldr	r3, [pc, #104]	; (80157ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	3304      	adds	r3, #4
 8015746:	4619      	mov	r1, r3
 8015748:	481a      	ldr	r0, [pc, #104]	; (80157b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801574a:	f7fe f89f 	bl	801388c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801574e:	e026      	b.n	801579e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015750:	68fa      	ldr	r2, [r7, #12]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4413      	add	r3, r2
 8015756:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015758:	4b14      	ldr	r3, [pc, #80]	; (80157ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	68ba      	ldr	r2, [r7, #8]
 801575e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	429a      	cmp	r2, r3
 8015766:	d209      	bcs.n	801577c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015768:	4b13      	ldr	r3, [pc, #76]	; (80157b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801576a:	681a      	ldr	r2, [r3, #0]
 801576c:	4b0f      	ldr	r3, [pc, #60]	; (80157ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	3304      	adds	r3, #4
 8015772:	4619      	mov	r1, r3
 8015774:	4610      	mov	r0, r2
 8015776:	f7fe f8ad 	bl	80138d4 <vListInsert>
}
 801577a:	e010      	b.n	801579e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801577c:	4b0f      	ldr	r3, [pc, #60]	; (80157bc <prvAddCurrentTaskToDelayedList+0xc4>)
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	4b0a      	ldr	r3, [pc, #40]	; (80157ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	3304      	adds	r3, #4
 8015786:	4619      	mov	r1, r3
 8015788:	4610      	mov	r0, r2
 801578a:	f7fe f8a3 	bl	80138d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801578e:	4b0c      	ldr	r3, [pc, #48]	; (80157c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	68ba      	ldr	r2, [r7, #8]
 8015794:	429a      	cmp	r2, r3
 8015796:	d202      	bcs.n	801579e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015798:	4a09      	ldr	r2, [pc, #36]	; (80157c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	6013      	str	r3, [r2, #0]
}
 801579e:	bf00      	nop
 80157a0:	3710      	adds	r7, #16
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	20000444 	.word	0x20000444
 80157ac:	20000340 	.word	0x20000340
 80157b0:	20000448 	.word	0x20000448
 80157b4:	2000042c 	.word	0x2000042c
 80157b8:	200003fc 	.word	0x200003fc
 80157bc:	200003f8 	.word	0x200003f8
 80157c0:	20000460 	.word	0x20000460

080157c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80157c4:	b480      	push	{r7}
 80157c6:	b085      	sub	sp, #20
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	3b04      	subs	r3, #4
 80157d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80157dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	3b04      	subs	r3, #4
 80157e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	f023 0201 	bic.w	r2, r3, #1
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	3b04      	subs	r3, #4
 80157f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80157f4:	4a0c      	ldr	r2, [pc, #48]	; (8015828 <pxPortInitialiseStack+0x64>)
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	3b14      	subs	r3, #20
 80157fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	3b04      	subs	r3, #4
 801580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f06f 0202 	mvn.w	r2, #2
 8015812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	3b20      	subs	r3, #32
 8015818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801581a:	68fb      	ldr	r3, [r7, #12]
}
 801581c:	4618      	mov	r0, r3
 801581e:	3714      	adds	r7, #20
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr
 8015828:	0801582d 	.word	0x0801582d

0801582c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801582c:	b480      	push	{r7}
 801582e:	b085      	sub	sp, #20
 8015830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015836:	4b13      	ldr	r3, [pc, #76]	; (8015884 <prvTaskExitError+0x58>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801583e:	d00b      	beq.n	8015858 <prvTaskExitError+0x2c>
 8015840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015844:	b672      	cpsid	i
 8015846:	f383 8811 	msr	BASEPRI, r3
 801584a:	f3bf 8f6f 	isb	sy
 801584e:	f3bf 8f4f 	dsb	sy
 8015852:	b662      	cpsie	i
 8015854:	60fb      	str	r3, [r7, #12]
 8015856:	e7fe      	b.n	8015856 <prvTaskExitError+0x2a>
 8015858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801585c:	b672      	cpsid	i
 801585e:	f383 8811 	msr	BASEPRI, r3
 8015862:	f3bf 8f6f 	isb	sy
 8015866:	f3bf 8f4f 	dsb	sy
 801586a:	b662      	cpsie	i
 801586c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801586e:	bf00      	nop
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d0fc      	beq.n	8015870 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015876:	bf00      	nop
 8015878:	3714      	adds	r7, #20
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	20000024 	.word	0x20000024
	...

08015890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015890:	4b07      	ldr	r3, [pc, #28]	; (80158b0 <pxCurrentTCBConst2>)
 8015892:	6819      	ldr	r1, [r3, #0]
 8015894:	6808      	ldr	r0, [r1, #0]
 8015896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801589a:	f380 8809 	msr	PSP, r0
 801589e:	f3bf 8f6f 	isb	sy
 80158a2:	f04f 0000 	mov.w	r0, #0
 80158a6:	f380 8811 	msr	BASEPRI, r0
 80158aa:	4770      	bx	lr
 80158ac:	f3af 8000 	nop.w

080158b0 <pxCurrentTCBConst2>:
 80158b0:	20000340 	.word	0x20000340
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80158b4:	bf00      	nop
 80158b6:	bf00      	nop

080158b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80158b8:	4808      	ldr	r0, [pc, #32]	; (80158dc <prvPortStartFirstTask+0x24>)
 80158ba:	6800      	ldr	r0, [r0, #0]
 80158bc:	6800      	ldr	r0, [r0, #0]
 80158be:	f380 8808 	msr	MSP, r0
 80158c2:	f04f 0000 	mov.w	r0, #0
 80158c6:	f380 8814 	msr	CONTROL, r0
 80158ca:	b662      	cpsie	i
 80158cc:	b661      	cpsie	f
 80158ce:	f3bf 8f4f 	dsb	sy
 80158d2:	f3bf 8f6f 	isb	sy
 80158d6:	df00      	svc	0
 80158d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80158da:	bf00      	nop
 80158dc:	e000ed08 	.word	0xe000ed08

080158e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80158e6:	4b36      	ldr	r3, [pc, #216]	; (80159c0 <xPortStartScheduler+0xe0>)
 80158e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	b2db      	uxtb	r3, r3
 80158f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	22ff      	movs	r2, #255	; 0xff
 80158f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015900:	78fb      	ldrb	r3, [r7, #3]
 8015902:	b2db      	uxtb	r3, r3
 8015904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015908:	b2da      	uxtb	r2, r3
 801590a:	4b2e      	ldr	r3, [pc, #184]	; (80159c4 <xPortStartScheduler+0xe4>)
 801590c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801590e:	4b2e      	ldr	r3, [pc, #184]	; (80159c8 <xPortStartScheduler+0xe8>)
 8015910:	2207      	movs	r2, #7
 8015912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015914:	e009      	b.n	801592a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015916:	4b2c      	ldr	r3, [pc, #176]	; (80159c8 <xPortStartScheduler+0xe8>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	3b01      	subs	r3, #1
 801591c:	4a2a      	ldr	r2, [pc, #168]	; (80159c8 <xPortStartScheduler+0xe8>)
 801591e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015920:	78fb      	ldrb	r3, [r7, #3]
 8015922:	b2db      	uxtb	r3, r3
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	b2db      	uxtb	r3, r3
 8015928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801592a:	78fb      	ldrb	r3, [r7, #3]
 801592c:	b2db      	uxtb	r3, r3
 801592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015932:	2b80      	cmp	r3, #128	; 0x80
 8015934:	d0ef      	beq.n	8015916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015936:	4b24      	ldr	r3, [pc, #144]	; (80159c8 <xPortStartScheduler+0xe8>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f1c3 0307 	rsb	r3, r3, #7
 801593e:	2b04      	cmp	r3, #4
 8015940:	d00b      	beq.n	801595a <xPortStartScheduler+0x7a>
 8015942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015946:	b672      	cpsid	i
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	b662      	cpsie	i
 8015956:	60bb      	str	r3, [r7, #8]
 8015958:	e7fe      	b.n	8015958 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801595a:	4b1b      	ldr	r3, [pc, #108]	; (80159c8 <xPortStartScheduler+0xe8>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	021b      	lsls	r3, r3, #8
 8015960:	4a19      	ldr	r2, [pc, #100]	; (80159c8 <xPortStartScheduler+0xe8>)
 8015962:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015964:	4b18      	ldr	r3, [pc, #96]	; (80159c8 <xPortStartScheduler+0xe8>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801596c:	4a16      	ldr	r2, [pc, #88]	; (80159c8 <xPortStartScheduler+0xe8>)
 801596e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	b2da      	uxtb	r2, r3
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015978:	4b14      	ldr	r3, [pc, #80]	; (80159cc <xPortStartScheduler+0xec>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4a13      	ldr	r2, [pc, #76]	; (80159cc <xPortStartScheduler+0xec>)
 801597e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015982:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015984:	4b11      	ldr	r3, [pc, #68]	; (80159cc <xPortStartScheduler+0xec>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	4a10      	ldr	r2, [pc, #64]	; (80159cc <xPortStartScheduler+0xec>)
 801598a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801598e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015990:	f000 f8d4 	bl	8015b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015994:	4b0e      	ldr	r3, [pc, #56]	; (80159d0 <xPortStartScheduler+0xf0>)
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801599a:	f000 f8f3 	bl	8015b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801599e:	4b0d      	ldr	r3, [pc, #52]	; (80159d4 <xPortStartScheduler+0xf4>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	4a0c      	ldr	r2, [pc, #48]	; (80159d4 <xPortStartScheduler+0xf4>)
 80159a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80159a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80159aa:	f7ff ff85 	bl	80158b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80159ae:	f7ff fa8d 	bl	8014ecc <vTaskSwitchContext>
	prvTaskExitError();
 80159b2:	f7ff ff3b 	bl	801582c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80159b6:	2300      	movs	r3, #0
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3710      	adds	r7, #16
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	e000e400 	.word	0xe000e400
 80159c4:	2000046c 	.word	0x2000046c
 80159c8:	20000470 	.word	0x20000470
 80159cc:	e000ed20 	.word	0xe000ed20
 80159d0:	20000024 	.word	0x20000024
 80159d4:	e000ef34 	.word	0xe000ef34

080159d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
 80159de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159e2:	b672      	cpsid	i
 80159e4:	f383 8811 	msr	BASEPRI, r3
 80159e8:	f3bf 8f6f 	isb	sy
 80159ec:	f3bf 8f4f 	dsb	sy
 80159f0:	b662      	cpsie	i
 80159f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80159f4:	4b0f      	ldr	r3, [pc, #60]	; (8015a34 <vPortEnterCritical+0x5c>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	3301      	adds	r3, #1
 80159fa:	4a0e      	ldr	r2, [pc, #56]	; (8015a34 <vPortEnterCritical+0x5c>)
 80159fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80159fe:	4b0d      	ldr	r3, [pc, #52]	; (8015a34 <vPortEnterCritical+0x5c>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d110      	bne.n	8015a28 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015a06:	4b0c      	ldr	r3, [pc, #48]	; (8015a38 <vPortEnterCritical+0x60>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	b2db      	uxtb	r3, r3
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d00b      	beq.n	8015a28 <vPortEnterCritical+0x50>
 8015a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a14:	b672      	cpsid	i
 8015a16:	f383 8811 	msr	BASEPRI, r3
 8015a1a:	f3bf 8f6f 	isb	sy
 8015a1e:	f3bf 8f4f 	dsb	sy
 8015a22:	b662      	cpsie	i
 8015a24:	603b      	str	r3, [r7, #0]
 8015a26:	e7fe      	b.n	8015a26 <vPortEnterCritical+0x4e>
	}
}
 8015a28:	bf00      	nop
 8015a2a:	370c      	adds	r7, #12
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a32:	4770      	bx	lr
 8015a34:	20000024 	.word	0x20000024
 8015a38:	e000ed04 	.word	0xe000ed04

08015a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015a42:	4b12      	ldr	r3, [pc, #72]	; (8015a8c <vPortExitCritical+0x50>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d10b      	bne.n	8015a62 <vPortExitCritical+0x26>
 8015a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a4e:	b672      	cpsid	i
 8015a50:	f383 8811 	msr	BASEPRI, r3
 8015a54:	f3bf 8f6f 	isb	sy
 8015a58:	f3bf 8f4f 	dsb	sy
 8015a5c:	b662      	cpsie	i
 8015a5e:	607b      	str	r3, [r7, #4]
 8015a60:	e7fe      	b.n	8015a60 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015a62:	4b0a      	ldr	r3, [pc, #40]	; (8015a8c <vPortExitCritical+0x50>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	3b01      	subs	r3, #1
 8015a68:	4a08      	ldr	r2, [pc, #32]	; (8015a8c <vPortExitCritical+0x50>)
 8015a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015a6c:	4b07      	ldr	r3, [pc, #28]	; (8015a8c <vPortExitCritical+0x50>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d104      	bne.n	8015a7e <vPortExitCritical+0x42>
 8015a74:	2300      	movs	r3, #0
 8015a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015a7e:	bf00      	nop
 8015a80:	370c      	adds	r7, #12
 8015a82:	46bd      	mov	sp, r7
 8015a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop
 8015a8c:	20000024 	.word	0x20000024

08015a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015a90:	f3ef 8009 	mrs	r0, PSP
 8015a94:	f3bf 8f6f 	isb	sy
 8015a98:	4b15      	ldr	r3, [pc, #84]	; (8015af0 <pxCurrentTCBConst>)
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	f01e 0f10 	tst.w	lr, #16
 8015aa0:	bf08      	it	eq
 8015aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aaa:	6010      	str	r0, [r2, #0]
 8015aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015ab4:	b672      	cpsid	i
 8015ab6:	f380 8811 	msr	BASEPRI, r0
 8015aba:	f3bf 8f4f 	dsb	sy
 8015abe:	f3bf 8f6f 	isb	sy
 8015ac2:	b662      	cpsie	i
 8015ac4:	f7ff fa02 	bl	8014ecc <vTaskSwitchContext>
 8015ac8:	f04f 0000 	mov.w	r0, #0
 8015acc:	f380 8811 	msr	BASEPRI, r0
 8015ad0:	bc09      	pop	{r0, r3}
 8015ad2:	6819      	ldr	r1, [r3, #0]
 8015ad4:	6808      	ldr	r0, [r1, #0]
 8015ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ada:	f01e 0f10 	tst.w	lr, #16
 8015ade:	bf08      	it	eq
 8015ae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ae4:	f380 8809 	msr	PSP, r0
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	4770      	bx	lr
 8015aee:	bf00      	nop

08015af0 <pxCurrentTCBConst>:
 8015af0:	20000340 	.word	0x20000340
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop

08015af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
	__asm volatile
 8015afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b02:	b672      	cpsid	i
 8015b04:	f383 8811 	msr	BASEPRI, r3
 8015b08:	f3bf 8f6f 	isb	sy
 8015b0c:	f3bf 8f4f 	dsb	sy
 8015b10:	b662      	cpsie	i
 8015b12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015b14:	f7ff f920 	bl	8014d58 <xTaskIncrementTick>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d003      	beq.n	8015b26 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015b1e:	4b06      	ldr	r3, [pc, #24]	; (8015b38 <xPortSysTickHandler+0x40>)
 8015b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b24:	601a      	str	r2, [r3, #0]
 8015b26:	2300      	movs	r3, #0
 8015b28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015b30:	bf00      	nop
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	e000ed04 	.word	0xe000ed04

08015b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015b40:	4b0b      	ldr	r3, [pc, #44]	; (8015b70 <vPortSetupTimerInterrupt+0x34>)
 8015b42:	2200      	movs	r2, #0
 8015b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015b46:	4b0b      	ldr	r3, [pc, #44]	; (8015b74 <vPortSetupTimerInterrupt+0x38>)
 8015b48:	2200      	movs	r2, #0
 8015b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015b4c:	4b0a      	ldr	r3, [pc, #40]	; (8015b78 <vPortSetupTimerInterrupt+0x3c>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	4a0a      	ldr	r2, [pc, #40]	; (8015b7c <vPortSetupTimerInterrupt+0x40>)
 8015b52:	fba2 2303 	umull	r2, r3, r2, r3
 8015b56:	099b      	lsrs	r3, r3, #6
 8015b58:	4a09      	ldr	r2, [pc, #36]	; (8015b80 <vPortSetupTimerInterrupt+0x44>)
 8015b5a:	3b01      	subs	r3, #1
 8015b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015b5e:	4b04      	ldr	r3, [pc, #16]	; (8015b70 <vPortSetupTimerInterrupt+0x34>)
 8015b60:	2207      	movs	r2, #7
 8015b62:	601a      	str	r2, [r3, #0]
}
 8015b64:	bf00      	nop
 8015b66:	46bd      	mov	sp, r7
 8015b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	e000e010 	.word	0xe000e010
 8015b74:	e000e018 	.word	0xe000e018
 8015b78:	20000018 	.word	0x20000018
 8015b7c:	10624dd3 	.word	0x10624dd3
 8015b80:	e000e014 	.word	0xe000e014

08015b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015b94 <vPortEnableVFP+0x10>
 8015b88:	6801      	ldr	r1, [r0, #0]
 8015b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015b8e:	6001      	str	r1, [r0, #0]
 8015b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015b92:	bf00      	nop
 8015b94:	e000ed88 	.word	0xe000ed88

08015b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015b98:	b480      	push	{r7}
 8015b9a:	b085      	sub	sp, #20
 8015b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015b9e:	f3ef 8305 	mrs	r3, IPSR
 8015ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2b0f      	cmp	r3, #15
 8015ba8:	d915      	bls.n	8015bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015baa:	4a18      	ldr	r2, [pc, #96]	; (8015c0c <vPortValidateInterruptPriority+0x74>)
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	4413      	add	r3, r2
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015bb4:	4b16      	ldr	r3, [pc, #88]	; (8015c10 <vPortValidateInterruptPriority+0x78>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	7afa      	ldrb	r2, [r7, #11]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d20b      	bcs.n	8015bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc2:	b672      	cpsid	i
 8015bc4:	f383 8811 	msr	BASEPRI, r3
 8015bc8:	f3bf 8f6f 	isb	sy
 8015bcc:	f3bf 8f4f 	dsb	sy
 8015bd0:	b662      	cpsie	i
 8015bd2:	607b      	str	r3, [r7, #4]
 8015bd4:	e7fe      	b.n	8015bd4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015bd6:	4b0f      	ldr	r3, [pc, #60]	; (8015c14 <vPortValidateInterruptPriority+0x7c>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015bde:	4b0e      	ldr	r3, [pc, #56]	; (8015c18 <vPortValidateInterruptPriority+0x80>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d90b      	bls.n	8015bfe <vPortValidateInterruptPriority+0x66>
 8015be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bea:	b672      	cpsid	i
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	b662      	cpsie	i
 8015bfa:	603b      	str	r3, [r7, #0]
 8015bfc:	e7fe      	b.n	8015bfc <vPortValidateInterruptPriority+0x64>
	}
 8015bfe:	bf00      	nop
 8015c00:	3714      	adds	r7, #20
 8015c02:	46bd      	mov	sp, r7
 8015c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop
 8015c0c:	e000e3f0 	.word	0xe000e3f0
 8015c10:	2000046c 	.word	0x2000046c
 8015c14:	e000ed0c 	.word	0xe000ed0c
 8015c18:	20000470 	.word	0x20000470

08015c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b08a      	sub	sp, #40	; 0x28
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015c24:	2300      	movs	r3, #0
 8015c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015c28:	f7fe ffea 	bl	8014c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015c2c:	4b5a      	ldr	r3, [pc, #360]	; (8015d98 <pvPortMalloc+0x17c>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d101      	bne.n	8015c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015c34:	f000 f916 	bl	8015e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015c38:	4b58      	ldr	r3, [pc, #352]	; (8015d9c <pvPortMalloc+0x180>)
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	4013      	ands	r3, r2
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f040 8090 	bne.w	8015d66 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d01e      	beq.n	8015c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015c4c:	2208      	movs	r2, #8
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	4413      	add	r3, r2
 8015c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f003 0307 	and.w	r3, r3, #7
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d015      	beq.n	8015c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f023 0307 	bic.w	r3, r3, #7
 8015c64:	3308      	adds	r3, #8
 8015c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f003 0307 	and.w	r3, r3, #7
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d00b      	beq.n	8015c8a <pvPortMalloc+0x6e>
 8015c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c76:	b672      	cpsid	i
 8015c78:	f383 8811 	msr	BASEPRI, r3
 8015c7c:	f3bf 8f6f 	isb	sy
 8015c80:	f3bf 8f4f 	dsb	sy
 8015c84:	b662      	cpsie	i
 8015c86:	617b      	str	r3, [r7, #20]
 8015c88:	e7fe      	b.n	8015c88 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d06a      	beq.n	8015d66 <pvPortMalloc+0x14a>
 8015c90:	4b43      	ldr	r3, [pc, #268]	; (8015da0 <pvPortMalloc+0x184>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d865      	bhi.n	8015d66 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015c9a:	4b42      	ldr	r3, [pc, #264]	; (8015da4 <pvPortMalloc+0x188>)
 8015c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015c9e:	4b41      	ldr	r3, [pc, #260]	; (8015da4 <pvPortMalloc+0x188>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ca4:	e004      	b.n	8015cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d903      	bls.n	8015cc2 <pvPortMalloc+0xa6>
 8015cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1f1      	bne.n	8015ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015cc2:	4b35      	ldr	r3, [pc, #212]	; (8015d98 <pvPortMalloc+0x17c>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d04c      	beq.n	8015d66 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ccc:	6a3b      	ldr	r3, [r7, #32]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	2208      	movs	r2, #8
 8015cd2:	4413      	add	r3, r2
 8015cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd8:	681a      	ldr	r2, [r3, #0]
 8015cda:	6a3b      	ldr	r3, [r7, #32]
 8015cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce0:	685a      	ldr	r2, [r3, #4]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	1ad2      	subs	r2, r2, r3
 8015ce6:	2308      	movs	r3, #8
 8015ce8:	005b      	lsls	r3, r3, #1
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d920      	bls.n	8015d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	4413      	add	r3, r2
 8015cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015cf6:	69bb      	ldr	r3, [r7, #24]
 8015cf8:	f003 0307 	and.w	r3, r3, #7
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d00b      	beq.n	8015d18 <pvPortMalloc+0xfc>
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	b672      	cpsid	i
 8015d06:	f383 8811 	msr	BASEPRI, r3
 8015d0a:	f3bf 8f6f 	isb	sy
 8015d0e:	f3bf 8f4f 	dsb	sy
 8015d12:	b662      	cpsie	i
 8015d14:	613b      	str	r3, [r7, #16]
 8015d16:	e7fe      	b.n	8015d16 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1a:	685a      	ldr	r2, [r3, #4]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	1ad2      	subs	r2, r2, r3
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015d2a:	69b8      	ldr	r0, [r7, #24]
 8015d2c:	f000 f8fe 	bl	8015f2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015d30:	4b1b      	ldr	r3, [pc, #108]	; (8015da0 <pvPortMalloc+0x184>)
 8015d32:	681a      	ldr	r2, [r3, #0]
 8015d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	4a19      	ldr	r2, [pc, #100]	; (8015da0 <pvPortMalloc+0x184>)
 8015d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015d3e:	4b18      	ldr	r3, [pc, #96]	; (8015da0 <pvPortMalloc+0x184>)
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	4b19      	ldr	r3, [pc, #100]	; (8015da8 <pvPortMalloc+0x18c>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d203      	bcs.n	8015d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015d4a:	4b15      	ldr	r3, [pc, #84]	; (8015da0 <pvPortMalloc+0x184>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4a16      	ldr	r2, [pc, #88]	; (8015da8 <pvPortMalloc+0x18c>)
 8015d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	4b11      	ldr	r3, [pc, #68]	; (8015d9c <pvPortMalloc+0x180>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	431a      	orrs	r2, r3
 8015d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d62:	2200      	movs	r2, #0
 8015d64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015d66:	f7fe ff59 	bl	8014c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	f003 0307 	and.w	r3, r3, #7
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d00b      	beq.n	8015d8c <pvPortMalloc+0x170>
 8015d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d78:	b672      	cpsid	i
 8015d7a:	f383 8811 	msr	BASEPRI, r3
 8015d7e:	f3bf 8f6f 	isb	sy
 8015d82:	f3bf 8f4f 	dsb	sy
 8015d86:	b662      	cpsie	i
 8015d88:	60fb      	str	r3, [r7, #12]
 8015d8a:	e7fe      	b.n	8015d8a <pvPortMalloc+0x16e>
	return pvReturn;
 8015d8c:	69fb      	ldr	r3, [r7, #28]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3728      	adds	r7, #40	; 0x28
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	20055bac 	.word	0x20055bac
 8015d9c:	20055bb8 	.word	0x20055bb8
 8015da0:	20055bb0 	.word	0x20055bb0
 8015da4:	20055ba4 	.word	0x20055ba4
 8015da8:	20055bb4 	.word	0x20055bb4

08015dac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b086      	sub	sp, #24
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d04a      	beq.n	8015e54 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015dbe:	2308      	movs	r3, #8
 8015dc0:	425b      	negs	r3, r3
 8015dc2:	697a      	ldr	r2, [r7, #20]
 8015dc4:	4413      	add	r3, r2
 8015dc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	685a      	ldr	r2, [r3, #4]
 8015dd0:	4b22      	ldr	r3, [pc, #136]	; (8015e5c <vPortFree+0xb0>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	4013      	ands	r3, r2
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d10b      	bne.n	8015df2 <vPortFree+0x46>
 8015dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dde:	b672      	cpsid	i
 8015de0:	f383 8811 	msr	BASEPRI, r3
 8015de4:	f3bf 8f6f 	isb	sy
 8015de8:	f3bf 8f4f 	dsb	sy
 8015dec:	b662      	cpsie	i
 8015dee:	60fb      	str	r3, [r7, #12]
 8015df0:	e7fe      	b.n	8015df0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d00b      	beq.n	8015e12 <vPortFree+0x66>
 8015dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dfe:	b672      	cpsid	i
 8015e00:	f383 8811 	msr	BASEPRI, r3
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	b662      	cpsie	i
 8015e0e:	60bb      	str	r3, [r7, #8]
 8015e10:	e7fe      	b.n	8015e10 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	685a      	ldr	r2, [r3, #4]
 8015e16:	4b11      	ldr	r3, [pc, #68]	; (8015e5c <vPortFree+0xb0>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4013      	ands	r3, r2
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d019      	beq.n	8015e54 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d115      	bne.n	8015e54 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	685a      	ldr	r2, [r3, #4]
 8015e2c:	4b0b      	ldr	r3, [pc, #44]	; (8015e5c <vPortFree+0xb0>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	43db      	mvns	r3, r3
 8015e32:	401a      	ands	r2, r3
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015e38:	f7fe fee2 	bl	8014c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015e3c:	693b      	ldr	r3, [r7, #16]
 8015e3e:	685a      	ldr	r2, [r3, #4]
 8015e40:	4b07      	ldr	r3, [pc, #28]	; (8015e60 <vPortFree+0xb4>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4413      	add	r3, r2
 8015e46:	4a06      	ldr	r2, [pc, #24]	; (8015e60 <vPortFree+0xb4>)
 8015e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015e4a:	6938      	ldr	r0, [r7, #16]
 8015e4c:	f000 f86e 	bl	8015f2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015e50:	f7fe fee4 	bl	8014c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015e54:	bf00      	nop
 8015e56:	3718      	adds	r7, #24
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}
 8015e5c:	20055bb8 	.word	0x20055bb8
 8015e60:	20055bb0 	.word	0x20055bb0

08015e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015e64:	b480      	push	{r7}
 8015e66:	b085      	sub	sp, #20
 8015e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015e6a:	4b29      	ldr	r3, [pc, #164]	; (8015f10 <prvHeapInit+0xac>)
 8015e6c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015e6e:	4b29      	ldr	r3, [pc, #164]	; (8015f14 <prvHeapInit+0xb0>)
 8015e70:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	f003 0307 	and.w	r3, r3, #7
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d00c      	beq.n	8015e96 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	3307      	adds	r3, #7
 8015e80:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	f023 0307 	bic.w	r3, r3, #7
 8015e88:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015e8a:	68ba      	ldr	r2, [r7, #8]
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	1ad3      	subs	r3, r2, r3
 8015e90:	4a20      	ldr	r2, [pc, #128]	; (8015f14 <prvHeapInit+0xb0>)
 8015e92:	4413      	add	r3, r2
 8015e94:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015e9a:	4a1f      	ldr	r2, [pc, #124]	; (8015f18 <prvHeapInit+0xb4>)
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015ea0:	4b1d      	ldr	r3, [pc, #116]	; (8015f18 <prvHeapInit+0xb4>)
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	68ba      	ldr	r2, [r7, #8]
 8015eaa:	4413      	add	r3, r2
 8015eac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015eae:	2208      	movs	r2, #8
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	1a9b      	subs	r3, r3, r2
 8015eb4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	f023 0307 	bic.w	r3, r3, #7
 8015ebc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	4a16      	ldr	r2, [pc, #88]	; (8015f1c <prvHeapInit+0xb8>)
 8015ec2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015ec4:	4b15      	ldr	r3, [pc, #84]	; (8015f1c <prvHeapInit+0xb8>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015ecc:	4b13      	ldr	r3, [pc, #76]	; (8015f1c <prvHeapInit+0xb8>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	68fa      	ldr	r2, [r7, #12]
 8015edc:	1ad2      	subs	r2, r2, r3
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ee2:	4b0e      	ldr	r3, [pc, #56]	; (8015f1c <prvHeapInit+0xb8>)
 8015ee4:	681a      	ldr	r2, [r3, #0]
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	4a0c      	ldr	r2, [pc, #48]	; (8015f20 <prvHeapInit+0xbc>)
 8015ef0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	4a0b      	ldr	r2, [pc, #44]	; (8015f24 <prvHeapInit+0xc0>)
 8015ef8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015efa:	4b0b      	ldr	r3, [pc, #44]	; (8015f28 <prvHeapInit+0xc4>)
 8015efc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015f00:	601a      	str	r2, [r3, #0]
}
 8015f02:	bf00      	nop
 8015f04:	3714      	adds	r7, #20
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	00055730 	.word	0x00055730
 8015f14:	20000474 	.word	0x20000474
 8015f18:	20055ba4 	.word	0x20055ba4
 8015f1c:	20055bac 	.word	0x20055bac
 8015f20:	20055bb4 	.word	0x20055bb4
 8015f24:	20055bb0 	.word	0x20055bb0
 8015f28:	20055bb8 	.word	0x20055bb8

08015f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b085      	sub	sp, #20
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015f34:	4b28      	ldr	r3, [pc, #160]	; (8015fd8 <prvInsertBlockIntoFreeList+0xac>)
 8015f36:	60fb      	str	r3, [r7, #12]
 8015f38:	e002      	b.n	8015f40 <prvInsertBlockIntoFreeList+0x14>
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	60fb      	str	r3, [r7, #12]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d8f7      	bhi.n	8015f3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	68ba      	ldr	r2, [r7, #8]
 8015f54:	4413      	add	r3, r2
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d108      	bne.n	8015f6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	685a      	ldr	r2, [r3, #4]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	441a      	add	r2, r3
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	68ba      	ldr	r2, [r7, #8]
 8015f78:	441a      	add	r2, r3
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	d118      	bne.n	8015fb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681a      	ldr	r2, [r3, #0]
 8015f86:	4b15      	ldr	r3, [pc, #84]	; (8015fdc <prvInsertBlockIntoFreeList+0xb0>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	d00d      	beq.n	8015faa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	685a      	ldr	r2, [r3, #4]
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	441a      	add	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	601a      	str	r2, [r3, #0]
 8015fa8:	e008      	b.n	8015fbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015faa:	4b0c      	ldr	r3, [pc, #48]	; (8015fdc <prvInsertBlockIntoFreeList+0xb0>)
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	601a      	str	r2, [r3, #0]
 8015fb2:	e003      	b.n	8015fbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	681a      	ldr	r2, [r3, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015fbc:	68fa      	ldr	r2, [r7, #12]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d002      	beq.n	8015fca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015fca:	bf00      	nop
 8015fcc:	3714      	adds	r7, #20
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	20055ba4 	.word	0x20055ba4
 8015fdc:	20055bac 	.word	0x20055bac

08015fe0 <__errno>:
 8015fe0:	4b01      	ldr	r3, [pc, #4]	; (8015fe8 <__errno+0x8>)
 8015fe2:	6818      	ldr	r0, [r3, #0]
 8015fe4:	4770      	bx	lr
 8015fe6:	bf00      	nop
 8015fe8:	20000028 	.word	0x20000028

08015fec <__libc_init_array>:
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	4e0d      	ldr	r6, [pc, #52]	; (8016024 <__libc_init_array+0x38>)
 8015ff0:	4c0d      	ldr	r4, [pc, #52]	; (8016028 <__libc_init_array+0x3c>)
 8015ff2:	1ba4      	subs	r4, r4, r6
 8015ff4:	10a4      	asrs	r4, r4, #2
 8015ff6:	2500      	movs	r5, #0
 8015ff8:	42a5      	cmp	r5, r4
 8015ffa:	d109      	bne.n	8016010 <__libc_init_array+0x24>
 8015ffc:	4e0b      	ldr	r6, [pc, #44]	; (801602c <__libc_init_array+0x40>)
 8015ffe:	4c0c      	ldr	r4, [pc, #48]	; (8016030 <__libc_init_array+0x44>)
 8016000:	f000 fee8 	bl	8016dd4 <_init>
 8016004:	1ba4      	subs	r4, r4, r6
 8016006:	10a4      	asrs	r4, r4, #2
 8016008:	2500      	movs	r5, #0
 801600a:	42a5      	cmp	r5, r4
 801600c:	d105      	bne.n	801601a <__libc_init_array+0x2e>
 801600e:	bd70      	pop	{r4, r5, r6, pc}
 8016010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016014:	4798      	blx	r3
 8016016:	3501      	adds	r5, #1
 8016018:	e7ee      	b.n	8015ff8 <__libc_init_array+0xc>
 801601a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801601e:	4798      	blx	r3
 8016020:	3501      	adds	r5, #1
 8016022:	e7f2      	b.n	801600a <__libc_init_array+0x1e>
 8016024:	08020f28 	.word	0x08020f28
 8016028:	08020f28 	.word	0x08020f28
 801602c:	08020f28 	.word	0x08020f28
 8016030:	08020f2c 	.word	0x08020f2c

08016034 <memcpy>:
 8016034:	b510      	push	{r4, lr}
 8016036:	1e43      	subs	r3, r0, #1
 8016038:	440a      	add	r2, r1
 801603a:	4291      	cmp	r1, r2
 801603c:	d100      	bne.n	8016040 <memcpy+0xc>
 801603e:	bd10      	pop	{r4, pc}
 8016040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016048:	e7f7      	b.n	801603a <memcpy+0x6>

0801604a <memset>:
 801604a:	4402      	add	r2, r0
 801604c:	4603      	mov	r3, r0
 801604e:	4293      	cmp	r3, r2
 8016050:	d100      	bne.n	8016054 <memset+0xa>
 8016052:	4770      	bx	lr
 8016054:	f803 1b01 	strb.w	r1, [r3], #1
 8016058:	e7f9      	b.n	801604e <memset+0x4>

0801605a <strncmp>:
 801605a:	b510      	push	{r4, lr}
 801605c:	b16a      	cbz	r2, 801607a <strncmp+0x20>
 801605e:	3901      	subs	r1, #1
 8016060:	1884      	adds	r4, r0, r2
 8016062:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801606a:	4293      	cmp	r3, r2
 801606c:	d103      	bne.n	8016076 <strncmp+0x1c>
 801606e:	42a0      	cmp	r0, r4
 8016070:	d001      	beq.n	8016076 <strncmp+0x1c>
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1f5      	bne.n	8016062 <strncmp+0x8>
 8016076:	1a98      	subs	r0, r3, r2
 8016078:	bd10      	pop	{r4, pc}
 801607a:	4610      	mov	r0, r2
 801607c:	e7fc      	b.n	8016078 <strncmp+0x1e>

0801607e <strstr>:
 801607e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016080:	7803      	ldrb	r3, [r0, #0]
 8016082:	b17b      	cbz	r3, 80160a4 <strstr+0x26>
 8016084:	4604      	mov	r4, r0
 8016086:	7823      	ldrb	r3, [r4, #0]
 8016088:	4620      	mov	r0, r4
 801608a:	1c66      	adds	r6, r4, #1
 801608c:	b17b      	cbz	r3, 80160ae <strstr+0x30>
 801608e:	1e4a      	subs	r2, r1, #1
 8016090:	1e63      	subs	r3, r4, #1
 8016092:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016096:	b14d      	cbz	r5, 80160ac <strstr+0x2e>
 8016098:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801609c:	42af      	cmp	r7, r5
 801609e:	4634      	mov	r4, r6
 80160a0:	d0f7      	beq.n	8016092 <strstr+0x14>
 80160a2:	e7f0      	b.n	8016086 <strstr+0x8>
 80160a4:	780b      	ldrb	r3, [r1, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	bf18      	it	ne
 80160aa:	2000      	movne	r0, #0
 80160ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ae:	4618      	mov	r0, r3
 80160b0:	e7fc      	b.n	80160ac <strstr+0x2e>
 80160b2:	0000      	movs	r0, r0
 80160b4:	0000      	movs	r0, r0
	...

080160b8 <pow>:
 80160b8:	b570      	push	{r4, r5, r6, lr}
 80160ba:	ed2d 8b0a 	vpush	{d8-d12}
 80160be:	eeb0 9b40 	vmov.f64	d9, d0
 80160c2:	eeb0 8b41 	vmov.f64	d8, d1
 80160c6:	4c8c      	ldr	r4, [pc, #560]	; (80162f8 <pow+0x240>)
 80160c8:	b08a      	sub	sp, #40	; 0x28
 80160ca:	f000 f9c1 	bl	8016450 <__ieee754_pow>
 80160ce:	f994 3000 	ldrsb.w	r3, [r4]
 80160d2:	eeb0 ab40 	vmov.f64	d10, d0
 80160d6:	1c5a      	adds	r2, r3, #1
 80160d8:	4626      	mov	r6, r4
 80160da:	d04b      	beq.n	8016174 <pow+0xbc>
 80160dc:	eeb4 8b48 	vcmp.f64	d8, d8
 80160e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e4:	d646      	bvs.n	8016174 <pow+0xbc>
 80160e6:	eeb4 9b49 	vcmp.f64	d9, d9
 80160ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160ee:	d719      	bvc.n	8016124 <pow+0x6c>
 80160f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80160f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f8:	d13c      	bne.n	8016174 <pow+0xbc>
 80160fa:	2201      	movs	r2, #1
 80160fc:	9200      	str	r2, [sp, #0]
 80160fe:	497f      	ldr	r1, [pc, #508]	; (80162fc <pow+0x244>)
 8016100:	4a7f      	ldr	r2, [pc, #508]	; (8016300 <pow+0x248>)
 8016102:	9201      	str	r2, [sp, #4]
 8016104:	2000      	movs	r0, #0
 8016106:	2200      	movs	r2, #0
 8016108:	2b02      	cmp	r3, #2
 801610a:	9208      	str	r2, [sp, #32]
 801610c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8016110:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016114:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016118:	d02a      	beq.n	8016170 <pow+0xb8>
 801611a:	4668      	mov	r0, sp
 801611c:	f000 fd35 	bl	8016b8a <matherr>
 8016120:	bb00      	cbnz	r0, 8016164 <pow+0xac>
 8016122:	e04e      	b.n	80161c2 <pow+0x10a>
 8016124:	ed9f bb72 	vldr	d11, [pc, #456]	; 80162f0 <pow+0x238>
 8016128:	eeb4 9b4b 	vcmp.f64	d9, d11
 801612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016130:	eeb0 cb4b 	vmov.f64	d12, d11
 8016134:	d14a      	bne.n	80161cc <pow+0x114>
 8016136:	eeb4 8b4b 	vcmp.f64	d8, d11
 801613a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801613e:	d11f      	bne.n	8016180 <pow+0xc8>
 8016140:	2201      	movs	r2, #1
 8016142:	9200      	str	r2, [sp, #0]
 8016144:	4a6e      	ldr	r2, [pc, #440]	; (8016300 <pow+0x248>)
 8016146:	9201      	str	r2, [sp, #4]
 8016148:	2200      	movs	r2, #0
 801614a:	9208      	str	r2, [sp, #32]
 801614c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8016150:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016154:	ed8d bb06 	vstr	d11, [sp, #24]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d0de      	beq.n	801611a <pow+0x62>
 801615c:	4b67      	ldr	r3, [pc, #412]	; (80162fc <pow+0x244>)
 801615e:	2200      	movs	r2, #0
 8016160:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016164:	9b08      	ldr	r3, [sp, #32]
 8016166:	b11b      	cbz	r3, 8016170 <pow+0xb8>
 8016168:	f7ff ff3a 	bl	8015fe0 <__errno>
 801616c:	9b08      	ldr	r3, [sp, #32]
 801616e:	6003      	str	r3, [r0, #0]
 8016170:	ed9d ab06 	vldr	d10, [sp, #24]
 8016174:	eeb0 0b4a 	vmov.f64	d0, d10
 8016178:	b00a      	add	sp, #40	; 0x28
 801617a:	ecbd 8b0a 	vpop	{d8-d12}
 801617e:	bd70      	pop	{r4, r5, r6, pc}
 8016180:	eeb0 0b48 	vmov.f64	d0, d8
 8016184:	f000 fcf9 	bl	8016b7a <finite>
 8016188:	2800      	cmp	r0, #0
 801618a:	d0f3      	beq.n	8016174 <pow+0xbc>
 801618c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8016190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016194:	d5ee      	bpl.n	8016174 <pow+0xbc>
 8016196:	2301      	movs	r3, #1
 8016198:	9300      	str	r3, [sp, #0]
 801619a:	4b59      	ldr	r3, [pc, #356]	; (8016300 <pow+0x248>)
 801619c:	9301      	str	r3, [sp, #4]
 801619e:	2300      	movs	r3, #0
 80161a0:	9308      	str	r3, [sp, #32]
 80161a2:	f994 3000 	ldrsb.w	r3, [r4]
 80161a6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80161aa:	ed8d 8b04 	vstr	d8, [sp, #16]
 80161ae:	b913      	cbnz	r3, 80161b6 <pow+0xfe>
 80161b0:	ed8d bb06 	vstr	d11, [sp, #24]
 80161b4:	e7b1      	b.n	801611a <pow+0x62>
 80161b6:	4953      	ldr	r1, [pc, #332]	; (8016304 <pow+0x24c>)
 80161b8:	2000      	movs	r0, #0
 80161ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80161be:	2b02      	cmp	r3, #2
 80161c0:	d1ab      	bne.n	801611a <pow+0x62>
 80161c2:	f7ff ff0d 	bl	8015fe0 <__errno>
 80161c6:	2321      	movs	r3, #33	; 0x21
 80161c8:	6003      	str	r3, [r0, #0]
 80161ca:	e7cb      	b.n	8016164 <pow+0xac>
 80161cc:	f000 fcd5 	bl	8016b7a <finite>
 80161d0:	4605      	mov	r5, r0
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d164      	bne.n	80162a0 <pow+0x1e8>
 80161d6:	eeb0 0b49 	vmov.f64	d0, d9
 80161da:	f000 fcce 	bl	8016b7a <finite>
 80161de:	2800      	cmp	r0, #0
 80161e0:	d05e      	beq.n	80162a0 <pow+0x1e8>
 80161e2:	eeb0 0b48 	vmov.f64	d0, d8
 80161e6:	f000 fcc8 	bl	8016b7a <finite>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	d058      	beq.n	80162a0 <pow+0x1e8>
 80161ee:	eeb4 ab4a 	vcmp.f64	d10, d10
 80161f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f6:	f994 3000 	ldrsb.w	r3, [r4]
 80161fa:	4a41      	ldr	r2, [pc, #260]	; (8016300 <pow+0x248>)
 80161fc:	d70e      	bvc.n	801621c <pow+0x164>
 80161fe:	2101      	movs	r1, #1
 8016200:	e9cd 1200 	strd	r1, r2, [sp]
 8016204:	9508      	str	r5, [sp, #32]
 8016206:	ed8d 9b02 	vstr	d9, [sp, #8]
 801620a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d0ce      	beq.n	80161b0 <pow+0xf8>
 8016212:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8016216:	ed8d 7b06 	vstr	d7, [sp, #24]
 801621a:	e7d0      	b.n	80161be <pow+0x106>
 801621c:	2103      	movs	r1, #3
 801621e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016222:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8016226:	ee28 8b07 	vmul.f64	d8, d8, d7
 801622a:	e9cd 1200 	strd	r1, r2, [sp]
 801622e:	9508      	str	r5, [sp, #32]
 8016230:	ed8d 9b02 	vstr	d9, [sp, #8]
 8016234:	b9fb      	cbnz	r3, 8016276 <pow+0x1be>
 8016236:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801623a:	4b33      	ldr	r3, [pc, #204]	; (8016308 <pow+0x250>)
 801623c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016244:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016248:	d54b      	bpl.n	80162e2 <pow+0x22a>
 801624a:	eeb0 0b48 	vmov.f64	d0, d8
 801624e:	f000 fca7 	bl	8016ba0 <rint>
 8016252:	eeb4 0b48 	vcmp.f64	d0, d8
 8016256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801625a:	d004      	beq.n	8016266 <pow+0x1ae>
 801625c:	4b2b      	ldr	r3, [pc, #172]	; (801630c <pow+0x254>)
 801625e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016262:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016266:	f996 3000 	ldrsb.w	r3, [r6]
 801626a:	2b02      	cmp	r3, #2
 801626c:	d139      	bne.n	80162e2 <pow+0x22a>
 801626e:	f7ff feb7 	bl	8015fe0 <__errno>
 8016272:	2322      	movs	r3, #34	; 0x22
 8016274:	e7a8      	b.n	80161c8 <pow+0x110>
 8016276:	4b26      	ldr	r3, [pc, #152]	; (8016310 <pow+0x258>)
 8016278:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801627c:	2200      	movs	r2, #0
 801627e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016282:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016286:	d5ee      	bpl.n	8016266 <pow+0x1ae>
 8016288:	eeb0 0b48 	vmov.f64	d0, d8
 801628c:	f000 fc88 	bl	8016ba0 <rint>
 8016290:	eeb4 0b48 	vcmp.f64	d0, d8
 8016294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016298:	d0e5      	beq.n	8016266 <pow+0x1ae>
 801629a:	2200      	movs	r2, #0
 801629c:	4b19      	ldr	r3, [pc, #100]	; (8016304 <pow+0x24c>)
 801629e:	e7e0      	b.n	8016262 <pow+0x1aa>
 80162a0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 80162a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a8:	f47f af64 	bne.w	8016174 <pow+0xbc>
 80162ac:	eeb0 0b49 	vmov.f64	d0, d9
 80162b0:	f000 fc63 	bl	8016b7a <finite>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	f43f af5d 	beq.w	8016174 <pow+0xbc>
 80162ba:	eeb0 0b48 	vmov.f64	d0, d8
 80162be:	f000 fc5c 	bl	8016b7a <finite>
 80162c2:	2800      	cmp	r0, #0
 80162c4:	f43f af56 	beq.w	8016174 <pow+0xbc>
 80162c8:	2304      	movs	r3, #4
 80162ca:	9300      	str	r3, [sp, #0]
 80162cc:	4b0c      	ldr	r3, [pc, #48]	; (8016300 <pow+0x248>)
 80162ce:	9301      	str	r3, [sp, #4]
 80162d0:	2300      	movs	r3, #0
 80162d2:	9308      	str	r3, [sp, #32]
 80162d4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80162d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80162dc:	ed8d cb06 	vstr	d12, [sp, #24]
 80162e0:	e7c1      	b.n	8016266 <pow+0x1ae>
 80162e2:	4668      	mov	r0, sp
 80162e4:	f000 fc51 	bl	8016b8a <matherr>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	f47f af3b 	bne.w	8016164 <pow+0xac>
 80162ee:	e7be      	b.n	801626e <pow+0x1b6>
	...
 80162f8:	2000008c 	.word	0x2000008c
 80162fc:	3ff00000 	.word	0x3ff00000
 8016300:	08020ed0 	.word	0x08020ed0
 8016304:	fff00000 	.word	0xfff00000
 8016308:	47efffff 	.word	0x47efffff
 801630c:	c7efffff 	.word	0xc7efffff
 8016310:	7ff00000 	.word	0x7ff00000
 8016314:	00000000 	.word	0x00000000

08016318 <sqrt>:
 8016318:	b500      	push	{lr}
 801631a:	ed2d 8b02 	vpush	{d8}
 801631e:	eeb0 8b40 	vmov.f64	d8, d0
 8016322:	b08b      	sub	sp, #44	; 0x2c
 8016324:	f000 fc1a 	bl	8016b5c <__ieee754_sqrt>
 8016328:	4b1f      	ldr	r3, [pc, #124]	; (80163a8 <sqrt+0x90>)
 801632a:	f993 3000 	ldrsb.w	r3, [r3]
 801632e:	1c5a      	adds	r2, r3, #1
 8016330:	d024      	beq.n	801637c <sqrt+0x64>
 8016332:	eeb4 8b48 	vcmp.f64	d8, d8
 8016336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801633a:	d61f      	bvs.n	801637c <sqrt+0x64>
 801633c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 80163a0 <sqrt+0x88>
 8016340:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016348:	d518      	bpl.n	801637c <sqrt+0x64>
 801634a:	2201      	movs	r2, #1
 801634c:	9200      	str	r2, [sp, #0]
 801634e:	4a17      	ldr	r2, [pc, #92]	; (80163ac <sqrt+0x94>)
 8016350:	9201      	str	r2, [sp, #4]
 8016352:	2200      	movs	r2, #0
 8016354:	9208      	str	r2, [sp, #32]
 8016356:	ed8d 8b04 	vstr	d8, [sp, #16]
 801635a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801635e:	b993      	cbnz	r3, 8016386 <sqrt+0x6e>
 8016360:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016364:	4668      	mov	r0, sp
 8016366:	f000 fc10 	bl	8016b8a <matherr>
 801636a:	b190      	cbz	r0, 8016392 <sqrt+0x7a>
 801636c:	9b08      	ldr	r3, [sp, #32]
 801636e:	b11b      	cbz	r3, 8016378 <sqrt+0x60>
 8016370:	f7ff fe36 	bl	8015fe0 <__errno>
 8016374:	9b08      	ldr	r3, [sp, #32]
 8016376:	6003      	str	r3, [r0, #0]
 8016378:	ed9d 0b06 	vldr	d0, [sp, #24]
 801637c:	b00b      	add	sp, #44	; 0x2c
 801637e:	ecbd 8b02 	vpop	{d8}
 8016382:	f85d fb04 	ldr.w	pc, [sp], #4
 8016386:	2b02      	cmp	r3, #2
 8016388:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801638c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8016390:	d1e8      	bne.n	8016364 <sqrt+0x4c>
 8016392:	f7ff fe25 	bl	8015fe0 <__errno>
 8016396:	2321      	movs	r3, #33	; 0x21
 8016398:	6003      	str	r3, [r0, #0]
 801639a:	e7e7      	b.n	801636c <sqrt+0x54>
 801639c:	f3af 8000 	nop.w
	...
 80163a8:	2000008c 	.word	0x2000008c
 80163ac:	08020ed4 	.word	0x08020ed4

080163b0 <sqrtf>:
 80163b0:	b500      	push	{lr}
 80163b2:	ed2d 8b02 	vpush	{d8}
 80163b6:	b08b      	sub	sp, #44	; 0x2c
 80163b8:	eeb0 8a40 	vmov.f32	s16, s0
 80163bc:	f000 fbd1 	bl	8016b62 <__ieee754_sqrtf>
 80163c0:	4b21      	ldr	r3, [pc, #132]	; (8016448 <sqrtf+0x98>)
 80163c2:	f993 3000 	ldrsb.w	r3, [r3]
 80163c6:	1c5a      	adds	r2, r3, #1
 80163c8:	d028      	beq.n	801641c <sqrtf+0x6c>
 80163ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80163ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163d2:	d623      	bvs.n	801641c <sqrtf+0x6c>
 80163d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80163d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163dc:	d51e      	bpl.n	801641c <sqrtf+0x6c>
 80163de:	2201      	movs	r2, #1
 80163e0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80163e4:	9200      	str	r2, [sp, #0]
 80163e6:	4a19      	ldr	r2, [pc, #100]	; (801644c <sqrtf+0x9c>)
 80163e8:	9201      	str	r2, [sp, #4]
 80163ea:	2200      	movs	r2, #0
 80163ec:	9208      	str	r2, [sp, #32]
 80163ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 80163f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80163f6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8016440 <sqrtf+0x90>
 80163fa:	b9a3      	cbnz	r3, 8016426 <sqrtf+0x76>
 80163fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016400:	4668      	mov	r0, sp
 8016402:	f000 fbc2 	bl	8016b8a <matherr>
 8016406:	b1a0      	cbz	r0, 8016432 <sqrtf+0x82>
 8016408:	9b08      	ldr	r3, [sp, #32]
 801640a:	b11b      	cbz	r3, 8016414 <sqrtf+0x64>
 801640c:	f7ff fde8 	bl	8015fe0 <__errno>
 8016410:	9b08      	ldr	r3, [sp, #32]
 8016412:	6003      	str	r3, [r0, #0]
 8016414:	ed9d 0b06 	vldr	d0, [sp, #24]
 8016418:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801641c:	b00b      	add	sp, #44	; 0x2c
 801641e:	ecbd 8b02 	vpop	{d8}
 8016422:	f85d fb04 	ldr.w	pc, [sp], #4
 8016426:	2b02      	cmp	r3, #2
 8016428:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801642c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8016430:	d1e6      	bne.n	8016400 <sqrtf+0x50>
 8016432:	f7ff fdd5 	bl	8015fe0 <__errno>
 8016436:	2321      	movs	r3, #33	; 0x21
 8016438:	6003      	str	r3, [r0, #0]
 801643a:	e7e5      	b.n	8016408 <sqrtf+0x58>
 801643c:	f3af 8000 	nop.w
	...
 8016448:	2000008c 	.word	0x2000008c
 801644c:	08020ed9 	.word	0x08020ed9

08016450 <__ieee754_pow>:
 8016450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016454:	ec57 6b11 	vmov	r6, r7, d1
 8016458:	ed2d 8b02 	vpush	{d8}
 801645c:	eeb0 8b40 	vmov.f64	d8, d0
 8016460:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016464:	ea58 0306 	orrs.w	r3, r8, r6
 8016468:	b085      	sub	sp, #20
 801646a:	46b9      	mov	r9, r7
 801646c:	ee11 2a10 	vmov	r2, s2
 8016470:	f000 8306 	beq.w	8016a80 <__ieee754_pow+0x630>
 8016474:	ee18 aa90 	vmov	sl, s17
 8016478:	4bb9      	ldr	r3, [pc, #740]	; (8016760 <__ieee754_pow+0x310>)
 801647a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 801647e:	429c      	cmp	r4, r3
 8016480:	ee10 ba10 	vmov	fp, s0
 8016484:	dc0b      	bgt.n	801649e <__ieee754_pow+0x4e>
 8016486:	d105      	bne.n	8016494 <__ieee754_pow+0x44>
 8016488:	f1bb 0f00 	cmp.w	fp, #0
 801648c:	d107      	bne.n	801649e <__ieee754_pow+0x4e>
 801648e:	45a0      	cmp	r8, r4
 8016490:	dc0d      	bgt.n	80164ae <__ieee754_pow+0x5e>
 8016492:	e001      	b.n	8016498 <__ieee754_pow+0x48>
 8016494:	4598      	cmp	r8, r3
 8016496:	dc02      	bgt.n	801649e <__ieee754_pow+0x4e>
 8016498:	4598      	cmp	r8, r3
 801649a:	d110      	bne.n	80164be <__ieee754_pow+0x6e>
 801649c:	b17a      	cbz	r2, 80164be <__ieee754_pow+0x6e>
 801649e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80164a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80164a6:	ea54 030b 	orrs.w	r3, r4, fp
 80164aa:	f000 82e9 	beq.w	8016a80 <__ieee754_pow+0x630>
 80164ae:	48ad      	ldr	r0, [pc, #692]	; (8016764 <__ieee754_pow+0x314>)
 80164b0:	b005      	add	sp, #20
 80164b2:	ecbd 8b02 	vpop	{d8}
 80164b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	f000 bb69 	b.w	8016b90 <nan>
 80164be:	f1ba 0f00 	cmp.w	sl, #0
 80164c2:	da4e      	bge.n	8016562 <__ieee754_pow+0x112>
 80164c4:	4ba8      	ldr	r3, [pc, #672]	; (8016768 <__ieee754_pow+0x318>)
 80164c6:	4598      	cmp	r8, r3
 80164c8:	dc49      	bgt.n	801655e <__ieee754_pow+0x10e>
 80164ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80164ce:	4598      	cmp	r8, r3
 80164d0:	dd47      	ble.n	8016562 <__ieee754_pow+0x112>
 80164d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80164d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80164da:	2b14      	cmp	r3, #20
 80164dc:	dd24      	ble.n	8016528 <__ieee754_pow+0xd8>
 80164de:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80164e2:	fa22 f503 	lsr.w	r5, r2, r3
 80164e6:	fa05 f303 	lsl.w	r3, r5, r3
 80164ea:	4293      	cmp	r3, r2
 80164ec:	d139      	bne.n	8016562 <__ieee754_pow+0x112>
 80164ee:	f005 0501 	and.w	r5, r5, #1
 80164f2:	f1c5 0502 	rsb	r5, r5, #2
 80164f6:	2a00      	cmp	r2, #0
 80164f8:	d15a      	bne.n	80165b0 <__ieee754_pow+0x160>
 80164fa:	4b99      	ldr	r3, [pc, #612]	; (8016760 <__ieee754_pow+0x310>)
 80164fc:	4598      	cmp	r8, r3
 80164fe:	d122      	bne.n	8016546 <__ieee754_pow+0xf6>
 8016500:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016504:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016508:	ea53 030b 	orrs.w	r3, r3, fp
 801650c:	f000 82b8 	beq.w	8016a80 <__ieee754_pow+0x630>
 8016510:	4b96      	ldr	r3, [pc, #600]	; (801676c <__ieee754_pow+0x31c>)
 8016512:	429c      	cmp	r4, r3
 8016514:	dd27      	ble.n	8016566 <__ieee754_pow+0x116>
 8016516:	f1b9 0f00 	cmp.w	r9, #0
 801651a:	f280 82b4 	bge.w	8016a86 <__ieee754_pow+0x636>
 801651e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8016730 <__ieee754_pow+0x2e0>
 8016522:	ed8d 7b00 	vstr	d7, [sp]
 8016526:	e026      	b.n	8016576 <__ieee754_pow+0x126>
 8016528:	2a00      	cmp	r2, #0
 801652a:	d140      	bne.n	80165ae <__ieee754_pow+0x15e>
 801652c:	f1c3 0314 	rsb	r3, r3, #20
 8016530:	fa48 f503 	asr.w	r5, r8, r3
 8016534:	fa05 f303 	lsl.w	r3, r5, r3
 8016538:	4543      	cmp	r3, r8
 801653a:	f040 82aa 	bne.w	8016a92 <__ieee754_pow+0x642>
 801653e:	f005 0501 	and.w	r5, r5, #1
 8016542:	f1c5 0502 	rsb	r5, r5, #2
 8016546:	4b8a      	ldr	r3, [pc, #552]	; (8016770 <__ieee754_pow+0x320>)
 8016548:	4598      	cmp	r8, r3
 801654a:	d11b      	bne.n	8016584 <__ieee754_pow+0x134>
 801654c:	f1b9 0f00 	cmp.w	r9, #0
 8016550:	f280 829c 	bge.w	8016a8c <__ieee754_pow+0x63c>
 8016554:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016558:	ee87 7b08 	vdiv.f64	d7, d7, d8
 801655c:	e7e1      	b.n	8016522 <__ieee754_pow+0xd2>
 801655e:	2502      	movs	r5, #2
 8016560:	e7c9      	b.n	80164f6 <__ieee754_pow+0xa6>
 8016562:	2500      	movs	r5, #0
 8016564:	e7c7      	b.n	80164f6 <__ieee754_pow+0xa6>
 8016566:	f1b9 0f00 	cmp.w	r9, #0
 801656a:	dad8      	bge.n	801651e <__ieee754_pow+0xce>
 801656c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8016570:	4633      	mov	r3, r6
 8016572:	e9cd 3400 	strd	r3, r4, [sp]
 8016576:	ed9d 0b00 	vldr	d0, [sp]
 801657a:	b005      	add	sp, #20
 801657c:	ecbd 8b02 	vpop	{d8}
 8016580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016584:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016588:	d102      	bne.n	8016590 <__ieee754_pow+0x140>
 801658a:	ee28 7b08 	vmul.f64	d7, d8, d8
 801658e:	e7c8      	b.n	8016522 <__ieee754_pow+0xd2>
 8016590:	4b78      	ldr	r3, [pc, #480]	; (8016774 <__ieee754_pow+0x324>)
 8016592:	4599      	cmp	r9, r3
 8016594:	d10c      	bne.n	80165b0 <__ieee754_pow+0x160>
 8016596:	f1ba 0f00 	cmp.w	sl, #0
 801659a:	db09      	blt.n	80165b0 <__ieee754_pow+0x160>
 801659c:	eeb0 0b48 	vmov.f64	d0, d8
 80165a0:	b005      	add	sp, #20
 80165a2:	ecbd 8b02 	vpop	{d8}
 80165a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165aa:	f000 bad7 	b.w	8016b5c <__ieee754_sqrt>
 80165ae:	2500      	movs	r5, #0
 80165b0:	eeb0 0b48 	vmov.f64	d0, d8
 80165b4:	f000 fad8 	bl	8016b68 <fabs>
 80165b8:	ed8d 0b00 	vstr	d0, [sp]
 80165bc:	f1bb 0f00 	cmp.w	fp, #0
 80165c0:	d128      	bne.n	8016614 <__ieee754_pow+0x1c4>
 80165c2:	b124      	cbz	r4, 80165ce <__ieee754_pow+0x17e>
 80165c4:	4b6a      	ldr	r3, [pc, #424]	; (8016770 <__ieee754_pow+0x320>)
 80165c6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d122      	bne.n	8016614 <__ieee754_pow+0x1c4>
 80165ce:	f1b9 0f00 	cmp.w	r9, #0
 80165d2:	da07      	bge.n	80165e4 <__ieee754_pow+0x194>
 80165d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80165d8:	ed9d 6b00 	vldr	d6, [sp]
 80165dc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 80165e0:	ed8d 7b00 	vstr	d7, [sp]
 80165e4:	f1ba 0f00 	cmp.w	sl, #0
 80165e8:	dac5      	bge.n	8016576 <__ieee754_pow+0x126>
 80165ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80165ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80165f2:	ea54 0305 	orrs.w	r3, r4, r5
 80165f6:	d106      	bne.n	8016606 <__ieee754_pow+0x1b6>
 80165f8:	ed9d 7b00 	vldr	d7, [sp]
 80165fc:	ee37 7b47 	vsub.f64	d7, d7, d7
 8016600:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8016604:	e78d      	b.n	8016522 <__ieee754_pow+0xd2>
 8016606:	2d01      	cmp	r5, #1
 8016608:	d1b5      	bne.n	8016576 <__ieee754_pow+0x126>
 801660a:	ed9d 7b00 	vldr	d7, [sp]
 801660e:	eeb1 7b47 	vneg.f64	d7, d7
 8016612:	e786      	b.n	8016522 <__ieee754_pow+0xd2>
 8016614:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8016618:	f10a 3aff 	add.w	sl, sl, #4294967295
 801661c:	ea55 030a 	orrs.w	r3, r5, sl
 8016620:	d104      	bne.n	801662c <__ieee754_pow+0x1dc>
 8016622:	ee38 8b48 	vsub.f64	d8, d8, d8
 8016626:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801662a:	e77a      	b.n	8016522 <__ieee754_pow+0xd2>
 801662c:	4b52      	ldr	r3, [pc, #328]	; (8016778 <__ieee754_pow+0x328>)
 801662e:	4598      	cmp	r8, r3
 8016630:	f340 80a8 	ble.w	8016784 <__ieee754_pow+0x334>
 8016634:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016638:	4598      	cmp	r8, r3
 801663a:	dd0b      	ble.n	8016654 <__ieee754_pow+0x204>
 801663c:	4b4b      	ldr	r3, [pc, #300]	; (801676c <__ieee754_pow+0x31c>)
 801663e:	429c      	cmp	r4, r3
 8016640:	dc0e      	bgt.n	8016660 <__ieee754_pow+0x210>
 8016642:	f1b9 0f00 	cmp.w	r9, #0
 8016646:	f6bf af6a 	bge.w	801651e <__ieee754_pow+0xce>
 801664a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8016738 <__ieee754_pow+0x2e8>
 801664e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8016652:	e766      	b.n	8016522 <__ieee754_pow+0xd2>
 8016654:	4b49      	ldr	r3, [pc, #292]	; (801677c <__ieee754_pow+0x32c>)
 8016656:	429c      	cmp	r4, r3
 8016658:	ddf3      	ble.n	8016642 <__ieee754_pow+0x1f2>
 801665a:	4b45      	ldr	r3, [pc, #276]	; (8016770 <__ieee754_pow+0x320>)
 801665c:	429c      	cmp	r4, r3
 801665e:	dd03      	ble.n	8016668 <__ieee754_pow+0x218>
 8016660:	f1b9 0f00 	cmp.w	r9, #0
 8016664:	dcf1      	bgt.n	801664a <__ieee754_pow+0x1fa>
 8016666:	e75a      	b.n	801651e <__ieee754_pow+0xce>
 8016668:	ed9d 7b00 	vldr	d7, [sp]
 801666c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016670:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8016740 <__ieee754_pow+0x2f0>
 8016674:	ee37 6b46 	vsub.f64	d6, d7, d6
 8016678:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801667c:	eeb1 3b46 	vneg.f64	d3, d6
 8016680:	eea3 5b07 	vfma.f64	d5, d3, d7
 8016684:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8016688:	eea5 7b46 	vfms.f64	d7, d5, d6
 801668c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8016690:	ee27 5b05 	vmul.f64	d5, d7, d5
 8016694:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8016748 <__ieee754_pow+0x2f8>
 8016698:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801669c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8016750 <__ieee754_pow+0x300>
 80166a0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80166a4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8016758 <__ieee754_pow+0x308>
 80166a8:	eeb0 4b47 	vmov.f64	d4, d7
 80166ac:	eea6 4b05 	vfma.f64	d4, d6, d5
 80166b0:	ec53 2b14 	vmov	r2, r3, d4
 80166b4:	2200      	movs	r2, #0
 80166b6:	ec43 2b14 	vmov	d4, r2, r3
 80166ba:	eeb0 6b44 	vmov.f64	d6, d4
 80166be:	eea3 6b05 	vfma.f64	d6, d3, d5
 80166c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80166c6:	3d01      	subs	r5, #1
 80166c8:	ea55 030a 	orrs.w	r3, r5, sl
 80166cc:	f04f 0200 	mov.w	r2, #0
 80166d0:	463b      	mov	r3, r7
 80166d2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80166d6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80166da:	ec47 6b15 	vmov	d5, r6, r7
 80166de:	fe06 8b08 	vseleq.f64	d8, d6, d8
 80166e2:	ec47 6b13 	vmov	d3, r6, r7
 80166e6:	ec43 2b16 	vmov	d6, r2, r3
 80166ea:	ee27 7b03 	vmul.f64	d7, d7, d3
 80166ee:	ee35 5b46 	vsub.f64	d5, d5, d6
 80166f2:	4b23      	ldr	r3, [pc, #140]	; (8016780 <__ieee754_pow+0x330>)
 80166f4:	eea5 7b04 	vfma.f64	d7, d5, d4
 80166f8:	ee24 6b06 	vmul.f64	d6, d4, d6
 80166fc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8016700:	ee15 1a90 	vmov	r1, s11
 8016704:	4299      	cmp	r1, r3
 8016706:	ee15 2a10 	vmov	r2, s10
 801670a:	f340 819b 	ble.w	8016a44 <__ieee754_pow+0x5f4>
 801670e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016712:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016716:	4313      	orrs	r3, r2
 8016718:	f000 810a 	beq.w	8016930 <__ieee754_pow+0x4e0>
 801671c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8016738 <__ieee754_pow+0x2e8>
 8016720:	ee28 8b07 	vmul.f64	d8, d8, d7
 8016724:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016728:	e6fb      	b.n	8016522 <__ieee754_pow+0xd2>
 801672a:	bf00      	nop
 801672c:	f3af 8000 	nop.w
	...
 8016738:	8800759c 	.word	0x8800759c
 801673c:	7e37e43c 	.word	0x7e37e43c
 8016740:	55555555 	.word	0x55555555
 8016744:	3fd55555 	.word	0x3fd55555
 8016748:	652b82fe 	.word	0x652b82fe
 801674c:	3ff71547 	.word	0x3ff71547
 8016750:	f85ddf44 	.word	0xf85ddf44
 8016754:	3e54ae0b 	.word	0x3e54ae0b
 8016758:	60000000 	.word	0x60000000
 801675c:	3ff71547 	.word	0x3ff71547
 8016760:	7ff00000 	.word	0x7ff00000
 8016764:	08020ede 	.word	0x08020ede
 8016768:	433fffff 	.word	0x433fffff
 801676c:	3fefffff 	.word	0x3fefffff
 8016770:	3ff00000 	.word	0x3ff00000
 8016774:	3fe00000 	.word	0x3fe00000
 8016778:	41e00000 	.word	0x41e00000
 801677c:	3feffffe 	.word	0x3feffffe
 8016780:	408fffff 	.word	0x408fffff
 8016784:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016788:	f280 80ce 	bge.w	8016928 <__ieee754_pow+0x4d8>
 801678c:	ed9d 6b00 	vldr	d6, [sp]
 8016790:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8016a98 <__ieee754_pow+0x648>
 8016794:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016798:	ed8d 7b00 	vstr	d7, [sp]
 801679c:	9c01      	ldr	r4, [sp, #4]
 801679e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 80167a2:	1521      	asrs	r1, r4, #20
 80167a4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80167a8:	4419      	add	r1, r3
 80167aa:	4be3      	ldr	r3, [pc, #908]	; (8016b38 <__ieee754_pow+0x6e8>)
 80167ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80167b0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 80167b4:	429c      	cmp	r4, r3
 80167b6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 80167ba:	dd06      	ble.n	80167ca <__ieee754_pow+0x37a>
 80167bc:	4bdf      	ldr	r3, [pc, #892]	; (8016b3c <__ieee754_pow+0x6ec>)
 80167be:	429c      	cmp	r4, r3
 80167c0:	f340 80b4 	ble.w	801692c <__ieee754_pow+0x4dc>
 80167c4:	3101      	adds	r1, #1
 80167c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80167ca:	2400      	movs	r4, #0
 80167cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80167d4:	4603      	mov	r3, r0
 80167d6:	ec43 2b17 	vmov	d7, r2, r3
 80167da:	4bd9      	ldr	r3, [pc, #868]	; (8016b40 <__ieee754_pow+0x6f0>)
 80167dc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 80167e0:	4463      	add	r3, ip
 80167e2:	ed93 5b00 	vldr	d5, [r3]
 80167e6:	1040      	asrs	r0, r0, #1
 80167e8:	ee37 2b45 	vsub.f64	d2, d7, d5
 80167ec:	ee35 6b07 	vadd.f64	d6, d5, d7
 80167f0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 80167f4:	ee22 6b01 	vmul.f64	d6, d2, d1
 80167f8:	ed8d 6b00 	vstr	d6, [sp]
 80167fc:	e9dd 8900 	ldrd	r8, r9, [sp]
 8016800:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8016804:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8016808:	f04f 0800 	mov.w	r8, #0
 801680c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8016810:	2200      	movs	r2, #0
 8016812:	ec49 8b14 	vmov	d4, r8, r9
 8016816:	ec43 2b16 	vmov	d6, r2, r3
 801681a:	eeb1 3b44 	vneg.f64	d3, d4
 801681e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8016822:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016826:	ee37 7b46 	vsub.f64	d7, d7, d6
 801682a:	eea3 2b07 	vfma.f64	d2, d3, d7
 801682e:	ed9d 7b00 	vldr	d7, [sp]
 8016832:	ee22 2b01 	vmul.f64	d2, d2, d1
 8016836:	ee27 5b07 	vmul.f64	d5, d7, d7
 801683a:	ee37 6b04 	vadd.f64	d6, d7, d4
 801683e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8016aa0 <__ieee754_pow+0x650>
 8016842:	ee25 0b05 	vmul.f64	d0, d5, d5
 8016846:	ee26 6b02 	vmul.f64	d6, d6, d2
 801684a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8016aa8 <__ieee754_pow+0x658>
 801684e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8016852:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8016ab0 <__ieee754_pow+0x660>
 8016856:	eea7 1b05 	vfma.f64	d1, d7, d5
 801685a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8016ab8 <__ieee754_pow+0x668>
 801685e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8016862:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8016ac0 <__ieee754_pow+0x670>
 8016866:	eea7 1b05 	vfma.f64	d1, d7, d5
 801686a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8016ac8 <__ieee754_pow+0x678>
 801686e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8016872:	eea0 6b07 	vfma.f64	d6, d0, d7
 8016876:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801687a:	eeb0 5b47 	vmov.f64	d5, d7
 801687e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8016882:	ee35 5b06 	vadd.f64	d5, d5, d6
 8016886:	ed8d 5b02 	vstr	d5, [sp, #8]
 801688a:	f8cd 8008 	str.w	r8, [sp, #8]
 801688e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8016892:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016896:	eea3 7b04 	vfma.f64	d7, d3, d4
 801689a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801689e:	ed9d 6b00 	vldr	d6, [sp]
 80168a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168a6:	eea2 7b05 	vfma.f64	d7, d2, d5
 80168aa:	eeb0 6b47 	vmov.f64	d6, d7
 80168ae:	eea4 6b05 	vfma.f64	d6, d4, d5
 80168b2:	ed8d 6b00 	vstr	d6, [sp]
 80168b6:	f8cd 8000 	str.w	r8, [sp]
 80168ba:	ed9d 2b00 	vldr	d2, [sp]
 80168be:	eeb0 6b42 	vmov.f64	d6, d2
 80168c2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80168c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80168ca:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8016ad0 <__ieee754_pow+0x680>
 80168ce:	4b9d      	ldr	r3, [pc, #628]	; (8016b44 <__ieee754_pow+0x6f4>)
 80168d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168d4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8016ad8 <__ieee754_pow+0x688>
 80168d8:	4463      	add	r3, ip
 80168da:	eea2 7b06 	vfma.f64	d7, d2, d6
 80168de:	ed93 6b00 	vldr	d6, [r3]
 80168e2:	4b99      	ldr	r3, [pc, #612]	; (8016b48 <__ieee754_pow+0x6f8>)
 80168e4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80168e8:	449c      	add	ip, r3
 80168ea:	ed9c 1b00 	vldr	d1, [ip]
 80168ee:	eeb0 4b46 	vmov.f64	d4, d6
 80168f2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8016ae0 <__ieee754_pow+0x690>
 80168f6:	ee07 1a90 	vmov	s15, r1
 80168fa:	eea2 4b03 	vfma.f64	d4, d2, d3
 80168fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016902:	ee34 4b01 	vadd.f64	d4, d4, d1
 8016906:	ee34 5b07 	vadd.f64	d5, d4, d7
 801690a:	ed8d 5b00 	vstr	d5, [sp]
 801690e:	f8cd 8000 	str.w	r8, [sp]
 8016912:	ed9d 4b00 	vldr	d4, [sp]
 8016916:	ee34 7b47 	vsub.f64	d7, d4, d7
 801691a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801691e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8016922:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016926:	e6ce      	b.n	80166c6 <__ieee754_pow+0x276>
 8016928:	2300      	movs	r3, #0
 801692a:	e73a      	b.n	80167a2 <__ieee754_pow+0x352>
 801692c:	2401      	movs	r4, #1
 801692e:	e74d      	b.n	80167cc <__ieee754_pow+0x37c>
 8016930:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8016ae8 <__ieee754_pow+0x698>
 8016934:	ee35 5b46 	vsub.f64	d5, d5, d6
 8016938:	ee37 4b04 	vadd.f64	d4, d7, d4
 801693c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8016940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016944:	f73f aeea 	bgt.w	801671c <__ieee754_pow+0x2cc>
 8016948:	4a80      	ldr	r2, [pc, #512]	; (8016b4c <__ieee754_pow+0x6fc>)
 801694a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801694e:	4293      	cmp	r3, r2
 8016950:	f340 808e 	ble.w	8016a70 <__ieee754_pow+0x620>
 8016954:	151b      	asrs	r3, r3, #20
 8016956:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 801695a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801695e:	4103      	asrs	r3, r0
 8016960:	440b      	add	r3, r1
 8016962:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016966:	487a      	ldr	r0, [pc, #488]	; (8016b50 <__ieee754_pow+0x700>)
 8016968:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801696c:	4110      	asrs	r0, r2
 801696e:	ea23 0500 	bic.w	r5, r3, r0
 8016972:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8016976:	2400      	movs	r4, #0
 8016978:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 801697c:	f1c2 0214 	rsb	r2, r2, #20
 8016980:	ec45 4b15 	vmov	d5, r4, r5
 8016984:	4110      	asrs	r0, r2
 8016986:	2900      	cmp	r1, #0
 8016988:	bfb8      	it	lt
 801698a:	4240      	neglt	r0, r0
 801698c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016990:	ee36 5b07 	vadd.f64	d5, d6, d7
 8016994:	ec53 2b15 	vmov	r2, r3, d5
 8016998:	2200      	movs	r2, #0
 801699a:	ec43 2b15 	vmov	d5, r2, r3
 801699e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8016af0 <__ieee754_pow+0x6a0>
 80169a2:	ee35 6b46 	vsub.f64	d6, d5, d6
 80169a6:	ee37 6b46 	vsub.f64	d6, d7, d6
 80169aa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8016af8 <__ieee754_pow+0x6a8>
 80169ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80169b2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80169b6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8016b00 <__ieee754_pow+0x6b0>
 80169ba:	eeb0 4b47 	vmov.f64	d4, d7
 80169be:	eea5 4b06 	vfma.f64	d4, d5, d6
 80169c2:	eeb0 3b44 	vmov.f64	d3, d4
 80169c6:	eea5 3b46 	vfms.f64	d3, d5, d6
 80169ca:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8016b08 <__ieee754_pow+0x6b8>
 80169ce:	ee37 7b43 	vsub.f64	d7, d7, d3
 80169d2:	ee24 6b04 	vmul.f64	d6, d4, d4
 80169d6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8016b10 <__ieee754_pow+0x6c0>
 80169da:	eea4 7b07 	vfma.f64	d7, d4, d7
 80169de:	eea6 3b05 	vfma.f64	d3, d6, d5
 80169e2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8016b18 <__ieee754_pow+0x6c8>
 80169e6:	eea3 5b06 	vfma.f64	d5, d3, d6
 80169ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8016b20 <__ieee754_pow+0x6d0>
 80169ee:	eea5 3b06 	vfma.f64	d3, d5, d6
 80169f2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8016b28 <__ieee754_pow+0x6d8>
 80169f6:	eea3 5b06 	vfma.f64	d5, d3, d6
 80169fa:	eeb0 3b44 	vmov.f64	d3, d4
 80169fe:	eea5 3b46 	vfms.f64	d3, d5, d6
 8016a02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8016a06:	eeb0 6b43 	vmov.f64	d6, d3
 8016a0a:	ee24 3b03 	vmul.f64	d3, d4, d3
 8016a0e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8016a12:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8016a16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016a1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016a1e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8016a22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016a26:	ed8d 7b00 	vstr	d7, [sp]
 8016a2a:	9901      	ldr	r1, [sp, #4]
 8016a2c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8016a30:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8016a34:	da1e      	bge.n	8016a74 <__ieee754_pow+0x624>
 8016a36:	eeb0 0b47 	vmov.f64	d0, d7
 8016a3a:	f000 f93d 	bl	8016cb8 <scalbn>
 8016a3e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8016a42:	e56e      	b.n	8016522 <__ieee754_pow+0xd2>
 8016a44:	4b43      	ldr	r3, [pc, #268]	; (8016b54 <__ieee754_pow+0x704>)
 8016a46:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8016a4a:	4298      	cmp	r0, r3
 8016a4c:	f77f af7c 	ble.w	8016948 <__ieee754_pow+0x4f8>
 8016a50:	4b41      	ldr	r3, [pc, #260]	; (8016b58 <__ieee754_pow+0x708>)
 8016a52:	440b      	add	r3, r1
 8016a54:	4313      	orrs	r3, r2
 8016a56:	d002      	beq.n	8016a5e <__ieee754_pow+0x60e>
 8016a58:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8016b30 <__ieee754_pow+0x6e0>
 8016a5c:	e660      	b.n	8016720 <__ieee754_pow+0x2d0>
 8016a5e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8016a62:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a6a:	f6ff af6d 	blt.w	8016948 <__ieee754_pow+0x4f8>
 8016a6e:	e7f3      	b.n	8016a58 <__ieee754_pow+0x608>
 8016a70:	2000      	movs	r0, #0
 8016a72:	e78d      	b.n	8016990 <__ieee754_pow+0x540>
 8016a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a78:	460b      	mov	r3, r1
 8016a7a:	ec43 2b10 	vmov	d0, r2, r3
 8016a7e:	e7de      	b.n	8016a3e <__ieee754_pow+0x5ee>
 8016a80:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016a84:	e54d      	b.n	8016522 <__ieee754_pow+0xd2>
 8016a86:	e9cd 6700 	strd	r6, r7, [sp]
 8016a8a:	e574      	b.n	8016576 <__ieee754_pow+0x126>
 8016a8c:	ed8d 8b00 	vstr	d8, [sp]
 8016a90:	e571      	b.n	8016576 <__ieee754_pow+0x126>
 8016a92:	4615      	mov	r5, r2
 8016a94:	e557      	b.n	8016546 <__ieee754_pow+0xf6>
 8016a96:	bf00      	nop
 8016a98:	00000000 	.word	0x00000000
 8016a9c:	43400000 	.word	0x43400000
 8016aa0:	4a454eef 	.word	0x4a454eef
 8016aa4:	3fca7e28 	.word	0x3fca7e28
 8016aa8:	93c9db65 	.word	0x93c9db65
 8016aac:	3fcd864a 	.word	0x3fcd864a
 8016ab0:	a91d4101 	.word	0xa91d4101
 8016ab4:	3fd17460 	.word	0x3fd17460
 8016ab8:	518f264d 	.word	0x518f264d
 8016abc:	3fd55555 	.word	0x3fd55555
 8016ac0:	db6fabff 	.word	0xdb6fabff
 8016ac4:	3fdb6db6 	.word	0x3fdb6db6
 8016ac8:	33333303 	.word	0x33333303
 8016acc:	3fe33333 	.word	0x3fe33333
 8016ad0:	dc3a03fd 	.word	0xdc3a03fd
 8016ad4:	3feec709 	.word	0x3feec709
 8016ad8:	145b01f5 	.word	0x145b01f5
 8016adc:	be3e2fe0 	.word	0xbe3e2fe0
 8016ae0:	e0000000 	.word	0xe0000000
 8016ae4:	3feec709 	.word	0x3feec709
 8016ae8:	652b82fe 	.word	0x652b82fe
 8016aec:	3c971547 	.word	0x3c971547
 8016af0:	fefa39ef 	.word	0xfefa39ef
 8016af4:	3fe62e42 	.word	0x3fe62e42
 8016af8:	0ca86c39 	.word	0x0ca86c39
 8016afc:	be205c61 	.word	0xbe205c61
 8016b00:	00000000 	.word	0x00000000
 8016b04:	3fe62e43 	.word	0x3fe62e43
 8016b08:	72bea4d0 	.word	0x72bea4d0
 8016b0c:	3e663769 	.word	0x3e663769
 8016b10:	c5d26bf1 	.word	0xc5d26bf1
 8016b14:	bebbbd41 	.word	0xbebbbd41
 8016b18:	af25de2c 	.word	0xaf25de2c
 8016b1c:	3f11566a 	.word	0x3f11566a
 8016b20:	16bebd93 	.word	0x16bebd93
 8016b24:	bf66c16c 	.word	0xbf66c16c
 8016b28:	5555553e 	.word	0x5555553e
 8016b2c:	3fc55555 	.word	0x3fc55555
 8016b30:	c2f8f359 	.word	0xc2f8f359
 8016b34:	01a56e1f 	.word	0x01a56e1f
 8016b38:	0003988e 	.word	0x0003988e
 8016b3c:	000bb679 	.word	0x000bb679
 8016b40:	08020ee0 	.word	0x08020ee0
 8016b44:	08020f00 	.word	0x08020f00
 8016b48:	08020ef0 	.word	0x08020ef0
 8016b4c:	3fe00000 	.word	0x3fe00000
 8016b50:	000fffff 	.word	0x000fffff
 8016b54:	4090cbff 	.word	0x4090cbff
 8016b58:	3f6f3400 	.word	0x3f6f3400

08016b5c <__ieee754_sqrt>:
 8016b5c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8016b60:	4770      	bx	lr

08016b62 <__ieee754_sqrtf>:
 8016b62:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016b66:	4770      	bx	lr

08016b68 <fabs>:
 8016b68:	ec51 0b10 	vmov	r0, r1, d0
 8016b6c:	ee10 2a10 	vmov	r2, s0
 8016b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016b74:	ec43 2b10 	vmov	d0, r2, r3
 8016b78:	4770      	bx	lr

08016b7a <finite>:
 8016b7a:	ee10 3a90 	vmov	r3, s1
 8016b7e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016b82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016b86:	0fc0      	lsrs	r0, r0, #31
 8016b88:	4770      	bx	lr

08016b8a <matherr>:
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	4770      	bx	lr
	...

08016b90 <nan>:
 8016b90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016b98 <nan+0x8>
 8016b94:	4770      	bx	lr
 8016b96:	bf00      	nop
 8016b98:	00000000 	.word	0x00000000
 8016b9c:	7ff80000 	.word	0x7ff80000

08016ba0 <rint>:
 8016ba0:	b530      	push	{r4, r5, lr}
 8016ba2:	b085      	sub	sp, #20
 8016ba4:	ed8d 0b00 	vstr	d0, [sp]
 8016ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bac:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8016bb0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8016bb4:	2813      	cmp	r0, #19
 8016bb6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8016bba:	dc5a      	bgt.n	8016c72 <rint+0xd2>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	da2f      	bge.n	8016c20 <rint+0x80>
 8016bc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016bc4:	4311      	orrs	r1, r2
 8016bc6:	d027      	beq.n	8016c18 <rint+0x78>
 8016bc8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8016bcc:	4315      	orrs	r5, r2
 8016bce:	426a      	negs	r2, r5
 8016bd0:	432a      	orrs	r2, r5
 8016bd2:	0b12      	lsrs	r2, r2, #12
 8016bd4:	0c5b      	lsrs	r3, r3, #17
 8016bd6:	045b      	lsls	r3, r3, #17
 8016bd8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8016bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016be0:	ea42 0103 	orr.w	r1, r2, r3
 8016be4:	4b31      	ldr	r3, [pc, #196]	; (8016cac <rint+0x10c>)
 8016be6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016bea:	ed93 6b00 	vldr	d6, [r3]
 8016bee:	ec41 0b17 	vmov	d7, r0, r1
 8016bf2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016bf6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016bfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016bfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016c02:	ed8d 7b00 	vstr	d7, [sp]
 8016c06:	9b01      	ldr	r3, [sp, #4]
 8016c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c10:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8016c14:	e9cd 0100 	strd	r0, r1, [sp]
 8016c18:	ed9d 0b00 	vldr	d0, [sp]
 8016c1c:	b005      	add	sp, #20
 8016c1e:	bd30      	pop	{r4, r5, pc}
 8016c20:	4923      	ldr	r1, [pc, #140]	; (8016cb0 <rint+0x110>)
 8016c22:	4101      	asrs	r1, r0
 8016c24:	ea03 0501 	and.w	r5, r3, r1
 8016c28:	4315      	orrs	r5, r2
 8016c2a:	d0f5      	beq.n	8016c18 <rint+0x78>
 8016c2c:	0849      	lsrs	r1, r1, #1
 8016c2e:	ea03 0501 	and.w	r5, r3, r1
 8016c32:	432a      	orrs	r2, r5
 8016c34:	d00b      	beq.n	8016c4e <rint+0xae>
 8016c36:	ea23 0101 	bic.w	r1, r3, r1
 8016c3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016c3e:	2813      	cmp	r0, #19
 8016c40:	fa43 f300 	asr.w	r3, r3, r0
 8016c44:	bf0c      	ite	eq
 8016c46:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8016c4a:	2200      	movne	r2, #0
 8016c4c:	430b      	orrs	r3, r1
 8016c4e:	4619      	mov	r1, r3
 8016c50:	4b16      	ldr	r3, [pc, #88]	; (8016cac <rint+0x10c>)
 8016c52:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016c56:	ed94 6b00 	vldr	d6, [r4]
 8016c5a:	4610      	mov	r0, r2
 8016c5c:	ec41 0b17 	vmov	d7, r0, r1
 8016c60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016c68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016c70:	e008      	b.n	8016c84 <rint+0xe4>
 8016c72:	2833      	cmp	r0, #51	; 0x33
 8016c74:	dd09      	ble.n	8016c8a <rint+0xea>
 8016c76:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016c7a:	d1cd      	bne.n	8016c18 <rint+0x78>
 8016c7c:	ed9d 7b00 	vldr	d7, [sp]
 8016c80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016c84:	ed8d 7b00 	vstr	d7, [sp]
 8016c88:	e7c6      	b.n	8016c18 <rint+0x78>
 8016c8a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8016c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8016c92:	40c1      	lsrs	r1, r0
 8016c94:	420a      	tst	r2, r1
 8016c96:	d0bf      	beq.n	8016c18 <rint+0x78>
 8016c98:	0849      	lsrs	r1, r1, #1
 8016c9a:	420a      	tst	r2, r1
 8016c9c:	bf1f      	itttt	ne
 8016c9e:	ea22 0101 	bicne.w	r1, r2, r1
 8016ca2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8016ca6:	4102      	asrne	r2, r0
 8016ca8:	430a      	orrne	r2, r1
 8016caa:	e7d0      	b.n	8016c4e <rint+0xae>
 8016cac:	08020f10 	.word	0x08020f10
 8016cb0:	000fffff 	.word	0x000fffff
 8016cb4:	00000000 	.word	0x00000000

08016cb8 <scalbn>:
 8016cb8:	b500      	push	{lr}
 8016cba:	ed2d 8b02 	vpush	{d8}
 8016cbe:	b083      	sub	sp, #12
 8016cc0:	ed8d 0b00 	vstr	d0, [sp]
 8016cc4:	9b01      	ldr	r3, [sp, #4]
 8016cc6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016cca:	b9a2      	cbnz	r2, 8016cf6 <scalbn+0x3e>
 8016ccc:	9a00      	ldr	r2, [sp, #0]
 8016cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016cd2:	4313      	orrs	r3, r2
 8016cd4:	d03a      	beq.n	8016d4c <scalbn+0x94>
 8016cd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016d90 <scalbn+0xd8>
 8016cda:	4b35      	ldr	r3, [pc, #212]	; (8016db0 <scalbn+0xf8>)
 8016cdc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016ce0:	4298      	cmp	r0, r3
 8016ce2:	ed8d 7b00 	vstr	d7, [sp]
 8016ce6:	da11      	bge.n	8016d0c <scalbn+0x54>
 8016ce8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8016d98 <scalbn+0xe0>
 8016cec:	ed9d 6b00 	vldr	d6, [sp]
 8016cf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016cf4:	e007      	b.n	8016d06 <scalbn+0x4e>
 8016cf6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016cfa:	428a      	cmp	r2, r1
 8016cfc:	d10a      	bne.n	8016d14 <scalbn+0x5c>
 8016cfe:	ed9d 7b00 	vldr	d7, [sp]
 8016d02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016d06:	ed8d 7b00 	vstr	d7, [sp]
 8016d0a:	e01f      	b.n	8016d4c <scalbn+0x94>
 8016d0c:	9b01      	ldr	r3, [sp, #4]
 8016d0e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016d12:	3a36      	subs	r2, #54	; 0x36
 8016d14:	4402      	add	r2, r0
 8016d16:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016d1a:	428a      	cmp	r2, r1
 8016d1c:	dd0a      	ble.n	8016d34 <scalbn+0x7c>
 8016d1e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8016da0 <scalbn+0xe8>
 8016d22:	eeb0 0b48 	vmov.f64	d0, d8
 8016d26:	ed9d 1b00 	vldr	d1, [sp]
 8016d2a:	f000 f843 	bl	8016db4 <copysign>
 8016d2e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8016d32:	e7e8      	b.n	8016d06 <scalbn+0x4e>
 8016d34:	2a00      	cmp	r2, #0
 8016d36:	dd10      	ble.n	8016d5a <scalbn+0xa2>
 8016d38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016d44:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016d48:	e9cd 0100 	strd	r0, r1, [sp]
 8016d4c:	ed9d 0b00 	vldr	d0, [sp]
 8016d50:	b003      	add	sp, #12
 8016d52:	ecbd 8b02 	vpop	{d8}
 8016d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d5a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016d5e:	da06      	bge.n	8016d6e <scalbn+0xb6>
 8016d60:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016d64:	4298      	cmp	r0, r3
 8016d66:	dcda      	bgt.n	8016d1e <scalbn+0x66>
 8016d68:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8016d98 <scalbn+0xe0>
 8016d6c:	e7d9      	b.n	8016d22 <scalbn+0x6a>
 8016d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d76:	3236      	adds	r2, #54	; 0x36
 8016d78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016d7c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016d80:	ec41 0b17 	vmov	d7, r0, r1
 8016d84:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8016da8 <scalbn+0xf0>
 8016d88:	e7b2      	b.n	8016cf0 <scalbn+0x38>
 8016d8a:	bf00      	nop
 8016d8c:	f3af 8000 	nop.w
 8016d90:	00000000 	.word	0x00000000
 8016d94:	43500000 	.word	0x43500000
 8016d98:	c2f8f359 	.word	0xc2f8f359
 8016d9c:	01a56e1f 	.word	0x01a56e1f
 8016da0:	8800759c 	.word	0x8800759c
 8016da4:	7e37e43c 	.word	0x7e37e43c
 8016da8:	00000000 	.word	0x00000000
 8016dac:	3c900000 	.word	0x3c900000
 8016db0:	ffff3cb0 	.word	0xffff3cb0

08016db4 <copysign>:
 8016db4:	ec51 0b10 	vmov	r0, r1, d0
 8016db8:	ee11 0a90 	vmov	r0, s3
 8016dbc:	ee10 2a10 	vmov	r2, s0
 8016dc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016dc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016dc8:	ea41 0300 	orr.w	r3, r1, r0
 8016dcc:	ec43 2b10 	vmov	d0, r2, r3
 8016dd0:	4770      	bx	lr
	...

08016dd4 <_init>:
 8016dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dd6:	bf00      	nop
 8016dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dda:	bc08      	pop	{r3}
 8016ddc:	469e      	mov	lr, r3
 8016dde:	4770      	bx	lr

08016de0 <_fini>:
 8016de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016de2:	bf00      	nop
 8016de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016de6:	bc08      	pop	{r3}
 8016de8:	469e      	mov	lr, r3
 8016dea:	4770      	bx	lr
